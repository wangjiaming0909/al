syntax = "proto3";

option objc_class_prefix = "RAFT";

package raft_pb;

message HostPort {
  string host = 1;
  uint32 port = 2;
};

// config
enum PeerMemberTypeConfig {
  UNKNOWN_MEMBER_TYPE = 0;
  VOTER = 1;
  OBSERVER = 3;
};

message RaftPeerConfig {
  optional string permanent_uuid = 1;
  optional PeerMemberTypeConfig member_type = 2;
  repeated HostPort last_known_private_addr = 3;
};

message RaftConfig {
  optional int64 opid_index = 1;
  repeated RaftPeerConfig peers = 2;
};

// persisted in local storage for every RaftInstance
message RaftMetadata {
  RaftConfig commited_config = 1;
  int64 current_term = 2;
  optional string voted_for = 3;
};

// Request Vote message
message VoteRequest {
  string candidate_id = 1;
  uint64 candidate_term_id = 2;
  string dest_id = 3;
  uint64 last_log_index = 4;
  uint64 last_log_term = 5;
}

// Reply to the vote requst
message VoteReply {
  uint64 responder_term_id = 1;
  bool vote_granted = 2;
  string responder_uuid = 3;
}

message ConsensusRequest {
  string id = 1;
  bytes caller_uuid = 2;
  int64 caller_term = 3;
}

message ConsensusResponse {
  optional bytes responder_uuid = 1;
  optional int64 responder_term = 2;
}

service RaftRpc {
  rpc request_vote(VoteRequest) returns (VoteReply) {}
  rpc update_consensus(ConsensusRequest) returns (ConsensusResponse) {}
}
