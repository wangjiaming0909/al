!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/wjm/codes/al/cpp/recipes/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/bfc4094/
A	src/design_patterns/basic/thread_safe_singleton.h	/^    A() : _(1000){$/;"	f	line:57	language:C++	struct:design_patterns::A	access:public	signature:()
A	src/design_patterns/basic/thread_safe_singleton.h	/^struct A$/;"	s	line:55	language:C++	namespace:design_patterns
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define ARCHITECTURE_ID /;"	d	line:401	language:C++	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define ARCHITECTURE_ID /;"	d	line:403	language:C++	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define ARCHITECTURE_ID /;"	d	line:405	language:C++	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID /;"	d	line:391	language:C++	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID /;"	d	line:394	language:C++	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID /;"	d	line:397	language:C++	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID /;"	d	line:409	language:C++	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID /;"	d	line:412	language:C++	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID /;"	d	line:415	language:C++	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID /;"	d	line:420	language:C++	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID /;"	d	line:423	language:C++	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID /;"	d	line:426	language:C++	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID /;"	d	line:430	language:C++	file:
ARRAY_SIZE	src/http_parser/http_parser.cpp	/^# define ARRAY_SIZE(/;"	d	line:41	language:C++	file:	signature:(a)
ASSERT_CHAIN_FULL	src/buffer/buffer.h	/^#define ASSERT_CHAIN_FULL(/;"	d	line:14	language:C++	signature:(chain)
AbstractRegistry	src/easylogging/easylogging++.h	/^  AbstractRegistry(AbstractRegistry&& sr) {$/;"	f	line:1263	language:C++	class:el::base::utils::AbstractRegistry	access:public	signature:(AbstractRegistry && sr)
AbstractRegistry	src/easylogging/easylogging++.h	/^  AbstractRegistry(void) {}$/;"	f	line:1260	language:C++	class:el::base::utils::AbstractRegistry	access:public	signature:(void)
AbstractRegistry	src/easylogging/easylogging++.h	/^class AbstractRegistry : public base::threading::ThreadSafe {$/;"	c	line:1254	language:C++	namespace:el::base::utils	inherits:base::threading::ThreadSafe
AddLowConst	src/utils/type_traits.h	/^struct AddLowConst { };$/;"	s	line:39	language:C++	namespace:recipes
AddLowConst	src/utils/type_traits.h	/^struct AddLowConst<T*>$/;"	s	line:42	language:C++	namespace:recipes
AddLowConst	src/utils/type_traits.h	/^struct AddLowConst<const T*>$/;"	s	line:48	language:C++	namespace:recipes
AddLowConst_t	src/utils/type_traits.h	/^using AddLowConst_t = typename AddLowConst<T>::type;$/;"	t	line:54	language:C++	namespace:recipes	typeref:typename:AddLowConst<T>::type
Address	src/design_patterns/basic/maybemonad.h	/^    explicit Address(std::string* name) : name(name){}$/;"	f	line:11	language:C++	struct:design_patterns::Address	access:public	signature:(std::string * name)
Address	src/design_patterns/basic/maybemonad.h	/^struct Address{$/;"	s	line:10	language:C++	namespace:design_patterns
AllowVerboseIfModuleNotSpecified	src/easylogging/easylogging++.h	/^  AllowVerboseIfModuleNotSpecified = 2,$/;"	e	line:698	language:C++	enum:el::LoggingFlag	access:public
And	src/easylogging/easylogging++.h	/^static inline base::type::EnumType And(Enum e, base::type::EnumType flag) {$/;"	f	line:867	language:C++	namespace:el::base::utils::bitwise	typeref:typename:base::type::EnumType	signature:(Enum e,base::type::EnumType flag)
AppName	src/easylogging/easylogging++.h	/^  AppName = 1 << 11,$/;"	e	line:826	language:C++	enum:el::base::FormatFlags	access:public
Argument	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    enum Argument {attack, defence} argument;$/;"	g	line:19	language:C++	class:design_patterns::Query	access:public
AsciiCaseInsensitiveEqual	src/string_piece/string_piece.h	/^struct AsciiCaseInsensitiveEqual$/;"	s	line:23	language:C++	namespace:string_piece
AsciiCaseSensitiveEqual	src/string_piece/string_piece.h	/^struct AsciiCaseSensitiveEqual$/;"	s	line:15	language:C++	namespace:string_piece
AsyncDispatchWorker	src/easylogging/easylogging++.cc	/^AsyncDispatchWorker::AsyncDispatchWorker() {$/;"	f	line:2293	language:C++	class:el::base::AsyncDispatchWorker	signature:()
AsyncDispatchWorker	src/easylogging/easylogging++.h	/^  AsyncDispatchWorker();$/;"	p	line:2738	language:C++	class:el::base::AsyncDispatchWorker	access:public	signature:()
AsyncDispatchWorker	src/easylogging/easylogging++.h	/^class AsyncDispatchWorker : public base::IWorker, public base::threading::ThreadSafe {$/;"	c	line:2736	language:C++	namespace:el::base	inherits:base::IWorker,base::threading::ThreadSafe
AsyncLogDispatchCallback	src/easylogging/easylogging++.h	/^class AsyncLogDispatchCallback : public LogDispatchCallback {$/;"	c	line:2732	language:C++	namespace:el::base	inherits:LogDispatchCallback
AsyncLogItem	src/easylogging/easylogging++.h	/^  explicit AsyncLogItem(const LogMessage& logMessage, const LogDispatchData& data, const base::t/;"	f	line:2493	language:C++	class:el::base::AsyncLogItem	access:public	signature:(const LogMessage & logMessage,const LogDispatchData & data,const base::type::string_t & logLine)
AsyncLogItem	src/easylogging/easylogging++.h	/^class AsyncLogItem {$/;"	c	line:2491	language:C++	namespace:el::base
AsyncLogQueue	src/easylogging/easylogging++.h	/^class AsyncLogQueue : public base::threading::ThreadSafe {$/;"	c	line:2510	language:C++	namespace:el::base	inherits:base::threading::ThreadSafe
AutoSpacing	src/easylogging/easylogging++.h	/^  AutoSpacing = 8192,$/;"	e	line:722	language:C++	enum:el::LoggingFlag	access:public
BIT_AT	src/http_parser/http_parser.cpp	/^# define BIT_AT(/;"	d	line:45	language:C++	file:	signature:(a,i)
BUFFER_EOL_CRLF	src/buffer/buffer.h	/^    BUFFER_EOL_CRLF, \/\/'\\n' or "\\r\\n"$/;"	e	line:23	language:C++	enum:buffer_eol_style	access:public
BUFFER_EOL_CRLF_STRICT	src/buffer/buffer.h	/^    BUFFER_EOL_CRLF_STRICT, \/\/"\\r\\n"$/;"	e	line:22	language:C++	enum:buffer_eol_style	access:public
BUFFER_EOL_LF	src/buffer/buffer.h	/^    BUFFER_EOL_LF, \/\/'\\n'$/;"	e	line:21	language:C++	enum:buffer_eol_style	access:public
BUFFER_EOL_NUL	src/buffer/buffer.h	/^    BUFFER_EOL_NUL \/\/ ASCII NUL$/;"	e	line:24	language:C++	enum:buffer_eol_style	access:public
Blue	src/design_patterns/basic/SOLID_Open_Close.h	/^enum class Color{Green, Red, Blue};$/;"	e	line:9	language:C++	enum:design_patterns::Color	access:public
CALLBACK_DATA	src/http_parser/http_parser.cpp	/^#define CALLBACK_DATA(/;"	d	line:130	language:C++	file:	signature:(FOR)
CALLBACK_DATA_	src/http_parser/http_parser.cpp	/^#define CALLBACK_DATA_(/;"	d	line:107	language:C++	file:	signature:(FOR,LEN,ER)
CALLBACK_DATA_NOADVANCE	src/http_parser/http_parser.cpp	/^#define CALLBACK_DATA_NOADVANCE(/;"	d	line:134	language:C++	file:	signature:(FOR)
CALLBACK_NOTIFY	src/http_parser/http_parser.cpp	/^#define CALLBACK_NOTIFY(/;"	d	line:101	language:C++	file:	signature:(FOR)
CALLBACK_NOTIFY_	src/http_parser/http_parser.cpp	/^#define CALLBACK_NOTIFY_(/;"	d	line:82	language:C++	file:	signature:(FOR,ER)
CALLBACK_NOTIFY_NOADVANCE	src/http_parser/http_parser.cpp	/^#define CALLBACK_NOTIFY_NOADVANCE(/;"	d	line:104	language:C++	file:	signature:(FOR)
CCHECK	src/easylogging/easylogging++.h	/^#define CCHECK(/;"	d	line:4444	language:C++	signature:(condition,...)
CCHECK_BOUNDS	src/easylogging/easylogging++.h	/^#define CCHECK_BOUNDS(/;"	d	line:4454	language:C++	signature:(val,min,max,...)
CCHECK_EQ	src/easylogging/easylogging++.h	/^#define CCHECK_EQ(/;"	d	line:4448	language:C++	signature:(a,b,...)
CCHECK_GE	src/easylogging/easylogging++.h	/^#define CCHECK_GE(/;"	d	line:4453	language:C++	signature:(a,b,...)
CCHECK_GT	src/easylogging/easylogging++.h	/^#define CCHECK_GT(/;"	d	line:4451	language:C++	signature:(a,b,...)
CCHECK_LE	src/easylogging/easylogging++.h	/^#define CCHECK_LE(/;"	d	line:4452	language:C++	signature:(a,b,...)
CCHECK_LT	src/easylogging/easylogging++.h	/^#define CCHECK_LT(/;"	d	line:4450	language:C++	signature:(a,b,...)
CCHECK_NE	src/easylogging/easylogging++.h	/^#define CCHECK_NE(/;"	d	line:4449	language:C++	signature:(a,b,...)
CCHECK_NOTNULL	src/easylogging/easylogging++.h	/^#define CCHECK_NOTNULL(/;"	d	line:4462	language:C++	signature:(ptr,...)
CCHECK_STRCASEEQ	src/easylogging/easylogging++.h	/^#define CCHECK_STRCASEEQ(/;"	d	line:4467	language:C++	signature:(str1,str2,...)
CCHECK_STRCASENE	src/easylogging/easylogging++.h	/^#define CCHECK_STRCASENE(/;"	d	line:4469	language:C++	signature:(str1,str2,...)
CCHECK_STREQ	src/easylogging/easylogging++.h	/^#define CCHECK_STREQ(/;"	d	line:4463	language:C++	signature:(str1,str2,...)
CCHECK_STRNE	src/easylogging/easylogging++.h	/^#define CCHECK_STRNE(/;"	d	line:4465	language:C++	signature:(str1,str2,...)
CDEBUG	src/easylogging/easylogging++.h	/^#  define CDEBUG(/;"	d	line:4000	language:C++	signature:(writer,dispatchAction,...)
CDEBUG	src/easylogging/easylogging++.h	/^#  define CDEBUG(/;"	d	line:4002	language:C++	signature:(writer,dispatchAction,...)
CDEBUG_AFTER_N	src/easylogging/easylogging++.h	/^#  define CDEBUG_AFTER_N(/;"	d	line:4125	language:C++	signature:(writer,n,dispatchAction,...)
CDEBUG_AFTER_N	src/easylogging/easylogging++.h	/^#  define CDEBUG_AFTER_N(/;"	d	line:4128	language:C++	signature:(writer,n,dispatchAction,...)
CDEBUG_EVERY_N	src/easylogging/easylogging++.h	/^#  define CDEBUG_EVERY_N(/;"	d	line:4082	language:C++	signature:(writer,occasion,dispatchAction,...)
CDEBUG_EVERY_N	src/easylogging/easylogging++.h	/^#  define CDEBUG_EVERY_N(/;"	d	line:4085	language:C++	signature:(writer,occasion,dispatchAction,...)
CDEBUG_IF	src/easylogging/easylogging++.h	/^#  define CDEBUG_IF(/;"	d	line:4039	language:C++	signature:(writer,condition_,dispatchAction,...)
CDEBUG_IF	src/easylogging/easylogging++.h	/^#  define CDEBUG_IF(/;"	d	line:4042	language:C++	signature:(writer,condition_,dispatchAction,...)
CDEBUG_N_TIMES	src/easylogging/easylogging++.h	/^#  define CDEBUG_N_TIMES(/;"	d	line:4168	language:C++	signature:(writer,n,dispatchAction,...)
CDEBUG_N_TIMES	src/easylogging/easylogging++.h	/^#  define CDEBUG_N_TIMES(/;"	d	line:4171	language:C++	signature:(writer,n,dispatchAction,...)
CERROR	src/easylogging/easylogging++.h	/^#  define CERROR(/;"	d	line:4005	language:C++	signature:(writer,dispatchAction,...)
CERROR	src/easylogging/easylogging++.h	/^#  define CERROR(/;"	d	line:4007	language:C++	signature:(writer,dispatchAction,...)
CERROR_AFTER_N	src/easylogging/easylogging++.h	/^#  define CERROR_AFTER_N(/;"	d	line:4131	language:C++	signature:(writer,n,dispatchAction,...)
CERROR_AFTER_N	src/easylogging/easylogging++.h	/^#  define CERROR_AFTER_N(/;"	d	line:4134	language:C++	signature:(writer,n,dispatchAction,...)
CERROR_EVERY_N	src/easylogging/easylogging++.h	/^#  define CERROR_EVERY_N(/;"	d	line:4088	language:C++	signature:(writer,occasion,dispatchAction,...)
CERROR_EVERY_N	src/easylogging/easylogging++.h	/^#  define CERROR_EVERY_N(/;"	d	line:4091	language:C++	signature:(writer,occasion,dispatchAction,...)
CERROR_IF	src/easylogging/easylogging++.h	/^#  define CERROR_IF(/;"	d	line:4045	language:C++	signature:(writer,condition_,dispatchAction,...)
CERROR_IF	src/easylogging/easylogging++.h	/^#  define CERROR_IF(/;"	d	line:4048	language:C++	signature:(writer,condition_,dispatchAction,...)
CERROR_N_TIMES	src/easylogging/easylogging++.h	/^#  define CERROR_N_TIMES(/;"	d	line:4174	language:C++	signature:(writer,n,dispatchAction,...)
CERROR_N_TIMES	src/easylogging/easylogging++.h	/^#  define CERROR_N_TIMES(/;"	d	line:4177	language:C++	signature:(writer,n,dispatchAction,...)
CFATAL	src/easylogging/easylogging++.h	/^#  define CFATAL(/;"	d	line:4010	language:C++	signature:(writer,dispatchAction,...)
CFATAL	src/easylogging/easylogging++.h	/^#  define CFATAL(/;"	d	line:4012	language:C++	signature:(writer,dispatchAction,...)
CFATAL_AFTER_N	src/easylogging/easylogging++.h	/^#  define CFATAL_AFTER_N(/;"	d	line:4137	language:C++	signature:(writer,n,dispatchAction,...)
CFATAL_AFTER_N	src/easylogging/easylogging++.h	/^#  define CFATAL_AFTER_N(/;"	d	line:4140	language:C++	signature:(writer,n,dispatchAction,...)
CFATAL_EVERY_N	src/easylogging/easylogging++.h	/^#  define CFATAL_EVERY_N(/;"	d	line:4094	language:C++	signature:(writer,occasion,dispatchAction,...)
CFATAL_EVERY_N	src/easylogging/easylogging++.h	/^#  define CFATAL_EVERY_N(/;"	d	line:4097	language:C++	signature:(writer,occasion,dispatchAction,...)
CFATAL_IF	src/easylogging/easylogging++.h	/^#  define CFATAL_IF(/;"	d	line:4051	language:C++	signature:(writer,condition_,dispatchAction,...)
CFATAL_IF	src/easylogging/easylogging++.h	/^#  define CFATAL_IF(/;"	d	line:4054	language:C++	signature:(writer,condition_,dispatchAction,...)
CFATAL_N_TIMES	src/easylogging/easylogging++.h	/^#  define CFATAL_N_TIMES(/;"	d	line:4180	language:C++	signature:(writer,n,dispatchAction,...)
CFATAL_N_TIMES	src/easylogging/easylogging++.h	/^#  define CFATAL_N_TIMES(/;"	d	line:4183	language:C++	signature:(writer,n,dispatchAction,...)
CHECK	src/easylogging/easylogging++.h	/^#define CHECK(/;"	d	line:4446	language:C++	signature:(condition)
CHECK_BOUNDS	src/easylogging/easylogging++.h	/^#define CHECK_BOUNDS(/;"	d	line:4461	language:C++	signature:(val,min,max)
CHECK_EQ	src/easylogging/easylogging++.h	/^#define CHECK_EQ(/;"	d	line:4455	language:C++	signature:(a,b)
CHECK_GE	src/easylogging/easylogging++.h	/^#define CHECK_GE(/;"	d	line:4460	language:C++	signature:(a,b)
CHECK_GT	src/easylogging/easylogging++.h	/^#define CHECK_GT(/;"	d	line:4458	language:C++	signature:(a,b)
CHECK_LE	src/easylogging/easylogging++.h	/^#define CHECK_LE(/;"	d	line:4459	language:C++	signature:(a,b)
CHECK_LT	src/easylogging/easylogging++.h	/^#define CHECK_LT(/;"	d	line:4457	language:C++	signature:(a,b)
CHECK_NE	src/easylogging/easylogging++.h	/^#define CHECK_NE(/;"	d	line:4456	language:C++	signature:(a,b)
CHECK_NOTNULL	src/easylogging/easylogging++.h	/^#define CHECK_NOTNULL(/;"	d	line:4471	language:C++	signature:(ptr)
CHECK_SIZE	src/http/HttpHeaders.h	/^#define CHECK_SIZE(/;"	d	line:112	language:C++	signature:(size)
CHECK_STRCASEEQ	src/easylogging/easylogging++.h	/^#define CHECK_STRCASEEQ(/;"	d	line:4474	language:C++	signature:(str1,str2)
CHECK_STRCASENE	src/easylogging/easylogging++.h	/^#define CHECK_STRCASENE(/;"	d	line:4475	language:C++	signature:(str1,str2)
CHECK_STREQ	src/easylogging/easylogging++.h	/^#define CHECK_STREQ(/;"	d	line:4472	language:C++	signature:(str1,str2)
CHECK_STRNE	src/easylogging/easylogging++.h	/^#define CHECK_STRNE(/;"	d	line:4473	language:C++	signature:(str1,str2)
CHUNKED	src/http_parser/http_parser.cpp	/^#define CHUNKED /;"	d	line:171	language:C++	file:
CINFO	src/easylogging/easylogging++.h	/^#  define CINFO(/;"	d	line:3990	language:C++	signature:(writer,dispatchAction,...)
CINFO	src/easylogging/easylogging++.h	/^#  define CINFO(/;"	d	line:3992	language:C++	signature:(writer,dispatchAction,...)
CINFO_AFTER_N	src/easylogging/easylogging++.h	/^#  define CINFO_AFTER_N(/;"	d	line:4113	language:C++	signature:(writer,n,dispatchAction,...)
CINFO_AFTER_N	src/easylogging/easylogging++.h	/^#  define CINFO_AFTER_N(/;"	d	line:4116	language:C++	signature:(writer,n,dispatchAction,...)
CINFO_EVERY_N	src/easylogging/easylogging++.h	/^#  define CINFO_EVERY_N(/;"	d	line:4070	language:C++	signature:(writer,occasion,dispatchAction,...)
CINFO_EVERY_N	src/easylogging/easylogging++.h	/^#  define CINFO_EVERY_N(/;"	d	line:4073	language:C++	signature:(writer,occasion,dispatchAction,...)
CINFO_IF	src/easylogging/easylogging++.h	/^#  define CINFO_IF(/;"	d	line:4027	language:C++	signature:(writer,condition_,dispatchAction,...)
CINFO_IF	src/easylogging/easylogging++.h	/^#  define CINFO_IF(/;"	d	line:4030	language:C++	signature:(writer,condition_,dispatchAction,...)
CINFO_N_TIMES	src/easylogging/easylogging++.h	/^#  define CINFO_N_TIMES(/;"	d	line:4156	language:C++	signature:(writer,n,dispatchAction,...)
CINFO_N_TIMES	src/easylogging/easylogging++.h	/^#  define CINFO_N_TIMES(/;"	d	line:4159	language:C++	signature:(writer,n,dispatchAction,...)
CLOG	src/easylogging/easylogging++.h	/^#define CLOG(/;"	d	line:4214	language:C++	signature:(LEVEL,...)
CLOG_AFTER_N	src/easylogging/easylogging++.h	/^#define CLOG_AFTER_N(/;"	d	line:4227	language:C++	signature:(n,LEVEL,...)
CLOG_EVERY_N	src/easylogging/easylogging++.h	/^#define CLOG_EVERY_N(/;"	d	line:4223	language:C++	signature:(n,LEVEL,...)
CLOG_IF	src/easylogging/easylogging++.h	/^#define CLOG_IF(/;"	d	line:4218	language:C++	signature:(condition,LEVEL,...)
CLOG_N_TIMES	src/easylogging/easylogging++.h	/^#define CLOG_N_TIMES(/;"	d	line:4231	language:C++	signature:(n,LEVEL,...)
CLOSE	src/http_parser/http_parser.cpp	/^#define CLOSE /;"	d	line:173	language:C++	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	line:101	language:C++	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	line:108	language:C++	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	line:115	language:C++	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	line:122	language:C++	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	line:129	language:C++	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	line:13	language:C++	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	line:137	language:C++	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	line:142	language:C++	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	line:149	language:C++	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	line:152	language:C++	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	line:155	language:C++	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	line:170	language:C++	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	line:184	language:C++	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	line:19	language:C++	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	line:194	language:C++	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	line:212	language:C++	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	line:221	language:C++	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	line:224	language:C++	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	line:239	language:C++	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	line:257	language:C++	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	line:260	language:C++	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	line:263	language:C++	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	line:42	language:C++	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	line:50	language:C++	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	line:56	language:C++	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	line:62	language:C++	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	line:71	language:C++	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	line:80	language:C++	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	line:94	language:C++	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MAJOR /;"	d	line:227	language:C++	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MAJOR /;"	d	line:232	language:C++	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MAJOR /;"	d	line:242	language:C++	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MAJOR /;"	d	line:247	language:C++	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MAJOR /;"	d	line:83	language:C++	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MAJOR /;"	d	line:88	language:C++	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	line:103	language:C++	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	line:110	language:C++	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	line:117	language:C++	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	line:124	language:C++	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	line:130	language:C++	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	line:138	language:C++	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	line:144	language:C++	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	line:15	language:C++	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	line:159	language:C++	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	line:174	language:C++	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	line:185	language:C++	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	line:196	language:C++	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	line:215	language:C++	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	line:24	language:C++	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	line:43	language:C++	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	line:51	language:C++	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	line:58	language:C++	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	line:64	language:C++	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	line:73	language:C++	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	line:96	language:C++	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MINOR /;"	d	line:228	language:C++	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MINOR /;"	d	line:233	language:C++	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MINOR /;"	d	line:187	language:C++	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MINOR /;"	d	line:243	language:C++	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MINOR /;"	d	line:248	language:C++	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MINOR /;"	d	line:84	language:C++	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MINOR /;"	d	line:89	language:C++	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	line:104	language:C++	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	line:111	language:C++	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	line:118	language:C++	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	line:125	language:C++	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	line:131	language:C++	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	line:139	language:C++	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	line:145	language:C++	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	line:16	language:C++	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	line:160	language:C++	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	line:175	language:C++	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	line:197	language:C++	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	line:216	language:C++	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	line:25	language:C++	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	line:44	language:C++	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	line:52	language:C++	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	line:59	language:C++	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	line:65	language:C++	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	line:74	language:C++	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	line:97	language:C++	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_PATCH /;"	d	line:229	language:C++	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_PATCH /;"	d	line:234	language:C++	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_PATCH /;"	d	line:201	language:C++	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_PATCH /;"	d	line:204	language:C++	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_PATCH /;"	d	line:133	language:C++	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_PATCH /;"	d	line:190	language:C++	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_PATCH /;"	d	line:244	language:C++	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_PATCH /;"	d	line:249	language:C++	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_PATCH /;"	d	line:27	language:C++	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_PATCH /;"	d	line:29	language:C++	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_PATCH /;"	d	line:46	language:C++	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_PATCH /;"	d	line:67	language:C++	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_PATCH /;"	d	line:76	language:C++	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_PATCH /;"	d	line:85	language:C++	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_PATCH /;"	d	line:90	language:C++	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_PATCH /;"	d	line:105	language:C++	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_PATCH /;"	d	line:112	language:C++	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_PATCH /;"	d	line:119	language:C++	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_PATCH /;"	d	line:126	language:C++	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_PATCH /;"	d	line:146	language:C++	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_PATCH /;"	d	line:161	language:C++	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_PATCH /;"	d	line:176	language:C++	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_PATCH /;"	d	line:217	language:C++	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_PATCH /;"	d	line:53	language:C++	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_PATCH /;"	d	line:98	language:C++	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_TWEAK /;"	d	line:208	language:C++	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_TWEAK /;"	d	line:33	language:C++	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_TWEAK /;"	d	line:167	language:C++	file:
CONNECTION	src/http_parser/http_parser.cpp	/^#define CONNECTION /;"	d	line:167	language:C++	file:
CONTENT_LENGTH	src/http_parser/http_parser.cpp	/^#define CONTENT_LENGTH /;"	d	line:168	language:C++	file:
COUNT_HEADER_SIZE	src/http_parser/http_parser.cpp	/^#define COUNT_HEADER_SIZE(/;"	d	line:156	language:C++	file:	signature:(V)
CPCHECK	src/easylogging/easylogging++.h	/^#define CPCHECK(/;"	d	line:4445	language:C++	signature:(condition,...)
CPLOG	src/easylogging/easylogging++.h	/^#define CPLOG(/;"	d	line:4279	language:C++	signature:(LEVEL,...)
CPLOG_IF	src/easylogging/easylogging++.h	/^#define CPLOG_IF(/;"	d	line:4281	language:C++	signature:(condition,LEVEL,...)
CR	src/http_parser/http_parser.cpp	/^#define CR /;"	d	line:416	language:C++	file:
CSYSLOG	src/easylogging/easylogging++.h	/^#  define CSYSLOG(/;"	d	line:4313	language:C++	signature:(LEVEL,...)
CSYSLOG	src/easylogging/easylogging++.h	/^#  define CSYSLOG(/;"	d	line:4340	language:C++	signature:(LEVEL,...)
CSYSLOG_AFTER_N	src/easylogging/easylogging++.h	/^#  define CSYSLOG_AFTER_N(/;"	d	line:4318	language:C++	signature:(n,LEVEL,...)
CSYSLOG_AFTER_N	src/easylogging/easylogging++.h	/^#  define CSYSLOG_AFTER_N(/;"	d	line:4343	language:C++	signature:(n,LEVEL,...)
CSYSLOG_EVERY_N	src/easylogging/easylogging++.h	/^#  define CSYSLOG_EVERY_N(/;"	d	line:4317	language:C++	signature:(n,LEVEL,...)
CSYSLOG_EVERY_N	src/easylogging/easylogging++.h	/^#  define CSYSLOG_EVERY_N(/;"	d	line:4342	language:C++	signature:(n,LEVEL,...)
CSYSLOG_IF	src/easylogging/easylogging++.h	/^#  define CSYSLOG_IF(/;"	d	line:4315	language:C++	signature:(condition,LEVEL,...)
CSYSLOG_IF	src/easylogging/easylogging++.h	/^#  define CSYSLOG_IF(/;"	d	line:4341	language:C++	signature:(condition,LEVEL,...)
CSYSLOG_N_TIMES	src/easylogging/easylogging++.h	/^#  define CSYSLOG_N_TIMES(/;"	d	line:4319	language:C++	signature:(n,LEVEL,...)
CSYSLOG_N_TIMES	src/easylogging/easylogging++.h	/^#  define CSYSLOG_N_TIMES(/;"	d	line:4344	language:C++	signature:(n,LEVEL,...)
CTRACE	src/easylogging/easylogging++.h	/^#  define CTRACE(/;"	d	line:4015	language:C++	signature:(writer,dispatchAction,...)
CTRACE	src/easylogging/easylogging++.h	/^#  define CTRACE(/;"	d	line:4017	language:C++	signature:(writer,dispatchAction,...)
CTRACE_AFTER_N	src/easylogging/easylogging++.h	/^#  define CTRACE_AFTER_N(/;"	d	line:4143	language:C++	signature:(writer,n,dispatchAction,...)
CTRACE_AFTER_N	src/easylogging/easylogging++.h	/^#  define CTRACE_AFTER_N(/;"	d	line:4146	language:C++	signature:(writer,n,dispatchAction,...)
CTRACE_EVERY_N	src/easylogging/easylogging++.h	/^#  define CTRACE_EVERY_N(/;"	d	line:4100	language:C++	signature:(writer,occasion,dispatchAction,...)
CTRACE_EVERY_N	src/easylogging/easylogging++.h	/^#  define CTRACE_EVERY_N(/;"	d	line:4103	language:C++	signature:(writer,occasion,dispatchAction,...)
CTRACE_IF	src/easylogging/easylogging++.h	/^#  define CTRACE_IF(/;"	d	line:4057	language:C++	signature:(writer,condition_,dispatchAction,...)
CTRACE_IF	src/easylogging/easylogging++.h	/^#  define CTRACE_IF(/;"	d	line:4060	language:C++	signature:(writer,condition_,dispatchAction,...)
CTRACE_N_TIMES	src/easylogging/easylogging++.h	/^#  define CTRACE_N_TIMES(/;"	d	line:4186	language:C++	signature:(writer,n,dispatchAction,...)
CTRACE_N_TIMES	src/easylogging/easylogging++.h	/^#  define CTRACE_N_TIMES(/;"	d	line:4189	language:C++	signature:(writer,n,dispatchAction,...)
CURRENT_STATE	src/http_parser/http_parser.cpp	/^#define CURRENT_STATE(/;"	d	line:60	language:C++	file:	signature:()
CVERBOSE	src/easylogging/easylogging++.h	/^#  define CVERBOSE(/;"	d	line:4020	language:C++	signature:(writer,vlevel,dispatchAction,...)
CVERBOSE	src/easylogging/easylogging++.h	/^#  define CVERBOSE(/;"	d	line:4023	language:C++	signature:(writer,vlevel,dispatchAction,...)
CVERBOSE_AFTER_N	src/easylogging/easylogging++.h	/^#  define CVERBOSE_AFTER_N(/;"	d	line:4149	language:C++	signature:(writer,n,vlevel,dispatchAction,...)
CVERBOSE_AFTER_N	src/easylogging/easylogging++.h	/^#  define CVERBOSE_AFTER_N(/;"	d	line:4152	language:C++	signature:(writer,n,vlevel,dispatchAction,...)
CVERBOSE_EVERY_N	src/easylogging/easylogging++.h	/^#  define CVERBOSE_EVERY_N(/;"	d	line:4106	language:C++	signature:(writer,occasion,vlevel,dispatchAction,...)
CVERBOSE_EVERY_N	src/easylogging/easylogging++.h	/^#  define CVERBOSE_EVERY_N(/;"	d	line:4109	language:C++	signature:(writer,occasion,vlevel,dispatchAction,...)
CVERBOSE_IF	src/easylogging/easylogging++.h	/^#  define CVERBOSE_IF(/;"	d	line:4063	language:C++	signature:(writer,condition_,vlevel,dispatchAction,...)
CVERBOSE_IF	src/easylogging/easylogging++.h	/^#  define CVERBOSE_IF(/;"	d	line:4066	language:C++	signature:(writer,condition_,vlevel,dispatchAction,...)
CVERBOSE_N_TIMES	src/easylogging/easylogging++.h	/^#  define CVERBOSE_N_TIMES(/;"	d	line:4192	language:C++	signature:(writer,n,vlevel,dispatchAction,...)
CVERBOSE_N_TIMES	src/easylogging/easylogging++.h	/^#  define CVERBOSE_N_TIMES(/;"	d	line:4195	language:C++	signature:(writer,n,vlevel,dispatchAction,...)
CVLOG	src/easylogging/easylogging++.h	/^#define CVLOG(/;"	d	line:4216	language:C++	signature:(vlevel,...)
CVLOG_AFTER_N	src/easylogging/easylogging++.h	/^#define CVLOG_AFTER_N(/;"	d	line:4229	language:C++	signature:(n,vlevel,...)
CVLOG_EVERY_N	src/easylogging/easylogging++.h	/^#define CVLOG_EVERY_N(/;"	d	line:4225	language:C++	signature:(n,vlevel,...)
CVLOG_IF	src/easylogging/easylogging++.h	/^#define CVLOG_IF(/;"	d	line:4220	language:C++	signature:(condition,vlevel,...)
CVLOG_N_TIMES	src/easylogging/easylogging++.h	/^#define CVLOG_N_TIMES(/;"	d	line:4233	language:C++	signature:(n,vlevel,...)
CWARNING	src/easylogging/easylogging++.h	/^#  define CWARNING(/;"	d	line:3995	language:C++	signature:(writer,dispatchAction,...)
CWARNING	src/easylogging/easylogging++.h	/^#  define CWARNING(/;"	d	line:3997	language:C++	signature:(writer,dispatchAction,...)
CWARNING_AFTER_N	src/easylogging/easylogging++.h	/^#  define CWARNING_AFTER_N(/;"	d	line:4119	language:C++	signature:(writer,n,dispatchAction,...)
CWARNING_AFTER_N	src/easylogging/easylogging++.h	/^#  define CWARNING_AFTER_N(/;"	d	line:4122	language:C++	signature:(writer,n,dispatchAction,...)
CWARNING_EVERY_N	src/easylogging/easylogging++.h	/^#  define CWARNING_EVERY_N(/;"	d	line:4076	language:C++	signature:(writer,occasion,dispatchAction,...)
CWARNING_EVERY_N	src/easylogging/easylogging++.h	/^#  define CWARNING_EVERY_N(/;"	d	line:4079	language:C++	signature:(writer,occasion,dispatchAction,...)
CWARNING_IF	src/easylogging/easylogging++.h	/^#  define CWARNING_IF(/;"	d	line:4033	language:C++	signature:(writer,condition_,dispatchAction,...)
CWARNING_IF	src/easylogging/easylogging++.h	/^#  define CWARNING_IF(/;"	d	line:4036	language:C++	signature:(writer,condition_,dispatchAction,...)
CWARNING_N_TIMES	src/easylogging/easylogging++.h	/^#  define CWARNING_N_TIMES(/;"	d	line:4162	language:C++	signature:(writer,n,dispatchAction,...)
CWARNING_N_TIMES	src/easylogging/easylogging++.h	/^#  define CWARNING_N_TIMES(/;"	d	line:4165	language:C++	signature:(writer,n,dispatchAction,...)
Callback	src/easylogging/easylogging++.h	/^  Callback(void) : m_enabled(true) {}$/;"	f	line:2144	language:C++	class:el::Callback	access:public	signature:(void)
Callback	src/easylogging/easylogging++.h	/^class Callback : protected base::threading::ThreadSafe {$/;"	c	line:2142	language:C++	namespace:el	inherits:base::threading::ThreadSafe
CaseInSensitiveEqual	src/string_piece/string_piece.h	/^struct CaseInSensitiveEqual$/;"	s	line:141	language:C++	namespace:string_piece
CaseInSensitiveEqual	src/string_piece/string_piece.h	/^struct CaseInSensitiveEqual<T, T>$/;"	s	line:156	language:C++	namespace:string_piece
CaseInSensitiveEqual	src/string_piece/string_piece.h	/^struct CaseInSensitiveEqual<T, char*>$/;"	s	line:197	language:C++	namespace:string_piece
CaseInSensitiveEqual	src/string_piece/string_piece.h	/^struct CaseInSensitiveEqual<T, const char*>$/;"	s	line:167	language:C++	namespace:string_piece
CaseInSensitiveEqual	src/string_piece/string_piece.h	/^struct CaseInSensitiveEqual<char*, T>$/;"	s	line:212	language:C++	namespace:string_piece
CaseInSensitiveEqual	src/string_piece/string_piece.h	/^struct CaseInSensitiveEqual<const char*, T>$/;"	s	line:182	language:C++	namespace:string_piece
Checkpoint	src/easylogging/easylogging++.h	/^    Checkpoint = 1, Complete = 2$/;"	e	line:3410	language:C++	enum:el::PerformanceTrackingData::DataType	access:public
ClassWithNestedClass	src/tests/tests.h	/^    ClassWithNestedClass(const string &name) : name_(name) {}$/;"	f	line:349	language:C++	struct:ClassWithNestedClass	access:public	signature:(const string & name)
ClassWithNestedClass	src/tests/tests.h	/^struct ClassWithNestedClass$/;"	s	line:346	language:C++
ClassWithNestedClass::ClassWithNestedClass	src/tests/tests.h	/^    ClassWithNestedClass(const string &name) : name_(name) {}$/;"	f	line:349	language:C++	struct:ClassWithNestedClass	access:public	signature:(const string & name)
ClassWithNestedClass::NestedClass	src/tests/tests.h	/^    struct NestedClass$/;"	s	line:350	language:C++	struct:ClassWithNestedClass	access:public
ClassWithNestedClass::NestedClass::print	src/tests/tests.h	/^        void print(const ClassWithNestedClass &c) \/\/nested class can access the private fields/;"	f	line:352	language:C++	struct:ClassWithNestedClass::NestedClass	typeref:typename:void	access:public	signature:(const ClassWithNestedClass & c)
ClassWithNestedClass::name_	src/tests/tests.h	/^    string name_;$/;"	m	line:360	language:C++	struct:ClassWithNestedClass	typeref:typename:string	access:private
Color	src/design_patterns/basic/SOLID_Open_Close.h	/^enum class Color{Green, Red, Blue};$/;"	g	line:9	language:C++	namespace:design_patterns
ColorSpec	src/design_patterns/basic/SOLID_Open_Close.h	/^    ColorSpec(Color color) : color_(color){}$/;"	f	line:81	language:C++	class:design_patterns::ColorSpec	access:public	signature:(Color color)
ColorSpec	src/design_patterns/basic/SOLID_Open_Close.h	/^class ColorSpec : public ISpecification<Product>$/;"	c	line:78	language:C++	namespace:design_patterns	inherits:ISpecification<Product>
ColoredTerminalOutput	src/easylogging/easylogging++.h	/^  ColoredTerminalOutput = 64,$/;"	e	line:708	language:C++	enum:el::LoggingFlag	access:public
CommandLineArgs	src/easylogging/easylogging++.h	/^  CommandLineArgs(int argc, char** argv) {$/;"	f	line:1218	language:C++	class:el::base::utils::CommandLineArgs	access:public	signature:(int argc,char ** argv)
CommandLineArgs	src/easylogging/easylogging++.h	/^  CommandLineArgs(int argc, const char** argv) {$/;"	f	line:1215	language:C++	class:el::base::utils::CommandLineArgs	access:public	signature:(int argc,const char ** argv)
CommandLineArgs	src/easylogging/easylogging++.h	/^  CommandLineArgs(void) {$/;"	f	line:1212	language:C++	class:el::base::utils::CommandLineArgs	access:public	signature:(void)
CommandLineArgs	src/easylogging/easylogging++.h	/^class CommandLineArgs {$/;"	c	line:1210	language:C++	namespace:el::base::utils
CompareType	src/al/MinHeap.h	/^    using CompareType = std::greater<T>;$/;"	t	line:15	language:C++	class:al::MinHeap	typeref:typename:std::greater<T>	access:public
Complete	src/easylogging/easylogging++.h	/^    Checkpoint = 1, Complete = 2$/;"	e	line:3410	language:C++	enum:el::PerformanceTrackingData::DataType	access:public
Configuration	src/easylogging/easylogging++.cc	/^Configuration::Configuration(Level level, ConfigurationType configurationType, const std::string/;"	f	line:255	language:C++	class:el::Configuration	signature:(Level level,ConfigurationType configurationType,const std::string & value)
Configuration	src/easylogging/easylogging++.cc	/^Configuration::Configuration(const Configuration& c) :$/;"	f	line:239	language:C++	class:el::Configuration	signature:(const Configuration & c)
Configuration	src/easylogging/easylogging++.h	/^  Configuration(Level level, ConfigurationType configurationType, const std::string& value);$/;"	p	line:1681	language:C++	class:el::Configuration	access:public	signature:(Level level,ConfigurationType configurationType,const std::string & value)
Configuration	src/easylogging/easylogging++.h	/^  Configuration(const Configuration& c);$/;"	p	line:1674	language:C++	class:el::Configuration	access:public	signature:(const Configuration & c)
Configuration	src/easylogging/easylogging++.h	/^class Configuration : public Loggable {$/;"	c	line:1672	language:C++	namespace:el	inherits:Loggable
ConfigurationStringToTypeItem	src/easylogging/easylogging++.cc	/^struct ConfigurationStringToTypeItem {$/;"	s	line:200	language:C++	namespace:el	file:
ConfigurationType	src/easylogging/easylogging++.h	/^enum class ConfigurationType : base::type::EnumType {$/;"	g	line:632	language:C++	namespace:el	typeref:typename:base::type::EnumType
ConfigurationTypeHelper	src/easylogging/easylogging++.h	/^class ConfigurationTypeHelper : base::StaticClass {$/;"	c	line:664	language:C++	namespace:el	inherits:base::StaticClass
Configurations	src/easylogging/easylogging++.cc	/^Configurations::Configurations(const std::string& configurationFile, bool useDefaultsForRemainin/;"	f	line:284	language:C++	class:el::Configurations	signature:(const std::string & configurationFile,bool useDefaultsForRemaining,Configurations * base)
Configurations	src/easylogging/easylogging++.cc	/^Configurations::Configurations(void) :$/;"	f	line:279	language:C++	class:el::Configurations	signature:(void)
Configurations	src/easylogging/easylogging++.h	/^  Configurations(const std::string& configurationFile, bool useDefaultsForRemaining = true,$/;"	p	line:1739	language:C++	class:el::Configurations	access:public	signature:(const std::string & configurationFile,bool useDefaultsForRemaining=true,Configurations * base=nullptr)
Configurations	src/easylogging/easylogging++.h	/^  Configurations(void);$/;"	p	line:1731	language:C++	class:el::Configurations	access:public	signature:(void)
Configurations	src/easylogging/easylogging++.h	/^class Configurations : public base::utils::RegistryWithPred<Configuration, Configuration::Predic/;"	c	line:1728	language:C++	namespace:el	inherits:base::utils::RegistryWithPred<Configuration,Configuration::Predicate>
Contact	src/design_patterns/prototype/prototype.h	/^    Contact(const Contact &obj)$/;"	f	line:44	language:C++	struct:design_patterns::Contact	access:public	signature:(const Contact & obj)
Contact	src/design_patterns/prototype/prototype.h	/^    Contact(const string& name, WorkAddress* workAddress)$/;"	f	line:39	language:C++	struct:design_patterns::Contact	access:public	signature:(const string & name,WorkAddress * workAddress)
Contact	src/design_patterns/prototype/prototype.h	/^struct Contact$/;"	s	line:37	language:C++	namespace:design_patterns
ContainerType	src/al/MinHeap.h	/^    using ContainerType = std::priority_queue<T, std::vector<T>, CompareType>;$/;"	t	line:16	language:C++	class:al::MinHeap	typeref:typename:std::priority_queue<T,std::vector<T>,CompareType>	access:public
CrashHandler	src/easylogging/easylogging++.cc	/^CrashHandler::CrashHandler(bool useDefault) {$/;"	f	line:2893	language:C++	class:el::base::debug::CrashHandler	signature:(bool useDefault)
CrashHandler	src/easylogging/easylogging++.h	/^  explicit CrashHandler(bool useDefault);$/;"	p	line:3610	language:C++	class:el::base::debug::CrashHandler	access:public	signature:(bool useDefault)
CrashHandler	src/easylogging/easylogging++.h	/^  explicit CrashHandler(const Handler& cHandler) {$/;"	f	line:3611	language:C++	class:el::base::debug::CrashHandler	access:public	signature:(const Handler & cHandler)
CrashHandler	src/easylogging/easylogging++.h	/^class CrashHandler : base::NoCopy {$/;"	c	line:3606	language:C++	namespace:el::base::debug	inherits:base::NoCopy
CreateLoggerAutomatically	src/easylogging/easylogging++.h	/^  CreateLoggerAutomatically = 4096,$/;"	e	line:720	language:C++	enum:el::LoggingFlag	access:public
Creature	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^    Creature(const string& name, int attack, int defence)$/;"	f	line:12	language:C++	class:design_patterns::Creature	access:public	signature:(const string & name,int attack,int defence)
Creature	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^class Creature$/;"	c	line:9	language:C++	namespace:design_patterns
CreatureModifier	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^    CreatureModifier(Creature& creature) : targetCreature(creature), next_(0){}$/;"	f	line:33	language:C++	class:design_patterns::CreatureModifier	access:public	signature:(Creature & creature)
CreatureModifier	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^class CreatureModifier$/;"	c	line:30	language:C++	namespace:design_patterns
CustomFormatSpecifier	src/easylogging/easylogging++.h	/^  CustomFormatSpecifier(const char* formatSpecifier, const FormatSpecifierValueResolver& resolve/;"	f	line:1647	language:C++	class:el::CustomFormatSpecifier	access:public	signature:(const char * formatSpecifier,const FormatSpecifierValueResolver & resolver)
CustomFormatSpecifier	src/easylogging/easylogging++.h	/^class CustomFormatSpecifier {$/;"	c	line:1645	language:C++	namespace:el
DCCHECK	src/easylogging/easylogging++.h	/^#define DCCHECK(/;"	d	line:4500	language:C++	signature:(condition,...)
DCCHECK_BOUNDS	src/easylogging/easylogging++.h	/^#define DCCHECK_BOUNDS(/;"	d	line:4507	language:C++	signature:(val,min,max,...)
DCCHECK_EQ	src/easylogging/easylogging++.h	/^#define DCCHECK_EQ(/;"	d	line:4501	language:C++	signature:(a,b,...)
DCCHECK_GE	src/easylogging/easylogging++.h	/^#define DCCHECK_GE(/;"	d	line:4506	language:C++	signature:(a,b,...)
DCCHECK_GT	src/easylogging/easylogging++.h	/^#define DCCHECK_GT(/;"	d	line:4504	language:C++	signature:(a,b,...)
DCCHECK_LE	src/easylogging/easylogging++.h	/^#define DCCHECK_LE(/;"	d	line:4505	language:C++	signature:(a,b,...)
DCCHECK_LT	src/easylogging/easylogging++.h	/^#define DCCHECK_LT(/;"	d	line:4503	language:C++	signature:(a,b,...)
DCCHECK_NE	src/easylogging/easylogging++.h	/^#define DCCHECK_NE(/;"	d	line:4502	language:C++	signature:(a,b,...)
DCCHECK_NOTNULL	src/easylogging/easylogging++.h	/^#define DCCHECK_NOTNULL(/;"	d	line:4508	language:C++	signature:(ptr,...)
DCCHECK_STRCASEEQ	src/easylogging/easylogging++.h	/^#define DCCHECK_STRCASEEQ(/;"	d	line:4511	language:C++	signature:(str1,str2,...)
DCCHECK_STRCASENE	src/easylogging/easylogging++.h	/^#define DCCHECK_STRCASENE(/;"	d	line:4512	language:C++	signature:(str1,str2,...)
DCCHECK_STREQ	src/easylogging/easylogging++.h	/^#define DCCHECK_STREQ(/;"	d	line:4509	language:C++	signature:(str1,str2,...)
DCCHECK_STRNE	src/easylogging/easylogging++.h	/^#define DCCHECK_STRNE(/;"	d	line:4510	language:C++	signature:(str1,str2,...)
DCHECK	src/easylogging/easylogging++.h	/^#define DCHECK(/;"	d	line:4514	language:C++	signature:(condition)
DCHECK_BOUNDS	src/easylogging/easylogging++.h	/^#define DCHECK_BOUNDS(/;"	d	line:4521	language:C++	signature:(val,min,max)
DCHECK_EQ	src/easylogging/easylogging++.h	/^#define DCHECK_EQ(/;"	d	line:4515	language:C++	signature:(a,b)
DCHECK_GE	src/easylogging/easylogging++.h	/^#define DCHECK_GE(/;"	d	line:4520	language:C++	signature:(a,b)
DCHECK_GT	src/easylogging/easylogging++.h	/^#define DCHECK_GT(/;"	d	line:4518	language:C++	signature:(a,b)
DCHECK_LE	src/easylogging/easylogging++.h	/^#define DCHECK_LE(/;"	d	line:4519	language:C++	signature:(a,b)
DCHECK_LT	src/easylogging/easylogging++.h	/^#define DCHECK_LT(/;"	d	line:4517	language:C++	signature:(a,b)
DCHECK_NE	src/easylogging/easylogging++.h	/^#define DCHECK_NE(/;"	d	line:4516	language:C++	signature:(a,b)
DCHECK_NOTNULL	src/easylogging/easylogging++.h	/^#define DCHECK_NOTNULL(/;"	d	line:4522	language:C++	signature:(ptr)
DCHECK_STRCASEEQ	src/easylogging/easylogging++.h	/^#define DCHECK_STRCASEEQ(/;"	d	line:4525	language:C++	signature:(str1,str2)
DCHECK_STRCASENE	src/easylogging/easylogging++.h	/^#define DCHECK_STRCASENE(/;"	d	line:4526	language:C++	signature:(str1,str2)
DCHECK_STREQ	src/easylogging/easylogging++.h	/^#define DCHECK_STREQ(/;"	d	line:4523	language:C++	signature:(str1,str2)
DCHECK_STRNE	src/easylogging/easylogging++.h	/^#define DCHECK_STRNE(/;"	d	line:4524	language:C++	signature:(str1,str2)
DCLOG	src/easylogging/easylogging++.h	/^#define DCLOG(/;"	d	line:4376	language:C++	signature:(LEVEL,...)
DCLOG_AFTER_N	src/easylogging/easylogging++.h	/^#define DCLOG_AFTER_N(/;"	d	line:4385	language:C++	signature:(n,LEVEL,...)
DCLOG_EVERY_N	src/easylogging/easylogging++.h	/^#define DCLOG_EVERY_N(/;"	d	line:4383	language:C++	signature:(n,LEVEL,...)
DCLOG_IF	src/easylogging/easylogging++.h	/^#define DCLOG_IF(/;"	d	line:4380	language:C++	signature:(condition,LEVEL,...)
DCLOG_N_TIMES	src/easylogging/easylogging++.h	/^#define DCLOG_N_TIMES(/;"	d	line:4387	language:C++	signature:(n,LEVEL,...)
DCLOG_VERBOSE	src/easylogging/easylogging++.h	/^#define DCLOG_VERBOSE(/;"	d	line:4377	language:C++	signature:(vlevel,...)
DCPCHECK	src/easylogging/easylogging++.h	/^#define DCPCHECK(/;"	d	line:4513	language:C++	signature:(condition,...)
DCPLOG	src/easylogging/easylogging++.h	/^#define DCPLOG(/;"	d	line:4283	language:C++	signature:(LEVEL,...)
DCPLOG_IF	src/easylogging/easylogging++.h	/^#define DCPLOG_IF(/;"	d	line:4285	language:C++	signature:(condition,LEVEL,...)
DCSYSLOG	src/easylogging/easylogging++.h	/^#  define DCSYSLOG(/;"	d	line:4325	language:C++	signature:(LEVEL,...)
DCSYSLOG	src/easylogging/easylogging++.h	/^#  define DCSYSLOG(/;"	d	line:4350	language:C++	signature:(LEVEL,...)
DCSYSLOG_AFTER_N	src/easylogging/easylogging++.h	/^#  define DCSYSLOG_AFTER_N(/;"	d	line:4330	language:C++	signature:(n,LEVEL,...)
DCSYSLOG_AFTER_N	src/easylogging/easylogging++.h	/^#  define DCSYSLOG_AFTER_N(/;"	d	line:4353	language:C++	signature:(n,LEVEL,...)
DCSYSLOG_EVERY_N	src/easylogging/easylogging++.h	/^#  define DCSYSLOG_EVERY_N(/;"	d	line:4328	language:C++	signature:(n,LEVEL,...)
DCSYSLOG_EVERY_N	src/easylogging/easylogging++.h	/^#  define DCSYSLOG_EVERY_N(/;"	d	line:4352	language:C++	signature:(n,LEVEL,...)
DCSYSLOG_IF	src/easylogging/easylogging++.h	/^#  define DCSYSLOG_IF(/;"	d	line:4326	language:C++	signature:(condition,LEVEL,...)
DCSYSLOG_IF	src/easylogging/easylogging++.h	/^#  define DCSYSLOG_IF(/;"	d	line:4351	language:C++	signature:(condition,LEVEL,...)
DCSYSLOG_N_TIMES	src/easylogging/easylogging++.h	/^#  define DCSYSLOG_N_TIMES(/;"	d	line:4332	language:C++	signature:(n,LEVEL,...)
DCSYSLOG_N_TIMES	src/easylogging/easylogging++.h	/^#  define DCSYSLOG_N_TIMES(/;"	d	line:4354	language:C++	signature:(n,LEVEL,...)
DCVLOG	src/easylogging/easylogging++.h	/^#define DCVLOG(/;"	d	line:4378	language:C++	signature:(vlevel,...)
DCVLOG_AFTER_N	src/easylogging/easylogging++.h	/^#define DCVLOG_AFTER_N(/;"	d	line:4386	language:C++	signature:(n,vlevel,...)
DCVLOG_EVERY_N	src/easylogging/easylogging++.h	/^#define DCVLOG_EVERY_N(/;"	d	line:4384	language:C++	signature:(n,vlevel,...)
DCVLOG_IF	src/easylogging/easylogging++.h	/^#define DCVLOG_IF(/;"	d	line:4381	language:C++	signature:(condition,vlevel,...)
DCVLOG_N_TIMES	src/easylogging/easylogging++.h	/^#define DCVLOG_N_TIMES(/;"	d	line:4388	language:C++	signature:(n,vlevel,...)
DEC	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define DEC(/;"	d	line:434	language:C++	file:	signature:(n)
DEFAULT_CAPACITY	src/bytebuf/bytebuf.h	/^    static const int DEFAULT_CAPACITY = 128;$/;"	m	line:18	language:C++	class:bytebuf	typeref:typename:const int	access:public
DEFAULT_CHAIN_SIZE	src/buffer/buffer.h	/^    static const uint32_t DEFAULT_CHAIN_SIZE = 1024;$/;"	m	line:143	language:C++	class:buffer_chain	typeref:typename:const uint32_t	access:public
DLOG	src/easylogging/easylogging++.h	/^#define DLOG(/;"	d	line:4405	language:C++	signature:(LEVEL)
DLOG_AFTER_N	src/easylogging/easylogging++.h	/^#define DLOG_AFTER_N(/;"	d	line:4413	language:C++	signature:(n,LEVEL)
DLOG_EVERY_N	src/easylogging/easylogging++.h	/^#define DLOG_EVERY_N(/;"	d	line:4411	language:C++	signature:(n,LEVEL)
DLOG_IF	src/easylogging/easylogging++.h	/^#define DLOG_IF(/;"	d	line:4408	language:C++	signature:(condition,LEVEL)
DLOG_N_TIMES	src/easylogging/easylogging++.h	/^#define DLOG_N_TIMES(/;"	d	line:4415	language:C++	signature:(n,LEVEL)
DPCHECK	src/easylogging/easylogging++.h	/^#define DPCHECK(/;"	d	line:4527	language:C++	signature:(condition)
DPLOG	src/easylogging/easylogging++.h	/^#define DPLOG(/;"	d	line:4289	language:C++	signature:(LEVEL)
DPLOG_IF	src/easylogging/easylogging++.h	/^#define DPLOG_IF(/;"	d	line:4290	language:C++	signature:(condition,LEVEL)
DSYSLOG	src/easylogging/easylogging++.h	/^#  define DSYSLOG(/;"	d	line:4334	language:C++	signature:(LEVEL)
DSYSLOG	src/easylogging/easylogging++.h	/^#  define DSYSLOG(/;"	d	line:4355	language:C++	signature:(LEVEL)
DSYSLOG_AFTER_N	src/easylogging/easylogging++.h	/^#  define DSYSLOG_AFTER_N(/;"	d	line:4337	language:C++	signature:(n,LEVEL)
DSYSLOG_AFTER_N	src/easylogging/easylogging++.h	/^#  define DSYSLOG_AFTER_N(/;"	d	line:4358	language:C++	signature:(n,LEVEL)
DSYSLOG_EVERY_N	src/easylogging/easylogging++.h	/^#  define DSYSLOG_EVERY_N(/;"	d	line:4336	language:C++	signature:(n,LEVEL)
DSYSLOG_EVERY_N	src/easylogging/easylogging++.h	/^#  define DSYSLOG_EVERY_N(/;"	d	line:4357	language:C++	signature:(n,LEVEL)
DSYSLOG_IF	src/easylogging/easylogging++.h	/^#  define DSYSLOG_IF(/;"	d	line:4335	language:C++	signature:(condition,LEVEL)
DSYSLOG_IF	src/easylogging/easylogging++.h	/^#  define DSYSLOG_IF(/;"	d	line:4356	language:C++	signature:(condition,LEVEL)
DSYSLOG_N_TIMES	src/easylogging/easylogging++.h	/^#  define DSYSLOG_N_TIMES(/;"	d	line:4338	language:C++	signature:(n,LEVEL)
DSYSLOG_N_TIMES	src/easylogging/easylogging++.h	/^#  define DSYSLOG_N_TIMES(/;"	d	line:4359	language:C++	signature:(n,LEVEL)
DUMMY_CLASS_SIZE	test/buffer/buffer_test.cpp	/^#define DUMMY_CLASS_SIZE /;"	d	line:15	language:C++	file:
DVLOG	src/easylogging/easylogging++.h	/^#define DVLOG(/;"	d	line:4406	language:C++	signature:(vlevel)
DVLOG_AFTER_N	src/easylogging/easylogging++.h	/^#define DVLOG_AFTER_N(/;"	d	line:4414	language:C++	signature:(n,vlevel)
DVLOG_EVERY_N	src/easylogging/easylogging++.h	/^#define DVLOG_EVERY_N(/;"	d	line:4412	language:C++	signature:(n,vlevel)
DVLOG_IF	src/easylogging/easylogging++.h	/^#define DVLOG_IF(/;"	d	line:4409	language:C++	signature:(condition,vlevel)
DVLOG_N_TIMES	src/easylogging/easylogging++.h	/^#define DVLOG_N_TIMES(/;"	d	line:4416	language:C++	signature:(n,vlevel)
DataType	src/easylogging/easylogging++.h	/^  enum class DataType : base::type::EnumType {$/;"	g	line:3409	language:C++	class:el::PerformanceTrackingData	typeref:typename:base::type::EnumType	access:public
DateTime	src/easylogging/easylogging++.h	/^  DateTime = 1 << 1,$/;"	e	line:816	language:C++	enum:el::base::FormatFlags	access:public
DateTime	src/easylogging/easylogging++.h	/^class DateTime : base::StaticClass {$/;"	c	line:1178	language:C++	namespace:el::base::utils	inherits:base::StaticClass
Day	src/easylogging/easylogging++.h	/^  Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	e	line:812	language:C++	enum:el::base::TimestampUnit	access:public
Debug	src/easylogging/easylogging++.h	/^  Debug = 4,$/;"	e	line:578	language:C++	enum:el::Level	access:public
DefaultLogBuilder	src/easylogging/easylogging++.h	/^class DefaultLogBuilder : public LogBuilder {$/;"	c	line:2763	language:C++	namespace:el::base	inherits:LogBuilder
DefaultLogDispatchCallback	src/easylogging/easylogging++.h	/^class DefaultLogDispatchCallback : public LogDispatchCallback {$/;"	c	line:2724	language:C++	namespace:el::base	inherits:LogDispatchCallback
DefaultPerformanceTrackingCallback	src/easylogging/easylogging++.h	/^class DefaultPerformanceTrackingCallback : public PerformanceTrackingCallback {$/;"	c	line:3509	language:C++	namespace:el::base	inherits:PerformanceTrackingCallback
DisableApplicationAbortOnFatalLog	src/easylogging/easylogging++.h	/^  DisableApplicationAbortOnFatalLog = 8,$/;"	e	line:702	language:C++	enum:el::LoggingFlag	access:public
DisablePerformanceTrackingCheckpointComparison	src/easylogging/easylogging++.h	/^  DisablePerformanceTrackingCheckpointComparison = 256,$/;"	e	line:712	language:C++	enum:el::LoggingFlag	access:public
DisableVModules	src/easylogging/easylogging++.h	/^  DisableVModules = 512,$/;"	e	line:714	language:C++	enum:el::LoggingFlag	access:public
DisableVModulesExtensions	src/easylogging/easylogging++.h	/^  DisableVModulesExtensions = 1024,$/;"	e	line:716	language:C++	enum:el::LoggingFlag	access:public
DispatchAction	src/easylogging/easylogging++.h	/^enum class DispatchAction : base::type::EnumType {$/;"	g	line:2137	language:C++	namespace:el::base	typeref:typename:base::type::EnumType
Do	src/design_patterns/basic/maybemonad.h	/^    auto Do(Func&& f)$/;"	f	line:40	language:C++	class:design_patterns::Maybe	typeref:typename:auto	access:public	signature:(Func && f)
DoubleAttackModifier	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^    DoubleAttackModifier(Creature& creature) : CreatureModifier(creature){}$/;"	f	line:55	language:C++	class:design_patterns::DoubleAttackModifier	access:public	signature:(Creature & creature)
DoubleAttackModifier	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^class DoubleAttackModifier : public CreatureModifier$/;"	c	line:52	language:C++	namespace:design_patterns	inherits:CreatureModifier
DoubleDefenceModifier	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^    DoubleDefenceModifier(Creature& creature) : CreatureModifier(creature){}$/;"	f	line:66	language:C++	class:design_patterns::DoubleDefenceModifier	access:public	signature:(Creature & creature)
DoubleDefenceModifier	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^class DoubleDefenceModifier : public CreatureModifier$/;"	c	line:63	language:C++	namespace:design_patterns	inherits:CreatureModifier
EASYLOGGINGPP_H	src/easylogging/easylogging++.h	/^#define EASYLOGGINGPP_H$/;"	d	line:18	language:C++
ELEM_AT	src/http_parser/http_parser.cpp	/^# define ELEM_AT(/;"	d	line:51	language:C++	file:	signature:(a,i,v)
ELPP	src/easylogging/easylogging++.h	/^#define ELPP /;"	d	line:2723	language:C++
ELPP_ASSERT	src/easylogging/easylogging++.h	/^#    define ELPP_ASSERT(/;"	d	line:155	language:C++	signature:(expr,msg)
ELPP_ASSERT	src/easylogging/easylogging++.h	/^#    define ELPP_ASSERT(/;"	d	line:162	language:C++	signature:(expr,msg)
ELPP_ASSERT	src/easylogging/easylogging++.h	/^#  define ELPP_ASSERT(/;"	d	line:170	language:C++	signature:(x,y)
ELPP_ASYNC_LOGGING	src/easylogging/easylogging++.h	/^#  define ELPP_ASYNC_LOGGING /;"	d	line:271	language:C++
ELPP_ASYNC_LOGGING	src/easylogging/easylogging++.h	/^#  define ELPP_ASYNC_LOGGING /;"	d	line:273	language:C++
ELPP_CLANG_SUPPORTS_THREAD	src/easylogging/easylogging++.h	/^#      define ELPP_CLANG_SUPPORTS_THREAD$/;"	d	line:60	language:C++
ELPP_COMPILER_CLANG	src/easylogging/easylogging++.h	/^#  define ELPP_COMPILER_CLANG /;"	d	line:52	language:C++
ELPP_COMPILER_CLANG	src/easylogging/easylogging++.h	/^#  define ELPP_COMPILER_CLANG /;"	d	line:54	language:C++
ELPP_COMPILER_GCC	src/easylogging/easylogging++.h	/^#  define ELPP_COMPILER_GCC /;"	d	line:24	language:C++
ELPP_COMPILER_GCC	src/easylogging/easylogging++.h	/^#  define ELPP_COMPILER_GCC /;"	d	line:26	language:C++
ELPP_COMPILER_INTEL	src/easylogging/easylogging++.h	/^#  define ELPP_COMPILER_INTEL /;"	d	line:75	language:C++
ELPP_COMPILER_INTEL	src/easylogging/easylogging++.h	/^#  define ELPP_COMPILER_INTEL /;"	d	line:77	language:C++
ELPP_COMPILER_MSVC	src/easylogging/easylogging++.h	/^#  define ELPP_COMPILER_MSVC /;"	d	line:38	language:C++
ELPP_COMPILER_MSVC	src/easylogging/easylogging++.h	/^#  define ELPP_COMPILER_MSVC /;"	d	line:40	language:C++
ELPP_COUNTER	src/easylogging/easylogging++.h	/^#define ELPP_COUNTER /;"	d	line:3941	language:C++
ELPP_COUNTER_POS	src/easylogging/easylogging++.h	/^#define ELPP_COUNTER_POS /;"	d	line:3943	language:C++
ELPP_COUT	src/easylogging/easylogging++.h	/^#    define ELPP_COUT /;"	d	line:510	language:C++
ELPP_COUT_LINE	src/easylogging/easylogging++.h	/^#  define ELPP_COUT_LINE(/;"	d	line:534	language:C++	signature:(logLine)
ELPP_COUT_LINE	src/easylogging/easylogging++.h	/^#  define ELPP_COUT_LINE(/;"	d	line:536	language:C++	signature:(logLine)
ELPP_CRASH_HANDLER_INIT	src/easylogging/easylogging++.h	/^#define ELPP_CRASH_HANDLER_INIT$/;"	d	line:4534	language:C++
ELPP_CRT_DBG_WARNINGS	src/easylogging/easylogging++.h	/^#define ELPP_CRT_DBG_WARNINGS /;"	d	line:42	language:C++
ELPP_CURR_FILE_LOGGER_ID	src/easylogging/easylogging++.h	/^#  define ELPP_CURR_FILE_LOGGER_ID /;"	d	line:4251	language:C++
ELPP_CURR_FILE_LOGGER_ID	src/easylogging/easylogging++.h	/^#  define ELPP_CURR_FILE_LOGGER_ID /;"	d	line:4253	language:C++
ELPP_CXX0X	src/easylogging/easylogging++.h	/^#    define ELPP_CXX0X /;"	d	line:33	language:C++
ELPP_CXX0X	src/easylogging/easylogging++.h	/^#    define ELPP_CXX0X /;"	d	line:45	language:C++
ELPP_CXX11	src/easylogging/easylogging++.h	/^#    define ELPP_CXX11 /;"	d	line:47	language:C++
ELPP_CXX11	src/easylogging/easylogging++.h	/^#  define ELPP_CXX11 /;"	d	line:21	language:C++
ELPP_CYGWIN	src/easylogging/easylogging++.h	/^#  define ELPP_CYGWIN /;"	d	line:70	language:C++
ELPP_CYGWIN	src/easylogging/easylogging++.h	/^#  define ELPP_CYGWIN /;"	d	line:72	language:C++
ELPP_DEBUG_LOG	src/easylogging/easylogging++.h	/^#  define ELPP_DEBUG_LOG /;"	d	line:308	language:C++
ELPP_DEBUG_LOG	src/easylogging/easylogging++.h	/^#  define ELPP_DEBUG_LOG /;"	d	line:310	language:C++
ELPP_DEFAULT_LOGGING_FLAGS	src/easylogging/easylogging++.cc	/^#   define ELPP_DEFAULT_LOGGING_FLAGS /;"	d	line:2058	language:C++	file:
ELPP_ERROR_LOG	src/easylogging/easylogging++.h	/^#  define ELPP_ERROR_LOG /;"	d	line:323	language:C++
ELPP_ERROR_LOG	src/easylogging/easylogging++.h	/^#  define ELPP_ERROR_LOG /;"	d	line:325	language:C++
ELPP_EXPORT	src/easylogging/easylogging++.h	/^#    define ELPP_EXPORT /;"	d	line:229	language:C++
ELPP_EXPORT	src/easylogging/easylogging++.h	/^#    define ELPP_EXPORT /;"	d	line:231	language:C++
ELPP_EXPORT	src/easylogging/easylogging++.h	/^#  define ELPP_EXPORT$/;"	d	line:234	language:C++
ELPP_FATAL_LOG	src/easylogging/easylogging++.h	/^#  define ELPP_FATAL_LOG /;"	d	line:328	language:C++
ELPP_FATAL_LOG	src/easylogging/easylogging++.h	/^#  define ELPP_FATAL_LOG /;"	d	line:330	language:C++
ELPP_FINAL	src/easylogging/easylogging++.h	/^#  define ELPP_FINAL /;"	d	line:268	language:C++
ELPP_FINAL	src/easylogging/easylogging++.h	/^#  define ELPP_FINAL$/;"	d	line:266	language:C++
ELPP_FUNC	src/easylogging/easylogging++.h	/^#    define ELPP_FUNC /;"	d	line:292	language:C++
ELPP_FUNC	src/easylogging/easylogging++.h	/^#    define ELPP_FUNC /;"	d	line:294	language:C++
ELPP_FUNC	src/easylogging/easylogging++.h	/^#  define ELPP_FUNC /;"	d	line:283	language:C++
ELPP_FUNC	src/easylogging/easylogging++.h	/^#  define ELPP_FUNC /;"	d	line:285	language:C++
ELPP_FUNC	src/easylogging/easylogging++.h	/^#  define ELPP_FUNC /;"	d	line:287	language:C++
ELPP_FUNC	src/easylogging/easylogging++.h	/^#  define ELPP_FUNC /;"	d	line:289	language:C++
ELPP_GCC_VERSION	src/easylogging/easylogging++.h	/^#    define ELPP_GCC_VERSION /;"	d	line:29	language:C++
ELPP_INFO_LOG	src/easylogging/easylogging++.h	/^#  define ELPP_INFO_LOG /;"	d	line:313	language:C++
ELPP_INFO_LOG	src/easylogging/easylogging++.h	/^#  define ELPP_INFO_LOG /;"	d	line:315	language:C++
ELPP_INITIALIZE_SYSLOG	src/easylogging/easylogging++.h	/^#define ELPP_INITIALIZE_SYSLOG(/;"	d	line:3648	language:C++	signature:(id,opt,fac)
ELPP_INIT_EASYLOGGINGPP	src/easylogging/easylogging++.h	/^#define ELPP_INIT_EASYLOGGINGPP(/;"	d	line:4535	language:C++	signature:(val)
ELPP_INTERNAL_DEBUGGING_ENDL	src/easylogging/easylogging++.h	/^#  define ELPP_INTERNAL_DEBUGGING_ENDL /;"	d	line:147	language:C++
ELPP_INTERNAL_DEBUGGING_MSG	src/easylogging/easylogging++.h	/^#  define ELPP_INTERNAL_DEBUGGING_MSG(/;"	d	line:150	language:C++	signature:(msg)
ELPP_INTERNAL_DEBUGGING_OUT_ERROR	src/easylogging/easylogging++.h	/^#  define ELPP_INTERNAL_DEBUGGING_OUT_ERROR /;"	d	line:144	language:C++
ELPP_INTERNAL_DEBUGGING_OUT_INFO	src/easylogging/easylogging++.h	/^#  define ELPP_INTERNAL_DEBUGGING_OUT_INFO /;"	d	line:141	language:C++
ELPP_INTERNAL_DEBUGGING_WRITE_PERROR	src/easylogging/easylogging++.h	/^#  define ELPP_INTERNAL_DEBUGGING_WRITE_PERROR /;"	d	line:173	language:C++
ELPP_INTERNAL_DEBUGGING_WRITE_PERROR	src/easylogging/easylogging++.h	/^#  define ELPP_INTERNAL_DEBUGGING_WRITE_PERROR /;"	d	line:177	language:C++
ELPP_INTERNAL_ERROR	src/easylogging/easylogging++.h	/^#    define ELPP_INTERNAL_ERROR(/;"	d	line:182	language:C++	signature:(msg,pe)
ELPP_INTERNAL_ERROR	src/easylogging/easylogging++.h	/^#  define ELPP_INTERNAL_ERROR(/;"	d	line:191	language:C++	signature:(msg,pe)
ELPP_INTERNAL_INFO	src/easylogging/easylogging++.h	/^#    define ELPP_INTERNAL_INFO(/;"	d	line:198	language:C++	signature:(lvl,msg)
ELPP_INTERNAL_INFO	src/easylogging/easylogging++.h	/^#  define ELPP_INTERNAL_INFO(/;"	d	line:205	language:C++	signature:(lvl,msg)
ELPP_INTERNAL_INFO_LEVEL	src/easylogging/easylogging++.h	/^#    define ELPP_INTERNAL_INFO_LEVEL /;"	d	line:195	language:C++
ELPP_ITERATOR_CONTAINER_LOG_FIVE_ARG	src/easylogging/easylogging++.h	/^#define ELPP_ITERATOR_CONTAINER_LOG_FIVE_ARG(/;"	d	line:2920	language:C++	signature:(temp)
ELPP_ITERATOR_CONTAINER_LOG_FOUR_ARG	src/easylogging/easylogging++.h	/^#define ELPP_ITERATOR_CONTAINER_LOG_FOUR_ARG(/;"	d	line:2915	language:C++	signature:(temp)
ELPP_ITERATOR_CONTAINER_LOG_ONE_ARG	src/easylogging/easylogging++.h	/^#define ELPP_ITERATOR_CONTAINER_LOG_ONE_ARG(/;"	d	line:2900	language:C++	signature:(temp)
ELPP_ITERATOR_CONTAINER_LOG_THREE_ARG	src/easylogging/easylogging++.h	/^#define ELPP_ITERATOR_CONTAINER_LOG_THREE_ARG(/;"	d	line:2910	language:C++	signature:(temp)
ELPP_ITERATOR_CONTAINER_LOG_TWO_ARG	src/easylogging/easylogging++.h	/^#define ELPP_ITERATOR_CONTAINER_LOG_TWO_ARG(/;"	d	line:2905	language:C++	signature:(temp)
ELPP_LITERAL	src/easylogging/easylogging++.h	/^#  define ELPP_LITERAL(/;"	d	line:507	language:C++	signature:(txt)
ELPP_LOGGING_ENABLED	src/easylogging/easylogging++.h	/^#define ELPP_LOGGING_ENABLED /;"	d	line:303	language:C++
ELPP_LOGGING_ENABLED	src/easylogging/easylogging++.h	/^#define ELPP_LOGGING_ENABLED /;"	d	line:305	language:C++
ELPP_LOG_PERMS	src/easylogging/easylogging++.h	/^#  define ELPP_LOG_PERMS /;"	d	line:225	language:C++
ELPP_MINGW	src/easylogging/easylogging++.h	/^#  define ELPP_MINGW /;"	d	line:65	language:C++
ELPP_MINGW	src/easylogging/easylogging++.h	/^#  define ELPP_MINGW /;"	d	line:67	language:C++
ELPP_MIN_UNIT	src/easylogging/easylogging++.h	/^#  define ELPP_MIN_UNIT /;"	d	line:3910	language:C++
ELPP_MIN_UNIT	src/easylogging/easylogging++.h	/^#  define ELPP_MIN_UNIT /;"	d	line:3912	language:C++
ELPP_OS_AIX	src/easylogging/easylogging++.h	/^#  define ELPP_OS_AIX /;"	d	line:108	language:C++
ELPP_OS_AIX	src/easylogging/easylogging++.h	/^#  define ELPP_OS_AIX /;"	d	line:110	language:C++
ELPP_OS_ANDROID	src/easylogging/easylogging++.h	/^#  define ELPP_OS_ANDROID /;"	d	line:129	language:C++
ELPP_OS_ANDROID	src/easylogging/easylogging++.h	/^#  define ELPP_OS_ANDROID /;"	d	line:131	language:C++
ELPP_OS_EMSCRIPTEN	src/easylogging/easylogging++.h	/^#  define ELPP_OS_EMSCRIPTEN /;"	d	line:118	language:C++
ELPP_OS_EMSCRIPTEN	src/easylogging/easylogging++.h	/^#  define ELPP_OS_EMSCRIPTEN /;"	d	line:120	language:C++
ELPP_OS_FREEBSD	src/easylogging/easylogging++.h	/^#  define ELPP_OS_FREEBSD /;"	d	line:100	language:C++
ELPP_OS_FREEBSD	src/easylogging/easylogging++.h	/^#  define ELPP_OS_FREEBSD /;"	d	line:98	language:C++
ELPP_OS_LINUX	src/easylogging/easylogging++.h	/^#  define ELPP_OS_LINUX /;"	d	line:138	language:C++
ELPP_OS_LINUX	src/easylogging/easylogging++.h	/^#  define ELPP_OS_LINUX /;"	d	line:88	language:C++
ELPP_OS_LINUX	src/easylogging/easylogging++.h	/^#  define ELPP_OS_LINUX /;"	d	line:90	language:C++
ELPP_OS_MAC	src/easylogging/easylogging++.h	/^#  define ELPP_OS_MAC /;"	d	line:93	language:C++
ELPP_OS_MAC	src/easylogging/easylogging++.h	/^#  define ELPP_OS_MAC /;"	d	line:95	language:C++
ELPP_OS_NETBSD	src/easylogging/easylogging++.h	/^#  define ELPP_OS_NETBSD /;"	d	line:113	language:C++
ELPP_OS_NETBSD	src/easylogging/easylogging++.h	/^#  define ELPP_OS_NETBSD /;"	d	line:115	language:C++
ELPP_OS_SOLARIS	src/easylogging/easylogging++.h	/^#  define ELPP_OS_SOLARIS /;"	d	line:103	language:C++
ELPP_OS_SOLARIS	src/easylogging/easylogging++.h	/^#  define ELPP_OS_SOLARIS /;"	d	line:105	language:C++
ELPP_OS_UNIX	src/easylogging/easylogging++.h	/^#  define ELPP_OS_UNIX /;"	d	line:124	language:C++
ELPP_OS_UNIX	src/easylogging/easylogging++.h	/^#  define ELPP_OS_UNIX /;"	d	line:126	language:C++
ELPP_OS_UNIX	src/easylogging/easylogging++.h	/^#  define ELPP_OS_UNIX /;"	d	line:137	language:C++
ELPP_OS_WINDOWS	src/easylogging/easylogging++.h	/^#  define ELPP_OS_WINDOWS /;"	d	line:82	language:C++
ELPP_OS_WINDOWS	src/easylogging/easylogging++.h	/^#  define ELPP_OS_WINDOWS /;"	d	line:84	language:C++
ELPP_SIMPLE_LOG	src/easylogging/easylogging++.h	/^#  define ELPP_SIMPLE_LOG(/;"	d	line:2865	language:C++	signature:(LOG_TYPE)
ELPP_STACKTRACE	src/easylogging/easylogging++.h	/^#    define ELPP_STACKTRACE /;"	d	line:209	language:C++
ELPP_STACKTRACE	src/easylogging/easylogging++.h	/^#    define ELPP_STACKTRACE /;"	d	line:216	language:C++
ELPP_STACKTRACE	src/easylogging/easylogging++.h	/^#    define ELPP_STACKTRACE /;"	d	line:219	language:C++
ELPP_STRLEN	src/easylogging/easylogging++.h	/^#  define ELPP_STRLEN /;"	d	line:508	language:C++
ELPP_THREADING_ENABLED	src/easylogging/easylogging++.h	/^#  define ELPP_THREADING_ENABLED /;"	d	line:276	language:C++
ELPP_THREADING_ENABLED	src/easylogging/easylogging++.h	/^#  define ELPP_THREADING_ENABLED /;"	d	line:278	language:C++
ELPP_TRACE	src/easylogging/easylogging++.h	/^#define ELPP_TRACE /;"	d	line:4256	language:C++
ELPP_TRACE_LOG	src/easylogging/easylogging++.h	/^#  define ELPP_TRACE_LOG /;"	d	line:333	language:C++
ELPP_TRACE_LOG	src/easylogging/easylogging++.h	/^#  define ELPP_TRACE_LOG /;"	d	line:335	language:C++
ELPP_UNUSED	src/easylogging/easylogging++.h	/^#define ELPP_UNUSED(/;"	d	line:222	language:C++	signature:(x)
ELPP_USE_DEF_CRASH_HANDLER	src/easylogging/easylogging++.h	/^#  define ELPP_USE_DEF_CRASH_HANDLER /;"	d	line:4530	language:C++
ELPP_USE_DEF_CRASH_HANDLER	src/easylogging/easylogging++.h	/^#  define ELPP_USE_DEF_CRASH_HANDLER /;"	d	line:4532	language:C++
ELPP_USE_STD_THREADING	src/easylogging/easylogging++.h	/^#    define ELPP_USE_STD_THREADING /;"	d	line:259	language:C++
ELPP_USE_STD_THREADING	src/easylogging/easylogging++.h	/^#    define ELPP_USE_STD_THREADING /;"	d	line:261	language:C++
ELPP_USE_STD_THREADING	src/easylogging/easylogging++.h	/^#  define ELPP_USE_STD_THREADING /;"	d	line:254	language:C++
ELPP_VARIADIC_FUNC_MSVC	src/easylogging/easylogging++.h	/^#  define ELPP_VARIADIC_FUNC_MSVC(/;"	d	line:3381	language:C++	signature:(variadicFunction,variadicArgs)
ELPP_VARIADIC_FUNC_MSVC_RUN	src/easylogging/easylogging++.h	/^#  define ELPP_VARIADIC_FUNC_MSVC_RUN(/;"	d	line:3382	language:C++	signature:(variadicFunction,...)
ELPP_VARIADIC_TEMPLATES_SUPPORTED	src/easylogging/easylogging++.h	/^#define ELPP_VARIADIC_TEMPLATES_SUPPORTED /;"	d	line:299	language:C++
ELPP_VERBOSE_LOG	src/easylogging/easylogging++.h	/^#  define ELPP_VERBOSE_LOG /;"	d	line:338	language:C++
ELPP_VERBOSE_LOG	src/easylogging/easylogging++.h	/^#  define ELPP_VERBOSE_LOG /;"	d	line:340	language:C++
ELPP_WARNING_LOG	src/easylogging/easylogging++.h	/^#  define ELPP_WARNING_LOG /;"	d	line:318	language:C++
ELPP_WARNING_LOG	src/easylogging/easylogging++.h	/^#  define ELPP_WARNING_LOG /;"	d	line:320	language:C++
ELPP_WRITE_LOG	src/easylogging/easylogging++.h	/^#define ELPP_WRITE_LOG(/;"	d	line:3393	language:C++	signature:(writer,level,dispatchAction,...)
ELPP_WRITE_LOG_AFTER_N	src/easylogging/easylogging++.h	/^#define ELPP_WRITE_LOG_AFTER_N(/;"	d	line:3400	language:C++	signature:(writer,n,level,dispatchAction,...)
ELPP_WRITE_LOG_EVERY_N	src/easylogging/easylogging++.h	/^#define ELPP_WRITE_LOG_EVERY_N(/;"	d	line:3397	language:C++	signature:(writer,occasion,level,dispatchAction,...)
ELPP_WRITE_LOG_IF	src/easylogging/easylogging++.h	/^#define ELPP_WRITE_LOG_IF(/;"	d	line:3395	language:C++	signature:(writer,condition,level,dispatchAction,...)
ELPP_WRITE_LOG_N_TIMES	src/easylogging/easylogging++.h	/^#define ELPP_WRITE_LOG_N_TIMES(/;"	d	line:3403	language:C++	signature:(writer,n,level,dispatchAction,...)
ELPP_WX_ENABLED	src/easylogging/easylogging++.h	/^#  define ELPP_WX_ENABLED(/;"	d	line:3130	language:C++	signature:(ContainerType)
ELPP_WX_HASH_MAP_ENABLED	src/easylogging/easylogging++.h	/^#  define ELPP_WX_HASH_MAP_ENABLED(/;"	d	line:3131	language:C++	signature:(ContainerType)
ELPP_WX_PTR_ENABLED	src/easylogging/easylogging++.h	/^#  define ELPP_WX_PTR_ENABLED(/;"	d	line:3129	language:C++	signature:(ContainerType)
Enabled	src/easylogging/easylogging++.h	/^  Enabled = 1,$/;"	e	line:635	language:C++	enum:el::ConfigurationType	access:public
EnumType	src/easylogging/easylogging++.h	/^typedef unsigned int EnumType;$/;"	t	line:538	language:C++	namespace:el::base::type	typeref:typename:unsigned int
Error	src/easylogging/easylogging++.h	/^  Error = 16,$/;"	e	line:582	language:C++	enum:el::Level	access:public
FUNC_NAME	src/tests/tests.h	/^#define FUNC_NAME /;"	d	line:23	language:C++
F_CHUNKED	src/http_parser/http_parser.h	/^  { F_CHUNKED               = 1 << 0$/;"	e	line:222	language:C++	enum:flags	access:public
F_CONNECTION_CLOSE	src/http_parser/http_parser.h	/^  , F_CONNECTION_CLOSE      = 1 << 2$/;"	e	line:224	language:C++	enum:flags	access:public
F_CONNECTION_KEEP_ALIVE	src/http_parser/http_parser.h	/^  , F_CONNECTION_KEEP_ALIVE = 1 << 1$/;"	e	line:223	language:C++	enum:flags	access:public
F_CONNECTION_UPGRADE	src/http_parser/http_parser.h	/^  , F_CONNECTION_UPGRADE    = 1 << 3$/;"	e	line:225	language:C++	enum:flags	access:public
F_CONTENTLENGTH	src/http_parser/http_parser.h	/^  , F_CONTENTLENGTH         = 1 << 7$/;"	e	line:229	language:C++	enum:flags	access:public
F_SKIPBODY	src/http_parser/http_parser.h	/^  , F_SKIPBODY              = 1 << 6$/;"	e	line:228	language:C++	enum:flags	access:public
F_TRAILING	src/http_parser/http_parser.h	/^  , F_TRAILING              = 1 << 4$/;"	e	line:226	language:C++	enum:flags	access:public
F_UPGRADE	src/http_parser/http_parser.h	/^  , F_UPGRADE               = 1 << 5$/;"	e	line:227	language:C++	enum:flags	access:public
Fatal	src/easylogging/easylogging++.h	/^  Fatal = 8,$/;"	e	line:580	language:C++	enum:el::Level	access:public
File	src/easylogging/easylogging++.h	/^  File = 1 << 3,$/;"	e	line:818	language:C++	enum:el::base::FormatFlags	access:public
File	src/easylogging/easylogging++.h	/^class File : base::StaticClass {$/;"	c	line:1038	language:C++	namespace:el::base::utils	inherits:base::StaticClass
FileBase	src/easylogging/easylogging++.h	/^  FileBase = 1 << 14,$/;"	e	line:829	language:C++	enum:el::base::FormatFlags	access:public
FileStreamPtr	src/easylogging/easylogging++.h	/^typedef std::shared_ptr<base::type::fstream_t> FileStreamPtr;$/;"	t	line:1894	language:C++	namespace:el::base	typeref:typename:std::shared_ptr<base::type::fstream_t>
Filename	src/easylogging/easylogging++.h	/^  Filename = 16,$/;"	e	line:644	language:C++	enum:el::ConfigurationType	access:public
Filter	src/design_patterns/basic/SOLID_Open_Close.h	/^class Filter : public IFilter<Product>$/;"	c	line:63	language:C++	namespace:design_patterns	inherits:IFilter<Product>
FixedTimeFormat	src/easylogging/easylogging++.h	/^  FixedTimeFormat = 16384,$/;"	e	line:724	language:C++	enum:el::LoggingFlag	access:public
Format	src/easylogging/easylogging++.h	/^  Format = 8,$/;"	e	line:642	language:C++	enum:el::ConfigurationType	access:public
FormatFlags	src/easylogging/easylogging++.h	/^enum class FormatFlags : base::type::EnumType {$/;"	g	line:815	language:C++	namespace:el::base	typeref:typename:base::type::EnumType
FormatSpecifierValueResolver	src/easylogging/easylogging++.h	/^typedef std::function<std::string(const LogMessage*)> FormatSpecifierValueResolver;$/;"	t	line:1641	language:C++	namespace:el
Function	src/easylogging/easylogging++.h	/^  Function = 1 << 6,$/;"	e	line:821	language:C++	enum:el::base::FormatFlags	access:public
Game	src/design_patterns/chain_of_responsibility/broke_chain.h	/^class Game$/;"	c	line:28	language:C++	namespace:design_patterns
Global	src/easylogging/easylogging++.h	/^  Global = 1,$/;"	e	line:574	language:C++	enum:el::Level	access:public
Green	src/design_patterns/basic/SOLID_Open_Close.h	/^enum class Color{Green, Red, Blue};$/;"	e	line:9	language:C++	enum:design_patterns::Color	access:public
HEX	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define HEX(/;"	d	line:445	language:C++	file:	signature:(n)
HTTPMethod	src/http/HttpMethod.h	/^enum class HTTPMethod$/;"	g	line:24	language:C++	namespace:http
HTTP_BOTH	src/http_parser/http_parser.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	e	line:217	language:C++	enum:http_parser_type	access:public
HTTP_ERRNO_GEN	src/http_parser/http_parser.h	/^#define HTTP_ERRNO_GEN(/;"	d	line:284	language:C++	signature:(n,s)
HTTP_ERRNO_MAP	src/http_parser/http_parser.h	/^  HTTP_ERRNO_MAP(HTTP_ERRNO_GEN)$/;"	e	line:286	language:C++	enum:http_errno	access:public
HTTP_ERRNO_MAP	src/http_parser/http_parser.h	/^#define HTTP_ERRNO_MAP(/;"	d	line:237	language:C++	signature:(XX)
HTTP_HEADER_ACCEPT	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_ACCEPT = 8,$/;"	e	line:21	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_ACCEPT_CHARSET	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_ACCEPT_CHARSET = 9,$/;"	e	line:22	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_ACCEPT_DATETIME	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_ACCEPT_DATETIME = 10,$/;"	e	line:23	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_ACCEPT_ENCODING	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_ACCEPT_ENCODING = 11,$/;"	e	line:24	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_ACCEPT_LANGUAGE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_ACCEPT_LANGUAGE = 12,$/;"	e	line:25	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_ACCEPT_RANGES	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_ACCEPT_RANGES = 13,$/;"	e	line:26	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_ACCESS_CONTROL_ALLOW_CREDENTIALS	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_ACCESS_CONTROL_ALLOW_CREDENTIALS = 14,$/;"	e	line:28	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_ACCESS_CONTROL_ALLOW_HEADERS	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_ACCESS_CONTROL_ALLOW_HEADERS = 15,$/;"	e	line:30	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_ACCESS_CONTROL_ALLOW_METHODS	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_ACCESS_CONTROL_ALLOW_METHODS = 16,$/;"	e	line:32	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN = 17,$/;"	e	line:35	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_ACCESS_CONTROL_EXPOSE_HEADERS	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_ACCESS_CONTROL_EXPOSE_HEADERS = 18,$/;"	e	line:38	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_ACCESS_CONTROL_MAX_AGE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_ACCESS_CONTROL_MAX_AGE = 19,$/;"	e	line:41	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_ACCESS_CONTROL_REQUEST_HEADERS	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_ACCESS_CONTROL_REQUEST_HEADERS = 20,$/;"	e	line:45	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_ACCESS_CONTROL_REQUEST_METHOD	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_ACCESS_CONTROL_REQUEST_METHOD = 21,$/;"	e	line:27	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_AGE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_AGE = 22,$/;"	e	line:29	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_ALLOW	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_ALLOW = 23,$/;"	e	line:31	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_ALT_SVC	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_ALT_SVC = 24,$/;"	e	line:34	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_AUTHORIZATION	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_AUTHORIZATION = 25,$/;"	e	line:37	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_CACHE_CONTROL	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_CACHE_CONTROL = 26,$/;"	e	line:40	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_COLON_AUTHORITY	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_COLON_AUTHORITY = 2,$/;"	e	line:15	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_COLON_METHOD	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_COLON_METHOD = 3,$/;"	e	line:16	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_COLON_PATH	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_COLON_PATH = 4,$/;"	e	line:17	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_COLON_PROTOCOL	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_COLON_PROTOCOL = 5,$/;"	e	line:18	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_COLON_SCHEME	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_COLON_SCHEME = 6,$/;"	e	line:19	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_COLON_STATUS	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_COLON_STATUS = 7,$/;"	e	line:20	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_CONNECTION	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_CONNECTION = 27,$/;"	e	line:44	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_CONTENT_DISPOSITION	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_CONTENT_DISPOSITION = 28,$/;"	e	line:48	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_CONTENT_ENCODING	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_CONTENT_ENCODING = 29,$/;"	e	line:51	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_CONTENT_LANGUAGE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_CONTENT_LANGUAGE = 30,$/;"	e	line:55	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_CONTENT_LENGTH	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_CONTENT_LENGTH = 31,$/;"	e	line:33	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_CONTENT_LOCATION	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_CONTENT_LOCATION = 32,$/;"	e	line:36	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_CONTENT_MD5	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_CONTENT_MD5 = 33,$/;"	e	line:39	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_CONTENT_RANGE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_CONTENT_RANGE = 34,$/;"	e	line:43	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_CONTENT_TYPE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_CONTENT_TYPE = 35,$/;"	e	line:47	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_COOKIE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_COOKIE = 36,$/;"	e	line:50	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_DATE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_DATE = 38,$/;"	e	line:58	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_DNT	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_DNT = 37,$/;"	e	line:54	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_ETAG	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_ETAG = 39,$/;"	e	line:61	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_EXPECT	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_EXPECT = 40,$/;"	e	line:65	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_EXPIRES	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_EXPIRES = 41,$/;"	e	line:42	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_FROM	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_FROM = 42,$/;"	e	line:46	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_FRONT_END_HTTPS	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_FRONT_END_HTTPS = 43,$/;"	e	line:49	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_HOST	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_HOST = 44,$/;"	e	line:53	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_IF_MATCH	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_IF_MATCH = 45,$/;"	e	line:57	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_IF_MODIFIED_SINCE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_IF_MODIFIED_SINCE = 46,$/;"	e	line:60	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_IF_NONE_MATCH	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_IF_NONE_MATCH = 47,$/;"	e	line:64	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_IF_RANGE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_IF_RANGE = 48,$/;"	e	line:68	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_IF_UNMODIFIED_SINCE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_IF_UNMODIFIED_SINCE = 49,$/;"	e	line:71	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_KEEP_ALIVE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_KEEP_ALIVE = 50,$/;"	e	line:74	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_LAST_MODIFIED	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_LAST_MODIFIED = 51,$/;"	e	line:52	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_LINK	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_LINK = 52,$/;"	e	line:56	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_LOCATION	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_LOCATION = 53,$/;"	e	line:59	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_MAX_FORWARDS	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_MAX_FORWARDS = 54,$/;"	e	line:63	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_NONE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_NONE = 0,$/;"	e	line:11	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_ORIGIN	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_ORIGIN = 55,$/;"	e	line:67	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_OTHER	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_OTHER = 1,$/;"	e	line:13	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_P3P	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_P3P = 56,$/;"	e	line:70	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_PRAGMA	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_PRAGMA = 57,$/;"	e	line:73	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_PROXY_AUTHENTICATE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_PROXY_AUTHENTICATE = 58,$/;"	e	line:76	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_PROXY_AUTHORIZATION	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_PROXY_AUTHORIZATION = 59,$/;"	e	line:79	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_PROXY_CONNECTION	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_PROXY_CONNECTION = 60,$/;"	e	line:82	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_RANGE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_RANGE = 61,$/;"	e	line:62	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_REFERER	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_REFERER = 62,$/;"	e	line:66	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_REFRESH	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_REFRESH = 63,$/;"	e	line:69	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_RETRY_AFTER	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_RETRY_AFTER = 64,$/;"	e	line:72	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_SEC_TOKEN_BINDING	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_SEC_TOKEN_BINDING = 65,$/;"	e	line:78	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_SEC_WEBSOCKET_ACCEPT	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_SEC_WEBSOCKET_ACCEPT = 66,$/;"	e	line:81	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_SEC_WEBSOCKET_KEY	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_SEC_WEBSOCKET_KEY = 67,$/;"	e	line:85	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_SERVER	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_SERVER = 68,$/;"	e	line:88	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_SET_COOKIE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_SET_COOKIE = 69,$/;"	e	line:91	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_STRICT_TRANSPORT_SECURITY	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_STRICT_TRANSPORT_SECURITY = 70,$/;"	e	line:95	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_TE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_TE = 71,$/;"	e	line:75	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_TIMESTAMP	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_TIMESTAMP = 72,$/;"	e	line:77	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_TRAILER	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_TRAILER = 73,$/;"	e	line:80	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_TRANSFER_ENCODING	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_TRANSFER_ENCODING = 74,$/;"	e	line:84	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_UPGRADE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_UPGRADE = 75,$/;"	e	line:87	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_USER_AGENT	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_USER_AGENT = 76,$/;"	e	line:90	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_VARY	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_VARY = 78,$/;"	e	line:98	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_VIA	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_VIA = 79,$/;"	e	line:101	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_VIP	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_VIP = 77,$/;"	e	line:94	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_WARNING	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_WARNING = 81,$/;"	e	line:83	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_WWW_AUTHENTICATE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_WWW_AUTHENTICATE = 80,$/;"	e	line:104	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_X_ACCEL_REDIRECT	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_X_ACCEL_REDIRECT = 82,$/;"	e	line:86	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_X_CONTENT_SECURITY_POLICY_REPORT_ONLY	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_X_CONTENT_SECURITY_POLICY_REPORT_ONLY = 83,$/;"	e	line:89	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_X_CONTENT_TYPE_OPTIONS	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_X_CONTENT_TYPE_OPTIONS = 84,$/;"	e	line:93	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_X_FORWARDED_FOR	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_X_FORWARDED_FOR = 85,$/;"	e	line:97	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_X_FORWARDED_PROTO	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_X_FORWARDED_PROTO = 86,$/;"	e	line:100	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_X_FRAME_OPTIONS	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_X_FRAME_OPTIONS = 87,$/;"	e	line:103	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_X_POWERED_BY	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_X_POWERED_BY = 88,$/;"	e	line:105	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_X_REAL_IP	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_X_REAL_IP = 89,$/;"	e	line:106	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_X_REQUESTED_WITH	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_X_REQUESTED_WITH = 90,$/;"	e	line:107	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_X_THRIFT_PROTOCOL	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_X_THRIFT_PROTOCOL = 91,$/;"	e	line:92	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_X_UA_COMPATIBLE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_X_UA_COMPATIBLE = 92,$/;"	e	line:96	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_X_WAP_PROFILE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_X_WAP_PROFILE = 93,$/;"	e	line:99	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_HEADER_X_XSS_PROTECTION	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_X_XSS_PROTECTION = 94,$/;"	e	line:102	language:C++	enum:http::HttpHeaderCode	access:public
HTTP_MAX_HEADER_SIZE	src/http_parser/http_parser.h	/^# define HTTP_MAX_HEADER_SIZE /;"	d	line:65	language:C++
HTTP_METHOD_ENUM	src/http/HttpMethod.h	/^#define HTTP_METHOD_ENUM(/;"	d	line:22	language:C++	signature:(method)
HTTP_METHOD_GEN	src/http/HttpMethod.h	/^    HTTP_METHOD_GEN(HTTP_METHOD_ENUM)$/;"	e	line:26	language:C++	enum:http::HTTPMethod	access:public
HTTP_METHOD_GEN	src/http/HttpMethod.h	/^#define HTTP_METHOD_GEN(/;"	d	line:8	language:C++	signature:(x)
HTTP_METHOD_MAP	src/http_parser/http_parser.h	/^  HTTP_METHOD_MAP(XX)$/;"	e	line:212	language:C++	enum:http_method	access:public
HTTP_METHOD_MAP	src/http_parser/http_parser.h	/^#define HTTP_METHOD_MAP(/;"	d	line:165	language:C++	signature:(XX)
HTTP_METHOD_STRING	src/http/HttpMethod.cpp	/^#define HTTP_METHOD_STRING(/;"	d	line:8	language:C++	file:	signature:(method)
HTTP_PARSER_ERRNO	src/http_parser/http_parser.h	/^#define HTTP_PARSER_ERRNO(/;"	d	line:292	language:C++	signature:(p)
HTTP_PARSER_STRICT	src/http_parser/http_parser.h	/^# define HTTP_PARSER_STRICT /;"	d	line:54	language:C++
HTTP_PARSER_VERSION_MAJOR	src/http_parser/http_parser.h	/^#define HTTP_PARSER_VERSION_MAJOR /;"	d	line:30	language:C++
HTTP_PARSER_VERSION_MINOR	src/http_parser/http_parser.h	/^#define HTTP_PARSER_VERSION_MINOR /;"	d	line:31	language:C++
HTTP_PARSER_VERSION_PATCH	src/http_parser/http_parser.h	/^#define HTTP_PARSER_VERSION_PATCH /;"	d	line:32	language:C++
HTTP_REQUEST	src/http_parser/http_parser.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	e	line:217	language:C++	enum:http_parser_type	access:public
HTTP_RESPONSE	src/http_parser/http_parser.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	e	line:217	language:C++	enum:http_parser_type	access:public
HTTP_STATUS_MAP	src/http_parser/http_parser.h	/^  HTTP_STATUS_MAP(XX)$/;"	e	line:159	language:C++	enum:http_status	access:public
HTTP_STATUS_MAP	src/http_parser/http_parser.h	/^#define HTTP_STATUS_MAP(/;"	d	line:95	language:C++	signature:(XX)
HTTP_STRERROR_GEN	src/http_parser/http_parser.cpp	/^#define HTTP_STRERROR_GEN(/;"	d	line:470	language:C++	file:	signature:(n,s)
Handler	src/easylogging/easylogging++.h	/^  typedef void (*Handler)(int);$/;"	t	line:3608	language:C++	class:el::base::debug::CrashHandler	typeref:typename:void (*)(int)	access:public
Helpers	src/easylogging/easylogging++.h	/^class Helpers : base::StaticClass {$/;"	c	line:3650	language:C++	namespace:el	inherits:base::StaticClass
HierarchicalLogging	src/easylogging/easylogging++.h	/^  HierarchicalLogging = 2048,$/;"	e	line:718	language:C++	enum:el::LoggingFlag	access:public
HitCounter	src/easylogging/easylogging++.h	/^  HitCounter(const HitCounter& hitCounter) :$/;"	f	line:2045	language:C++	class:el::base::HitCounter	access:public	signature:(const HitCounter & hitCounter)
HitCounter	src/easylogging/easylogging++.h	/^  HitCounter(const char* filename, base::type::LineNumber lineNumber) :$/;"	f	line:2039	language:C++	class:el::base::HitCounter	access:public	signature:(const char * filename,base::type::LineNumber lineNumber)
HitCounter	src/easylogging/easylogging++.h	/^  HitCounter(void) :$/;"	f	line:2033	language:C++	class:el::base::HitCounter	access:public	signature:(void)
HitCounter	src/easylogging/easylogging++.h	/^class HitCounter {$/;"	c	line:2031	language:C++	namespace:el::base
Host	src/easylogging/easylogging++.h	/^  Host = 1 << 8,$/;"	e	line:823	language:C++	enum:el::base::FormatFlags	access:public
Hour	src/easylogging/easylogging++.h	/^  Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	e	line:812	language:C++	enum:el::base::TimestampUnit	access:public
HtmlBuilder	src/design_patterns/builder/builder.h	/^    HtmlBuilder(const std::string& root_name)$/;"	f	line:46	language:C++	struct:design_patterns::HtmlBuilder	access:public	signature:(const std::string & root_name)
HtmlBuilder	src/design_patterns/builder/builder.h	/^struct HtmlBuilder$/;"	s	line:44	language:C++	namespace:design_patterns
HtmlElement	src/design_patterns/builder/builder.h	/^    HtmlElement(){}$/;"	f	line:20	language:C++	struct:design_patterns::HtmlElement	access:public	signature:()
HtmlElement	src/design_patterns/builder/builder.h	/^    HtmlElement(const std::string& name, const std::string& text)$/;"	f	line:21	language:C++	struct:design_patterns::HtmlElement	access:public	signature:(const std::string & name,const std::string & text)
HtmlElement	src/design_patterns/builder/builder.h	/^struct HtmlElement$/;"	s	line:13	language:C++	namespace:design_patterns
HttpCommomHeaderInternal	src/gperf/HttpCommomHeadersHash.h	/^class HttpCommomHeaderInternal$/;"	c	line:22	language:C++	namespace:http
HttpCommomHeaders	src/http/HttpCommomHeaders.h	/^class HttpCommomHeaders$/;"	c	line:10	language:C++	namespace:http
HttpHeader	src/gperf/HttpCommomHeadersHash.h	/^struct HttpHeader$/;"	s	line:9	language:C++	namespace:http
HttpHeaderCode	src/gperf/HttpHeaderCode.h	/^enum class HttpHeaderCode : uint8_t$/;"	g	line:8	language:C++	namespace:http	typeref:typename:uint8_t
HttpHeaders	src/http/HttpHeaders.cpp	/^HttpHeaders::HttpHeaders()$/;"	f	line:6	language:C++	class:http::HttpHeaders	signature:()
HttpHeaders	src/http/HttpHeaders.cpp	/^HttpHeaders::HttpHeaders(HttpHeaders&& other)$/;"	f	line:33	language:C++	class:http::HttpHeaders	signature:(HttpHeaders && other)
HttpHeaders	src/http/HttpHeaders.cpp	/^HttpHeaders::HttpHeaders(const HttpHeaders& other)$/;"	f	line:17	language:C++	class:http::HttpHeaders	signature:(const HttpHeaders & other)
HttpHeaders	src/http/HttpHeaders.h	/^    HttpHeaders();$/;"	p	line:36	language:C++	class:http::HttpHeaders	access:public	signature:()
HttpHeaders	src/http/HttpHeaders.h	/^    HttpHeaders(HttpHeaders&& other);$/;"	p	line:38	language:C++	class:http::HttpHeaders	access:public	signature:(HttpHeaders && other)
HttpHeaders	src/http/HttpHeaders.h	/^    HttpHeaders(const HttpHeaders& other);$/;"	p	line:37	language:C++	class:http::HttpHeaders	access:public	signature:(const HttpHeaders & other)
HttpHeaders	src/http/HttpHeaders.h	/^class HttpHeaders$/;"	c	line:27	language:C++	namespace:http
HttpMessage	src/http/HttpMessage.cpp	/^HttpMessage::HttpMessage(\/* args *\/)$/;"	f	line:6	language:C++	class:http::HttpMessage	signature:()
HttpMessage	src/http/HttpMessage.h	/^    HttpMessage(\/* args *\/);$/;"	p	line:10	language:C++	class:http::HttpMessage	access:public	signature:()
HttpMessage	src/http/HttpMessage.h	/^class HttpMessage$/;"	c	line:5	language:C++	namespace:http
HttpPaser	src/http_parser/HttpParser.cpp	/^HttpPaser::HttpPaser(\/* args *\/)$/;"	f	line:7	language:C++	class:http::HttpPaser	signature:()
HttpPaser	src/http_parser/HttpParser.h	/^    HttpPaser(\/* args *\/);$/;"	p	line:10	language:C++	class:http::HttpPaser	access:public	signature:()
HttpPaser	src/http_parser/HttpParser.h	/^class HttpPaser$/;"	c	line:7	language:C++	namespace:http
IFilter	src/design_patterns/basic/SOLID_Open_Close.h	/^class IFilter{$/;"	c	line:58	language:C++	namespace:design_patterns
IMG	src/design_patterns/builder/groovy_builder.h	/^    IMG(string url) : Tag("IMG", "")$/;"	f	line:29	language:C++	struct:design_patterns::IMG	access:public	signature:(string url)
IMG	src/design_patterns/builder/groovy_builder.h	/^struct IMG : public Tag$/;"	s	line:27	language:C++	namespace:design_patterns	inherits:Tag
INITIALIZE_EASYLOGGINGPP	src/easylogging/easylogging++.h	/^#  define INITIALIZE_EASYLOGGINGPP /;"	d	line:4544	language:C++
INITIALIZE_EASYLOGGINGPP	src/easylogging/easylogging++.h	/^#  define INITIALIZE_EASYLOGGINGPP /;"	d	line:4547	language:C++
INITIALIZE_NULL_EASYLOGGINGPP	src/easylogging/easylogging++.h	/^#define INITIALIZE_NULL_EASYLOGGINGPP /;"	d	line:4549	language:C++
INIT_VECTOR_RESERVE_SIZE	src/http/HttpHeaders.cpp	/^const size_t HttpHeaders::INIT_VECTOR_RESERVE_SIZE = 16;$/;"	m	line:180	language:C++	class:http::HttpHeaders	typeref:typename:const size_t
INIT_VECTOR_RESERVE_SIZE	src/http/HttpHeaders.h	/^    static const size_t INIT_VECTOR_RESERVE_SIZE; $/;"	m	line:93	language:C++	class:http::HttpHeaders	typeref:typename:const size_t	access:private
IS_ALPHA	src/http_parser/http_parser.cpp	/^#define IS_ALPHA(/;"	d	line:419	language:C++	file:	signature:(c)
IS_ALPHANUM	src/http_parser/http_parser.cpp	/^#define IS_ALPHANUM(/;"	d	line:421	language:C++	file:	signature:(c)
IS_HEADER_CHAR	src/http_parser/http_parser.cpp	/^#define IS_HEADER_CHAR(/;"	d	line:448	language:C++	file:	signature:(ch)
IS_HEX	src/http_parser/http_parser.cpp	/^#define IS_HEX(/;"	d	line:422	language:C++	file:	signature:(c)
IS_HOST_CHAR	src/http_parser/http_parser.cpp	/^#define IS_HOST_CHAR(/;"	d	line:435	language:C++	file:	signature:(c)
IS_HOST_CHAR	src/http_parser/http_parser.cpp	/^#define IS_HOST_CHAR(/;"	d	line:440	language:C++	file:	signature:(c)
IS_MARK	src/http_parser/http_parser.cpp	/^#define IS_MARK(/;"	d	line:423	language:C++	file:	signature:(c)
IS_NUM	src/http_parser/http_parser.cpp	/^#define IS_NUM(/;"	d	line:420	language:C++	file:	signature:(c)
IS_URL_CHAR	src/http_parser/http_parser.cpp	/^#define IS_URL_CHAR(/;"	d	line:434	language:C++	file:	signature:(c)
IS_URL_CHAR	src/http_parser/http_parser.cpp	/^#define IS_URL_CHAR(/;"	d	line:438	language:C++	file:	signature:(c)
IS_USERINFO_CHAR	src/http_parser/http_parser.cpp	/^#define IS_USERINFO_CHAR(/;"	d	line:426	language:C++	file:	signature:(c)
ISpecification	src/design_patterns/basic/SOLID_Open_Close.h	/^class ISpecification{$/;"	c	line:52	language:C++	namespace:design_patterns
IWorker	src/easylogging/easylogging++.h	/^class IWorker {$/;"	c	line:2542	language:C++	namespace:el::base
IgnoreSigInt	src/easylogging/easylogging++.h	/^  IgnoreSigInt = 32768,$/;"	e	line:726	language:C++	enum:el::LoggingFlag	access:public
ImmediateFlush	src/easylogging/easylogging++.h	/^  ImmediateFlush = 16,$/;"	e	line:704	language:C++	enum:el::LoggingFlag	access:public
Info	src/easylogging/easylogging++.h	/^  Info = 128,$/;"	e	line:588	language:C++	enum:el::Level	access:public
Interval	src/mysql_gtid/mysql_gtid.h	/^  struct Interval {$/;"	s	line:69	language:C++	class:MySQLGtidSet	access:public
IntervalList	src/mysql_gtid/mysql_gtid.h	/^  using IntervalList = std::list<IntervalPtr>;$/;"	t	line:74	language:C++	class:MySQLGtidSet	typeref:typename:std::list<IntervalPtr>	access:public
IntervalPtr	src/mysql_gtid/mysql_gtid.h	/^  using IntervalPtr = boost::shared_ptr<Interval>;$/;"	t	line:73	language:C++	class:MySQLGtidSet	typeref:typename:boost::shared_ptr<Interval>	access:public
IsCharPointer	src/utils/type_traits.h	/^struct IsCharPointer {};$/;"	s	line:7	language:C++	namespace:recipes
IsCharPointer	src/utils/type_traits.h	/^struct IsCharPointer<char*> {$/;"	s	line:10	language:C++	namespace:recipes
IsCharPointer	src/utils/type_traits.h	/^struct IsCharPointer<const char*> {$/;"	s	line:15	language:C++	namespace:recipes
Iter	src/buffer/buffer.h	/^    using Iter = buffer_iter;$/;"	t	line:161	language:C++	class:buffer	typeref:typename:buffer_iter	access:public
Iter	src/buffer/buffer.h	/^    using Iter = buffer_iter;$/;"	t	line:80	language:C++	class:buffer_chain	typeref:typename:buffer_iter	access:public
IterableContainer	src/easylogging/easylogging++.h	/^  IterableContainer(void) {}$/;"	f	line:2797	language:C++	class:el::base::workarounds::IterableContainer	access:public	signature:(void)
IterableContainer	src/easylogging/easylogging++.h	/^class IterableContainer {$/;"	c	line:2793	language:C++	namespace:el::base::workarounds
IterablePriorityQueue	src/easylogging/easylogging++.h	/^  IterablePriorityQueue(std::priority_queue<T, Container, Comparator> queue_) {$/;"	f	line:2813	language:C++	class:el::base::workarounds::IterablePriorityQueue	access:public	signature:(std::priority_queue<T,Container,Comparator> queue_)
IterablePriorityQueue	src/easylogging/easylogging++.h	/^class IterablePriorityQueue : public IterableContainer<T, Container>,$/;"	c	line:2810	language:C++	namespace:el::base::workarounds	inherits:IterableContainer<T,Container>,std::priority_queue<T,Container,Comparator>
IterableQueue	src/easylogging/easylogging++.h	/^  IterableQueue(std::queue<T, Container> queue_) {$/;"	f	line:2829	language:C++	class:el::base::workarounds::IterableQueue	access:public	signature:(std::queue<T,Container> queue_)
IterableQueue	src/easylogging/easylogging++.h	/^class IterableQueue : public IterableContainer<T, Container>, public std::queue<T, Container> {$/;"	c	line:2827	language:C++	namespace:el::base::workarounds	inherits:IterableContainer<T,Container>,std::queue<T,Container>
IterableStack	src/easylogging/easylogging++.h	/^  IterableStack(std::stack<T, Container> stack_) {$/;"	f	line:2845	language:C++	class:el::base::workarounds::IterableStack	access:public	signature:(std::stack<T,Container> stack_)
IterableStack	src/easylogging/easylogging++.h	/^class IterableStack : public IterableContainer<T, Container>, public std::stack<T, Container> {$/;"	c	line:2843	language:C++	namespace:el::base::workarounds	inherits:IterableContainer<T,Container>,std::stack<T,Container>
KEEP_ALIVE	src/http_parser/http_parser.cpp	/^#define KEEP_ALIVE /;"	d	line:172	language:C++	file:
LF	src/http_parser/http_parser.cpp	/^#define LF /;"	d	line:417	language:C++	file:
LIKELY	src/http_parser/http_parser.cpp	/^# define LIKELY(/;"	d	line:73	language:C++	file:	signature:(X)
LIKELY	src/http_parser/http_parser.cpp	/^# define LIKELY(/;"	d	line:76	language:C++	file:	signature:(X)
LOG	src/buffer/buffer.h	/^#define LOG(/;"	d	line:12	language:C++	signature:(level)
LOG	src/easylogging/easylogging++.h	/^#define LOG(/;"	d	line:4258	language:C++	signature:(LEVEL)
LOGGER_LEVEL_WRITERS	src/easylogging/easylogging++.h	/^#  define LOGGER_LEVEL_WRITERS(/;"	d	line:3328	language:C++	signature:(FUNCTION_NAME,LOG_LEVEL)
LOGGER_LEVEL_WRITERS_DISABLED	src/easylogging/easylogging++.h	/^#  define LOGGER_LEVEL_WRITERS_DISABLED(/;"	d	line:3337	language:C++	signature:(FUNCTION_NAME,LOG_LEVEL)
LOGGER_LEVEL_WRITERS_SIGNATURES	src/easylogging/easylogging++.h	/^#  define LOGGER_LEVEL_WRITERS_SIGNATURES(/;"	d	line:2276	language:C++	signature:(FUNCTION_NAME)
LOG_AFTER_N	src/easylogging/easylogging++.h	/^#define LOG_AFTER_N(/;"	d	line:4266	language:C++	signature:(n,LEVEL)
LOG_EVERY_N	src/easylogging/easylogging++.h	/^#define LOG_EVERY_N(/;"	d	line:4264	language:C++	signature:(n,LEVEL)
LOG_IF	src/easylogging/easylogging++.h	/^#define LOG_IF(/;"	d	line:4261	language:C++	signature:(condition,LEVEL)
LOG_N_TIMES	src/easylogging/easylogging++.h	/^#define LOG_N_TIMES(/;"	d	line:4268	language:C++	signature:(n,LEVEL)
LOWER	src/http_parser/http_parser.cpp	/^#define LOWER(/;"	d	line:418	language:C++	file:	signature:(c)
Large	src/design_patterns/basic/SOLID_Open_Close.h	/^enum class Size{Small, Medium, Large};$/;"	e	line:10	language:C++	enum:design_patterns::Size	access:public
Level	src/easylogging/easylogging++.h	/^  Level = 1 << 13,$/;"	e	line:828	language:C++	enum:el::base::FormatFlags	access:public
Level	src/easylogging/easylogging++.h	/^enum class Level : base::type::EnumType {$/;"	g	line:572	language:C++	namespace:el	typeref:typename:base::type::EnumType
LevelHelper	src/easylogging/easylogging++.h	/^class LevelHelper : base::StaticClass {$/;"	c	line:603	language:C++	namespace:el	inherits:base::StaticClass
LevelShort	src/easylogging/easylogging++.h	/^  LevelShort = 1 << 15$/;"	e	line:830	language:C++	enum:el::base::FormatFlags	access:public
Line	src/easylogging/easylogging++.h	/^  Line = 1 << 4,$/;"	e	line:819	language:C++	enum:el::base::FormatFlags	access:public
LineNumber	src/easylogging/easylogging++.h	/^typedef unsigned long int LineNumber;$/;"	t	line:540	language:C++	namespace:el::base::type	typeref:typename:unsigned long int
Location	src/easylogging/easylogging++.h	/^  Location = 1 << 5,$/;"	e	line:820	language:C++	enum:el::base::FormatFlags	access:public
LogBuilder	src/easylogging/easylogging++.h	/^  LogBuilder() : m_termSupportsColor(base::utils::OS::termSupportsColor()) {}$/;"	f	line:2197	language:C++	class:el::LogBuilder	access:public	signature:()
LogBuilder	src/easylogging/easylogging++.h	/^class LogBuilder : base::NoCopy {$/;"	c	line:2195	language:C++	namespace:el	inherits:base::NoCopy
LogBuilderPtr	src/easylogging/easylogging++.h	/^typedef std::shared_ptr<LogBuilder> LogBuilderPtr;$/;"	t	line:2207	language:C++	namespace:el	typeref:typename:std::shared_ptr<LogBuilder>
LogDetailedCrashReason	src/easylogging/easylogging++.h	/^  LogDetailedCrashReason = 4,$/;"	e	line:700	language:C++	enum:el::LoggingFlag	access:public
LogDispatchCallback	src/easylogging/easylogging++.h	/^class LogDispatchCallback : public Callback<LogDispatchData> {$/;"	c	line:2178	language:C++	namespace:el	inherits:Callback<LogDispatchData>
LogDispatchCallbackPtr	src/easylogging/easylogging++.h	/^typedef std::shared_ptr<LogDispatchCallback> LogDispatchCallbackPtr;$/;"	t	line:542	language:C++	namespace:el::base::type	typeref:typename:std::shared_ptr<LogDispatchCallback>
LogDispatchData	src/easylogging/easylogging++.h	/^  LogDispatchData() : m_logMessage(nullptr), m_dispatchAction(base::DispatchAction::None) {}$/;"	f	line:2159	language:C++	class:el::LogDispatchData	access:public	signature:()
LogDispatchData	src/easylogging/easylogging++.h	/^class LogDispatchData {$/;"	c	line:2157	language:C++	namespace:el
LogDispatcher	src/easylogging/easylogging++.h	/^  LogDispatcher(bool proceed, LogMessage* logMessage, base::DispatchAction dispatchAction) :$/;"	f	line:2770	language:C++	class:el::base::LogDispatcher	access:public	signature:(bool proceed,LogMessage * logMessage,base::DispatchAction dispatchAction)
LogDispatcher	src/easylogging/easylogging++.h	/^class LogDispatcher : base::NoCopy {$/;"	c	line:2768	language:C++	namespace:el::base	inherits:base::NoCopy
LogFlushThreshold	src/easylogging/easylogging++.h	/^  LogFlushThreshold = 256,$/;"	e	line:659	language:C++	enum:el::ConfigurationType	access:public
LogFormat	src/easylogging/easylogging++.cc	/^LogFormat::LogFormat(Level level, const base::type::string_t& format)$/;"	f	line:1444	language:C++	class:el::base::LogFormat	signature:(Level level,const base::type::string_t & format)
LogFormat	src/easylogging/easylogging++.cc	/^LogFormat::LogFormat(LogFormat&& logFormat) {$/;"	f	line:1460	language:C++	class:el::base::LogFormat	signature:(LogFormat && logFormat)
LogFormat	src/easylogging/easylogging++.cc	/^LogFormat::LogFormat(const LogFormat& logFormat):$/;"	f	line:1450	language:C++	class:el::base::LogFormat	signature:(const LogFormat & logFormat)
LogFormat	src/easylogging/easylogging++.cc	/^LogFormat::LogFormat(void) :$/;"	f	line:1434	language:C++	class:el::base::LogFormat	signature:(void)
LogFormat	src/easylogging/easylogging++.h	/^  LogFormat(Level level, const base::type::string_t& format);$/;"	p	line:1577	language:C++	class:el::base::LogFormat	access:public	signature:(Level level,const base::type::string_t & format)
LogFormat	src/easylogging/easylogging++.h	/^  LogFormat(LogFormat&& logFormat);$/;"	p	line:1579	language:C++	class:el::base::LogFormat	access:public	signature:(LogFormat && logFormat)
LogFormat	src/easylogging/easylogging++.h	/^  LogFormat(const LogFormat& logFormat);$/;"	p	line:1578	language:C++	class:el::base::LogFormat	access:public	signature:(const LogFormat & logFormat)
LogFormat	src/easylogging/easylogging++.h	/^  LogFormat(void);$/;"	p	line:1576	language:C++	class:el::base::LogFormat	access:public	signature:(void)
LogFormat	src/easylogging/easylogging++.h	/^class LogFormat : public Loggable {$/;"	c	line:1574	language:C++	namespace:el::base	inherits:Loggable
LogMessage	src/easylogging/easylogging++.h	/^  LogMessage = 1 << 9,$/;"	e	line:824	language:C++	enum:el::base::FormatFlags	access:public
LogMessage	src/easylogging/easylogging++.h	/^  LogMessage(Level level, const std::string& file, base::type::LineNumber line, const std::strin/;"	f	line:2454	language:C++	class:el::LogMessage	access:public	signature:(Level level,const std::string & file,base::type::LineNumber line,const std::string & func,base::type::VerboseLevel verboseLevel,Logger * logger)
LogMessage	src/easylogging/easylogging++.h	/^class LogMessage {$/;"	c	line:2452	language:C++	namespace:el
LogStreamsReferenceMap	src/easylogging/easylogging++.h	/^typedef std::unordered_map<std::string, FileStreamPtr> LogStreamsReferenceMap;$/;"	t	line:1895	language:C++	namespace:el::base	typeref:typename:std::unordered_map<std::string,FileStreamPtr>
Loggable	src/easylogging/easylogging++.h	/^class Loggable {$/;"	c	line:1562	language:C++	namespace:el
Logger	src/easylogging/easylogging++.cc	/^Logger::Logger(const Logger& logger) {$/;"	f	line:622	language:C++	class:el::Logger	signature:(const Logger & logger)
Logger	src/easylogging/easylogging++.cc	/^Logger::Logger(const std::string& id, base::LogStreamsReferenceMap* logStreamsReference) :$/;"	f	line:602	language:C++	class:el::Logger	signature:(const std::string & id,base::LogStreamsReferenceMap * logStreamsReference)
Logger	src/easylogging/easylogging++.cc	/^Logger::Logger(const std::string& id, const Configurations& configurations,$/;"	f	line:611	language:C++	class:el::Logger	signature:(const std::string & id,const Configurations & configurations,base::LogStreamsReferenceMap * logStreamsReference)
Logger	src/easylogging/easylogging++.h	/^  Logger(const Logger& logger);$/;"	p	line:2215	language:C++	class:el::Logger	access:public	signature:(const Logger & logger)
Logger	src/easylogging/easylogging++.h	/^  Logger(const std::string& id, base::LogStreamsReferenceMap* logStreamsReference);$/;"	p	line:2213	language:C++	class:el::Logger	access:public	signature:(const std::string & id,base::LogStreamsReferenceMap * logStreamsReference)
Logger	src/easylogging/easylogging++.h	/^  Logger(const std::string& id, const Configurations& configurations, base::LogStreamsReferenceM/;"	p	line:2214	language:C++	class:el::Logger	access:public	signature:(const std::string & id,const Configurations & configurations,base::LogStreamsReferenceMap * logStreamsReference)
Logger	src/easylogging/easylogging++.h	/^  Logger(void);$/;"	p	line:2319	language:C++	class:el::Logger	access:private	signature:(void)
Logger	src/easylogging/easylogging++.h	/^class Logger : public base::threading::ThreadSafe, public Loggable {$/;"	c	line:2211	language:C++	namespace:el	inherits:base::threading::ThreadSafe,Loggable
LoggerId	src/easylogging/easylogging++.h	/^  LoggerId = 1 << 2,$/;"	e	line:817	language:C++	enum:el::base::FormatFlags	access:public
LoggerRegistrationCallback	src/easylogging/easylogging++.h	/^class LoggerRegistrationCallback : public Callback<Logger> {$/;"	c	line:2191	language:C++	namespace:el	inherits:Callback<Logger>
LoggerRegistrationCallbackPtr	src/easylogging/easylogging++.h	/^typedef std::shared_ptr<LoggerRegistrationCallback> LoggerRegistrationCallbackPtr;$/;"	t	line:544	language:C++	namespace:el::base::type	typeref:typename:std::shared_ptr<LoggerRegistrationCallback>
Loggers	src/easylogging/easylogging++.h	/^class Loggers : base::StaticClass {$/;"	c	line:3780	language:C++	namespace:el	inherits:base::StaticClass
LoggingFlag	src/easylogging/easylogging++.h	/^enum class LoggingFlag : base::type::EnumType {$/;"	g	line:693	language:C++	namespace:el	typeref:typename:base::type::EnumType
MAKE_CONTAINERELPP_FRIENDLY	src/easylogging/easylogging++.h	/^#define MAKE_CONTAINERELPP_FRIENDLY(/;"	d	line:3109	language:C++	signature:(ContainerType,SizeMethod,ElementInstance)
MAKE_LOGGABLE	src/easylogging/easylogging++.h	/^#define MAKE_LOGGABLE(/;"	d	line:3628	language:C++	signature:(ClassType,ClassInstance,OutputStreamInstance)
MARK	src/http_parser/http_parser.cpp	/^#define MARK(/;"	d	line:138	language:C++	file:	signature:(FOR)
MAXIMUM_CHAIN_SIZE	src/buffer/buffer.h	/^    static const uint32_t MAXIMUM_CHAIN_SIZE = UINT32_MAX;$/;"	m	line:144	language:C++	class:buffer_chain	typeref:typename:const uint32_t	access:public
MAXIMUM_SIZE_WHEN_EXPAND	src/buffer/buffer.h	/^    static const uint32_t MAXIMUM_SIZE_WHEN_EXPAND = 4096;$/;"	m	line:145	language:C++	class:buffer_chain	typeref:typename:const uint32_t	access:public
MAX_CAPACITY	src/bytebuf/bytebuf.h	/^    static const unsigned int MAX_CAPACITY = INT32_MAX;$/;"	m	line:17	language:C++	class:bytebuf	typeref:typename:const unsigned int	access:public
MAX_HASH_VALUE	src/gperf/HttpCommomHeadersHash.h	/^#define MAX_HASH_VALUE /;"	d	line:19	language:C++
MAX_HEADER_LENGTH	src/http/HttpCommomHeaders.h	/^    static const size_t MAX_HEADER_LENGTH = MAX_WORD_LENGTH;$/;"	m	line:21	language:C++	class:http::HttpCommomHeaders	typeref:typename:const size_t	access:public
MAX_WORD_LENGTH	src/gperf/HttpCommomHeadersHash.h	/^#define MAX_WORD_LENGTH /;"	d	line:17	language:C++
MAYBEMONAD_H	src/design_patterns/basic/maybemonad.h	/^#define MAYBEMONAD_H$/;"	d	line:2	language:C++
MIN	src/http_parser/http_parser.cpp	/^# define MIN(/;"	d	line:37	language:C++	file:	signature:(a,b)
MIN_HASH_VALUE	src/gperf/HttpCommomHeadersHash.h	/^#define MIN_HASH_VALUE /;"	d	line:18	language:C++
MIN_HEADER_LENGTH	src/http/HttpCommomHeaders.h	/^    static const size_t MIN_HEADER_LENGTH = MIN_WORD_LENGTH;$/;"	m	line:22	language:C++	class:http::HttpCommomHeaders	typeref:typename:const size_t	access:public
MIN_WORD_LENGTH	src/gperf/HttpCommomHeadersHash.h	/^#define MIN_WORD_LENGTH /;"	d	line:16	language:C++
MaxLogFileSize	src/easylogging/easylogging++.h	/^  MaxLogFileSize = 128,$/;"	e	line:657	language:C++	enum:el::ConfigurationType	access:public
Maybe	src/design_patterns/basic/maybemonad.h	/^    explicit Maybe(T* const context) : context_(context){}$/;"	f	line:24	language:C++	class:design_patterns::Maybe	access:public	signature:(T * const context)
Maybe	src/design_patterns/basic/maybemonad.h	/^class Maybe{$/;"	c	line:22	language:C++	namespace:design_patterns
Medium	src/design_patterns/basic/SOLID_Open_Close.h	/^enum class Size{Small, Medium, Large};$/;"	e	line:10	language:C++	enum:design_patterns::Size	access:public
MergeNode	src/al/merge.h	/^    MergeNode(double value, int index) : value(value), indexInArray(index){}$/;"	f	line:34	language:C++	struct:al::MergeNode	access:public	signature:(double value,int index)
MergeNode	src/al/merge.h	/^struct MergeNode$/;"	s	line:32	language:C++	namespace:al
MessageBuilder	src/easylogging/easylogging++.h	/^  MessageBuilder(void) : m_logger(nullptr), m_containerLogSeperator(ELPP_LITERAL("")) {}$/;"	f	line:2862	language:C++	class:el::base::MessageBuilder	access:public	signature:(void)
MessageBuilder	src/easylogging/easylogging++.h	/^class MessageBuilder {$/;"	c	line:2860	language:C++	namespace:el::base
Microsecond	src/easylogging/easylogging++.h	/^  Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	e	line:812	language:C++	enum:el::base::TimestampUnit	access:public
Millisecond	src/easylogging/easylogging++.h	/^  Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	e	line:812	language:C++	enum:el::base::TimestampUnit	access:public
MillisecondsWidth	src/easylogging/easylogging++.h	/^  MillisecondsWidth = SubsecondPrecision,$/;"	e	line:648	language:C++	enum:el::ConfigurationType	access:public
MillisecondsWidth	src/easylogging/easylogging++.h	/^typedef SubsecondPrecision MillisecondsWidth;$/;"	t	line:850	language:C++	namespace:el::base	typeref:typename:SubsecondPrecision
MinHeap	src/al/MinHeap.h	/^    explicit MinHeap() : container_(){}$/;"	f	line:18	language:C++	class:al::MinHeap	access:public	signature:()
MinHeap	src/al/MinHeap.h	/^class MinHeap$/;"	c	line:12	language:C++	namespace:al
Minute	src/easylogging/easylogging++.h	/^  Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	e	line:812	language:C++	enum:el::base::TimestampUnit	access:public
Monad_test	src/design_patterns/basic/maybemonad.h	/^void Monad_test()$/;"	f	line:53	language:C++	namespace:design_patterns	typeref:typename:void	signature:()
MultiLoggerSupport	src/easylogging/easylogging++.h	/^  MultiLoggerSupport = 128,$/;"	e	line:710	language:C++	enum:el::LoggingFlag	access:public
Mutex	src/easylogging/easylogging++.h	/^  Mutex(void) {$/;"	f	line:899	language:C++	class:el::base::threading::internal::Mutex	access:public	signature:(void)
Mutex	src/easylogging/easylogging++.h	/^class Mutex : base::NoCopy {$/;"	c	line:897	language:C++	namespace:el::base::threading::internal	inherits:base::NoCopy
Mutex	src/easylogging/easylogging++.h	/^typedef base::threading::internal::Mutex Mutex;$/;"	t	line:967	language:C++	namespace:el::base::threading	typeref:typename:base::threading::internal::Mutex
MyNode	src/tests/tests.h	/^        MyNode(int size) : size_(size) {}$/;"	f	line:310	language:C++	struct:intrusive_using_base_hook_test::MyNode	access:public	signature:(int size)
MyNode	src/tests/tests.h	/^    struct MyNode : public list_hook_type \/\/void* as pointer type$/;"	s	line:308	language:C++	function:intrusive_using_base_hook_test	inherits:list_hook_type
MySQLGno	src/mysql_gtid/mysql_gtid.h	/^using MySQLGno = long long int;$/;"	t	line:14	language:C++	typeref:typename:long long int
MySQLGtid	src/mysql_gtid/mysql_gtid.h	/^struct MySQLGtid {$/;"	s	line:41	language:C++
MySQLGtid::gno	src/mysql_gtid/mysql_gtid.h	/^  MySQLGno gno;$/;"	m	line:42	language:C++	struct:MySQLGtid	typeref:typename:MySQLGno	access:public
MySQLGtid::sidno	src/mysql_gtid/mysql_gtid.h	/^  MySQLSidno sidno;$/;"	m	line:43	language:C++	struct:MySQLGtid	typeref:typename:MySQLSidno	access:public
MySQLGtidSet	src/mysql_gtid/mysql_gtid.h	/^  MySQLGtidSet(MySQLSidMap *sid_map);$/;"	p	line:75	language:C++	class:MySQLGtidSet	access:public	signature:(MySQLSidMap * sid_map)
MySQLGtidSet	src/mysql_gtid/mysql_gtid.h	/^  MySQLGtidSet(boost::shared_ptr<MySQLSidMap> sid_map) : _sid_map(sid_map) {}$/;"	f	line:68	language:C++	class:MySQLGtidSet	access:public	signature:(boost::shared_ptr<MySQLSidMap> sid_map)
MySQLGtidSet	src/mysql_gtid/mysql_gtid.h	/^class MySQLGtidSet$/;"	c	line:65	language:C++
MySQLGtidSet::Interval	src/mysql_gtid/mysql_gtid.h	/^  struct Interval {$/;"	s	line:69	language:C++	class:MySQLGtidSet	access:public
MySQLGtidSet::Interval::begin	src/mysql_gtid/mysql_gtid.h	/^    MySQLGno begin;$/;"	m	line:70	language:C++	struct:MySQLGtidSet::Interval	typeref:typename:MySQLGno	access:public
MySQLGtidSet::Interval::end	src/mysql_gtid/mysql_gtid.h	/^    MySQLGno end;$/;"	m	line:71	language:C++	struct:MySQLGtidSet::Interval	typeref:typename:MySQLGno	access:public
MySQLGtidSet::IntervalList	src/mysql_gtid/mysql_gtid.h	/^  using IntervalList = std::list<IntervalPtr>;$/;"	t	line:74	language:C++	class:MySQLGtidSet	typeref:typename:std::list<IntervalPtr>	access:public
MySQLGtidSet::IntervalPtr	src/mysql_gtid/mysql_gtid.h	/^  using IntervalPtr = boost::shared_ptr<Interval>;$/;"	t	line:73	language:C++	class:MySQLGtidSet	typeref:typename:boost::shared_ptr<Interval>	access:public
MySQLGtidSet::MySQLGtidSet	src/mysql_gtid/mysql_gtid.h	/^  MySQLGtidSet(MySQLSidMap *sid_map);$/;"	p	line:75	language:C++	class:MySQLGtidSet	access:public	signature:(MySQLSidMap * sid_map)
MySQLGtidSet::MySQLGtidSet	src/mysql_gtid/mysql_gtid.h	/^  MySQLGtidSet(boost::shared_ptr<MySQLSidMap> sid_map) : _sid_map(sid_map) {}$/;"	f	line:68	language:C++	class:MySQLGtidSet	access:public	signature:(boost::shared_ptr<MySQLSidMap> sid_map)
MySQLGtidSet::_intervals	src/mysql_gtid/mysql_gtid.h	/^  std::vector<IntervalList> _intervals;$/;"	m	line:92	language:C++	class:MySQLGtidSet	typeref:typename:std::vector<IntervalList>	access:private
MySQLGtidSet::_sid_map	src/mysql_gtid/mysql_gtid.h	/^  boost::shared_ptr<MySQLSidMap> _sid_map;$/;"	m	line:91	language:C++	class:MySQLGtidSet	typeref:typename:boost::shared_ptr<MySQLSidMap>	access:private
MySQLGtidSet::add_gno_interval	src/mysql_gtid/mysql_gtid.cpp	/^void MySQLGtidSet::add_gno_interval(MySQLGno begin, MySQLGno end, MySQLSidno sidno)$/;"	f	line:155	language:C++	class:MySQLGtidSet	typeref:typename:void	signature:(MySQLGno begin,MySQLGno end,MySQLSidno sidno)
MySQLGtidSet::add_gno_interval	src/mysql_gtid/mysql_gtid.h	/^  void add_gno_interval(MySQLGno begin, MySQLGno end, MySQLSidno sidno);$/;"	p	line:77	language:C++	class:MySQLGtidSet	typeref:typename:void	access:public	signature:(MySQLGno begin,MySQLGno end,MySQLSidno sidno)
MySQLGtidSet::add_gtid_text	src/mysql_gtid/mysql_gtid.cpp	/^int MySQLGtidSet::add_gtid_text(const char *text) {$/;"	f	line:95	language:C++	class:MySQLGtidSet	typeref:typename:int	signature:(const char * text)
MySQLGtidSet::add_gtid_text	src/mysql_gtid/mysql_gtid.h	/^  int add_gtid_text(const char *text);$/;"	p	line:76	language:C++	class:MySQLGtidSet	typeref:typename:int	access:public	signature:(const char * text)
MySQLGtidSet::contains_sidno	src/mysql_gtid/mysql_gtid.cpp	/^bool MySQLGtidSet::contains_sidno(MySQLSidno sidno) const {$/;"	f	line:192	language:C++	class:MySQLGtidSet	typeref:typename:bool	signature:(MySQLSidno sidno) const
MySQLGtidSet::contains_sidno	src/mysql_gtid/mysql_gtid.h	/^  bool contains_sidno(MySQLSidno sidno) const;$/;"	p	line:89	language:C++	class:MySQLGtidSet	typeref:typename:bool	access:private	signature:(MySQLSidno sidno) const
MySQLGtidSet::get_intervals	src/mysql_gtid/mysql_gtid.h	/^  const IntervalList &get_intervals(MySQLSidno sidno) const {$/;"	f	line:79	language:C++	class:MySQLGtidSet	typeref:typename:const IntervalList &	access:public	signature:(MySQLSidno sidno) const
MySQLGtidSet::remove_gno_interval	src/mysql_gtid/mysql_gtid.cpp	/^void MySQLGtidSet::remove_gno_interval(IntervalList::iterator it,$/;"	f	line:251	language:C++	class:MySQLGtidSet	typeref:typename:void	signature:(IntervalList::iterator it,MySQLGno begin,MySQLGno end)
MySQLGtidSet::remove_gno_interval	src/mysql_gtid/mysql_gtid.h	/^  void remove_gno_interval(IntervalList::iterator it, MySQLGno begin,$/;"	p	line:85	language:C++	class:MySQLGtidSet	typeref:typename:void	access:public	signature:(IntervalList::iterator it,MySQLGno begin,MySQLGno end)
MySQLGtidSet::remove_gno_intervals	src/mysql_gtid/mysql_gtid.cpp	/^void MySQLGtidSet::remove_gno_intervals(MySQLSidno sidno, const MySQLGtidSet& other)$/;"	f	line:240	language:C++	class:MySQLGtidSet	typeref:typename:void	signature:(MySQLSidno sidno,const MySQLGtidSet & other)
MySQLGtidSet::remove_gno_intervals	src/mysql_gtid/mysql_gtid.h	/^  void remove_gno_intervals(MySQLSidno sidno, const MySQLGtidSet& other);$/;"	p	line:83	language:C++	class:MySQLGtidSet	typeref:typename:void	access:public	signature:(MySQLSidno sidno,const MySQLGtidSet & other)
MySQLGtidSet::remove_gtid_set	src/mysql_gtid/mysql_gtid.cpp	/^void MySQLGtidSet::remove_gtid_set(const MySQLGtidSet& other)$/;"	f	line:227	language:C++	class:MySQLGtidSet	typeref:typename:void	signature:(const MySQLGtidSet & other)
MySQLGtidSet::remove_gtid_set	src/mysql_gtid/mysql_gtid.h	/^  void remove_gtid_set(const MySQLGtidSet &gtid_set);$/;"	p	line:82	language:C++	class:MySQLGtidSet	typeref:typename:void	access:public	signature:(const MySQLGtidSet & gtid_set)
MySQLGtidSet::to_string	src/mysql_gtid/mysql_gtid.cpp	/^std::string MySQLGtidSet::to_string() const {$/;"	f	line:197	language:C++	class:MySQLGtidSet	typeref:typename:std::string	signature:() const
MySQLGtidSet::to_string	src/mysql_gtid/mysql_gtid.h	/^  std::string to_string() const;$/;"	p	line:78	language:C++	class:MySQLGtidSet	typeref:typename:std::string	access:public	signature:() const
MySQLSid	src/mysql_gtid/mysql_gtid.h	/^using MySQLSid = MySQLUuid;$/;"	t	line:39	language:C++	typeref:typename:MySQLUuid
MySQLSidMap	src/mysql_gtid/mysql_gtid.h	/^class MySQLSidMap {$/;"	c	line:46	language:C++
MySQLSidMap::Node	src/mysql_gtid/mysql_gtid.h	/^  struct Node {$/;"	s	line:48	language:C++	class:MySQLSidMap	access:public
MySQLSidMap::Node::sid	src/mysql_gtid/mysql_gtid.h	/^    MySQLSid sid;$/;"	m	line:50	language:C++	struct:MySQLSidMap::Node	typeref:typename:MySQLSid	access:public
MySQLSidMap::Node::sidno	src/mysql_gtid/mysql_gtid.h	/^    MySQLSidno sidno;$/;"	m	line:49	language:C++	struct:MySQLSidMap::Node	typeref:typename:MySQLSidno	access:public
MySQLSidMap::NodePtr	src/mysql_gtid/mysql_gtid.h	/^  using NodePtr = boost::shared_ptr<Node>;$/;"	t	line:52	language:C++	class:MySQLSidMap	typeref:typename:boost::shared_ptr<Node>	access:public
MySQLSidMap::SidSidnoMap	src/mysql_gtid/mysql_gtid.h	/^  using SidSidnoMap = boost::unordered_map<MySQLSid, NodePtr, MySQLUuidHash>;$/;"	t	line:53	language:C++	class:MySQLSidMap	typeref:typename:boost::unordered_map<MySQLSid,NodePtr,MySQLUuidHash>	access:public
MySQLSidMap::SidnoSidMap	src/mysql_gtid/mysql_gtid.h	/^  using SidnoSidMap = std::vector<NodePtr>;$/;"	t	line:54	language:C++	class:MySQLSidMap	typeref:typename:std::vector<NodePtr>	access:public
MySQLSidMap::_sid_sidno_map	src/mysql_gtid/mysql_gtid.h	/^  SidSidnoMap _sid_sidno_map;$/;"	m	line:61	language:C++	class:MySQLSidMap	typeref:typename:SidSidnoMap	access:private
MySQLSidMap::_sidno_sid_map	src/mysql_gtid/mysql_gtid.h	/^  SidnoSidMap _sidno_sid_map;$/;"	m	line:62	language:C++	class:MySQLSidMap	typeref:typename:SidnoSidMap	access:private
MySQLSidMap::add_node	src/mysql_gtid/mysql_gtid.cpp	/^int MySQLSidMap::add_node(MySQLSidno sidno, const MySQLSid& sid)$/;"	f	line:75	language:C++	class:MySQLSidMap	typeref:typename:int	signature:(MySQLSidno sidno,const MySQLSid & sid)
MySQLSidMap::add_node	src/mysql_gtid/mysql_gtid.h	/^  int add_node(MySQLSidno sidno, const MySQLSid& sid);$/;"	p	line:60	language:C++	class:MySQLSidMap	typeref:typename:int	access:private	signature:(MySQLSidno sidno,const MySQLSid & sid)
MySQLSidMap::add_sid	src/mysql_gtid/mysql_gtid.cpp	/^MySQLSidno MySQLSidMap::add_sid(const MySQLSid &sid) {$/;"	f	line:63	language:C++	class:MySQLSidMap	typeref:typename:MySQLSidno	signature:(const MySQLSid & sid)
MySQLSidMap::add_sid	src/mysql_gtid/mysql_gtid.h	/^  MySQLSidno add_sid(const MySQLSid& sid);$/;"	p	line:55	language:C++	class:MySQLSidMap	typeref:typename:MySQLSidno	access:public	signature:(const MySQLSid & sid)
MySQLSidMap::get_max_sidno	src/mysql_gtid/mysql_gtid.h	/^  MySQLSidno get_max_sidno() const { return _sid_sidno_map.size();}$/;"	f	line:58	language:C++	class:MySQLSidMap	typeref:typename:MySQLSidno	access:public	signature:() const
MySQLSidMap::sid_to_sidno	src/mysql_gtid/mysql_gtid.cpp	/^MySQLSidno MySQLSidMap::sid_to_sidno(const MySQLSid& sid) const$/;"	f	line:85	language:C++	class:MySQLSidMap	typeref:typename:MySQLSidno	signature:(const MySQLSid & sid) const
MySQLSidMap::sid_to_sidno	src/mysql_gtid/mysql_gtid.h	/^  MySQLSidno sid_to_sidno(const MySQLSid& sid) const;$/;"	p	line:56	language:C++	class:MySQLSidMap	typeref:typename:MySQLSidno	access:public	signature:(const MySQLSid & sid) const
MySQLSidMap::sidno_to_sid	src/mysql_gtid/mysql_gtid.cpp	/^const MySQLSid& MySQLSidMap::sidno_to_sid(MySQLSidno sidno) const$/;"	f	line:89	language:C++	class:MySQLSidMap	typeref:typename:const MySQLSid &	signature:(MySQLSidno sidno) const
MySQLSidMap::sidno_to_sid	src/mysql_gtid/mysql_gtid.h	/^  const MySQLSid& sidno_to_sid(MySQLSidno sidno) const;$/;"	p	line:57	language:C++	class:MySQLSidMap	typeref:typename:const MySQLSid &	access:public	signature:(MySQLSidno sidno) const
MySQLSidno	src/mysql_gtid/mysql_gtid.h	/^using MySQLSidno = int;$/;"	t	line:15	language:C++	typeref:typename:int
MySQLUuid	src/mysql_gtid/mysql_gtid.h	/^struct MySQLUuid$/;"	s	line:18	language:C++
MySQLUuid::SECTION_NUM	src/mysql_gtid/mysql_gtid.h	/^  static const unsigned int SECTION_NUM = 5;$/;"	m	line:22	language:C++	struct:MySQLUuid	typeref:typename:const unsigned int	access:public
MySQLUuid::StringT	src/mysql_gtid/mysql_gtid.h	/^  using StringT = std::string;$/;"	t	line:20	language:C++	struct:MySQLUuid	typeref:typename:std::string	access:public
MySQLUuid::TEXT_LENGTH	src/mysql_gtid/mysql_gtid.h	/^  static const unsigned int TEXT_LENGTH = 36;$/;"	m	line:21	language:C++	struct:MySQLUuid	typeref:typename:const unsigned int	access:public
MySQLUuid::UUID_LENGTH	src/mysql_gtid/mysql_gtid.h	/^  static const unsigned int UUID_LENGTH = 32;$/;"	m	line:24	language:C++	struct:MySQLUuid	typeref:typename:const unsigned int	access:public
MySQLUuid::bytes_per_section	src/mysql_gtid/mysql_gtid.cpp	/^const int MySQLUuid::bytes_per_section[MySQLUuid::SECTION_NUM] = {8, 4, 4, 4,$/;"	m	line:7	language:C++	class:MySQLUuid	typeref:typename:const int[]
MySQLUuid::bytes_per_section	src/mysql_gtid/mysql_gtid.h	/^  static const int bytes_per_section[SECTION_NUM];$/;"	m	line:23	language:C++	struct:MySQLUuid	typeref:typename:const int[]	access:public
MySQLUuid::parse	src/mysql_gtid/mysql_gtid.cpp	/^int MySQLUuid::parse(const char *text, unsigned int len) {$/;"	f	line:21	language:C++	class:MySQLUuid	typeref:typename:int	signature:(const char * text,unsigned int len)
MySQLUuid::parse	src/mysql_gtid/mysql_gtid.h	/^  int parse(const char* text, unsigned int len);$/;"	p	line:26	language:C++	struct:MySQLUuid	typeref:typename:int	access:public	signature:(const char * text,unsigned int len)
MySQLUuid::read_section	src/mysql_gtid/mysql_gtid.cpp	/^int MySQLUuid::read_section(unsigned char **start, unsigned int section_len,$/;"	f	line:40	language:C++	class:MySQLUuid	typeref:typename:int	signature:(unsigned char ** start,unsigned int section_len,const char ** text)
MySQLUuid::read_section	src/mysql_gtid/mysql_gtid.h	/^  int read_section(unsigned char** start, unsigned int section_len, const char** text);$/;"	p	line:27	language:C++	struct:MySQLUuid	typeref:typename:int	access:public	signature:(unsigned char ** start,unsigned int section_len,const char ** text)
MySQLUuid::to_string	src/mysql_gtid/mysql_gtid.cpp	/^MySQLUuid::StringT MySQLUuid::to_string() const$/;"	f	line:50	language:C++	class:MySQLUuid	typeref:typename:MySQLUuid::StringT	signature:() const
MySQLUuid::to_string	src/mysql_gtid/mysql_gtid.h	/^  StringT to_string() const;$/;"	p	line:28	language:C++	struct:MySQLUuid	typeref:typename:StringT	access:public	signature:() const
MySQLUuid::uuid	src/mysql_gtid/mysql_gtid.h	/^  unsigned char uuid[UUID_LENGTH];$/;"	m	line:25	language:C++	struct:MySQLUuid	typeref:typename:unsigned char[]	access:public
MySQLUuidHash	src/mysql_gtid/mysql_gtid.h	/^struct MySQLUuidHash {$/;"	s	line:34	language:C++
MySQLUuidHash::operator ()	src/mysql_gtid/mysql_gtid.h	/^  size_t operator()(const MySQLUuid& uuid) const {$/;"	f	line:35	language:C++	struct:MySQLUuidHash	typeref:typename:size_t	access:public	signature:(const MySQLUuid & uuid) const
MyTag	src/tests/tests.h	/^    class MyTag$/;"	c	line:303	language:C++	function:intrusive_using_base_hook_test
NEW_MESSAGE	src/http_parser/http_parser.cpp	/^# define NEW_MESSAGE(/;"	d	line:462	language:C++	file:	signature:()
NEW_MESSAGE	src/http_parser/http_parser.cpp	/^# define NEW_MESSAGE(/;"	d	line:465	language:C++	file:	signature:()
NOTDestructable	test/http_parser/http_parser_test.cpp	/^class NOTDestructable$/;"	c	line:19	language:C++	namespace:http_parser_test	file:
NULL_ITER	src/buffer/buffer.h	/^    static const            	buffer_iter NULL_ITER;$/;"	m	line:63	language:C++	class:buffer_iter	typeref:typename:const buffer_iter	access:public
NestedClass	src/tests/tests.h	/^    struct NestedClass$/;"	s	line:350	language:C++	struct:ClassWithNestedClass	access:public
NewCreature	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    NewCreature(Game& game, const string& name, int attack, int defence)$/;"	f	line:36	language:C++	struct:design_patterns::NewCreature	access:public	signature:(Game & game,const string & name,int attack,int defence)
NewCreature	src/design_patterns/chain_of_responsibility/broke_chain.h	/^struct NewCreature$/;"	s	line:34	language:C++	namespace:design_patterns
NewCreatureModifier	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    NewCreatureModifier(Game& game, NewCreature& creature) $/;"	f	line:70	language:C++	struct:design_patterns::NewCreatureModifier	access:public	signature:(Game & game,NewCreature & creature)
NewCreatureModifier	src/design_patterns/chain_of_responsibility/broke_chain.h	/^struct NewCreatureModifier$/;"	s	line:68	language:C++	namespace:design_patterns
NewLineForContainer	src/easylogging/easylogging++.h	/^  NewLineForContainer = 1,$/;"	e	line:695	language:C++	enum:el::LoggingFlag	access:public
NoCopy	src/easylogging/easylogging++.h	/^  NoCopy(const NoCopy&);$/;"	p	line:554	language:C++	class:el::base::NoCopy	access:private	signature:(const NoCopy &)
NoCopy	src/easylogging/easylogging++.h	/^  NoCopy(void) {}$/;"	f	line:552	language:C++	class:el::base::NoCopy	access:protected	signature:(void)
NoCopy	src/easylogging/easylogging++.h	/^class NoCopy {$/;"	c	line:550	language:C++	namespace:el::base
Node	src/mysql_gtid/mysql_gtid.h	/^  struct Node {$/;"	s	line:48	language:C++	class:MySQLSidMap	access:public
Node	src/tests/tests.h	/^    Node(size_t size) : size_(size) {}$/;"	f	line:287	language:C++	struct:Node	access:public	signature:(size_t size)
Node	src/tests/tests.h	/^struct Node : public boost::intrusive::list_base_hook<>$/;"	s	line:285	language:C++	inherits:boost::intrusive::list_base_hook<>
Node::Node	src/tests/tests.h	/^    Node(size_t size) : size_(size) {}$/;"	f	line:287	language:C++	struct:Node	access:public	signature:(size_t size)
Node::size_	src/tests/tests.h	/^    size_t size_;$/;"	m	line:288	language:C++	struct:Node	typeref:typename:size_t	access:public
NodePtr	src/mysql_gtid/mysql_gtid.h	/^  using NodePtr = boost::shared_ptr<Node>;$/;"	t	line:52	language:C++	class:MySQLSidMap	typeref:typename:boost::shared_ptr<Node>	access:public
None	src/easylogging/easylogging++.h	/^  None = 1, NormalLog = 2, SysLog = 4$/;"	e	line:2138	language:C++	enum:el::base::DispatchAction	access:public
NormalLog	src/easylogging/easylogging++.h	/^  None = 1, NormalLog = 2, SysLog = 4$/;"	e	line:2138	language:C++	enum:el::base::DispatchAction	access:public
Not	src/easylogging/easylogging++.h	/^static inline base::type::EnumType Not(Enum e, base::type::EnumType flag) {$/;"	f	line:871	language:C++	namespace:el::base::utils::bitwise	typeref:typename:base::type::EnumType	signature:(Enum e,base::type::EnumType flag)
NotDefaultConstructableClass	test/http_parser/http_parser_test.cpp	/^    NotDefaultConstructableClass(int){}$/;"	f	line:16	language:C++	class:http_parser_test::NotDefaultConstructableClass	file:	access:public	signature:(int)
NotDefaultConstructableClass	test/http_parser/http_parser_test.cpp	/^class NotDefaultConstructableClass$/;"	c	line:13	language:C++	namespace:http_parser_test	file:
NullWriter	src/easylogging/easylogging++.h	/^  NullWriter(void) {}$/;"	f	line:3171	language:C++	class:el::base::NullWriter	access:public	signature:(void)
NullWriter	src/easylogging/easylogging++.h	/^class NullWriter : base::NoCopy {$/;"	c	line:3169	language:C++	namespace:el::base	inherits:base::NoCopy
OC_test	src/design_patterns/basic/SOLID_Open_Close.h	/^void OC_test()$/;"	f	line:102	language:C++	namespace:design_patterns	typeref:typename:void	signature:()
OS	src/easylogging/easylogging++.h	/^class OS : base::StaticClass {$/;"	c	line:1136	language:C++	namespace:el::base::utils	inherits:base::StaticClass
Or	src/easylogging/easylogging++.h	/^static inline base::type::EnumType Or(Enum e, base::type::EnumType flag) {$/;"	f	line:875	language:C++	namespace:el::base::utils::bitwise	typeref:typename:base::type::EnumType	signature:(Enum e,base::type::EnumType flag)
P	src/design_patterns/builder/groovy_builder.h	/^    P(initializer_list<Tag> children) : Tag("p", "", children)$/;"	f	line:22	language:C++	struct:design_patterns::P	access:public	signature:(initializer_list<Tag> children)
P	src/design_patterns/builder/groovy_builder.h	/^struct P : public Tag$/;"	s	line:20	language:C++	namespace:design_patterns	inherits:Tag
PARSING_HEADER	src/http_parser/http_parser.cpp	/^#define PARSING_HEADER(/;"	d	line:364	language:C++	file:	signature:(state)
PCHECK	src/easylogging/easylogging++.h	/^#define PCHECK(/;"	d	line:4447	language:C++	signature:(condition)
PERFORMANCE_CHECKPOINT	src/easylogging/easylogging++.h	/^#define PERFORMANCE_CHECKPOINT(/;"	d	line:3936	language:C++	signature:(obj)
PERFORMANCE_CHECKPOINT_WITH_ID	src/easylogging/easylogging++.h	/^#define PERFORMANCE_CHECKPOINT_WITH_ID(/;"	d	line:3937	language:C++	signature:(obj,id)
PErrorWriter	src/easylogging/easylogging++.h	/^  PErrorWriter(Level level, const char* file, base::type::LineNumber line,$/;"	f	line:3251	language:C++	class:el::base::PErrorWriter	access:public	signature:(Level level,const char * file,base::type::LineNumber line,const char * func,base::DispatchAction dispatchAction=base::DispatchAction::NormalLog,base::type::VerboseLevel verboseLevel=0)
PErrorWriter	src/easylogging/easylogging++.h	/^class PErrorWriter : public base::Writer {$/;"	c	line:3249	language:C++	namespace:el::base	inherits:base::Writer
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID /;"	d	line:364	language:C++	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID /;"	d	line:367	language:C++	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID /;"	d	line:370	language:C++	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID /;"	d	line:373	language:C++	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID /;"	d	line:376	language:C++	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	line:288	language:C++	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	line:291	language:C++	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	line:294	language:C++	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	line:297	language:C++	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	line:300	language:C++	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	line:303	language:C++	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	line:306	language:C++	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	line:309	language:C++	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	line:312	language:C++	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	line:315	language:C++	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	line:318	language:C++	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	line:321	language:C++	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	line:324	language:C++	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	line:327	language:C++	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	line:330	language:C++	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	line:333	language:C++	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	line:336	language:C++	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	line:339	language:C++	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	line:342	language:C++	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	line:345	language:C++	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	line:348	language:C++	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	line:351	language:C++	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	line:354	language:C++	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	line:357	language:C++	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	line:360	language:C++	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	line:380	language:C++	file:
PLOG	src/easylogging/easylogging++.h	/^#define PLOG(/;"	d	line:4287	language:C++	signature:(LEVEL)
PLOG_IF	src/easylogging/easylogging++.h	/^#define PLOG_IF(/;"	d	line:4288	language:C++	signature:(condition,LEVEL)
PROXY_CONNECTION	src/http_parser/http_parser.cpp	/^#define PROXY_CONNECTION /;"	d	line:166	language:C++	file:
Parser	src/easylogging/easylogging++.h	/^  class Parser : base::StaticClass {$/;"	c	line:1838	language:C++	class:el::Configurations	inherits:base::StaticClass	access:public
PerformanceTracker	src/easylogging/easylogging++.cc	/^PerformanceTracker::PerformanceTracker(const std::string& blockName,$/;"	f	line:2672	language:C++	class:el::base::PerformanceTracker	signature:(const std::string & blockName,base::TimestampUnit timestampUnit,const std::string & loggerId,bool scopedLog,Level level)
PerformanceTracker	src/easylogging/easylogging++.h	/^  PerformanceTracker(const PerformanceTracker& t) :$/;"	f	line:3470	language:C++	class:el::base::PerformanceTracker	access:public	signature:(const PerformanceTracker & t)
PerformanceTracker	src/easylogging/easylogging++.h	/^  PerformanceTracker(const std::string& blockName,$/;"	p	line:3465	language:C++	class:el::base::PerformanceTracker	access:public	signature:(const std::string & blockName,base::TimestampUnit timestampUnit=base::TimestampUnit::Millisecond,const std::string & loggerId=std::string (el::base::consts::kPerformanceLoggerId),bool scopedLog=true,Level level=base::consts::kPerformanceTrackerDefaultLevel)
PerformanceTracker	src/easylogging/easylogging++.h	/^  PerformanceTracker(void);$/;"	p	line:3494	language:C++	class:el::base::PerformanceTracker	access:private	signature:(void)
PerformanceTracker	src/easylogging/easylogging++.h	/^class PerformanceTracker : public base::threading::ThreadSafe, public Loggable {$/;"	c	line:3463	language:C++	namespace:el::base	inherits:base::threading::ThreadSafe,Loggable
PerformanceTrackerPtr	src/easylogging/easylogging++.h	/^typedef std::unique_ptr<el::base::PerformanceTracker> PerformanceTrackerPtr;$/;"	t	line:545	language:C++	namespace:el::base::type	typeref:typename:std::unique_ptr<el::base::PerformanceTracker>
PerformanceTracking	src/easylogging/easylogging++.h	/^  PerformanceTracking = 64,$/;"	e	line:652	language:C++	enum:el::ConfigurationType	access:public
PerformanceTrackingCallback	src/easylogging/easylogging++.h	/^class PerformanceTrackingCallback : public Callback<PerformanceTrackingData> {$/;"	c	line:2187	language:C++	namespace:el	inherits:Callback<PerformanceTrackingData>
PerformanceTrackingCallbackPtr	src/easylogging/easylogging++.h	/^typedef std::shared_ptr<PerformanceTrackingCallback> PerformanceTrackingCallbackPtr;$/;"	t	line:543	language:C++	namespace:el::base::type	typeref:typename:std::shared_ptr<PerformanceTrackingCallback>
PerformanceTrackingData	src/easylogging/easylogging++.h	/^  explicit PerformanceTrackingData(DataType dataType) : m_performanceTracker(nullptr),$/;"	f	line:3413	language:C++	class:el::PerformanceTrackingData	access:public	signature:(DataType dataType)
PerformanceTrackingData	src/easylogging/easylogging++.h	/^class PerformanceTrackingData {$/;"	c	line:3407	language:C++	namespace:el
Person	src/design_patterns/basic/maybemonad.h	/^    Person(){}$/;"	f	line:16	language:C++	struct:design_patterns::Person	access:public	signature:()
Person	src/design_patterns/basic/maybemonad.h	/^    explicit Person(Address* addr) : addr(addr){}$/;"	f	line:17	language:C++	struct:design_patterns::Person	access:public	signature:(Address * addr)
Person	src/design_patterns/basic/maybemonad.h	/^struct Person{$/;"	s	line:15	language:C++	namespace:design_patterns
Point	src/tests/tests.h	/^    Point(size_t size) : size_(size) {}$/;"	f	line:195	language:C++	struct:Point	access:public	signature:(size_t size)
Point	src/tests/tests.h	/^struct Point : boost::intrusive::slist_base_hook<>$/;"	s	line:193	language:C++	inherits:boost::intrusive::slist_base_hook<>
Point2	src/tests/tests.h	/^    Point2(size_t size) : size_(size) {}$/;"	f	line:229	language:C++	struct:Point2	access:public	signature:(size_t size)
Point2	src/tests/tests.h	/^struct Point2$/;"	s	line:227	language:C++
Point2::Point2	src/tests/tests.h	/^    Point2(size_t size) : size_(size) {}$/;"	f	line:229	language:C++	struct:Point2	access:public	signature:(size_t size)
Point2::size_	src/tests/tests.h	/^    size_t size_;$/;"	m	line:230	language:C++	struct:Point2	typeref:typename:size_t	access:public
Point::Point	src/tests/tests.h	/^    Point(size_t size) : size_(size) {}$/;"	f	line:195	language:C++	struct:Point	access:public	signature:(size_t size)
Point::size_	src/tests/tests.h	/^    size_t size_;$/;"	m	line:196	language:C++	struct:Point	typeref:typename:size_t	access:public
PollReactorImpl	src/design_patterns/factory/factory_method.h	/^    PollReactorImpl(int handle) : ReactorImpl(handle){}$/;"	f	line:38	language:C++	class:design_patterns::PollReactorImpl	access:public	signature:(int handle)
PollReactorImpl	src/design_patterns/factory/factory_method.h	/^class PollReactorImpl : public ReactorImpl{$/;"	c	line:36	language:C++	namespace:design_patterns	inherits:ReactorImpl
PreRollOutCallback	src/easylogging/easylogging++.h	/^typedef std::function<void(const char*, std::size_t)> PreRollOutCallback;$/;"	t	line:807	language:C++	namespace:el
Predicate	src/easylogging/easylogging++.cc	/^Configuration::Predicate::Predicate(Level level, ConfigurationType configurationType) :$/;"	f	line:268	language:C++	class:el::Configuration::Predicate	signature:(Level level,ConfigurationType configurationType)
Predicate	src/easylogging/easylogging++.h	/^    Predicate(Level level, ConfigurationType configurationType);$/;"	p	line:1710	language:C++	class:el::Configuration::Predicate	access:public	signature:(Level level,ConfigurationType configurationType)
Predicate	src/easylogging/easylogging++.h	/^    Predicate(const char* filename, base::type::LineNumber lineNumber)$/;"	f	line:2095	language:C++	class:el::base::HitCounter::Predicate	access:public	signature:(const char * filename,base::type::LineNumber lineNumber)
Predicate	src/easylogging/easylogging++.h	/^  class Predicate {$/;"	c	line:1708	language:C++	class:el::Configuration	access:public
Predicate	src/easylogging/easylogging++.h	/^  class Predicate {$/;"	c	line:2093	language:C++	class:el::base::HitCounter	access:public
Product	src/design_patterns/basic/SOLID_Open_Close.h	/^    Product(const std::string& name, Color color, Size size)$/;"	f	line:14	language:C++	class:design_patterns::Product	access:public	signature:(const std::string & name,Color color,Size size)
Product	src/design_patterns/basic/SOLID_Open_Close.h	/^class Product{$/;"	c	line:12	language:C++	namespace:design_patterns
ProductFilter	src/design_patterns/basic/SOLID_Open_Close.h	/^class ProductFilter{$/;"	c	line:26	language:C++	namespace:design_patterns
Products_t	src/design_patterns/basic/SOLID_Open_Close.h	/^    using Products_t = std::vector<Product*>;$/;"	t	line:28	language:C++	class:design_patterns::ProductFilter	typeref:typename:std::vector<Product * >	access:public
Products_t	src/design_patterns/basic/SOLID_Open_Close.h	/^    using Products_t = std::vector<Product*>;$/;"	t	line:66	language:C++	class:design_patterns::Filter	typeref:typename:std::vector<Product * >	access:public
Query	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    Query(const string& name, Argument argument, int result)$/;"	f	line:22	language:C++	class:design_patterns::Query	access:public	signature:(const string & name,Argument argument,int result)
Query	src/design_patterns/chain_of_responsibility/broke_chain.h	/^class Query$/;"	c	line:15	language:C++	namespace:design_patterns
REEXECUTE	src/http_parser/http_parser.cpp	/^#define REEXECUTE(/;"	d	line:68	language:C++	file:	signature:()
RETURN	src/http_parser/http_parser.cpp	/^#define RETURN(/;"	d	line:62	language:C++	file:	signature:(V)
Range	src/string_piece/string_piece.h	/^    Range() : begin_(), end_(){}$/;"	f	line:53	language:C++	class:string_piece::Range	access:public	signature:()
Range	src/string_piece/string_piece.h	/^    Range(Range&&) = default;$/;"	p	line:63	language:C++	class:string_piece::Range	access:public	signature:(Range &&)
Range	src/string_piece/string_piece.h	/^    Range(const Range&) = default;$/;"	p	line:62	language:C++	class:string_piece::Range	access:public	signature:(const Range &)
Range	src/string_piece/string_piece.h	/^    Range(const std::string &str) : begin_(str.data()), end_(str.data() + str.size()) {}$/;"	f	line:59	language:C++	class:string_piece::Range	access:public	signature:(const std::string & str)
Range	src/string_piece/string_piece.h	/^    Range(iterator begin) : begin_(begin), end_(begin_ + ::strlen(begin_)){}$/;"	f	line:60	language:C++	class:string_piece::Range	access:public	signature:(iterator begin)
Range	src/string_piece/string_piece.h	/^    Range(iterator begin, iterator end) : begin_(begin), end_(end){}$/;"	f	line:54	language:C++	class:string_piece::Range	access:public	signature:(iterator begin,iterator end)
Range	src/string_piece/string_piece.h	/^    Range(iterator begin, size_type size) : begin_(begin), end_(begin + size){}$/;"	f	line:55	language:C++	class:string_piece::Range	access:public	signature:(iterator begin,size_type size)
Range	src/string_piece/string_piece.h	/^class Range$/;"	c	line:40	language:C++	namespace:string_piece
ReactorImpl	src/design_patterns/factory/factory_method.h	/^    ReactorImpl(int handle) : handle_(handle){}$/;"	f	line:18	language:C++	class:design_patterns::ReactorImpl	access:protected	signature:(int handle)
ReactorImpl	src/design_patterns/factory/factory_method.h	/^class ReactorImpl{$/;"	c	line:16	language:C++	namespace:design_patterns
Red	src/design_patterns/basic/SOLID_Open_Close.h	/^enum class Color{Green, Red, Blue};$/;"	e	line:9	language:C++	enum:design_patterns::Color	access:public
RegisteredHitCounters	src/easylogging/easylogging++.h	/^class RegisteredHitCounters : public base::utils::RegistryWithPred<base::HitCounter, base::HitCo/;"	c	line:2116	language:C++	namespace:el::base	inherits:base::utils::RegistryWithPred<base::HitCounter,base::HitCounter::Predicate>
RegisteredLoggers	src/easylogging/easylogging++.cc	/^RegisteredLoggers::RegisteredLoggers(const LogBuilderPtr& defaultLogBuilder) :$/;"	f	line:1885	language:C++	class:el::base::RegisteredLoggers	signature:(const LogBuilderPtr & defaultLogBuilder)
RegisteredLoggers	src/easylogging/easylogging++.h	/^  explicit RegisteredLoggers(const LogBuilderPtr& defaultLogBuilder);$/;"	p	line:2347	language:C++	class:el::base::RegisteredLoggers	access:public	signature:(const LogBuilderPtr & defaultLogBuilder)
RegisteredLoggers	src/easylogging/easylogging++.h	/^class RegisteredLoggers : public base::utils::Registry<Logger, std::string> {$/;"	c	line:2345	language:C++	namespace:el::base	inherits:base::utils::Registry<Logger,std::string>
Registry	src/easylogging/easylogging++.h	/^  Registry(const Registry& sr) : AbstractRegistry<T_Ptr, std::vector<T_Ptr*>>() {$/;"	f	line:1377	language:C++	class:el::base::utils::Registry	access:public	signature:(const Registry & sr)
Registry	src/easylogging/easylogging++.h	/^  Registry(void) {}$/;"	f	line:1374	language:C++	class:el::base::utils::Registry	access:public	signature:(void)
Registry	src/easylogging/easylogging++.h	/^class Registry : public AbstractRegistry<T_Ptr, std::unordered_map<T_Key, T_Ptr*>> {$/;"	c	line:1369	language:C++	namespace:el::base::utils	inherits:AbstractRegistry<T_Ptr,std::unordered_map<T_Key,T_Ptr*>>
RegistryWithPred	src/easylogging/easylogging++.h	/^  RegistryWithPred(const RegistryWithPred& sr) : AbstractRegistry<T_Ptr, std::vector<T_Ptr*>>() /;"	f	line:1458	language:C++	class:el::base::utils::RegistryWithPred	access:public	signature:(const RegistryWithPred & sr)
RegistryWithPred	src/easylogging/easylogging++.h	/^  RegistryWithPred(void) {$/;"	f	line:1450	language:C++	class:el::base::utils::RegistryWithPred	access:public	signature:(void)
RegistryWithPred	src/easylogging/easylogging++.h	/^class RegistryWithPred : public AbstractRegistry<T_Ptr, std::vector<T_Ptr*>> {$/;"	c	line:1445	language:C++	namespace:el::base::utils	inherits:AbstractRegistry<T_Ptr,std::vector<T_Ptr*>>
RemoveLowConst	src/utils/type_traits.h	/^struct RemoveLowConst { };$/;"	s	line:21	language:C++	namespace:recipes
RemoveLowConst	src/utils/type_traits.h	/^struct RemoveLowConst<T*>$/;"	s	line:24	language:C++	namespace:recipes
RemoveLowConst	src/utils/type_traits.h	/^struct RemoveLowConst<const T*>$/;"	s	line:30	language:C++	namespace:recipes
RemoveLowConst_t	src/utils/type_traits.h	/^using RemoveLowConst_t = typename RemoveLowConst<T>::type;$/;"	t	line:36	language:C++	namespace:recipes	typeref:typename:RemoveLowConst<T>::type
SECTION_NUM	src/mysql_gtid/mysql_gtid.h	/^  static const unsigned int SECTION_NUM = 5;$/;"	m	line:22	language:C++	struct:MySQLUuid	typeref:typename:const unsigned int	access:public
SET_ERRNO	src/http_parser/http_parser.cpp	/^#define SET_ERRNO(/;"	d	line:54	language:C++	file:	signature:(e)
SHARE_EASYLOGGINGPP	src/easylogging/easylogging++.h	/^#define SHARE_EASYLOGGINGPP(/;"	d	line:4556	language:C++	signature:(initializedStorage)
SIMULATE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_ID /;"	d	line:157	language:C++	file:
SIMULATE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_ID /;"	d	line:172	language:C++	file:
SIMULATE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_ID /;"	d	line:21	language:C++	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MAJOR /;"	d	line:164	language:C++	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MAJOR /;"	d	line:179	language:C++	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MAJOR /;"	d	line:37	language:C++	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MINOR /;"	d	line:165	language:C++	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MINOR /;"	d	line:180	language:C++	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MINOR /;"	d	line:38	language:C++	file:
SKIP_SPACE	src/mysql_gtid/mysql_gtid.h	/^#define SKIP_SPACE(/;"	d	line:12	language:C++	signature:(s)
SOLID_OPEN_CLOSE_H_	src/design_patterns/basic/SOLID_Open_Close.h	/^#define SOLID_OPEN_CLOSE_H_$/;"	d	line:2	language:C++
START_EASYLOGGINGPP	src/easylogging/easylogging++.h	/^#  define START_EASYLOGGINGPP(/;"	d	line:4565	language:C++	signature:(argc,argv)
START_EASYLOGGINGPP	src/easylogging/easylogging++.h	/^#  define START_EASYLOGGINGPP(/;"	d	line:4567	language:C++	signature:(argc,argv)
STRCAT	src/easylogging/easylogging++.h	/^#  define STRCAT(/;"	d	line:244	language:C++	signature:(a,b,len)
STRCAT	src/easylogging/easylogging++.h	/^#  define STRCAT(/;"	d	line:249	language:C++	signature:(a,b,len)
STRCPY	src/easylogging/easylogging++.h	/^#  define STRCPY(/;"	d	line:245	language:C++	signature:(a,b,len)
STRCPY	src/easylogging/easylogging++.h	/^#  define STRCPY(/;"	d	line:250	language:C++	signature:(a,b,len)
STRERROR	src/easylogging/easylogging++.h	/^#  define STRERROR(/;"	d	line:243	language:C++	signature:(a,b,c)
STRERROR	src/easylogging/easylogging++.h	/^#  define STRERROR(/;"	d	line:248	language:C++	signature:(a,b,c)
STRICT_CHECK	src/http_parser/http_parser.cpp	/^# define STRICT_CHECK(/;"	d	line:455	language:C++	file:	signature:(cond)
STRICT_CHECK	src/http_parser/http_parser.cpp	/^# define STRICT_CHECK(/;"	d	line:464	language:C++	file:	signature:(cond)
STRICT_TOKEN	src/http_parser/http_parser.cpp	/^#define STRICT_TOKEN(/;"	d	line:430	language:C++	file:	signature:(c)
STRINGIFY	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY(/;"	d	line:284	language:C++	file:	signature:(X)
STRINGIFY_HELPER	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY_HELPER(/;"	d	line:283	language:C++	file:	signature:(X)
STRTOK	src/easylogging/easylogging++.h	/^#  define STRTOK(/;"	d	line:242	language:C++	signature:(a,b,c)
STRTOK	src/easylogging/easylogging++.h	/^#  define STRTOK(/;"	d	line:247	language:C++	signature:(a,b,c)
SYSLOG	src/easylogging/easylogging++.h	/^#  define SYSLOG(/;"	d	line:4320	language:C++	signature:(LEVEL)
SYSLOG	src/easylogging/easylogging++.h	/^#  define SYSLOG(/;"	d	line:4345	language:C++	signature:(LEVEL)
SYSLOG_AFTER_N	src/easylogging/easylogging++.h	/^#  define SYSLOG_AFTER_N(/;"	d	line:4323	language:C++	signature:(n,LEVEL)
SYSLOG_AFTER_N	src/easylogging/easylogging++.h	/^#  define SYSLOG_AFTER_N(/;"	d	line:4348	language:C++	signature:(n,LEVEL)
SYSLOG_EVERY_N	src/easylogging/easylogging++.h	/^#  define SYSLOG_EVERY_N(/;"	d	line:4322	language:C++	signature:(n,LEVEL)
SYSLOG_EVERY_N	src/easylogging/easylogging++.h	/^#  define SYSLOG_EVERY_N(/;"	d	line:4347	language:C++	signature:(n,LEVEL)
SYSLOG_IF	src/easylogging/easylogging++.h	/^#  define SYSLOG_IF(/;"	d	line:4321	language:C++	signature:(condition,LEVEL)
SYSLOG_IF	src/easylogging/easylogging++.h	/^#  define SYSLOG_IF(/;"	d	line:4346	language:C++	signature:(condition,LEVEL)
SYSLOG_N_TIMES	src/easylogging/easylogging++.h	/^#  define SYSLOG_N_TIMES(/;"	d	line:4324	language:C++	signature:(n,LEVEL)
SYSLOG_N_TIMES	src/easylogging/easylogging++.h	/^#  define SYSLOG_N_TIMES(/;"	d	line:4349	language:C++	signature:(n,LEVEL)
ScopedAddFlag	src/easylogging/easylogging++.h	/^    ScopedAddFlag(LoggingFlag flag) : m_flag(flag) {$/;"	f	line:3857	language:C++	class:el::Loggers::ScopedAddFlag	access:public	signature:(LoggingFlag flag)
ScopedAddFlag	src/easylogging/easylogging++.h	/^  class ScopedAddFlag {$/;"	c	line:3855	language:C++	class:el::Loggers	access:public
ScopedLock	src/easylogging/easylogging++.h	/^  ScopedLock(void);$/;"	p	line:964	language:C++	class:el::base::threading::internal::ScopedLock	access:private	signature:(void)
ScopedLock	src/easylogging/easylogging++.h	/^  explicit ScopedLock(M& mutex) {$/;"	f	line:954	language:C++	class:el::base::threading::internal::ScopedLock	access:public	signature:(M & mutex)
ScopedLock	src/easylogging/easylogging++.h	/^class ScopedLock : base::NoCopy {$/;"	c	line:952	language:C++	namespace:el::base::threading::internal	inherits:base::NoCopy
ScopedLock	src/easylogging/easylogging++.h	/^typedef base::threading::internal::ScopedLock<base::threading::Mutex> ScopedLock;$/;"	t	line:968	language:C++	namespace:el::base::threading	typeref:typename:base::threading::internal::ScopedLock<base::threading::Mutex>
ScopedRemoveFlag	src/easylogging/easylogging++.h	/^    ScopedRemoveFlag(LoggingFlag flag) : m_flag(flag) {$/;"	f	line:3869	language:C++	class:el::Loggers::ScopedRemoveFlag	access:public	signature:(LoggingFlag flag)
ScopedRemoveFlag	src/easylogging/easylogging++.h	/^  class ScopedRemoveFlag {$/;"	c	line:3867	language:C++	class:el::Loggers	access:public
Second	src/easylogging/easylogging++.h	/^  Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	e	line:812	language:C++	enum:el::base::TimestampUnit	access:public
SelectReactorImpl	src/design_patterns/factory/factory_method.h	/^    SelectReactorImpl(int handle) : ReactorImpl(handle){}$/;"	f	line:33	language:C++	class:design_patterns::SelectReactorImpl	access:public	signature:(int handle)
SelectReactorImpl	src/design_patterns/factory/factory_method.h	/^class SelectReactorImpl : public ReactorImpl{$/;"	c	line:31	language:C++	namespace:design_patterns	inherits:ReactorImpl
SidSidnoMap	src/mysql_gtid/mysql_gtid.h	/^  using SidSidnoMap = boost::unordered_map<MySQLSid, NodePtr, MySQLUuidHash>;$/;"	t	line:53	language:C++	class:MySQLSidMap	typeref:typename:boost::unordered_map<MySQLSid,NodePtr,MySQLUuidHash>	access:public
SidnoSidMap	src/mysql_gtid/mysql_gtid.h	/^  using SidnoSidMap = std::vector<NodePtr>;$/;"	t	line:54	language:C++	class:MySQLSidMap	typeref:typename:std::vector<NodePtr>	access:public
SingletonUsingVolatile	src/design_patterns/basic/thread_safe_singleton.h	/^class SingletonUsingVolatile{$/;"	c	line:112	language:C++	namespace:design_patterns
SingletonWithCallOnce	src/design_patterns/basic/thread_safe_singleton.h	/^class SingletonWithCallOnce{$/;"	c	line:78	language:C++	namespace:design_patterns
SizableClass	test/buffer/buffer_test.cpp	/^    SizableClass()$/;"	f	line:30	language:C++	struct:buffer_test::SizableClass	file:	access:public	signature:()
SizableClass	test/buffer/buffer_test.cpp	/^struct SizableClass{$/;"	s	line:29	language:C++	namespace:buffer_test	file:
SizableClass_WithChar	test/buffer/buffer_test.cpp	/^    SizableClass_WithChar()$/;"	f	line:54	language:C++	struct:buffer_test::SizableClass_WithChar	file:	access:public	signature:()
SizableClass_WithChar	test/buffer/buffer_test.cpp	/^struct SizableClass_WithChar{$/;"	s	line:53	language:C++	namespace:buffer_test	file:
SizableClass_WithChar	test/substring_search/kmp_test.cpp	/^    SizableClass_WithChar()$/;"	f	line:73	language:C++	struct:kmp_test::SizableClass_WithChar	file:	access:public	signature:()
SizableClass_WithChar	test/substring_search/kmp_test.cpp	/^struct SizableClass_WithChar{$/;"	s	line:72	language:C++	namespace:kmp_test	file:
SizableClass_WithData	test/buffer/buffer_test.cpp	/^    SizableClass_WithData()$/;"	f	line:39	language:C++	struct:buffer_test::SizableClass_WithData	file:	access:public	signature:()
SizableClass_WithData	test/buffer/buffer_test.cpp	/^struct SizableClass_WithData{$/;"	s	line:38	language:C++	namespace:buffer_test	file:
Size	src/design_patterns/basic/SOLID_Open_Close.h	/^enum class Size{Small, Medium, Large};$/;"	g	line:10	language:C++	namespace:design_patterns
SizeSpec	src/design_patterns/basic/SOLID_Open_Close.h	/^    SizeSpec(Size size) : size_(size){}$/;"	f	line:92	language:C++	class:design_patterns::SizeSpec	access:public	signature:(Size size)
SizeSpec	src/design_patterns/basic/SOLID_Open_Close.h	/^class SizeSpec : public ISpecification<Product>$/;"	c	line:89	language:C++	namespace:design_patterns	inherits:ISpecification<Product>
SizeType	src/al/MinHeap.h	/^    using SizeType = typename ContainerType::size_type;$/;"	t	line:17	language:C++	class:al::MinHeap	typeref:typename:ContainerType::size_type	access:public
Small	src/design_patterns/basic/SOLID_Open_Close.h	/^enum class Size{Small, Medium, Large};$/;"	e	line:10	language:C++	enum:design_patterns::Size	access:public
StackTrace	src/easylogging/easylogging++.h	/^  StackTrace(void) {$/;"	f	line:3587	language:C++	class:el::base::debug::StackTrace	access:public	signature:(void)
StackTrace	src/easylogging/easylogging++.h	/^class StackTrace : base::NoCopy {$/;"	c	line:3564	language:C++	namespace:el::base::debug	inherits:base::NoCopy
StackTraceEntry	src/easylogging/easylogging++.cc	/^StackTrace::StackTraceEntry::StackTraceEntry(std::size_t index, const std::string& loc, const st/;"	f	line:2764	language:C++	class:el::base::debug::StackTrace::StackTraceEntry	signature:(std::size_t index,const std::string & loc,const std::string & demang,const std::string & hex,const std::string & addr)
StackTraceEntry	src/easylogging/easylogging++.h	/^    StackTraceEntry(std::size_t index, const std::string& loc) :$/;"	f	line:3572	language:C++	class:el::base::debug::StackTrace::StackTraceEntry	access:public	signature:(std::size_t index,const std::string & loc)
StackTraceEntry	src/easylogging/easylogging++.h	/^    StackTraceEntry(std::size_t index, const std::string& loc, const std::string& demang, const /;"	p	line:3570	language:C++	class:el::base::debug::StackTrace::StackTraceEntry	access:public	signature:(std::size_t index,const std::string & loc,const std::string & demang,const std::string & hex,const std::string & addr)
StackTraceEntry	src/easylogging/easylogging++.h	/^    StackTraceEntry(void);$/;"	p	line:3584	language:C++	class:el::base::debug::StackTrace::StackTraceEntry	access:private	signature:(void)
StackTraceEntry	src/easylogging/easylogging++.h	/^  class StackTraceEntry {$/;"	c	line:3568	language:C++	class:el::base::debug::StackTrace	access:public
StaticClass	src/easylogging/easylogging++.h	/^  StaticClass(const StaticClass&);$/;"	p	line:564	language:C++	class:el::base::StaticClass	access:private	signature:(const StaticClass &)
StaticClass	src/easylogging/easylogging++.h	/^  StaticClass(void);$/;"	p	line:563	language:C++	class:el::base::StaticClass	access:private	signature:(void)
StaticClass	src/easylogging/easylogging++.h	/^class StaticClass {$/;"	c	line:561	language:C++	namespace:el::base
Storage	src/easylogging/easylogging++.cc	/^Storage::Storage(const LogBuilderPtr& defaultLogBuilder, base::IWorker* asyncDispatchWorker) :$/;"	f	line:2062	language:C++	class:el::base::Storage	signature:(const LogBuilderPtr & defaultLogBuilder,base::IWorker * asyncDispatchWorker)
Storage	src/easylogging/easylogging++.h	/^  Storage(const LogBuilderPtr& defaultLogBuilder, base::IWorker* asyncDispatchWorker);$/;"	p	line:2552	language:C++	class:el::base::Storage	access:public	signature:(const LogBuilderPtr & defaultLogBuilder,base::IWorker * asyncDispatchWorker)
Storage	src/easylogging/easylogging++.h	/^class Storage : base::NoCopy, public base::threading::ThreadSafe {$/;"	c	line:2549	language:C++	namespace:el::base	inherits:base::NoCopy,base::threading::ThreadSafe
StoragePointer	src/easylogging/easylogging++.h	/^typedef std::shared_ptr<base::Storage> StoragePointer;$/;"	t	line:541	language:C++	namespace:el::base::type	typeref:typename:std::shared_ptr<base::Storage>
Str	src/easylogging/easylogging++.h	/^class Str : base::StaticClass {$/;"	c	line:1065	language:C++	namespace:el::base::utils	inherits:base::StaticClass
StrictLogFileSizeCheck	src/easylogging/easylogging++.h	/^  StrictLogFileSizeCheck = 32,$/;"	e	line:706	language:C++	enum:el::LoggingFlag	access:public
StringT	src/mysql_gtid/mysql_gtid.h	/^  using StringT = std::string;$/;"	t	line:20	language:C++	struct:MySQLUuid	typeref:typename:std::string	access:public
StringToLevelItem	src/easylogging/easylogging++.cc	/^struct StringToLevelItem {$/;"	s	line:149	language:C++	namespace:el	file:
SubsecondPrecision	src/easylogging/easylogging++.h	/^  SubsecondPrecision = 32,$/;"	e	line:646	language:C++	enum:el::ConfigurationType	access:public
SubsecondPrecision	src/easylogging/easylogging++.h	/^  SubsecondPrecision(void) {$/;"	f	line:835	language:C++	class:el::base::SubsecondPrecision	access:public	signature:(void)
SubsecondPrecision	src/easylogging/easylogging++.h	/^  explicit SubsecondPrecision(int width) {$/;"	f	line:838	language:C++	class:el::base::SubsecondPrecision	access:public	signature:(int width)
SubsecondPrecision	src/easylogging/easylogging++.h	/^class SubsecondPrecision {$/;"	c	line:833	language:C++	namespace:el::base
SysLog	src/easylogging/easylogging++.h	/^  None = 1, NormalLog = 2, SysLog = 4$/;"	e	line:2138	language:C++	enum:el::base::DispatchAction	access:public
SysLogInitializer	src/easylogging/easylogging++.h	/^  SysLogInitializer(const char* processIdent, int options = 0, int facility = 0) {$/;"	f	line:3633	language:C++	class:el::SysLogInitializer	access:public	signature:(const char * processIdent,int options=0,int facility=0)
SysLogInitializer	src/easylogging/easylogging++.h	/^class SysLogInitializer {$/;"	c	line:3631	language:C++	namespace:el
T	src/http_parser/http_parser.cpp	/^# define T(/;"	d	line:239	language:C++	file:	signature:(v)
T	src/http_parser/http_parser.cpp	/^# define T(/;"	d	line:241	language:C++	file:	signature:(v)
TEST	test/buffer/buffer_test.cpp	/^TEST(buffer, test_append_buffer)$/;"	f	line:177	language:C++	namespace:buffer_test	signature:(buffer,test_append_buffer)
TEST	test/buffer/buffer_test.cpp	/^TEST(buffer, test_buffer_append_chain)$/;"	f	line:214	language:C++	namespace:buffer_test	signature:(buffer,test_buffer_append_chain)
TEST	test/buffer/buffer_test.cpp	/^TEST(buffer, test_buffer_append_data)$/;"	f	line:711	language:C++	namespace:buffer_test	signature:(buffer,test_buffer_append_data)
TEST	test/buffer/buffer_test.cpp	/^TEST(buffer, test_buffer_append_printf)$/;"	f	line:669	language:C++	namespace:buffer_test	signature:(buffer,test_buffer_append_printf)
TEST	test/buffer/buffer_test.cpp	/^TEST(buffer, test_buffer_chain_constructor)$/;"	f	line:64	language:C++	namespace:buffer_test	signature:(buffer,test_buffer_chain_constructor)
TEST	test/buffer/buffer_test.cpp	/^TEST(buffer, test_buffer_iter)$/;"	f	line:607	language:C++	namespace:buffer_test	signature:(buffer,test_buffer_iter)
TEST	test/buffer/buffer_test.cpp	/^TEST(buffer, test_buffer_memcmp)$/;"	f	line:545	language:C++	namespace:buffer_test	signature:(buffer,test_buffer_memcmp)
TEST	test/buffer/buffer_test.cpp	/^TEST(buffer, test_buffer_read_line)$/;"	f	line:643	language:C++	namespace:buffer_test	signature:(buffer,test_buffer_read_line)
TEST	test/buffer/buffer_test.cpp	/^TEST(buffer, test_buffer_search_eol)$/;"	f	line:620	language:C++	namespace:buffer_test	signature:(buffer,test_buffer_search_eol)
TEST	test/buffer/buffer_test.cpp	/^TEST(buffer, test_buffer_search_range)$/;"	f	line:514	language:C++	namespace:buffer_test	signature:(buffer,test_buffer_search_range)
TEST	test/buffer/buffer_test.cpp	/^TEST(buffer, test_construct_and_append_buffer)$/;"	f	line:94	language:C++	namespace:buffer_test	signature:(buffer,test_construct_and_append_buffer)
TEST	test/buffer/buffer_test.cpp	/^TEST(buffer, test_copy_out_from)$/;"	f	line:471	language:C++	namespace:buffer_test	signature:(buffer,test_copy_out_from)
TEST	test/buffer/buffer_test.cpp	/^TEST(buffer, test_operator_equal)$/;"	f	line:167	language:C++	namespace:buffer_test	signature:(buffer,test_operator_equal)
TEST	test/buffer/buffer_test.cpp	/^TEST(buffer, test_pullup)$/;"	f	line:231	language:C++	namespace:buffer_test	signature:(buffer,test_pullup)
TEST	test/buffer/buffer_test.cpp	/^TEST(buffer, test_pullup_with_more_chains)$/;"	f	line:300	language:C++	namespace:buffer_test	signature:(buffer,test_pullup_with_more_chains)
TEST	test/buffer/buffer_test.cpp	/^TEST(buffer, test_remove)$/;"	f	line:402	language:C++	namespace:buffer_test	signature:(buffer,test_remove)
TEST	test/folly/HHWheelTimer_test.cpp	/^TEST(HHWheelTimer, normal_test)$/;"	f	line:12	language:C++	signature:(HHWheelTimer,normal_test)
TEST	test/folly/bititerator_test.cpp	/^TEST(bititerator, performance_with_std_bitset)$/;"	f	line:7	language:C++	signature:(bititerator,performance_with_std_bitset)
TEST	test/folly/openssl_test.cpp	/^TEST(OpenSSl, normal){$/;"	f	line:14	language:C++	signature:(OpenSSl,normal)
TEST	test/gperf/gperf_test.cpp	/^TEST(gperf, test_all)$/;"	f	line:18	language:C++	signature:(gperf,test_all)
TEST	test/gperf/gperf_test.cpp	/^TEST(gperf, test_some_cases)$/;"	f	line:46	language:C++	signature:(gperf,test_some_cases)
TEST	test/http/http_commom_headers_test.cpp	/^TEST(http_commom_headers, test_getHeaderCode_char_pointer){$/;"	f	line:14	language:C++	namespace:http_test	signature:(http_commom_headers,test_getHeaderCode_char_pointer)
TEST	test/http/http_commom_headers_test.cpp	/^TEST(http_commom_headers, test_getHeaderCode_string){$/;"	f	line:32	language:C++	namespace:http_test	signature:(http_commom_headers,test_getHeaderCode_string)
TEST	test/http/http_commom_headers_test.cpp	/^TEST(http_commom_headers, test_getPointerWithHeaderCode)$/;"	f	line:42	language:C++	namespace:http_test	signature:(http_commom_headers,test_getPointerWithHeaderCode)
TEST	test/http/http_headers_test.cpp	/^TEST(http_headers, add_using_string_piece)$/;"	f	line:95	language:C++	namespace:http_test	signature:(http_headers,add_using_string_piece)
TEST	test/http/http_headers_test.cpp	/^TEST(http_headers, constructor)$/;"	f	line:46	language:C++	namespace:http_test	signature:(http_headers,constructor)
TEST	test/http/http_headers_test.cpp	/^TEST(http_headers, copy_constructor_with_headers)$/;"	f	line:75	language:C++	namespace:http_test	signature:(http_headers,copy_constructor_with_headers)
TEST	test/http/http_headers_test.cpp	/^TEST(http_headers, copy_constructor_without_headers)$/;"	f	line:57	language:C++	namespace:http_test	signature:(http_headers,copy_constructor_without_headers)
TEST	test/http/http_headers_test.cpp	/^TEST(http_headers, remove)$/;"	f	line:161	language:C++	namespace:http_test	signature:(http_headers,remove)
TEST	test/http/http_method_test.cpp	/^TEST(httpmethod, stringToMethod)$/;"	f	line:6	language:C++	signature:(httpmethod,stringToMethod)
TEST	test/http_parser/http_parser_test.cpp	/^TEST(http_parser, test_URLParser)$/;"	f	line:104	language:C++	namespace:http_parser_test	signature:(http_parser,test_URLParser)
TEST	test/string_piece/string_piece_test.cpp	/^TEST(string_piece, CaseInsensitiveEqual)$/;"	f	line:67	language:C++	namespace:string_piece_test	signature:(string_piece,CaseInsensitiveEqual)
TEST	test/string_piece/string_piece_test.cpp	/^TEST(string_piece, CaseInsensitiveEqual_member_function)$/;"	f	line:88	language:C++	namespace:string_piece_test	signature:(string_piece,CaseInsensitiveEqual_member_function)
TEST	test/string_piece/string_piece_test.cpp	/^TEST(string_piece, copy)$/;"	f	line:48	language:C++	namespace:string_piece_test	signature:(string_piece,copy)
TEST	test/string_piece/string_piece_test.cpp	/^TEST(string_piece, test_find)$/;"	f	line:36	language:C++	namespace:string_piece_test	signature:(string_piece,test_find)
TEST	test/string_piece/string_piece_test.cpp	/^TEST(string_piece, test_sub_string)$/;"	f	line:11	language:C++	namespace:string_piece_test	signature:(string_piece,test_sub_string)
TEST	test/string_piece/string_piece_test.cpp	/^TEST(string_piece, test_sub_string2)$/;"	f	line:22	language:C++	namespace:string_piece_test	signature:(string_piece,test_sub_string2)
TEST	test/substring_search/kmp_test.cpp	/^TEST(kmp, test_kmp)$/;"	f	line:83	language:C++	namespace:kmp_test	signature:(kmp,test_kmp)
TEST	test/substring_search/kmp_test.cpp	/^TEST(kmp, test_kmp_search)$/;"	f	line:109	language:C++	namespace:kmp_test	signature:(kmp,test_kmp_search)
TEST	test/substring_search/kmp_test.cpp	/^TEST(kmp, test_kmp_search_without_0_end)$/;"	f	line:137	language:C++	namespace:kmp_test	signature:(kmp,test_kmp_search_without_0_end)
TESTING	src/buffer/buffer.h	/^#define TESTING /;"	d	line:17	language:C++
TEST_EASYLOGGING_H_	src/easylogging/test_easylogging.h	/^#define TEST_EASYLOGGING_H_$/;"	d	line:2	language:C++
TEST_H	src/guid_map/test.h	/^#define TEST_H$/;"	d	line:2	language:C++
TEXT_LENGTH	src/mysql_gtid/mysql_gtid.h	/^  static const unsigned int TEXT_LENGTH = 36;$/;"	m	line:21	language:C++	struct:MySQLUuid	typeref:typename:const unsigned int	access:public
TIMED_BLOCK	src/easylogging/easylogging++.h	/^#define TIMED_BLOCK(/;"	d	line:3924	language:C++	signature:(obj,blockName)
TIMED_FUNC	src/easylogging/easylogging++.h	/^#define TIMED_FUNC(/;"	d	line:3933	language:C++	signature:(obj)
TIMED_FUNC_IF	src/easylogging/easylogging++.h	/^#define TIMED_FUNC_IF(/;"	d	line:3932	language:C++	signature:(obj,condition)
TIMED_SCOPE	src/easylogging/easylogging++.h	/^#define TIMED_SCOPE(/;"	d	line:3923	language:C++	signature:(obj,blockname)
TIMED_SCOPE_IF	src/easylogging/easylogging++.h	/^#define TIMED_SCOPE_IF(/;"	d	line:3921	language:C++	signature:(obj,blockname,condition)
TOKEN	src/http_parser/http_parser.cpp	/^#define TOKEN(/;"	d	line:433	language:C++	file:	signature:(c)
TOKEN	src/http_parser/http_parser.cpp	/^#define TOKEN(/;"	d	line:437	language:C++	file:	signature:(c)
TOTAL_KEYWORDS	src/gperf/HttpCommomHeadersHash.h	/^#define TOTAL_KEYWORDS /;"	d	line:15	language:C++
TRANSFER_ENCODING	src/http_parser/http_parser.cpp	/^#define TRANSFER_ENCODING /;"	d	line:169	language:C++	file:
Tag	src/design_patterns/builder/groovy_builder.h	/^    Tag(const string &name, const string &text, const vector<Tag> &children) : name(name), text(/;"	f	line:13	language:C++	struct:design_patterns::Tag	access:public	signature:(const string & name,const string & text,const vector<Tag> & children)
Tag	src/design_patterns/builder/groovy_builder.h	/^    Tag(const string& name, const string& text) : name(name), text(text), children(), attributes/;"	f	line:12	language:C++	struct:design_patterns::Tag	access:public	signature:(const string & name,const string & text)
Tag	src/design_patterns/builder/groovy_builder.h	/^struct Tag$/;"	s	line:10	language:C++	namespace:design_patterns
TagType	src/tests/tests.h	/^    using TagType = tag<MyTag>;$/;"	t	line:306	language:C++	function:intrusive_using_base_hook_test	typeref:typename:tag<MyTag>
TestClass	src/tests/tests.h	/^    TestClass()$/;"	f	line:141	language:C++	class:TestClass	access:public	signature:()
TestClass	src/tests/tests.h	/^    TestClass(TestClass &&)$/;"	f	line:149	language:C++	class:TestClass	access:public	signature:(TestClass &&)
TestClass	src/tests/tests.h	/^    TestClass(const TestClass &)$/;"	f	line:145	language:C++	class:TestClass	access:public	signature:(const TestClass &)
TestClass	src/tests/tests.h	/^    TestClass(int)$/;"	f	line:137	language:C++	class:TestClass	access:public	signature:(int)
TestClass	src/tests/tests.h	/^class TestClass$/;"	c	line:134	language:C++
TestClass::TestClass	src/tests/tests.h	/^    TestClass()$/;"	f	line:141	language:C++	class:TestClass	access:public	signature:()
TestClass::TestClass	src/tests/tests.h	/^    TestClass(TestClass &&)$/;"	f	line:149	language:C++	class:TestClass	access:public	signature:(TestClass &&)
TestClass::TestClass	src/tests/tests.h	/^    TestClass(const TestClass &)$/;"	f	line:145	language:C++	class:TestClass	access:public	signature:(const TestClass &)
TestClass::TestClass	src/tests/tests.h	/^    TestClass(int)$/;"	f	line:137	language:C++	class:TestClass	access:public	signature:(int)
TestClass::~TestClass	src/tests/tests.h	/^    ~TestClass()$/;"	f	line:153	language:C++	class:TestClass	access:public	signature:()
ThreadId	src/easylogging/easylogging++.h	/^  ThreadId = 1 << 12,$/;"	e	line:827	language:C++	enum:el::base::FormatFlags	access:public
ThreadSafe	src/easylogging/easylogging++.h	/^  ThreadSafe(void) {}$/;"	f	line:1007	language:C++	class:el::base::threading::ThreadSafe	access:protected	signature:(void)
ThreadSafe	src/easylogging/easylogging++.h	/^class ThreadSafe {$/;"	c	line:1001	language:C++	namespace:el::base::threading
ThreadSafe_Singleton_WithoutLock	src/design_patterns/basic/thread_safe_singleton.h	/^class ThreadSafe_Singleton_WithoutLock$/;"	c	line:45	language:C++	namespace:design_patterns
TimestampUnit	src/easylogging/easylogging++.h	/^enum class TimestampUnit : base::type::EnumType {$/;"	g	line:811	language:C++	namespace:el::base	typeref:typename:base::type::EnumType
ToFile	src/easylogging/easylogging++.h	/^  ToFile = 2,$/;"	e	line:637	language:C++	enum:el::ConfigurationType	access:public
ToStandardOutput	src/easylogging/easylogging++.h	/^  ToStandardOutput = 4,$/;"	e	line:640	language:C++	enum:el::ConfigurationType	access:public
Trace	src/easylogging/easylogging++.h	/^  Trace = 2,$/;"	e	line:576	language:C++	enum:el::Level	access:public
TypedConfigurations	src/easylogging/easylogging++.cc	/^TypedConfigurations::TypedConfigurations(Configurations* configurations,$/;"	f	line:1617	language:C++	class:el::base::TypedConfigurations	signature:(Configurations * configurations,base::LogStreamsReferenceMap * logStreamsReference)
TypedConfigurations	src/easylogging/easylogging++.cc	/^TypedConfigurations::TypedConfigurations(const TypedConfigurations& other) {$/;"	f	line:1624	language:C++	class:el::base::TypedConfigurations	signature:(const TypedConfigurations & other)
TypedConfigurations	src/easylogging/easylogging++.h	/^  TypedConfigurations(Configurations* configurations, base::LogStreamsReferenceMap* logStreamsRe/;"	p	line:1907	language:C++	class:el::base::TypedConfigurations	access:public	signature:(Configurations * configurations,base::LogStreamsReferenceMap * logStreamsReference)
TypedConfigurations	src/easylogging/easylogging++.h	/^  TypedConfigurations(const TypedConfigurations& other);$/;"	p	line:1909	language:C++	class:el::base::TypedConfigurations	access:public	signature:(const TypedConfigurations & other)
TypedConfigurations	src/easylogging/easylogging++.h	/^class TypedConfigurations : public base::threading::ThreadSafe {$/;"	c	line:1902	language:C++	namespace:el::base	inherits:base::threading::ThreadSafe
UF_FRAGMENT	src/http_parser/http_parser.h	/^  , UF_FRAGMENT         = 5$/;"	e	line:349	language:C++	enum:http_parser_url_fields	access:public
UF_HOST	src/http_parser/http_parser.h	/^  , UF_HOST             = 1$/;"	e	line:345	language:C++	enum:http_parser_url_fields	access:public
UF_MAX	src/http_parser/http_parser.h	/^  , UF_MAX              = 7$/;"	e	line:351	language:C++	enum:http_parser_url_fields	access:public
UF_PATH	src/http_parser/http_parser.h	/^  , UF_PATH             = 3$/;"	e	line:347	language:C++	enum:http_parser_url_fields	access:public
UF_PORT	src/http_parser/http_parser.h	/^  , UF_PORT             = 2$/;"	e	line:346	language:C++	enum:http_parser_url_fields	access:public
UF_QUERY	src/http_parser/http_parser.h	/^  , UF_QUERY            = 4$/;"	e	line:348	language:C++	enum:http_parser_url_fields	access:public
UF_SCHEMA	src/http_parser/http_parser.h	/^  { UF_SCHEMA           = 0$/;"	e	line:344	language:C++	enum:http_parser_url_fields	access:public
UF_USERINFO	src/http_parser/http_parser.h	/^  , UF_USERINFO         = 6$/;"	e	line:350	language:C++	enum:http_parser_url_fields	access:public
ULLONG_MAX	src/http_parser/http_parser.cpp	/^# define ULLONG_MAX /;"	d	line:33	language:C++	file:
UNLIKELY	src/http_parser/http_parser.cpp	/^# define UNLIKELY(/;"	d	line:74	language:C++	file:	signature:(X)
UNLIKELY	src/http_parser/http_parser.cpp	/^# define UNLIKELY(/;"	d	line:77	language:C++	file:	signature:(X)
UPDATE_STATE	src/http_parser/http_parser.cpp	/^#define UPDATE_STATE(/;"	d	line:61	language:C++	file:	signature:(V)
UPGRADE	src/http_parser/http_parser.cpp	/^#define UPGRADE /;"	d	line:170	language:C++	file:
URLParser	src/http_parser/URLParser.h	/^    URLParser(){}$/;"	f	line:18	language:C++	class:http::URLParser	access:public	signature:()
URLParser	src/http_parser/URLParser.h	/^    explicit URLParser(const_string_piece_t urlVal) noexcept$/;"	f	line:19	language:C++	class:http::URLParser	access:public	signature:(const_string_piece_t urlVal)
URLParser	src/http_parser/URLParser.h	/^class URLParser$/;"	c	line:11	language:C++	namespace:http
UUID_LENGTH	src/mysql_gtid/mysql_gtid.h	/^  static const unsigned int UUID_LENGTH = 32;$/;"	m	line:24	language:C++	struct:MySQLUuid	typeref:typename:const unsigned int	access:public
Unknown	src/easylogging/easylogging++.h	/^  Unknown = 1010$/;"	e	line:590	language:C++	enum:el::Level	access:public
Unknown	src/easylogging/easylogging++.h	/^  Unknown = 1010$/;"	e	line:661	language:C++	enum:el::ConfigurationType	access:public
User	src/easylogging/easylogging++.h	/^  User = 1 << 7,$/;"	e	line:822	language:C++	enum:el::base::FormatFlags	access:public
Utils	src/easylogging/easylogging++.h	/^class Utils {$/;"	c	line:1530	language:C++	namespace:el::base::utils
VLOG	src/easylogging/easylogging++.h	/^#define VLOG(/;"	d	line:4259	language:C++	signature:(vlevel)
VLOG_AFTER_N	src/easylogging/easylogging++.h	/^#define VLOG_AFTER_N(/;"	d	line:4267	language:C++	signature:(n,vlevel)
VLOG_EVERY_N	src/easylogging/easylogging++.h	/^#define VLOG_EVERY_N(/;"	d	line:4265	language:C++	signature:(n,vlevel)
VLOG_IF	src/easylogging/easylogging++.h	/^#define VLOG_IF(/;"	d	line:4262	language:C++	signature:(condition,vlevel)
VLOG_IS_ON	src/easylogging/easylogging++.h	/^#define VLOG_IS_ON(/;"	d	line:3902	language:C++	signature:(verboseLevel)
VLOG_N_TIMES	src/easylogging/easylogging++.h	/^#define VLOG_N_TIMES(/;"	d	line:4269	language:C++	signature:(n,vlevel)
VRegistry	src/easylogging/easylogging++.cc	/^VRegistry::VRegistry(base::type::VerboseLevel level, base::type::EnumType* pFlags) : m_level(lev/;"	f	line:1938	language:C++	class:el::base::VRegistry	signature:(base::type::VerboseLevel level,base::type::EnumType * pFlags)
VRegistry	src/easylogging/easylogging++.h	/^  explicit VRegistry(base::type::VerboseLevel level, base::type::EnumType* pFlags);$/;"	p	line:2417	language:C++	class:el::base::VRegistry	access:public	signature:(base::type::VerboseLevel level,base::type::EnumType * pFlags)
VRegistry	src/easylogging/easylogging++.h	/^class VRegistry : base::NoCopy, public base::threading::ThreadSafe {$/;"	c	line:2415	language:C++	namespace:el::base	inherits:base::NoCopy,base::threading::ThreadSafe
Verbose	src/easylogging/easylogging++.h	/^  Verbose = 64,$/;"	e	line:586	language:C++	enum:el::Level	access:public
VerboseLevel	src/easylogging/easylogging++.h	/^  VerboseLevel = 1 << 10,$/;"	e	line:825	language:C++	enum:el::base::FormatFlags	access:public
VerboseLevel	src/easylogging/easylogging++.h	/^typedef unsigned short VerboseLevel;$/;"	t	line:539	language:C++	namespace:el::base::type	typeref:typename:unsigned short
VersionInfo	src/easylogging/easylogging++.h	/^class VersionInfo : base::StaticClass {$/;"	c	line:3891	language:C++	namespace:el	inherits:base::StaticClass
WARNING	src/buffer/buffer.h	/^#define WARNING /;"	d	line:13	language:C++
Warning	src/easylogging/easylogging++.h	/^  Warning = 32,$/;"	e	line:584	language:C++	enum:el::Level	access:public
With	src/design_patterns/basic/maybemonad.h	/^    auto With(Func&& f)$/;"	f	line:26	language:C++	class:design_patterns::Maybe	typeref:typename:auto	access:public	signature:(Func && f)
WorkAddress	src/design_patterns/prototype/prototype.h	/^    WorkAddress(const WorkAddress& addr)$/;"	f	line:22	language:C++	struct:design_patterns::WorkAddress	access:public	signature:(const WorkAddress & addr)
WorkAddress	src/design_patterns/prototype/prototype.h	/^    WorkAddress(const string& street, const string& city, int suite)$/;"	f	line:19	language:C++	struct:design_patterns::WorkAddress	access:public	signature:(const string & street,const string & city,int suite)
WorkAddress	src/design_patterns/prototype/prototype.h	/^struct WorkAddress{$/;"	s	line:14	language:C++	namespace:design_patterns
Writer	src/easylogging/easylogging++.h	/^  Writer(Level level, const char* file, base::type::LineNumber line,$/;"	f	line:3190	language:C++	class:el::base::Writer	access:public	signature:(Level level,const char * file,base::type::LineNumber line,const char * func,base::DispatchAction dispatchAction=base::DispatchAction::NormalLog,base::type::VerboseLevel verboseLevel=0)
Writer	src/easylogging/easylogging++.h	/^  Writer(LogMessage* msg, base::DispatchAction dispatchAction = base::DispatchAction::NormalLog)/;"	f	line:3197	language:C++	class:el::base::Writer	access:public	signature:(LogMessage * msg,base::DispatchAction dispatchAction=base::DispatchAction::NormalLog)
Writer	src/easylogging/easylogging++.h	/^class Writer : base::NoCopy {$/;"	c	line:3188	language:C++	namespace:el::base	inherits:base::NoCopy
XX	src/http_parser/http_parser.cpp	/^#define XX(/;"	d	line:178	language:C++	file:	signature:(num,name,string)
XX	src/http_parser/http_parser.cpp	/^#define XX(/;"	d	line:2142	language:C++	file:	signature:(num,name,string)
XX	src/http_parser/http_parser.cpp	/^#define XX(/;"	d	line:981	language:C++	file:	signature:(meth,pos,ch,new_meth)
XX	src/http_parser/http_parser.h	/^#define XX(/;"	d	line:158	language:C++	signature:(num,name,string)
XX	src/http_parser/http_parser.h	/^#define XX(/;"	d	line:211	language:C++	signature:(num,name,string)
_	src/design_patterns/basic/thread_safe_singleton.h	/^    std::vector<std::vector<std::string>> _;$/;"	m	line:61	language:C++	struct:design_patterns::A	typeref:typename:std::vector<std::vector<std::string>>	access:public
_	test/http/http_headers_test.cpp	/^void _()$/;"	f	line:9	language:C++	namespace:http_test	typeref:typename:void	signature:()
_1	test/http/http_commom_headers_test.cpp	/^void _1()$/;"	f	line:9	language:C++	namespace:http_test	typeref:typename:void	signature:()
_2	test/gperf/gperf_test.cpp	/^void _2()$/;"	f	line:13	language:C++	typeref:typename:void	signature:()
_AL_MERGE_H_	src/al/merge.h	/^#define _AL_MERGE_H_$/;"	d	line:2	language:C++
_AL_MINHEAP_H_	src/al/MinHeap.h	/^#define _AL_MINHEAP_H_$/;"	d	line:2	language:C++
_Argval	src/tests/type_traits.h	/^        _Arg>::type>::type _Argval;$/;"	t	line:2254	language:C++	struct:std::__result_of_memobj	typeref:typename:remove_cv<typename remove_reference<_Arg>::type>::type	access:public
_Argval	src/tests/type_traits.h	/^        _Arg>::type>::type _Argval;$/;"	t	line:2270	language:C++	struct:std::__result_of_memfun	typeref:typename:remove_cv<typename remove_reference<_Arg>::type>::type	access:public
_BUFFER_H_	src/buffer/buffer.h	/^#define _BUFFER_H_$/;"	d	line:2	language:C++
_BYTE_BUF_H_	src/bytebuf/bytebuf.h	/^#define _BYTE_BUF_H_$/;"	d	line:2	language:C++
_DESIGN_PATTERNS_BUILDER_H_	src/design_patterns/builder/builder.h	/^#define _DESIGN_PATTERNS_BUILDER_H_$/;"	d	line:2	language:C++
_DESIGN_PATTERNS_CHAIN_OF_RESPONSIBILITY_BROKE_CHAIN_H_	src/design_patterns/chain_of_responsibility/broke_chain.h	/^#define _DESIGN_PATTERNS_CHAIN_OF_RESPONSIBILITY_BROKE_CHAIN_H_$/;"	d	line:2	language:C++
_DESIGN_PATTERNS_CHAIN_OF_RESPONSIBILITY_POINTER_CHAIN_H_	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^#define _DESIGN_PATTERNS_CHAIN_OF_RESPONSIBILITY_POINTER_CHAIN_H_$/;"	d	line:2	language:C++
_DESIGN_PATTERNS_FACTORY_METHOD_H_	src/design_patterns/factory/factory_method.h	/^#define _DESIGN_PATTERNS_FACTORY_METHOD_H_$/;"	d	line:2	language:C++
_DESIGN_PATTERNS_GROOVY_BUILDER_H_	src/design_patterns/builder/groovy_builder.h	/^#define _DESIGN_PATTERNS_GROOVY_BUILDER_H_$/;"	d	line:2	language:C++
_DESIGN_PATTERNS_PROTOTYPE_H_	src/design_patterns/prototype/prototype.h	/^#define _DESIGN_PATTERNS_PROTOTYPE_H_$/;"	d	line:2	language:C++
_GLIBCXX_DEPRECATED	src/tests/type_traits.h	/^    { } _GLIBCXX_DEPRECATED;$/;"	v	line:1336	language:C++	namespace:std	typeref:struct:std::has_trivial_default_constructor
_GLIBCXX_DEPRECATED	src/tests/type_traits.h	/^    { } _GLIBCXX_DEPRECATED;$/;"	v	line:1342	language:C++	namespace:std	typeref:struct:std::has_trivial_copy_constructor
_GLIBCXX_DEPRECATED	src/tests/type_traits.h	/^    { } _GLIBCXX_DEPRECATED;$/;"	v	line:1348	language:C++	namespace:std	typeref:struct:std::has_trivial_copy_assign
_GLIBCXX_HAS_NESTED_TYPE	src/tests/type_traits.h	/^#define _GLIBCXX_HAS_NESTED_TYPE(/;"	d	line:2369	language:C++	signature:(_NTYPE)
_GLIBCXX_TYPE_TRAITS	src/tests/type_traits.h	/^#define _GLIBCXX_TYPE_TRAITS /;"	d	line:23	language:C++
_GUID_HASH_MAP_H_	src/guid_map/guid_hash_map.h	/^#define _GUID_HASH_MAP_H_$/;"	d	line:2	language:C++
_HTTP_COMMOM_HEADERS_HASH_H_	src/gperf/HttpCommomHeadersHash.h	/^#define _HTTP_COMMOM_HEADERS_HASH_H_$/;"	d	line:2	language:C++
_HTTP_COMMOM_HEADER_H_	src/http/HttpCommomHeaders.h	/^#define _HTTP_COMMOM_HEADER_H_$/;"	d	line:2	language:C++
_HTTP_HEADER_CODE_H_	src/gperf/HttpHeaderCode.h	/^#define _HTTP_HEADER_CODE_H_$/;"	d	line:2	language:C++
_HTTP_HEADER_H_	src/http/HttpHeaders.h	/^#define _HTTP_HEADER_H_$/;"	d	line:2	language:C++
_HTTP_MESSAGE_H_	src/http/HttpMessage.h	/^#define _HTTP_MESSAGE_H_$/;"	d	line:2	language:C++
_HTTP_METHOD_H_	src/http/HttpMethod.h	/^#define _HTTP_METHOD_H_$/;"	d	line:2	language:C++
_HTTP_PARSER_H_	src/http_parser/HttpParser.h	/^#define _HTTP_PARSER_H_$/;"	d	line:2	language:C++
_HTTP_PARSER_H_	src/http_parser/URLParser.h	/^#define _HTTP_PARSER_H_$/;"	d	line:2	language:C++
_MemPtr	src/tests/type_traits.h	/^      typedef _Res _Class::* _MemPtr;$/;"	t	line:2255	language:C++	struct:std::__result_of_memobj	typeref:typename:_Res _Class::*	access:public
_MemPtr	src/tests/type_traits.h	/^      typedef _Res _Class::* _MemPtr;$/;"	t	line:2271	language:C++	struct:std::__result_of_memfun	typeref:typename:_Res _Class::*	access:public
_RECIPES_KMP_H_	src/substring_search/KMP.h	/^#define _RECIPES_KMP_H_$/;"	d	line:2	language:C++
_Require	src/tests/type_traits.h	/^    using _Require = typename enable_if<__and_<_Cond...>::value>::type;$/;"	t	line:2064	language:C++	namespace:std	typeref:typename:enable_if<__and_<_Cond...>::value>::type
_STRING_PIECE_H_	src/string_piece/string_piece.h	/^#define _STRING_PIECE_H_$/;"	d	line:2	language:C++
_S_alignment	src/tests/type_traits.h	/^      static const size_t _S_alignment = 0;$/;"	m	line:1954	language:C++	struct:std::__strictest_alignment	typeref:typename:const size_t	access:public
_S_alignment	src/tests/type_traits.h	/^      static const size_t _S_alignment =$/;"	m	line:1961	language:C++	struct:std::__strictest_alignment	typeref:typename:const size_t	access:public
_S_len	src/tests/type_traits.h	/^      static const size_t _S_len = _Len > __strictest::_S_size$/;"	m	line:1986	language:C++	struct:std::aligned_union	typeref:typename:const size_t	access:private
_S_size	src/tests/type_traits.h	/^      static const size_t _S_size = 0;$/;"	m	line:1955	language:C++	struct:std::__strictest_alignment	typeref:typename:const size_t	access:public
_S_size	src/tests/type_traits.h	/^      static const size_t _S_size =$/;"	m	line:1964	language:C++	struct:std::__strictest_alignment	typeref:typename:const size_t	access:public
_S_test	src/tests/type_traits.h	/^			     : std::declval<_Up>())>::type> _S_test(int);$/;"	p	line:2088	language:C++	struct:std::__do_common_type_impl	typeref:typename:__success_type<typename decay<decltype (true?std::declval<_Tp> ():std::declval<_Up> ())>::type>	access:public	signature:(int)
_S_test	src/tests/type_traits.h	/^      )> _S_test(int);$/;"	p	line:2177	language:C++	struct:std::__result_of_memfun_ref_impl	typeref:typename:__success_type<decltype ((std::declval<_Tp1> ().* std::declval<_Fp> ())(std::declval<_Args> ()...))>	access:public	signature:(int)
_S_test	src/tests/type_traits.h	/^      )> _S_test(int);$/;"	p	line:2196	language:C++	struct:std::__result_of_memfun_deref_impl	typeref:typename:__success_type<decltype (((* std::declval<_Tp1> ()).* std::declval<_Fp> ())(std::declval<_Args> ()...))>	access:public	signature:(int)
_S_test	src/tests/type_traits.h	/^      )> _S_test(int);$/;"	p	line:2215	language:C++	struct:std::__result_of_memobj_ref_impl	typeref:typename:__success_type<decltype (std::declval<_Tp1> ().* std::declval<_Fp> ())>	access:public	signature:(int)
_S_test	src/tests/type_traits.h	/^      )> _S_test(int);$/;"	p	line:2234	language:C++	struct:std::__result_of_memobj_deref_impl	typeref:typename:__success_type<decltype ((* std::declval<_Tp1> ()).* std::declval<_Fp> ())>	access:public	signature:(int)
_S_test	src/tests/type_traits.h	/^      )> _S_test(int);$/;"	p	line:2301	language:C++	struct:std::__result_of_other_impl	typeref:typename:__success_type<decltype (std::declval<_Fn> ()(std::declval<_Args> ()...))>	access:public	signature:(int)
_S_test	src/tests/type_traits.h	/^      static __failure_type _S_test(...);$/;"	p	line:2091	language:C++	struct:std::__do_common_type_impl	typeref:typename:__failure_type	access:public	signature:(...)
_S_test	src/tests/type_traits.h	/^      static __failure_type _S_test(...);$/;"	p	line:2107	language:C++	struct:std::__do_member_type_wrapper	typeref:typename:__failure_type	access:public	signature:(...)
_S_test	src/tests/type_traits.h	/^      static __failure_type _S_test(...);$/;"	p	line:2180	language:C++	struct:std::__result_of_memfun_ref_impl	typeref:typename:__failure_type	access:public	signature:(...)
_S_test	src/tests/type_traits.h	/^      static __failure_type _S_test(...);$/;"	p	line:2199	language:C++	struct:std::__result_of_memfun_deref_impl	typeref:typename:__failure_type	access:public	signature:(...)
_S_test	src/tests/type_traits.h	/^      static __failure_type _S_test(...);$/;"	p	line:2218	language:C++	struct:std::__result_of_memobj_ref_impl	typeref:typename:__failure_type	access:public	signature:(...)
_S_test	src/tests/type_traits.h	/^      static __failure_type _S_test(...);$/;"	p	line:2237	language:C++	struct:std::__result_of_memobj_deref_impl	typeref:typename:__failure_type	access:public	signature:(...)
_S_test	src/tests/type_traits.h	/^      static __failure_type _S_test(...);$/;"	p	line:2304	language:C++	struct:std::__result_of_other_impl	typeref:typename:__failure_type	access:public	signature:(...)
_S_test	src/tests/type_traits.h	/^      static __success_type<typename _Tp::type> _S_test(int);$/;"	p	line:2104	language:C++	struct:std::__do_member_type_wrapper	typeref:typename:__success_type<typename _Tp::type>	access:public	signature:(int)
_THREAD_SAFE_SINGLETON_H_	src/design_patterns/basic/thread_safe_singleton.h	/^#define _THREAD_SAFE_SINGLETON_H_$/;"	d	line:2	language:C++
_TYPES_TRAITS_H___	src/utils/type_traits.h	/^#define _TYPES_TRAITS_H___$/;"	d	line:2	language:C++
_UTIL_TIMER_H_	src/utils/timer.h	/^#define _UTIL_TIMER_H_$/;"	d	line:2	language:C++
__	src/http/HttpHeaders.cpp	/^void __()$/;"	f	line:196	language:C++	namespace:http	typeref:typename:void	signature:()
__add_lvalue_reference_helper	src/tests/type_traits.h	/^    struct __add_lvalue_reference_helper$/;"	s	line:1543	language:C++	namespace:std
__add_lvalue_reference_helper	src/tests/type_traits.h	/^    struct __add_lvalue_reference_helper<_Tp, true>$/;"	s	line:1547	language:C++	namespace:std
__add_pointer_helper	src/tests/type_traits.h	/^    struct __add_pointer_helper$/;"	s	line:1898	language:C++	namespace:std
__add_pointer_helper	src/tests/type_traits.h	/^    struct __add_pointer_helper<_Tp, true>$/;"	s	line:1902	language:C++	namespace:std
__add_rvalue_reference_helper	src/tests/type_traits.h	/^    struct __add_rvalue_reference_helper$/;"	s	line:1557	language:C++	namespace:std
__add_rvalue_reference_helper	src/tests/type_traits.h	/^    struct __add_rvalue_reference_helper<_Tp, true>$/;"	s	line:1561	language:C++	namespace:std
__align	src/tests/type_traits.h	/^	struct __attribute__((__aligned__((_Align)))) { } __align; $/;"	m	line:1947	language:C++	union:std::aligned_storage::type	typeref:struct:std::aligned_storage::type::__anon5513870c0208	access:public
__align	src/tests/type_traits.h	/^	struct __attribute__((__aligned__)) { } __align; $/;"	m	line:1926	language:C++	union:std::__aligned_storage_msa::__type	typeref:struct:std::__aligned_storage_msa::__type::__anon5513870c0108	access:public
__aligned_storage_msa	src/tests/type_traits.h	/^    struct __aligned_storage_msa$/;"	s	line:1921	language:C++	namespace:std
__and_	src/tests/type_traits.h	/^    struct __and_<> : public true_type { };$/;"	s	line:118	language:C++	namespace:std	inherits:true_type
__and_	src/tests/type_traits.h	/^    struct __and_<_B1, _B2, _B3, _Bn...>$/;"	s	line:129	language:C++	namespace:std	inherits:conditional<_B1::value,__and_<_B2,_B3,_Bn...>,_B1>::type
__and_	src/tests/type_traits.h	/^    struct __and_<_B1, _B2> : public conditional<_B1::value, _B2, _B1>::type { };$/;"	s	line:126	language:C++	namespace:std	inherits:conditional<_B1::value,_B2,_B1>::type
__and_	src/tests/type_traits.h	/^    struct __and_<_B1> : public _B1 { }; $/;"	s	line:121	language:C++	namespace:std	inherits:_B1
__anon37a987990102	src/design_patterns/basic/maybemonad.h	/^        .With([](Person* const x){return x->addr;})$/;"	f	line:59	language:C++	function:design_patterns::Monad_test	file:	signature:(Person* const x)
__anon37a987990202	src/design_patterns/basic/maybemonad.h	/^            .With([](Address* const x){return x->name;})$/;"	f	line:60	language:C++	function:design_patterns::Monad_test	file:	signature:(Address* const x)
__anon37a987990302	src/design_patterns/basic/maybemonad.h	/^            .Do([](std::string* const x){std::cout << x << std::endl;});$/;"	f	line:61	language:C++	function:design_patterns::Monad_test	file:	signature:(std::string* const x)
__anon37a987990402	src/design_patterns/basic/maybemonad.h	/^        .With([](Person* const x){return x->addr;})$/;"	f	line:68	language:C++	function:design_patterns::Monad_test	file:	signature:(Person* const x)
__anon37a987990502	src/design_patterns/basic/maybemonad.h	/^            .With([](Address* const x){return x->name;})$/;"	f	line:69	language:C++	function:design_patterns::Monad_test	file:	signature:(Address* const x)
__anon37a987990602	src/design_patterns/basic/maybemonad.h	/^            .Do([](std::string* const x){std::cout << *x << std::endl;});$/;"	f	line:70	language:C++	function:design_patterns::Monad_test	file:	signature:(std::string* const x)
__anon396b239d0102	src/http/HttpHeaders.h	/^            {$/;"	f	line:83	language:C++	function:http::HttpHeaders::iterateOverOtherHeaderNames	file:	signature:( std::vector<HttpHeaderCode>& codes, std::vector<const char*>& headerNames, std::vector<std::string>& headerValues, size_t& codes_deleted, size_t pos) 
__anon3c0cb0480102	src/http_parser/URLParser.cpp	/^    return std::all_of(scheme.begin(), scheme.end(), [](auto _) {$/;"	f	line:15	language:C++	function:http::validateScheme	file:	signature:(auto _) 
__anon40c278780102	src/http/HttpHeaders.cpp	/^            {$/;"	f	line:132	language:C++	function:http::HttpHeaders::remove	file:	signature:( std::vector<HttpHeaderCode>& codes, std::vector<const char*>&, std::vector<std::string>&, size_t& codes_deleted, size_t pos) 
__anon40c278780202	src/http/HttpHeaders.cpp	/^        {$/;"	f	line:152	language:C++	function:http::HttpHeaders::remove	file:	signature:( std::vector<HttpHeaderCode>& codes, std::vector<const char*>&, std::vector<std::string>&, size_t& codes_deleted, size_t pos) 
__anon5513870c0108	src/tests/type_traits.h	/^	struct __attribute__((__aligned__)) { } __align; $/;"	s	line:1926	language:C++	union:std::__aligned_storage_msa::__type	access:public
__anon5513870c0208	src/tests/type_traits.h	/^	struct __attribute__((__aligned__((_Align)))) { } __align; $/;"	s	line:1947	language:C++	union:std::aligned_storage::type	access:public
__anon721014870102	src/tests/tests.h	/^    auto con = s.connect([](string a) { cout << a << endl; });$/;"	f	line:129	language:C++	function:test_boost_signals2	file:	signature:(string a) 
__anon7e0e35540108	src/http_parser/http_parser.cpp	/^static struct {$/;"	s	line:471	language:C++	file:
__anon7e0e35540108::description	src/http_parser/http_parser.cpp	/^  const char *description;$/;"	m	line:473	language:C++	struct:__anon7e0e35540108	typeref:typename:const char *	file:	access:public
__anon7e0e35540108::name	src/http_parser/http_parser.cpp	/^  const char *name;$/;"	m	line:472	language:C++	struct:__anon7e0e35540108	typeref:typename:const char *	file:	access:public
__anoncf5a2b670102	src/easylogging/easylogging++.cc	/^  LevelHelper::forEachLevel(&lIndex, [&](void) -> bool {$/;"	f	line:329	language:C++	function:el::Configurations::hasConfiguration	typeref:typename:bool	file:	signature:(void) 
__anoncf5a2b670202	src/easylogging/easylogging++.cc	/^  LevelHelper::forEachLevel(&lIndex, [&](void) -> bool {$/;"	f	line:565	language:C++	function:el::Configurations::setGlobally	typeref:typename:bool	file:	signature:(void) 
__anoncf5a2b670302	src/easylogging/easylogging++.cc	/^  LevelHelper::forEachLevel(&lIndex, [&](void) -> bool  {$/;"	f	line:577	language:C++	function:el::Configurations::unsafeSetGlobally	typeref:typename:bool	file:	signature:(void) 
__anoncf5a2b670402	src/easylogging/easylogging++.cc	/^  LevelHelper::forEachLevel(&lIndex, [&](void) -> bool {$/;"	f	line:684	language:C++	function:el::Logger::flush	typeref:typename:bool	file:	signature:(void) 
__anoncf5a2b670502	src/easylogging/easylogging++.cc	/^  LevelHelper::forEachLevel(&lIndex, [&](void) -> bool {$/;"	f	line:707	language:C++	function:el::Logger::initUnflushedCount	typeref:typename:bool	file:	signature:(void) 
__anoncf5a2b670602	src/easylogging/easylogging++.cc	/^  LevelHelper::forEachLevel(&lIndex, [&](void) -> bool {$/;"	f	line:715	language:C++	function:el::Logger::resolveLoggerFormatSpec	typeref:typename:bool	file:	signature:(void) 
__anoncf5a2b670702	src/easylogging/easylogging++.cc	/^  str.erase(str.begin(), std::find_if(str.begin(), str.end(), [](char c) {$/;"	f	line:887	language:C++	function:el::base::utils::Str::ltrim	file:	signature:(char c) 
__anoncf5a2b670802	src/easylogging/easylogging++.cc	/^  str.erase(std::find_if(str.rbegin(), str.rend(), [](char c) {$/;"	f	line:894	language:C++	function:el::base::utils::Str::rtrim	file:	signature:(char c) 
__anoncf5a2b670902	src/easylogging/easylogging++.cc	/^  [](char c) {$/;"	f	line:950	language:C++	function:el::base::utils::Str::toUpper	file:	signature:(char c) 
__anoncf5a2b670a02	src/easylogging/easylogging++.cc	/^  auto conv = [](const struct timeval& tim) {$/;"	f	line:1223	language:C++	function:el::base::utils::DateTime::getTimeDifference	file:	signature:(const struct timeval& tim) 
__anoncf5a2b670b02	src/easylogging/easylogging++.cc	/^  auto conditionalAddFlag = [&](const base::type::char_t* specifier, base::FormatFlags flag) {$/;"	f	line:1495	language:C++	function:el::base::LogFormat::parseFromFormat	file:	signature:(const base::type::char_t* specifier, base::FormatFlags flag) 
__anoncf5a2b670c02	src/easylogging/easylogging++.cc	/^  auto getBool = [] (std::string boolStr) -> bool {  \/\/ Pass by value for trimming$/;"	f	line:1676	language:C++	function:el::base::TypedConfigurations::build	typeref:typename:bool	file:	signature:(std::string boolStr) 
__anoncf5a2b670d02	src/easylogging/easylogging++.cc	/^  [](char c) {$/;"	f	line:1732	language:C++	function:el::base::TypedConfigurations::getULong	file:	signature:(char c) 
__anoncf5a2b670e02	src/easylogging/easylogging++.cc	/^  auto create = [&](Level level) {$/;"	f	line:1792	language:C++	function:el::base::TypedConfigurations::insertFile	file:	signature:(Level level) 
__anoncf5a2b670f02	src/easylogging/easylogging++.cc	/^  auto addSuffix = [](std::stringstream& ss, const char* sfx, const char* prev) {$/;"	f	line:1952	language:C++	function:el::base::VRegistry::setModules	file:	signature:(std::stringstream& ss, const char* sfx, const char* prev) 
__anoncf5a2b671002	src/easylogging/easylogging++.cc	/^  auto insert = [&](std::stringstream& ss, base::type::VerboseLevel level) {$/;"	f	line:1965	language:C++	function:el::base::VRegistry::setModules	file:	signature:(std::stringstream& ss, base::type::VerboseLevel level) 
__anoncf5a2b671102	src/easylogging/easylogging++.cc	/^  cv.wait(lk, [] { return !ELPP->asyncLogQueue()->empty(); });$/;"	f	line:2307	language:C++	function:el::base::AsyncDispatchWorker::clean	file:
__anoncf5a2b671202	src/easylogging/easylogging++.cc	/^  auto configure = [&](void) {$/;"	f	line:3034	language:C++	function:el::Loggers::configureFromGlobal	file:	signature:(void) 
__anondf7eda890108	src/easylogging/easylogging++.h	/^const struct {$/;"	s	line:764	language:C++	namespace:el::base::consts
__anondf7eda890208	src/easylogging/easylogging++.h	/^const struct {$/;"	s	line:776	language:C++	namespace:el::base::consts
__anoneba9f9790108	src/http_parser/http_parser.h	/^  struct {$/;"	s	line:366	language:C++	struct:http_parser_url	access:public
__b0	src/tests/type_traits.h	/^      static const bool __b0 = sizeof(_Tp) <= sizeof(__smallest);$/;"	m	line:1695	language:C++	class:std::__make_unsigned_selector	typeref:typename:const bool	access:private
__b0	src/tests/type_traits.h	/^      static const bool __b0 = sizeof(_Tp) <= sizeof(__smallest);$/;"	m	line:1807	language:C++	class:std::__make_signed_selector	typeref:typename:const bool	access:private
__b1	src/tests/type_traits.h	/^      static const bool __b1 = sizeof(_Tp) <= sizeof(signed short);$/;"	m	line:1808	language:C++	class:std::__make_signed_selector	typeref:typename:const bool	access:private
__b1	src/tests/type_traits.h	/^      static const bool __b1 = sizeof(_Tp) <= sizeof(unsigned short);$/;"	m	line:1696	language:C++	class:std::__make_unsigned_selector	typeref:typename:const bool	access:private
__b2	src/tests/type_traits.h	/^      static const bool __b2 = sizeof(_Tp) <= sizeof(signed int);$/;"	m	line:1809	language:C++	class:std::__make_signed_selector	typeref:typename:const bool	access:private
__b2	src/tests/type_traits.h	/^      static const bool __b2 = sizeof(_Tp) <= sizeof(unsigned int);$/;"	m	line:1697	language:C++	class:std::__make_unsigned_selector	typeref:typename:const bool	access:private
__bool_constant	src/tests/type_traits.h	/^    using __bool_constant = integral_constant<bool, __v>;$/;"	t	line:86	language:C++	namespace:std	typeref:typename:integral_constant<bool,__v>
__common_type_impl	src/tests/type_traits.h	/^    struct __common_type_impl$/;"	s	line:2095	language:C++	namespace:std	inherits:__do_common_type_impl
__cond1	src/tests/type_traits.h	/^      typedef conditional<__b1, signed short, __cond2_type> __cond1;$/;"	t	line:1812	language:C++	class:std::__make_signed_selector	typeref:typename:conditional<__b1,signed short,__cond2_type>	access:private
__cond1	src/tests/type_traits.h	/^      typedef conditional<__b1, unsigned short, __cond2_type> __cond1;$/;"	t	line:1700	language:C++	class:std::__make_unsigned_selector	typeref:typename:conditional<__b1,unsigned short,__cond2_type>	access:private
__cond1_type	src/tests/type_traits.h	/^      typedef typename __cond1::type __cond1_type;$/;"	t	line:1701	language:C++	class:std::__make_unsigned_selector	typeref:typename:__cond1::type	access:private
__cond1_type	src/tests/type_traits.h	/^      typedef typename __cond1::type __cond1_type;$/;"	t	line:1813	language:C++	class:std::__make_signed_selector	typeref:typename:__cond1::type	access:private
__cond2	src/tests/type_traits.h	/^      typedef conditional<__b2, signed int, signed long> __cond2;$/;"	t	line:1810	language:C++	class:std::__make_signed_selector	typeref:typename:conditional<__b2,signed int,signed long>	access:private
__cond2	src/tests/type_traits.h	/^      typedef conditional<__b2, unsigned int, unsigned long> __cond2;$/;"	t	line:1698	language:C++	class:std::__make_unsigned_selector	typeref:typename:conditional<__b2,unsigned int,unsigned long>	access:private
__cond2_type	src/tests/type_traits.h	/^      typedef typename __cond2::type __cond2_type;$/;"	t	line:1699	language:C++	class:std::__make_unsigned_selector	typeref:typename:__cond2::type	access:private
__cond2_type	src/tests/type_traits.h	/^      typedef typename __cond2::type __cond2_type;$/;"	t	line:1811	language:C++	class:std::__make_signed_selector	typeref:typename:__cond2::type	access:private
__cpp_lib_integral_constant_callable	src/tests/type_traits.h	/^#define __cpp_lib_integral_constant_callable /;"	d	line:70	language:C++
__cpp_lib_is_final	src/tests/type_traits.h	/^#define __cpp_lib_is_final /;"	d	line:635	language:C++
__cpp_lib_is_null_pointer	src/tests/type_traits.h	/^#define __cpp_lib_is_null_pointer /;"	d	line:500	language:C++
__cpp_lib_result_of_sfinae	src/tests/type_traits.h	/^#define __cpp_lib_result_of_sfinae /;"	d	line:2169	language:C++
__cv_selector	src/tests/type_traits.h	/^    struct __cv_selector<_Unqualified, false, false>$/;"	s	line:1591	language:C++	namespace:std
__cv_selector	src/tests/type_traits.h	/^    struct __cv_selector<_Unqualified, false, true>$/;"	s	line:1595	language:C++	namespace:std
__cv_selector	src/tests/type_traits.h	/^    struct __cv_selector<_Unqualified, true, false>$/;"	s	line:1599	language:C++	namespace:std
__cv_selector	src/tests/type_traits.h	/^    struct __cv_selector<_Unqualified, true, true>$/;"	s	line:1603	language:C++	namespace:std
__cv_signed	src/tests/type_traits.h	/^      typedef __match_cv_qualifiers<_Tp, __signed_type> __cv_signed;$/;"	t	line:1796	language:C++	class:std::__make_signed_selector	typeref:typename:__match_cv_qualifiers<_Tp,__signed_type>	access:private
__cv_unsigned	src/tests/type_traits.h	/^      typedef __match_cv_qualifiers<_Tp, __unsigned_type> __cv_unsigned;$/;"	t	line:1684	language:C++	class:std::__make_unsigned_selector	typeref:typename:__match_cv_qualifiers<_Tp,__unsigned_type>	access:private
__data	src/tests/type_traits.h	/^	unsigned char __data[_Len];$/;"	m	line:1925	language:C++	union:std::__aligned_storage_msa::__type	typeref:typename:unsigned char[]	access:public
__data	src/tests/type_traits.h	/^	unsigned char __data[_Len];$/;"	m	line:1946	language:C++	union:std::aligned_storage::type	typeref:typename:unsigned char[]	access:public
__decay_and_strip	src/tests/type_traits.h	/^    struct __decay_and_strip$/;"	s	line:2045	language:C++	namespace:std
__decay_selector	src/tests/type_traits.h	/^    struct __decay_selector<_Up, false, false>$/;"	s	line:2007	language:C++	namespace:std
__decay_selector	src/tests/type_traits.h	/^    struct __decay_selector<_Up, false, true>$/;"	s	line:2015	language:C++	namespace:std
__decay_selector	src/tests/type_traits.h	/^    struct __decay_selector<_Up, true, false>$/;"	s	line:2011	language:C++	namespace:std
__declval_protector	src/tests/type_traits.h	/^    struct __declval_protector$/;"	s	line:2150	language:C++	namespace:std
__delegate	src/tests/type_traits.h	/^      static typename add_rvalue_reference<_Tp>::type __delegate();$/;"	p	line:2153	language:C++	struct:std::__declval_protector	typeref:typename:add_rvalue_reference<_Tp>::type	access:public	signature:()
__do_common_type_impl	src/tests/type_traits.h	/^  struct __do_common_type_impl$/;"	s	line:2083	language:C++	namespace:std
__do_is_default_constructible_impl	src/tests/type_traits.h	/^  struct __do_is_default_constructible_impl$/;"	s	line:793	language:C++	namespace:std
__do_is_destructible_impl	src/tests/type_traits.h	/^  struct __do_is_destructible_impl$/;"	s	line:702	language:C++	namespace:std
__do_is_direct_constructible_impl	src/tests/type_traits.h	/^  struct __do_is_direct_constructible_impl$/;"	s	line:887	language:C++	namespace:std
__do_is_nary_constructible_impl	src/tests/type_traits.h	/^  struct __do_is_nary_constructible_impl$/;"	s	line:1000	language:C++	namespace:std
__do_is_nt_destructible_impl	src/tests/type_traits.h	/^  struct __do_is_nt_destructible_impl$/;"	s	line:749	language:C++	namespace:std
__do_is_static_castable_impl	src/tests/type_traits.h	/^  struct __do_is_static_castable_impl$/;"	s	line:853	language:C++	namespace:std
__do_member_type_wrapper	src/tests/type_traits.h	/^  struct __do_member_type_wrapper$/;"	s	line:2101	language:C++	namespace:std
__dst_t	src/tests/type_traits.h	/^        >::type>::type __dst_t;$/;"	t	line:932	language:C++	struct:std::__is_base_to_derived_ref	typeref:typename:remove_cv<typename remove_reference<_To>::type>::type	access:public
__dst_t	src/tests/type_traits.h	/^        _To>::type>::type __dst_t;$/;"	t	line:956	language:C++	struct:std::__is_lvalue_to_rvalue_ref	typeref:typename:remove_cv<typename remove_reference<_To>::type>::type	access:public
__expanded_common_type_wrapper	src/tests/type_traits.h	/^    struct __expanded_common_type_wrapper$/;"	s	line:2118	language:C++	namespace:std
__expanded_common_type_wrapper	src/tests/type_traits.h	/^    struct __expanded_common_type_wrapper<__failure_type, _Args...>$/;"	s	line:2124	language:C++	namespace:std
__failure_type	src/tests/type_traits.h	/^  struct __failure_type$/;"	s	line:145	language:C++	namespace:std
__is_array_known_bounds	src/tests/type_traits.h	/^    struct __is_array_known_bounds : public integral_constant<bool, (extent<_Tp>::value > 0)> { /;"	s	line:682	language:C++	namespace:std	inherits:integral_constant<bool,(extent<_Tp>::value > 0)>
__is_array_unknown_bounds	src/tests/type_traits.h	/^    struct __is_array_unknown_bounds : public __and_<is_array<_Tp>, __not_<extent<_Tp>>>::type {/;"	s	line:695	language:C++	namespace:std	inherits:__and_<is_array<_Tp>,__not_<extent<_Tp>>>::type
__is_assignable_helper	src/tests/type_traits.h	/^    class __is_assignable_helper$/;"	c	line:1167	language:C++	namespace:std
__is_base_to_derived_ref	src/tests/type_traits.h	/^    struct __is_base_to_derived_ref<_From, _To, false>$/;"	s	line:939	language:C++	namespace:std	inherits:false_type
__is_base_to_derived_ref	src/tests/type_traits.h	/^    struct __is_base_to_derived_ref<_From, _To, true>$/;"	s	line:927	language:C++	namespace:std
__is_constructible_impl	src/tests/type_traits.h	/^    struct __is_constructible_impl$/;"	s	line:1026	language:C++	namespace:std	inherits:__is_nary_constructible<_Tp,_Args...>
__is_constructible_impl	src/tests/type_traits.h	/^    struct __is_constructible_impl<_Tp, _Arg>$/;"	s	line:1031	language:C++	namespace:std	inherits:__is_direct_constructible<_Tp,_Arg>
__is_constructible_impl	src/tests/type_traits.h	/^    struct __is_constructible_impl<_Tp>$/;"	s	line:1036	language:C++	namespace:std	inherits:is_default_constructible<_Tp>
__is_convertible_helper	src/tests/type_traits.h	/^    class __is_convertible_helper<_From, _To, false>$/;"	c	line:1426	language:C++	namespace:std
__is_convertible_helper	src/tests/type_traits.h	/^    struct __is_convertible_helper$/;"	s	line:1422	language:C++	namespace:std
__is_copy_assignable_impl	src/tests/type_traits.h	/^    struct __is_copy_assignable_impl<_Tp, false>$/;"	s	line:1192	language:C++	namespace:std	inherits:false_type
__is_copy_assignable_impl	src/tests/type_traits.h	/^    struct __is_copy_assignable_impl<_Tp, true>$/;"	s	line:1196	language:C++	namespace:std	inherits:is_assignable<_Tp&,const_Tp&>
__is_copy_constructible_impl	src/tests/type_traits.h	/^    struct __is_copy_constructible_impl<_Tp, false>$/;"	s	line:1050	language:C++	namespace:std	inherits:false_type
__is_copy_constructible_impl	src/tests/type_traits.h	/^    struct __is_copy_constructible_impl<_Tp, true>$/;"	s	line:1054	language:C++	namespace:std	inherits:is_constructible<_Tp,const_Tp&>
__is_default_constructible_atom	src/tests/type_traits.h	/^    struct __is_default_constructible_atom$/;"	s	line:810	language:C++	namespace:std	inherits:__and_<__not_<is_void<_Tp>>,__is_default_constructible_impl<_Tp>>::type
__is_default_constructible_impl	src/tests/type_traits.h	/^    struct __is_default_constructible_impl$/;"	s	line:803	language:C++	namespace:std	inherits:__do_is_default_constructible_impl
__is_default_constructible_safe	src/tests/type_traits.h	/^    struct __is_default_constructible_safe<_Tp, false>$/;"	s	line:831	language:C++	namespace:std	inherits:__is_default_constructible_atom<_Tp>::type
__is_default_constructible_safe	src/tests/type_traits.h	/^    struct __is_default_constructible_safe<_Tp, true>$/;"	s	line:824	language:C++	namespace:std	inherits:__and_<__is_array_known_bounds<_Tp>,__is_default_constructible_atom<typenameremove_all_extents<_Tp>::type>>::type
__is_destructible_impl	src/tests/type_traits.h	/^    struct __is_destructible_impl$/;"	s	line:712	language:C++	namespace:std	inherits:__do_is_destructible_impl
__is_destructible_safe	src/tests/type_traits.h	/^    struct __is_destructible_safe<_Tp, false, false>$/;"	s	line:726	language:C++	namespace:std	inherits:__is_destructible_impl<typenameremove_all_extents<_Tp>::type>::type
__is_destructible_safe	src/tests/type_traits.h	/^    struct __is_destructible_safe<_Tp, false, true>$/;"	s	line:736	language:C++	namespace:std	inherits:true_type
__is_destructible_safe	src/tests/type_traits.h	/^    struct __is_destructible_safe<_Tp, true, false>$/;"	s	line:732	language:C++	namespace:std	inherits:false_type
__is_direct_constructible	src/tests/type_traits.h	/^    struct __is_direct_constructible$/;"	s	line:991	language:C++	namespace:std	inherits:__is_direct_constructible_new<_Tp,_Arg>::type
__is_direct_constructible_impl	src/tests/type_traits.h	/^    struct __is_direct_constructible_impl$/;"	s	line:898	language:C++	namespace:std	inherits:__do_is_direct_constructible_impl
__is_direct_constructible_new	src/tests/type_traits.h	/^    struct __is_direct_constructible_new$/;"	s	line:983	language:C++	namespace:std	inherits:conditional<is_reference<_Tp>::value,__is_direct_constructible_ref_cast<_Tp,_Arg>,__is_direct_constructible_new_safe<_Tp,_Arg>>::type
__is_direct_constructible_new_safe	src/tests/type_traits.h	/^    struct __is_direct_constructible_new_safe$/;"	s	line:905	language:C++	namespace:std	inherits:__and_<is_destructible<_Tp>,__is_direct_constructible_impl<_Tp,_Arg>>::type
__is_direct_constructible_ref_cast	src/tests/type_traits.h	/^    struct __is_direct_constructible_ref_cast$/;"	s	line:975	language:C++	namespace:std	inherits:__and_<__is_static_castable<_Arg,_Tp>,__not_<__or_<__is_base_to_derived_ref<_Arg,_Tp>,__is_lvalue_to_rvalue_ref<_Arg,_Tp>>>>::type
__is_lvalue_to_rvalue_ref	src/tests/type_traits.h	/^    struct __is_lvalue_to_rvalue_ref<_From, _To, false>$/;"	s	line:964	language:C++	namespace:std	inherits:false_type
__is_lvalue_to_rvalue_ref	src/tests/type_traits.h	/^    struct __is_lvalue_to_rvalue_ref<_From, _To, true>$/;"	s	line:951	language:C++	namespace:std
__is_member_function_pointer_helper	src/tests/type_traits.h	/^    struct __is_member_function_pointer_helper$/;"	s	line:369	language:C++	namespace:std	inherits:false_type
__is_member_function_pointer_helper	src/tests/type_traits.h	/^    struct __is_member_function_pointer_helper<_Tp _Cp::*>$/;"	s	line:373	language:C++	namespace:std	inherits:integral_constant<bool,is_function<_Tp>::value>
__is_member_object_pointer_helper	src/tests/type_traits.h	/^    struct __is_member_object_pointer_helper$/;"	s	line:356	language:C++	namespace:std	inherits:false_type
__is_member_object_pointer_helper	src/tests/type_traits.h	/^    struct __is_member_object_pointer_helper<_Tp _Cp::*>$/;"	s	line:360	language:C++	namespace:std	inherits:integral_constant<bool,!is_function<_Tp>::value>
__is_member_pointer_helper	src/tests/type_traits.h	/^    struct __is_member_pointer_helper : public false_type { };$/;"	s	line:559	language:C++	namespace:std	inherits:false_type
__is_member_pointer_helper	src/tests/type_traits.h	/^    struct __is_member_pointer_helper<_Tp _Cp::*> : public true_type { };$/;"	s	line:563	language:C++	namespace:std	inherits:true_type
__is_move_assignable_impl	src/tests/type_traits.h	/^    struct __is_move_assignable_impl<_Tp, false>$/;"	s	line:1210	language:C++	namespace:std	inherits:false_type
__is_move_assignable_impl	src/tests/type_traits.h	/^    struct __is_move_assignable_impl<_Tp, true>$/;"	s	line:1214	language:C++	namespace:std	inherits:is_assignable<_Tp&,_Tp&&>
__is_move_constructible_impl	src/tests/type_traits.h	/^    struct __is_move_constructible_impl<_Tp, false>$/;"	s	line:1068	language:C++	namespace:std	inherits:false_type
__is_move_constructible_impl	src/tests/type_traits.h	/^    struct __is_move_constructible_impl<_Tp, true>$/;"	s	line:1072	language:C++	namespace:std	inherits:is_constructible<_Tp,_Tp&&>
__is_nary_constructible	src/tests/type_traits.h	/^    struct __is_nary_constructible$/;"	s	line:1018	language:C++	namespace:std	inherits:__is_nary_constructible_impl<_Tp,_Args...>::type
__is_nary_constructible_impl	src/tests/type_traits.h	/^    struct __is_nary_constructible_impl$/;"	s	line:1011	language:C++	namespace:std	inherits:__do_is_nary_constructible_impl
__is_nothrow_copy_constructible_impl	src/tests/type_traits.h	/^    struct __is_nothrow_copy_constructible_impl<_Tp, false>$/;"	s	line:1134	language:C++	namespace:std	inherits:false_type
__is_nothrow_copy_constructible_impl	src/tests/type_traits.h	/^    struct __is_nothrow_copy_constructible_impl<_Tp, true>$/;"	s	line:1138	language:C++	namespace:std	inherits:is_nothrow_constructible<_Tp,const_Tp&>
__is_nothrow_move_constructible_impl	src/tests/type_traits.h	/^    struct __is_nothrow_move_constructible_impl<_Tp, false>$/;"	s	line:1152	language:C++	namespace:std	inherits:false_type
__is_nothrow_move_constructible_impl	src/tests/type_traits.h	/^    struct __is_nothrow_move_constructible_impl<_Tp, true>$/;"	s	line:1156	language:C++	namespace:std	inherits:is_nothrow_constructible<_Tp,_Tp&&>
__is_nt_assignable_impl	src/tests/type_traits.h	/^    struct __is_nt_assignable_impl$/;"	s	line:1225	language:C++	namespace:std	inherits:integral_constant<bool,noexcept(declval<_Tp>() = declval<_Up>())>
__is_nt_constructible_impl	src/tests/type_traits.h	/^    struct __is_nt_constructible_impl$/;"	s	line:1110	language:C++	namespace:std	inherits:integral_constant<bool,noexcept(_Tp(declval<_Args>()...))>
__is_nt_constructible_impl	src/tests/type_traits.h	/^    struct __is_nt_constructible_impl<_Tp, _Arg>$/;"	s	line:1115	language:C++	namespace:std	inherits:integral_constant<bool,noexcept(static_cast<_Tp>(declval<_Arg>()))>
__is_nt_constructible_impl	src/tests/type_traits.h	/^    struct __is_nt_constructible_impl<_Tp>$/;"	s	line:1121	language:C++	namespace:std	inherits:is_nothrow_default_constructible<_Tp>
__is_nt_copy_assignable_impl	src/tests/type_traits.h	/^    struct __is_nt_copy_assignable_impl<_Tp, false>$/;"	s	line:1240	language:C++	namespace:std	inherits:false_type
__is_nt_copy_assignable_impl	src/tests/type_traits.h	/^    struct __is_nt_copy_assignable_impl<_Tp, true>$/;"	s	line:1244	language:C++	namespace:std	inherits:is_nothrow_assignable<_Tp&,const_Tp&>
__is_nt_default_constructible_atom	src/tests/type_traits.h	/^    struct __is_nt_default_constructible_atom$/;"	s	line:1083	language:C++	namespace:std	inherits:integral_constant<bool,noexcept(_Tp())>
__is_nt_default_constructible_impl	src/tests/type_traits.h	/^    struct __is_nt_default_constructible_impl<_Tp, false>$/;"	s	line:1098	language:C++	namespace:std	inherits:__is_nt_default_constructible_atom<_Tp>
__is_nt_default_constructible_impl	src/tests/type_traits.h	/^    struct __is_nt_default_constructible_impl<_Tp, true>$/;"	s	line:1091	language:C++	namespace:std	inherits:__and_<__is_array_known_bounds<_Tp>,__is_nt_default_constructible_atom<typenameremove_all_extents<_Tp>::type>>::type
__is_nt_destructible_impl	src/tests/type_traits.h	/^    struct __is_nt_destructible_impl$/;"	s	line:760	language:C++	namespace:std	inherits:__do_is_nt_destructible_impl
__is_nt_destructible_safe	src/tests/type_traits.h	/^    struct __is_nt_destructible_safe<_Tp, false, false>$/;"	s	line:774	language:C++	namespace:std	inherits:__is_nt_destructible_impl<typenameremove_all_extents<_Tp>::type>::type
__is_nt_destructible_safe	src/tests/type_traits.h	/^    struct __is_nt_destructible_safe<_Tp, false, true>$/;"	s	line:784	language:C++	namespace:std	inherits:true_type
__is_nt_destructible_safe	src/tests/type_traits.h	/^    struct __is_nt_destructible_safe<_Tp, true, false>$/;"	s	line:780	language:C++	namespace:std	inherits:false_type
__is_nt_move_assignable_impl	src/tests/type_traits.h	/^    struct __is_nt_move_assignable_impl<_Tp, false>$/;"	s	line:1258	language:C++	namespace:std	inherits:false_type
__is_nt_move_assignable_impl	src/tests/type_traits.h	/^    struct __is_nt_move_assignable_impl<_Tp, true>$/;"	s	line:1262	language:C++	namespace:std	inherits:is_nothrow_assignable<_Tp&,_Tp&&>
__is_referenceable	src/tests/type_traits.h	/^    struct __is_referenceable$/;"	s	line:575	language:C++	namespace:std	inherits:__or_<is_object<_Tp>,is_reference<_Tp>>::type
__is_referenceable	src/tests/type_traits.h	/^    struct __is_referenceable<_Res(_Args...)>$/;"	s	line:580	language:C++	namespace:std	inherits:true_type
__is_referenceable	src/tests/type_traits.h	/^    struct __is_referenceable<_Res(_Args......)>$/;"	s	line:585	language:C++	namespace:std	inherits:true_type
__is_static_castable	src/tests/type_traits.h	/^    struct __is_static_castable$/;"	s	line:877	language:C++	namespace:std	inherits:integral_constant<bool,(__is_static_castable_safe< _From, _To>::value)>
__is_static_castable_impl	src/tests/type_traits.h	/^    struct __is_static_castable_impl$/;"	s	line:864	language:C++	namespace:std	inherits:__do_is_static_castable_impl
__is_static_castable_safe	src/tests/type_traits.h	/^    struct __is_static_castable_safe$/;"	s	line:871	language:C++	namespace:std	inherits:__is_static_castable_impl<_From,_To>::type
__make_signed	src/tests/type_traits.h	/^    struct __make_signed$/;"	s	line:1722	language:C++	namespace:std
__make_signed	src/tests/type_traits.h	/^    struct __make_signed<char16_t> : __make_signed<uint_least16_t>$/;"	s	line:1757	language:C++	namespace:std	inherits:__make_signed<uint_least16_t>
__make_signed	src/tests/type_traits.h	/^    struct __make_signed<char32_t> : __make_signed<uint_least32_t>$/;"	s	line:1760	language:C++	namespace:std	inherits:__make_signed<uint_least32_t>
__make_signed	src/tests/type_traits.h	/^    struct __make_signed<char>$/;"	s	line:1726	language:C++	namespace:std
__make_signed	src/tests/type_traits.h	/^    struct __make_signed<unsigned __GLIBCXX_TYPE_INT_N_0>$/;"	s	line:1766	language:C++	namespace:std
__make_signed	src/tests/type_traits.h	/^    struct __make_signed<unsigned __GLIBCXX_TYPE_INT_N_1>$/;"	s	line:1771	language:C++	namespace:std
__make_signed	src/tests/type_traits.h	/^    struct __make_signed<unsigned __GLIBCXX_TYPE_INT_N_2>$/;"	s	line:1776	language:C++	namespace:std
__make_signed	src/tests/type_traits.h	/^    struct __make_signed<unsigned __GLIBCXX_TYPE_INT_N_3>$/;"	s	line:1781	language:C++	namespace:std
__make_signed	src/tests/type_traits.h	/^    struct __make_signed<unsigned char>$/;"	s	line:1730	language:C++	namespace:std
__make_signed	src/tests/type_traits.h	/^    struct __make_signed<unsigned int>$/;"	s	line:1738	language:C++	namespace:std
__make_signed	src/tests/type_traits.h	/^    struct __make_signed<unsigned long long>$/;"	s	line:1746	language:C++	namespace:std
__make_signed	src/tests/type_traits.h	/^    struct __make_signed<unsigned long>$/;"	s	line:1742	language:C++	namespace:std
__make_signed	src/tests/type_traits.h	/^    struct __make_signed<unsigned short>$/;"	s	line:1734	language:C++	namespace:std
__make_signed	src/tests/type_traits.h	/^    struct __make_signed<wchar_t> : __make_signed<__WCHAR_TYPE__>$/;"	s	line:1751	language:C++	namespace:std	inherits:__make_signed<__WCHAR_TYPE__>
__make_signed_selector	src/tests/type_traits.h	/^    class __make_signed_selector<_Tp, false, true>$/;"	c	line:1803	language:C++	namespace:std
__make_signed_selector	src/tests/type_traits.h	/^    class __make_signed_selector<_Tp, true, false>$/;"	c	line:1792	language:C++	namespace:std
__make_unsigned	src/tests/type_traits.h	/^    struct __make_unsigned$/;"	s	line:1619	language:C++	namespace:std
__make_unsigned	src/tests/type_traits.h	/^    struct __make_unsigned<__GLIBCXX_TYPE_INT_N_0>$/;"	s	line:1654	language:C++	namespace:std
__make_unsigned	src/tests/type_traits.h	/^    struct __make_unsigned<__GLIBCXX_TYPE_INT_N_1>$/;"	s	line:1659	language:C++	namespace:std
__make_unsigned	src/tests/type_traits.h	/^    struct __make_unsigned<__GLIBCXX_TYPE_INT_N_2>$/;"	s	line:1664	language:C++	namespace:std
__make_unsigned	src/tests/type_traits.h	/^    struct __make_unsigned<__GLIBCXX_TYPE_INT_N_3>$/;"	s	line:1669	language:C++	namespace:std
__make_unsigned	src/tests/type_traits.h	/^    struct __make_unsigned<char>$/;"	s	line:1623	language:C++	namespace:std
__make_unsigned	src/tests/type_traits.h	/^    struct __make_unsigned<int>$/;"	s	line:1635	language:C++	namespace:std
__make_unsigned	src/tests/type_traits.h	/^    struct __make_unsigned<long long>$/;"	s	line:1643	language:C++	namespace:std
__make_unsigned	src/tests/type_traits.h	/^    struct __make_unsigned<long>$/;"	s	line:1639	language:C++	namespace:std
__make_unsigned	src/tests/type_traits.h	/^    struct __make_unsigned<short>$/;"	s	line:1631	language:C++	namespace:std
__make_unsigned	src/tests/type_traits.h	/^    struct __make_unsigned<signed char>$/;"	s	line:1627	language:C++	namespace:std
__make_unsigned	src/tests/type_traits.h	/^    struct __make_unsigned<wchar_t> : __make_unsigned<__WCHAR_TYPE__>$/;"	s	line:1648	language:C++	namespace:std	inherits:__make_unsigned<__WCHAR_TYPE__>
__make_unsigned_selector	src/tests/type_traits.h	/^    class __make_unsigned_selector<_Tp, false, true>$/;"	c	line:1691	language:C++	namespace:std
__make_unsigned_selector	src/tests/type_traits.h	/^    class __make_unsigned_selector<_Tp, true, false>$/;"	c	line:1680	language:C++	namespace:std
__match	src/tests/type_traits.h	/^      typedef __cv_selector<_Unqualified, _IsConst, _IsVol> __match;$/;"	t	line:1611	language:C++	class:std::__match_cv_qualifiers	typeref:typename:__cv_selector<_Unqualified,_IsConst,_IsVol>	access:private
__match_cv_qualifiers	src/tests/type_traits.h	/^    class __match_cv_qualifiers$/;"	c	line:1609	language:C++	namespace:std
__member_type_wrapper	src/tests/type_traits.h	/^    struct __member_type_wrapper$/;"	s	line:2111	language:C++	namespace:std	inherits:__do_member_type_wrapper
__not_	src/tests/type_traits.h	/^    struct __not_ : public integral_constant<bool, !_Pp::value> { };$/;"	s	line:134	language:C++	namespace:std	inherits:integral_constant<bool,!_Pp::value>
__or_	src/tests/type_traits.h	/^    struct __or_<> : public false_type { };$/;"	s	line:97	language:C++	namespace:std	inherits:false_type
__or_	src/tests/type_traits.h	/^    struct __or_<_B1, _B2, _B3, _Bn...>$/;"	s	line:111	language:C++	namespace:std	inherits:conditional<_B1::value,_B1,__or_<_B2,_B3,_Bn...>>::type
__or_	src/tests/type_traits.h	/^    struct __or_<_B1, _B2> : public conditional<_B1::value, _B1, _B2>::type { };$/;"	s	line:107	language:C++	namespace:std	inherits:conditional<_B1::value,_B1,_B2>::type
__or_	src/tests/type_traits.h	/^    struct __or_<_B1> : public _B1 { };$/;"	s	line:102	language:C++	namespace:std	inherits:_B1
__remove_pointer_helper	src/tests/type_traits.h	/^    struct __remove_pointer_helper$/;"	s	line:1882	language:C++	namespace:std
__remove_pointer_helper	src/tests/type_traits.h	/^    struct __remove_pointer_helper<_Tp, _Up*>$/;"	s	line:1886	language:C++	namespace:std
__remove_type	src/tests/type_traits.h	/^      typedef typename remove_reference<_Tp>::type __remove_type;$/;"	t	line:2022	language:C++	class:std::decay	typeref:typename:remove_reference<_Tp>::type	access:private
__result_of_impl	src/tests/type_traits.h	/^    struct __result_of_impl$/;"	s	line:2280	language:C++	namespace:std
__result_of_impl	src/tests/type_traits.h	/^    struct __result_of_impl<false, false, _Functor, _ArgTypes...>$/;"	s	line:2308	language:C++	namespace:std	inherits:__result_of_other_impl
__result_of_impl	src/tests/type_traits.h	/^    struct __result_of_impl<false, true, _MemPtr, _Arg, _Args...>$/;"	s	line:2291	language:C++	namespace:std	inherits:__result_of_memfun<typenamedecay<_MemPtr>::type,_Arg,_Args...>
__result_of_impl	src/tests/type_traits.h	/^    struct __result_of_impl<true, false, _MemPtr, _Arg>$/;"	s	line:2286	language:C++	namespace:std	inherits:__result_of_memobj<typenamedecay<_MemPtr>::type,_Arg>
__result_of_memfun	src/tests/type_traits.h	/^    struct __result_of_memfun<_Res _Class::*, _Arg, _Args...>$/;"	s	line:2267	language:C++	namespace:std
__result_of_memfun_deref	src/tests/type_traits.h	/^    struct __result_of_memfun_deref$/;"	s	line:2203	language:C++	namespace:std	inherits:__result_of_memfun_deref_impl
__result_of_memfun_deref_impl	src/tests/type_traits.h	/^  struct __result_of_memfun_deref_impl$/;"	s	line:2191	language:C++	namespace:std
__result_of_memfun_ref	src/tests/type_traits.h	/^    struct __result_of_memfun_ref$/;"	s	line:2184	language:C++	namespace:std	inherits:__result_of_memfun_ref_impl
__result_of_memfun_ref_impl	src/tests/type_traits.h	/^  struct __result_of_memfun_ref_impl$/;"	s	line:2172	language:C++	namespace:std
__result_of_memobj	src/tests/type_traits.h	/^    struct __result_of_memobj<_Res _Class::*, _Arg>$/;"	s	line:2251	language:C++	namespace:std
__result_of_memobj_deref	src/tests/type_traits.h	/^    struct __result_of_memobj_deref$/;"	s	line:2241	language:C++	namespace:std	inherits:__result_of_memobj_deref_impl
__result_of_memobj_deref_impl	src/tests/type_traits.h	/^  struct __result_of_memobj_deref_impl$/;"	s	line:2229	language:C++	namespace:std
__result_of_memobj_ref	src/tests/type_traits.h	/^    struct __result_of_memobj_ref$/;"	s	line:2222	language:C++	namespace:std	inherits:__result_of_memobj_ref_impl
__result_of_memobj_ref_impl	src/tests/type_traits.h	/^  struct __result_of_memobj_ref_impl$/;"	s	line:2210	language:C++	namespace:std
__result_of_other_impl	src/tests/type_traits.h	/^  struct __result_of_other_impl$/;"	s	line:2296	language:C++	namespace:std
__signed_type	src/tests/type_traits.h	/^      typedef typename __signedt::__type __signed_type;$/;"	t	line:1795	language:C++	class:std::__make_signed_selector	typeref:typename:__signedt::__type	access:private
__signedt	src/tests/type_traits.h	/^      typedef __make_signed<typename remove_cv<_Tp>::type> __signedt;$/;"	t	line:1794	language:C++	class:std::__make_signed_selector	typeref:typename:__make_signed<typename remove_cv<_Tp>::type>	access:private
__smallest	src/tests/type_traits.h	/^      typedef signed char __smallest;$/;"	t	line:1806	language:C++	class:std::__make_signed_selector	typeref:typename:signed char	access:private
__smallest	src/tests/type_traits.h	/^      typedef unsigned char __smallest;$/;"	t	line:1694	language:C++	class:std::__make_unsigned_selector	typeref:typename:unsigned char	access:private
__src_t	src/tests/type_traits.h	/^        >::type>::type __src_t;$/;"	t	line:930	language:C++	struct:std::__is_base_to_derived_ref	typeref:typename:remove_cv<typename remove_reference<_From>::type>::type	access:public
__src_t	src/tests/type_traits.h	/^        _From>::type>::type __src_t;$/;"	t	line:954	language:C++	struct:std::__is_lvalue_to_rvalue_ref	typeref:typename:remove_cv<typename remove_reference<_From>::type>::type	access:public
__stop	src/tests/type_traits.h	/^      static const bool __stop = false;$/;"	m	line:2152	language:C++	struct:std::__declval_protector	typeref:typename:const bool	access:public
__strictest	src/tests/type_traits.h	/^      using __strictest = __strictest_alignment<_Types...>;$/;"	t	line:1985	language:C++	struct:std::aligned_union	typeref:typename:__strictest_alignment<_Types...>	access:private
__strictest_alignment	src/tests/type_traits.h	/^    struct __strictest_alignment$/;"	s	line:1952	language:C++	namespace:std
__strictest_alignment	src/tests/type_traits.h	/^    struct __strictest_alignment<_Tp, _Types...>$/;"	s	line:1959	language:C++	namespace:std
__strip_reference_wrapper	src/tests/type_traits.h	/^    struct __strip_reference_wrapper$/;"	s	line:2033	language:C++	namespace:std
__strip_reference_wrapper	src/tests/type_traits.h	/^    struct __strip_reference_wrapper<reference_wrapper<_Tp> >$/;"	s	line:2039	language:C++	namespace:std
__success_type	src/tests/type_traits.h	/^    struct __success_type$/;"	s	line:142	language:C++	namespace:std
__test	src/tests/type_traits.h	/^	__test(...);$/;"	p	line:1176	language:C++	class:std::__is_assignable_helper	typeref:typename:false_type	access:private	signature:(...)
__test	src/tests/type_traits.h	/^	__test(...);$/;"	p	line:1438	language:C++	class:std::__is_convertible_helper	typeref:typename:false_type	access:private	signature:(...)
__test	src/tests/type_traits.h	/^	__test(int);$/;"	p	line:1172	language:C++	class:std::__is_assignable_helper	typeref:typename:true_type	access:private	signature:(int)
__test	src/tests/type_traits.h	/^	__test(int);$/;"	p	line:1434	language:C++	class:std::__is_convertible_helper	typeref:typename:true_type	access:private	signature:(int)
__test	src/tests/type_traits.h	/^        __test(int);$/;"	p	line:753	language:C++	struct:std::__do_is_nt_destructible_impl	typeref:typename:integral_constant<bool,noexcept (declval<_Tp &> ().~_Tp ())>	access:public	signature:(int)
__test	src/tests/type_traits.h	/^      static false_type __test(...);$/;"	p	line:1007	language:C++	struct:std::__do_is_nary_constructible_impl	typeref:typename:false_type	access:public	signature:(...)
__test	src/tests/type_traits.h	/^      static false_type __test(...);$/;"	p	line:708	language:C++	struct:std::__do_is_destructible_impl	typeref:typename:false_type	access:public	signature:(...)
__test	src/tests/type_traits.h	/^      static false_type __test(...);$/;"	p	line:756	language:C++	struct:std::__do_is_nt_destructible_impl	typeref:typename:false_type	access:public	signature:(...)
__test	src/tests/type_traits.h	/^      static false_type __test(...);$/;"	p	line:799	language:C++	struct:std::__do_is_default_constructible_impl	typeref:typename:false_type	access:public	signature:(...)
__test	src/tests/type_traits.h	/^      static false_type __test(...);$/;"	p	line:860	language:C++	struct:std::__do_is_static_castable_impl	typeref:typename:false_type	access:public	signature:(...)
__test	src/tests/type_traits.h	/^      static false_type __test(...);$/;"	p	line:894	language:C++	struct:std::__do_is_direct_constructible_impl	typeref:typename:false_type	access:public	signature:(...)
__test	src/tests/type_traits.h	/^      static true_type __test(int);$/;"	p	line:1004	language:C++	struct:std::__do_is_nary_constructible_impl	typeref:typename:true_type	access:public	signature:(int)
__test	src/tests/type_traits.h	/^      static true_type __test(int);$/;"	p	line:705	language:C++	struct:std::__do_is_destructible_impl	typeref:typename:true_type	access:public	signature:(int)
__test	src/tests/type_traits.h	/^      static true_type __test(int);$/;"	p	line:796	language:C++	struct:std::__do_is_default_constructible_impl	typeref:typename:true_type	access:public	signature:(int)
__test	src/tests/type_traits.h	/^      static true_type __test(int);$/;"	p	line:857	language:C++	struct:std::__do_is_static_castable_impl	typeref:typename:true_type	access:public	signature:(int)
__test	src/tests/type_traits.h	/^      static true_type __test(int);$/;"	p	line:891	language:C++	struct:std::__do_is_direct_constructible_impl	typeref:typename:true_type	access:public	signature:(int)
__test_aux	src/tests/type_traits.h	/^	static void __test_aux(_To1);$/;"	p	line:1429	language:C++	class:std::__is_convertible_helper	typeref:typename:void	access:private	signature:(_To1)
__type	src/tests/type_traits.h	/^	typename decay<_Tp>::type>::__type __type;$/;"	t	line:2048	language:C++	struct:std::__decay_and_strip	typeref:typename:__strip_reference_wrapper<typename decay<_Tp>::type>::__type	access:public
__type	src/tests/type_traits.h	/^      typedef _Tp __type;$/;"	t	line:2035	language:C++	struct:std::__strip_reference_wrapper	typeref:typename:_Tp	access:public
__type	src/tests/type_traits.h	/^      typedef _Tp& __type;$/;"	t	line:2041	language:C++	struct:std::__strip_reference_wrapper	typeref:typename:_Tp &	access:public
__type	src/tests/type_traits.h	/^      typedef typename __cv_signed::__type __type;$/;"	t	line:1799	language:C++	class:std::__make_signed_selector	typeref:typename:__cv_signed::__type	access:public
__type	src/tests/type_traits.h	/^      typedef typename __cv_unsigned::__type __type;$/;"	t	line:1687	language:C++	class:std::__make_unsigned_selector	typeref:typename:__cv_unsigned::__type	access:public
__type	src/tests/type_traits.h	/^      typedef typename __match::__type __type; $/;"	t	line:1614	language:C++	class:std::__match_cv_qualifiers	typeref:typename:__match::__type	access:public
__type	src/tests/type_traits.h	/^      typedef typename conditional<__b0, __smallest, __cond1_type>::type __type;$/;"	t	line:1704	language:C++	class:std::__make_unsigned_selector	typeref:typename:conditional<__b0,__smallest,__cond1_type>::type	access:public
__type	src/tests/type_traits.h	/^      typedef typename conditional<__b0, __smallest, __cond1_type>::type __type;$/;"	t	line:1816	language:C++	class:std::__make_signed_selector	typeref:typename:conditional<__b0,__smallest,__cond1_type>::type	access:public
__type	src/tests/type_traits.h	/^      union __type$/;"	u	line:1923	language:C++	struct:std::__aligned_storage_msa	access:public
__type	src/tests/type_traits.h	/^    { typedef _Tp __type; };$/;"	t	line:1620	language:C++	struct:std::__make_unsigned	typeref:typename:_Tp	access:public
__type	src/tests/type_traits.h	/^    { typedef _Tp __type; };$/;"	t	line:1723	language:C++	struct:std::__make_signed	typeref:typename:_Tp	access:public
__type	src/tests/type_traits.h	/^    { typedef _Unqualified __type; };$/;"	t	line:1592	language:C++	struct:std::__cv_selector	typeref:typename:_Unqualified	access:public
__type	src/tests/type_traits.h	/^    { typedef __GLIBCXX_TYPE_INT_N_0 __type; };$/;"	t	line:1767	language:C++	struct:std::__make_signed	typeref:typename:__GLIBCXX_TYPE_INT_N_0	access:public
__type	src/tests/type_traits.h	/^    { typedef __GLIBCXX_TYPE_INT_N_1 __type; };$/;"	t	line:1772	language:C++	struct:std::__make_signed	typeref:typename:__GLIBCXX_TYPE_INT_N_1	access:public
__type	src/tests/type_traits.h	/^    { typedef __GLIBCXX_TYPE_INT_N_2 __type; };$/;"	t	line:1777	language:C++	struct:std::__make_signed	typeref:typename:__GLIBCXX_TYPE_INT_N_2	access:public
__type	src/tests/type_traits.h	/^    { typedef __GLIBCXX_TYPE_INT_N_3 __type; };$/;"	t	line:1782	language:C++	struct:std::__make_signed	typeref:typename:__GLIBCXX_TYPE_INT_N_3	access:public
__type	src/tests/type_traits.h	/^    { typedef const _Unqualified __type; };$/;"	t	line:1600	language:C++	struct:std::__cv_selector	typeref:typename:const _Unqualified	access:public
__type	src/tests/type_traits.h	/^    { typedef const volatile _Unqualified __type; };$/;"	t	line:1604	language:C++	struct:std::__cv_selector	typeref:typename:const volatile _Unqualified	access:public
__type	src/tests/type_traits.h	/^    { typedef signed char __type; };$/;"	t	line:1727	language:C++	struct:std::__make_signed	typeref:typename:signed char	access:public
__type	src/tests/type_traits.h	/^    { typedef signed char __type; };$/;"	t	line:1731	language:C++	struct:std::__make_signed	typeref:typename:signed char	access:public
__type	src/tests/type_traits.h	/^    { typedef signed int __type; };$/;"	t	line:1739	language:C++	struct:std::__make_signed	typeref:typename:signed int	access:public
__type	src/tests/type_traits.h	/^    { typedef signed long __type; };$/;"	t	line:1743	language:C++	struct:std::__make_signed	typeref:typename:signed long	access:public
__type	src/tests/type_traits.h	/^    { typedef signed long long __type; };$/;"	t	line:1747	language:C++	struct:std::__make_signed	typeref:typename:signed long long	access:public
__type	src/tests/type_traits.h	/^    { typedef signed short __type; };$/;"	t	line:1735	language:C++	struct:std::__make_signed	typeref:typename:signed short	access:public
__type	src/tests/type_traits.h	/^    { typedef typename add_pointer<_Up>::type __type; };$/;"	t	line:2016	language:C++	struct:std::__decay_selector	typeref:typename:add_pointer<_Up>::type	access:public
__type	src/tests/type_traits.h	/^    { typedef typename remove_cv<_Up>::type __type; };$/;"	t	line:2008	language:C++	struct:std::__decay_selector	typeref:typename:remove_cv<_Up>::type	access:public
__type	src/tests/type_traits.h	/^    { typedef typename remove_extent<_Up>::type* __type; };$/;"	t	line:2012	language:C++	struct:std::__decay_selector	typeref:typename:remove_extent<_Up>::type *	access:public
__type	src/tests/type_traits.h	/^    { typedef unsigned __GLIBCXX_TYPE_INT_N_0 __type; };$/;"	t	line:1655	language:C++	struct:std::__make_unsigned	typeref:typename:unsigned __GLIBCXX_TYPE_INT_N_0	access:public
__type	src/tests/type_traits.h	/^    { typedef unsigned __GLIBCXX_TYPE_INT_N_1 __type; };$/;"	t	line:1660	language:C++	struct:std::__make_unsigned	typeref:typename:unsigned __GLIBCXX_TYPE_INT_N_1	access:public
__type	src/tests/type_traits.h	/^    { typedef unsigned __GLIBCXX_TYPE_INT_N_2 __type; };$/;"	t	line:1665	language:C++	struct:std::__make_unsigned	typeref:typename:unsigned __GLIBCXX_TYPE_INT_N_2	access:public
__type	src/tests/type_traits.h	/^    { typedef unsigned __GLIBCXX_TYPE_INT_N_3 __type; };$/;"	t	line:1670	language:C++	struct:std::__make_unsigned	typeref:typename:unsigned __GLIBCXX_TYPE_INT_N_3	access:public
__type	src/tests/type_traits.h	/^    { typedef unsigned char __type; };$/;"	t	line:1624	language:C++	struct:std::__make_unsigned	typeref:typename:unsigned char	access:public
__type	src/tests/type_traits.h	/^    { typedef unsigned char __type; };$/;"	t	line:1628	language:C++	struct:std::__make_unsigned	typeref:typename:unsigned char	access:public
__type	src/tests/type_traits.h	/^    { typedef unsigned int __type; };$/;"	t	line:1636	language:C++	struct:std::__make_unsigned	typeref:typename:unsigned int	access:public
__type	src/tests/type_traits.h	/^    { typedef unsigned long __type; };$/;"	t	line:1640	language:C++	struct:std::__make_unsigned	typeref:typename:unsigned long	access:public
__type	src/tests/type_traits.h	/^    { typedef unsigned long long __type; };$/;"	t	line:1644	language:C++	struct:std::__make_unsigned	typeref:typename:unsigned long long	access:public
__type	src/tests/type_traits.h	/^    { typedef unsigned short __type; };$/;"	t	line:1632	language:C++	struct:std::__make_unsigned	typeref:typename:unsigned short	access:public
__type	src/tests/type_traits.h	/^    { typedef volatile _Unqualified __type; };$/;"	t	line:1596	language:C++	struct:std::__cv_selector	typeref:typename:volatile _Unqualified	access:public
__unsigned_type	src/tests/type_traits.h	/^      typedef typename __unsignedt::__type __unsigned_type;$/;"	t	line:1683	language:C++	class:std::__make_unsigned_selector	typeref:typename:__unsignedt::__type	access:private
__unsignedt	src/tests/type_traits.h	/^      typedef __make_unsigned<typename remove_cv<_Tp>::type> __unsignedt;$/;"	t	line:1682	language:C++	class:std::__make_unsigned_selector	typeref:typename:__make_unsigned<typename remove_cv<_Tp>::type>	access:private
__void_t	src/tests/type_traits.h	/^  template<typename...> using __void_t = void;$/;"	t	line:2361	language:C++	namespace:std	typeref:typename:void
_intervals	src/mysql_gtid/mysql_gtid.h	/^  std::vector<IntervalList> _intervals;$/;"	m	line:92	language:C++	class:MySQLGtidSet	typeref:typename:std::vector<IntervalList>	access:private
_sid_map	src/mysql_gtid/mysql_gtid.h	/^  boost::shared_ptr<MySQLSidMap> _sid_map;$/;"	m	line:91	language:C++	class:MySQLGtidSet	typeref:typename:boost::shared_ptr<MySQLSidMap>	access:private
_sid_sidno_map	src/mysql_gtid/mysql_gtid.h	/^  SidSidnoMap _sid_sidno_map;$/;"	m	line:61	language:C++	class:MySQLSidMap	typeref:typename:SidSidnoMap	access:private
_sidno_sid_map	src/mysql_gtid/mysql_gtid.h	/^  SidnoSidMap _sidno_sid_map;$/;"	m	line:62	language:C++	class:MySQLSidMap	typeref:typename:SidnoSidMap	access:private
abort	src/easylogging/easylogging++.cc	/^static void abort(int status, const std::string& reason) {$/;"	f	line:117	language:C++	namespace:el::base::utils	typeref:typename:void	file:	signature:(int status,const std::string & reason)
acquireLock	src/easylogging/easylogging++.h	/^  virtual inline void acquireLock(void) ELPP_FINAL { m_mutex.lock(); }$/;"	f	line:1003	language:C++	class:el::base::threading::ThreadSafe	typeref:typename:void	access:public	signature:(void)
action1	src/design_patterns/chain_of_responsibility/broke_chain.h	/^void action1()$/;"	f	line:92	language:C++	namespace:design_patterns	typeref:typename:void	signature:()
action_t	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    using action_t = signal<void()>;$/;"	t	line:99	language:C++	function:design_patterns::test_broke_chain
add	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    void add(NewCreatureModifier& modifier)$/;"	f	line:75	language:C++	struct:design_patterns::NewCreatureModifier	typeref:typename:void	access:public	signature:(NewCreatureModifier & modifier)
add	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^    void add(CreatureModifier& modifier)$/;"	f	line:36	language:C++	class:design_patterns::CreatureModifier	typeref:typename:void	access:public	signature:(CreatureModifier & modifier)
add	src/http/HttpHeaders.cpp	/^void HttpHeaders::add(HttpHeaderCode code, std::string&& headerValue)$/;"	f	line:99	language:C++	class:http::HttpHeaders	typeref:typename:void	signature:(HttpHeaderCode code,std::string && headerValue)
add	src/http/HttpHeaders.cpp	/^void HttpHeaders::add(const std::string& headerName, const std::string& headerValue)$/;"	f	line:73	language:C++	class:http::HttpHeaders	typeref:typename:void	signature:(const std::string & headerName,const std::string & headerValue)
add	src/http/HttpHeaders.cpp	/^void HttpHeaders::add(const std::string& headerName, std::string&& headerValue)$/;"	f	line:86	language:C++	class:http::HttpHeaders	typeref:typename:void	signature:(const std::string & headerName,std::string && headerValue)
add	src/http/HttpHeaders.cpp	/^void HttpHeaders::add(const_string_piece headerName, const_string_piece headerValue)$/;"	f	line:59	language:C++	class:http::HttpHeaders	typeref:typename:void	signature:(const_string_piece headerName,const_string_piece headerValue)
add	src/http/HttpHeaders.h	/^    void add(HttpHeaderCode code, std::string&& headerValue);$/;"	p	line:48	language:C++	class:http::HttpHeaders	typeref:typename:void	access:public	signature:(HttpHeaderCode code,std::string && headerValue)
add	src/http/HttpHeaders.h	/^    void add(const std::string& headerName, const std::string& headerValue);$/;"	p	line:46	language:C++	class:http::HttpHeaders	typeref:typename:void	access:public	signature:(const std::string & headerName,const std::string & headerValue)
add	src/http/HttpHeaders.h	/^    void add(const std::string& headerName, std::string&& headerValue);$/;"	p	line:47	language:C++	class:http::HttpHeaders	typeref:typename:void	access:public	signature:(const std::string & headerName,std::string && headerValue)
add	src/http/HttpHeaders.h	/^    void add(const_string_piece headerName, const_string_piece headerValue);$/;"	p	line:45	language:C++	class:http::HttpHeaders	typeref:typename:void	access:public	signature:(const_string_piece headerName,const_string_piece headerValue)
addFlag	src/easylogging/easylogging++.h	/^  inline void addFlag(LoggingFlag flag) {$/;"	f	line:2593	language:C++	class:el::base::Storage	typeref:typename:void	access:public	signature:(LoggingFlag flag)
addFlag	src/easylogging/easylogging++.h	/^  inline void addFlag(base::FormatFlags flag) {$/;"	f	line:1625	language:C++	class:el::base::LogFormat	typeref:typename:void	access:protected	signature:(base::FormatFlags flag)
addFlag	src/easylogging/easylogging++.h	/^  static inline void addFlag(LoggingFlag flag) {$/;"	f	line:3843	language:C++	class:el::Loggers	typeref:typename:void	access:public	signature:(LoggingFlag flag)
addFlag	src/easylogging/easylogging++.h	/^static inline void addFlag(Enum e, base::type::EnumType* flag) {$/;"	f	line:880	language:C++	namespace:el::base::utils	typeref:typename:void	signature:(Enum e,base::type::EnumType * flag)
addToBuff	src/easylogging/easylogging++.cc	/^char* Str::addToBuff(const char* str, char* buf, const char* bufLim) {$/;"	f	line:1004	language:C++	class:el::base::utils::Str	typeref:typename:char *	signature:(const char * str,char * buf,const char * bufLim)
addToBuff	src/easylogging/easylogging++.h	/^  static char* addToBuff(const char* str, char* buf, const char* bufLim);$/;"	p	line:1128	language:C++	class:el::base::utils::Str	typeref:typename:char *	access:public	signature:(const char * str,char * buf,const char * bufLim)
add_child	src/design_patterns/builder/builder.h	/^    HtmlBuilder &add_child(const std::string& child_name, const std::string& child_text)$/;"	f	line:51	language:C++	struct:design_patterns::HtmlBuilder	typeref:typename:HtmlBuilder &	access:public	signature:(const std::string & child_name,const std::string & child_text)
add_child2	src/design_patterns/builder/builder.h	/^    HtmlBuilder* add_child2(const std::string &child_name, const std::string &child_text)$/;"	f	line:58	language:C++	struct:design_patterns::HtmlBuilder	typeref:typename:HtmlBuilder *	access:public	signature:(const std::string & child_name,const std::string & child_text)
add_gno_interval	src/mysql_gtid/mysql_gtid.cpp	/^void MySQLGtidSet::add_gno_interval(MySQLGno begin, MySQLGno end, MySQLSidno sidno)$/;"	f	line:155	language:C++	class:MySQLGtidSet	typeref:typename:void	signature:(MySQLGno begin,MySQLGno end,MySQLSidno sidno)
add_gno_interval	src/mysql_gtid/mysql_gtid.h	/^  void add_gno_interval(MySQLGno begin, MySQLGno end, MySQLSidno sidno);$/;"	p	line:77	language:C++	class:MySQLGtidSet	typeref:typename:void	access:public	signature:(MySQLGno begin,MySQLGno end,MySQLSidno sidno)
add_gtid_text	src/mysql_gtid/mysql_gtid.cpp	/^int MySQLGtidSet::add_gtid_text(const char *text) {$/;"	f	line:95	language:C++	class:MySQLGtidSet	typeref:typename:int	signature:(const char * text)
add_gtid_text	src/mysql_gtid/mysql_gtid.h	/^  int add_gtid_text(const char *text);$/;"	p	line:76	language:C++	class:MySQLGtidSet	typeref:typename:int	access:public	signature:(const char * text)
add_lvalue_reference	src/tests/type_traits.h	/^    struct add_lvalue_reference$/;"	s	line:1552	language:C++	namespace:std	inherits:__add_lvalue_reference_helper<_Tp>
add_lvalue_reference_t	src/tests/type_traits.h	/^    using add_lvalue_reference_t = typename add_lvalue_reference<_Tp>::type;$/;"	t	line:1577	language:C++	namespace:std	typeref:typename:add_lvalue_reference<_Tp>::type
add_node	src/mysql_gtid/mysql_gtid.cpp	/^int MySQLSidMap::add_node(MySQLSidno sidno, const MySQLSid& sid)$/;"	f	line:75	language:C++	class:MySQLSidMap	typeref:typename:int	signature:(MySQLSidno sidno,const MySQLSid & sid)
add_node	src/mysql_gtid/mysql_gtid.h	/^  int add_node(MySQLSidno sidno, const MySQLSid& sid);$/;"	p	line:60	language:C++	class:MySQLSidMap	typeref:typename:int	access:private	signature:(MySQLSidno sidno,const MySQLSid & sid)
add_pointer	src/tests/type_traits.h	/^    struct add_pointer $/;"	s	line:1906	language:C++	namespace:std	inherits:__add_pointer_helper<_Tp>
add_pointer_t	src/tests/type_traits.h	/^    using add_pointer_t = typename add_pointer<_Tp>::type;$/;"	t	line:1917	language:C++	namespace:std	typeref:typename:add_pointer<_Tp>::type
add_rvalue_reference	src/tests/type_traits.h	/^    struct add_rvalue_reference$/;"	s	line:1566	language:C++	namespace:std	inherits:__add_rvalue_reference_helper<_Tp>
add_rvalue_reference_t	src/tests/type_traits.h	/^    using add_rvalue_reference_t = typename add_rvalue_reference<_Tp>::type;$/;"	t	line:1581	language:C++	namespace:std	typeref:typename:add_rvalue_reference<_Tp>::type
add_sid	src/mysql_gtid/mysql_gtid.cpp	/^MySQLSidno MySQLSidMap::add_sid(const MySQLSid &sid) {$/;"	f	line:63	language:C++	class:MySQLSidMap	typeref:typename:MySQLSidno	signature:(const MySQLSid & sid)
add_sid	src/mysql_gtid/mysql_gtid.h	/^  MySQLSidno add_sid(const MySQLSid& sid);$/;"	p	line:55	language:C++	class:MySQLSidMap	typeref:typename:MySQLSidno	access:public	signature:(const MySQLSid & sid)
addr	src/design_patterns/basic/maybemonad.h	/^    Address *addr = nullptr;$/;"	m	line:18	language:C++	struct:design_patterns::Person	typeref:typename:Address *	access:public
address_t	src/string_piece/string_piece.h	/^        using address_t = recipes::RemoveLowConst_t<Iter>;$/;"	t	line:114	language:C++	function:string_piece::Range::copy	typeref:typename:recipes::RemoveLowConst_t<Iter>
al	src/al/MinHeap.h	/^namespace al$/;"	n	line:8	language:C++
al	src/al/merge.h	/^namespace al$/;"	n	line:9	language:C++
al::MergeNode	src/al/merge.h	/^struct MergeNode$/;"	s	line:32	language:C++	namespace:al
al::MergeNode::MergeNode	src/al/merge.h	/^    MergeNode(double value, int index) : value(value), indexInArray(index){}$/;"	f	line:34	language:C++	struct:al::MergeNode	access:public	signature:(double value,int index)
al::MergeNode::indexInArray	src/al/merge.h	/^    int indexInArray;$/;"	m	line:36	language:C++	struct:al::MergeNode	typeref:typename:int	access:public
al::MergeNode::operator <	src/al/merge.h	/^    bool operator<(const MergeNode& node) const {return value < node.value;}$/;"	f	line:39	language:C++	struct:al::MergeNode	typeref:typename:bool	access:public	signature:(const MergeNode & node) const
al::MergeNode::operator <=	src/al/merge.h	/^    bool operator<=(const MergeNode& node) const {return value <= node.value;}$/;"	f	line:40	language:C++	struct:al::MergeNode	typeref:typename:bool	access:public	signature:(const MergeNode & node) const
al::MergeNode::operator ==	src/al/merge.h	/^    bool operator==(const MergeNode& node) const {return value == node.value;}$/;"	f	line:41	language:C++	struct:al::MergeNode	typeref:typename:bool	access:public	signature:(const MergeNode & node) const
al::MergeNode::operator >	src/al/merge.h	/^    bool operator>(const MergeNode& node) const {return value > node.value;}\/\/have to be const/;"	f	line:37	language:C++	struct:al::MergeNode	typeref:typename:bool	access:public	signature:(const MergeNode & node) const
al::MergeNode::operator >=	src/al/merge.h	/^    bool operator>=(const MergeNode& node) const {return value >= node.value;}$/;"	f	line:38	language:C++	struct:al::MergeNode	typeref:typename:bool	access:public	signature:(const MergeNode & node) const
al::MergeNode::value	src/al/merge.h	/^    double value;$/;"	m	line:35	language:C++	struct:al::MergeNode	typeref:typename:double	access:public
al::MinHeap	src/al/MinHeap.h	/^class MinHeap$/;"	c	line:12	language:C++	namespace:al
al::MinHeap::CompareType	src/al/MinHeap.h	/^    using CompareType = std::greater<T>;$/;"	t	line:15	language:C++	class:al::MinHeap	typeref:typename:std::greater<T>	access:public
al::MinHeap::ContainerType	src/al/MinHeap.h	/^    using ContainerType = std::priority_queue<T, std::vector<T>, CompareType>;$/;"	t	line:16	language:C++	class:al::MinHeap	typeref:typename:std::priority_queue<T,std::vector<T>,CompareType>	access:public
al::MinHeap::MinHeap	src/al/MinHeap.h	/^    explicit MinHeap() : container_(){}$/;"	f	line:18	language:C++	class:al::MinHeap	access:public	signature:()
al::MinHeap::SizeType	src/al/MinHeap.h	/^    using SizeType = typename ContainerType::size_type;$/;"	t	line:17	language:C++	class:al::MinHeap	typeref:typename:ContainerType::size_type	access:public
al::MinHeap::clear	src/al/MinHeap.h	/^    void clear() {container_.clear();}$/;"	f	line:31	language:C++	class:al::MinHeap	typeref:typename:void	access:public	signature:()
al::MinHeap::container_	src/al/MinHeap.h	/^    ContainerType container_;$/;"	m	line:43	language:C++	class:al::MinHeap	typeref:typename:ContainerType	access:private
al::MinHeap::emplace	src/al/MinHeap.h	/^    void emplace(Args&&... args)$/;"	f	line:35	language:C++	class:al::MinHeap	typeref:typename:void	access:public	signature:(Args &&...args)
al::MinHeap::empty	src/al/MinHeap.h	/^    bool empty() const {return container_.empty();}$/;"	f	line:28	language:C++	class:al::MinHeap	typeref:typename:bool	access:public	signature:() const
al::MinHeap::make_min_heap	src/al/MinHeap.h	/^    static std::shared_ptr<MinHeap> make_min_heap(const std::vector<T>& c)$/;"	f	line:20	language:C++	class:al::MinHeap	typeref:typename:std::shared_ptr<MinHeap>	access:public	signature:(const std::vector<T> & c)
al::MinHeap::max_size	src/al/MinHeap.h	/^    SizeType max_size() const {return container_.max_size();}$/;"	f	line:30	language:C++	class:al::MinHeap	typeref:typename:SizeType	access:public	signature:() const
al::MinHeap::pop	src/al/MinHeap.h	/^    void pop(){container_.pop();}$/;"	f	line:40	language:C++	class:al::MinHeap	typeref:typename:void	access:public	signature:()
al::MinHeap::push	src/al/MinHeap.h	/^    void push(const T& t) { container_.push(t);}$/;"	f	line:33	language:C++	class:al::MinHeap	typeref:typename:void	access:public	signature:(const T & t)
al::MinHeap::reverse	src/al/MinHeap.h	/^    void reverse() {container_.reverse(container_.size());}$/;"	f	line:41	language:C++	class:al::MinHeap	typeref:typename:void	access:public	signature:()
al::MinHeap::size	src/al/MinHeap.h	/^    SizeType size() const {return container_.size();}$/;"	f	line:29	language:C++	class:al::MinHeap	typeref:typename:SizeType	access:public	signature:() const
al::MinHeap::top	src/al/MinHeap.h	/^    const T& top() const {return container_.top();}$/;"	f	line:32	language:C++	class:al::MinHeap	typeref:typename:const T &	access:public	signature:() const
al::mergeMultiSortedArraySlow	src/al/merge.h	/^std::vector<double> mergeMultiSortedArraySlow(const std::vector<std::vector<double>>& arrays)$/;"	f	line:17	language:C++	namespace:al	typeref:typename:std::vector<double>	signature:(const std::vector<std::vector<double>> & arrays)
al::mergeMultiSortedArrayWithMinHeap	src/al/merge.h	/^std::vector<double> mergeMultiSortedArrayWithMinHeap(std::vector<std::vector<double>> &arrays)$/;"	f	line:44	language:C++	namespace:al	typeref:typename:std::vector<double>	signature:(std::vector<std::vector<double>> & arrays)
al::test_mergeMultiSortedArray	src/al/merge.h	/^void test_mergeMultiSortedArray()$/;"	f	line:76	language:C++	namespace:al	typeref:typename:void	signature:()
aligned_storage	src/tests/type_traits.h	/^    struct aligned_storage$/;"	s	line:1942	language:C++	namespace:std
aligned_storage_t	src/tests/type_traits.h	/^    using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;$/;"	t	line:2331	language:C++	namespace:std	typeref:typename:aligned_storage<_Len,_Align>::type
aligned_union	src/tests/type_traits.h	/^    struct aligned_union$/;"	s	line:1980	language:C++	namespace:std
aligned_union_t	src/tests/type_traits.h	/^    using aligned_union_t = typename aligned_union<_Len, _Types...>::type;$/;"	t	line:2334	language:C++	namespace:std	typeref:typename:aligned_union<_Len,_Types...>::type
alignment_of	src/tests/type_traits.h	/^    struct alignment_of$/;"	s	line:1361	language:C++	namespace:std	inherits:integral_constant<std::size_t,__alignof__(_Tp)>
alignment_value	src/tests/type_traits.h	/^      static const size_t alignment_value = __strictest::_S_alignment;$/;"	m	line:1990	language:C++	struct:std::aligned_union	typeref:typename:const size_t	access:public
alignment_value	src/tests/type_traits.h	/^    const size_t aligned_union<_Len, _Types...>::alignment_value;$/;"	m	line:1996	language:C++	class:std::aligned_union<_Len, _Types...>	typeref:typename:const size_t
allowed	src/easylogging/easylogging++.cc	/^bool VRegistry::allowed(base::type::VerboseLevel vlevel, const char* file) {$/;"	f	line:2022	language:C++	class:el::base::VRegistry	typeref:typename:bool	signature:(base::type::VerboseLevel vlevel,const char * file)
allowed	src/easylogging/easylogging++.h	/^  bool allowed(base::type::VerboseLevel vlevel, const char* file);$/;"	p	line:2433	language:C++	class:el::base::VRegistry	typeref:typename:bool	access:public	signature:(base::type::VerboseLevel vlevel,const char * file)
append	src/buffer/buffer.cpp	/^int64_t buffer::append(buffer_chain &&chain)$/;"	f	line:540	language:C++	class:buffer	typeref:typename:int64_t	signature:(buffer_chain && chain)
append	src/buffer/buffer.cpp	/^int64_t buffer::append(const buffer& other, uint32_t data_len, Iter start)$/;"	f	line:461	language:C++	class:buffer	typeref:typename:int64_t	signature:(const buffer & other,uint32_t data_len,Iter start)
append	src/buffer/buffer.cpp	/^int64_t buffer::append(const buffer_chain &chain)\/\/TODO copy too much$/;"	f	line:517	language:C++	class:buffer	typeref:typename:int64_t	signature:(const buffer_chain & chain)
append	src/buffer/buffer.cpp	/^int64_t buffer::append(const char* data, uint32_t data_len)$/;"	f	line:557	language:C++	class:buffer	typeref:typename:int64_t	signature:(const char * data,uint32_t data_len)
append	src/buffer/buffer.cpp	/^int64_t buffer_chain::append(const void* data, uint32_t data_len)$/;"	f	line:204	language:C++	class:buffer_chain	typeref:typename:int64_t	signature:(const void * data,uint32_t data_len)
append	src/buffer/buffer.cpp	/^uint32_t buffer_chain::append(const buffer_chain& chain)$/;"	f	line:184	language:C++	class:buffer_chain	typeref:typename:uint32_t	signature:(const buffer_chain & chain)
append	src/buffer/buffer.cpp	/^uint32_t buffer_chain::append(const buffer_chain& chain, uint32_t len, Iter start)$/;"	f	line:193	language:C++	class:buffer_chain	typeref:typename:uint32_t	signature:(const buffer_chain & chain,uint32_t len,Iter start)
append	src/buffer/buffer.h	/^    int64_t append(buffer_chain &&chain);$/;"	p	line:196	language:C++	class:buffer	typeref:typename:int64_t	access:public	signature:(buffer_chain && chain)
append	src/buffer/buffer.h	/^    int64_t append(const T& data);$/;"	p	line:188	language:C++	class:buffer	typeref:typename:int64_t	access:public	signature:(const T & data)
append	src/buffer/buffer.h	/^    int64_t append(const T& data);$/;"	p	line:95	language:C++	class:buffer_chain	typeref:typename:int64_t	access:public	signature:(const T & data)
append	src/buffer/buffer.h	/^    int64_t append(const buffer& other, uint32_t data_len, Iter start);$/;"	p	line:191	language:C++	class:buffer	typeref:typename:int64_t	access:public	signature:(const buffer & other,uint32_t data_len,Iter start)
append	src/buffer/buffer.h	/^    int64_t append(const buffer_chain &chain);$/;"	p	line:195	language:C++	class:buffer	typeref:typename:int64_t	access:public	signature:(const buffer_chain & chain)
append	src/buffer/buffer.h	/^    int64_t append(const char* data, uint32_t data_len);$/;"	p	line:197	language:C++	class:buffer	typeref:typename:int64_t	access:public	signature:(const char * data,uint32_t data_len)
append	src/buffer/buffer.h	/^    int64_t append(const void* data, uint32_t data_len);$/;"	p	line:97	language:C++	class:buffer_chain	typeref:typename:int64_t	access:public	signature:(const void * data,uint32_t data_len)
append	src/buffer/buffer.h	/^    uint32_t append(const buffer_chain& chain);$/;"	p	line:100	language:C++	class:buffer_chain	typeref:typename:uint32_t	access:public	signature:(const buffer_chain & chain)
append	src/buffer/buffer.h	/^    uint32_t append(const buffer_chain& chain, uint32_t len, Iter start);$/;"	p	line:101	language:C++	class:buffer_chain	typeref:typename:uint32_t	access:public	signature:(const buffer_chain & chain,uint32_t len,Iter start)
append	src/buffer/buffer.h	/^int64_t buffer::append(const T& data)$/;"	f	line:285	language:C++	class:buffer	typeref:typename:int64_t	signature:(const T & data)
append	src/buffer/buffer.h	/^int64_t buffer_chain::append(const T& data)$/;"	f	line:276	language:C++	class:buffer_chain	typeref:typename:int64_t	signature:(const T & data)
append_printf	src/buffer/buffer.cpp	/^int64_t buffer::append_printf(const char* fmt, ...)$/;"	f	line:570	language:C++	class:buffer	typeref:typename:int64_t	signature:(const char * fmt,...)
append_printf	src/buffer/buffer.h	/^    int64_t append_printf(const char *fmt, ...);$/;"	p	line:198	language:C++	class:buffer	typeref:typename:int64_t	access:public	signature:(const char * fmt,...)
append_vprintf	src/buffer/buffer.cpp	/^int64_t buffer::append_vprintf(const char* fmt, va_list ap)$/;"	f	line:613	language:C++	class:buffer	typeref:typename:int64_t	signature:(const char * fmt,va_list ap)
append_vprintf	src/buffer/buffer.h	/^    int64_t append_vprintf(const char* fmt, va_list ap);$/;"	p	line:199	language:C++	class:buffer	typeref:typename:int64_t	access:public	signature:(const char * fmt,va_list ap)
argument	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    enum Argument {attack, defence} argument;$/;"	m	line:19	language:C++	class:design_patterns::Query	typeref:enum:design_patterns::Query::Argument	access:public
assertCodesSize	test/http/http_headers_test.cpp	/^void assertCodesSize(const HttpHeaders& headers, size_t size, int64_t capacity)$/;"	f	line:19	language:C++	namespace:http_test	typeref:typename:void	signature:(const HttpHeaders & headers,size_t size,int64_t capacity)
assertHeaderNameSize	test/http/http_headers_test.cpp	/^void assertHeaderNameSize(const HttpHeaders& headers, size_t size, int64_t capacity)$/;"	f	line:28	language:C++	namespace:http_test	typeref:typename:void	signature:(const HttpHeaders & headers,size_t size,int64_t capacity)
assertHeaderValueSize	test/http/http_headers_test.cpp	/^void assertHeaderValueSize(const HttpHeaders& headers, size_t size, int64_t capacity)$/;"	f	line:37	language:C++	namespace:http_test	typeref:typename:void	signature:(const HttpHeaders & headers,size_t size,int64_t capacity)
assertHeadersSize	test/http/http_headers_test.cpp	/^void assertHeadersSize(const HttpHeaders& headers, size_t size)$/;"	f	line:14	language:C++	namespace:http_test	typeref:typename:void	signature:(const HttpHeaders & headers,size_t size)
asyncLogQueue	src/easylogging/easylogging++.h	/^  inline base::AsyncLogQueue* asyncLogQueue(void) const {$/;"	f	line:2584	language:C++	class:el::base::Storage	typeref:typename:base::AsyncLogQueue *	access:public	signature:(void) const
attack	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    enum Argument {attack, defence} argument;$/;"	e	line:19	language:C++	enum:design_patterns::Query::Argument	access:public
attack	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    int attack;$/;"	m	line:64	language:C++	struct:design_patterns::NewCreature	typeref:typename:int	access:private
attack	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^    int attack;$/;"	m	line:18	language:C++	class:design_patterns::Creature	typeref:typename:int	access:public
attributes	src/design_patterns/builder/groovy_builder.h	/^    vector<pair<string, string>> attributes;$/;"	m	line:17	language:C++	struct:design_patterns::Tag	typeref:typename:vector<pair<string,string>>	access:public
base	src/easylogging/easylogging++.cc	/^namespace base {$/;"	n	line:2203	language:C++	namespace:el	file:
base	src/easylogging/easylogging++.cc	/^namespace base {$/;"	n	line:26	language:C++	namespace:el	file:
base	src/easylogging/easylogging++.cc	/^namespace base {$/;"	n	line:724	language:C++	namespace:el	file:
base	src/easylogging/easylogging++.h	/^namespace base {$/;"	n	line:1572	language:C++	namespace:el
base	src/easylogging/easylogging++.h	/^namespace base {$/;"	n	line:1893	language:C++	namespace:el
base	src/easylogging/easylogging++.h	/^namespace base {$/;"	n	line:2343	language:C++	namespace:el
base	src/easylogging/easylogging++.h	/^namespace base {$/;"	n	line:2489	language:C++	namespace:el
base	src/easylogging/easylogging++.h	/^namespace base {$/;"	n	line:2762	language:C++	namespace:el
base	src/easylogging/easylogging++.h	/^namespace base {$/;"	n	line:3460	language:C++	namespace:el
base	src/easylogging/easylogging++.h	/^namespace base {$/;"	n	line:3560	language:C++	namespace:el
base	src/easylogging/easylogging++.h	/^namespace base {$/;"	n	line:480	language:C++	namespace:el
base	src/easylogging/easylogging++.h	/^namespace base {$/;"	n	line:500	language:C++	namespace:el
base	src/easylogging/easylogging++.h	/^namespace base {$/;"	n	line:728	language:C++	namespace:el
base	src/easylogging/easylogging++.h	/^namespace base {$/;"	n	line:808	language:C++	namespace:el
begin	src/buffer/buffer.cpp	/^buffer::Iter buffer::begin()$/;"	f	line:413	language:C++	class:buffer	typeref:typename:buffer::Iter	signature:()
begin	src/buffer/buffer.cpp	/^buffer_chain::Iter buffer_chain::begin() const$/;"	f	line:230	language:C++	class:buffer_chain	typeref:typename:buffer_chain::Iter	signature:() const
begin	src/buffer/buffer.h	/^    Iter begin() const ;$/;"	p	line:123	language:C++	class:buffer_chain	typeref:typename:Iter	access:public	signature:() const
begin	src/buffer/buffer.h	/^    Iter begin();$/;"	p	line:180	language:C++	class:buffer	typeref:typename:Iter	access:public	signature:()
begin	src/easylogging/easylogging++.h	/^  iterator begin(void) {$/;"	f	line:2799	language:C++	class:el::base::workarounds::IterableContainer	typeref:typename:iterator	access:public	signature:(void)
begin	src/easylogging/easylogging++.h	/^  virtual inline iterator begin(void) ELPP_FINAL {$/;"	f	line:1309	language:C++	class:el::base::utils::AbstractRegistry	typeref:typename:iterator	access:public	signature:(void)
begin	src/mysql_gtid/mysql_gtid.h	/^    MySQLGno begin;$/;"	m	line:70	language:C++	struct:MySQLGtidSet::Interval	typeref:typename:MySQLGno	access:public
begin	src/string_piece/string_piece.h	/^    iterator begin() {return begin_;}$/;"	f	line:73	language:C++	class:string_piece::Range	typeref:typename:iterator	access:public	signature:()
begin_	src/string_piece/string_piece.h	/^    iterator begin_;$/;"	m	line:127	language:C++	class:string_piece::Range	typeref:typename:iterator	access:private
bench_mark_test	test/substring_search/kmp_test.cpp	/^void bench_mark_test(const char* pattern)$/;"	f	line:52	language:C++	namespace:kmp_test	typeref:typename:void	signature:(const char * pattern)
bitwise	src/easylogging/easylogging++.h	/^namespace bitwise {$/;"	n	line:865	language:C++	namespace:el::base::utils
blockName	src/easylogging/easylogging++.h	/^  inline const std::string* blockName(void) const;$/;"	p	line:3415	language:C++	class:el::PerformanceTrackingData	typeref:typename:const std::string *	access:public	signature:(void) const
blockName	src/easylogging/easylogging++.h	/^inline const std::string* PerformanceTrackingData::blockName() const {$/;"	f	line:3544	language:C++	class:el::PerformanceTrackingData	typeref:typename:const std::string *	signature:() const
brief	src/easylogging/easylogging++.h	/^  const char* brief;$/;"	m	line:779	language:C++	struct:el::base::consts::__anondf7eda890208	typeref:typename:const char *	access:public
buf_	src/bytebuf/bytebuf.h	/^    std::vector<char>   buf_;$/;"	m	line:15	language:C++	class:bytebuf	typeref:typename:std::vector<char>	access:private
buffer	src/buffer/buffer.cpp	/^buffer::buffer() $/;"	f	line:260	language:C++	class:buffer	signature:()
buffer	src/buffer/buffer.cpp	/^buffer::buffer(const buffer& other) : chains_(), last_chain_with_data_(nullptr), total_len_(0)$/;"	f	line:268	language:C++	class:buffer	signature:(const buffer & other)
buffer	src/buffer/buffer.cpp	/^buffer::buffer(const buffer& other, uint32_t data_len) : chains_(), last_chain_with_data_(nullpt/;"	f	line:276	language:C++	class:buffer	signature:(const buffer & other,uint32_t data_len)
buffer	src/buffer/buffer.cpp	/^buffer::buffer(const buffer& other, uint32_t data_len, Iter start) : chains_(), last_chain_with_/;"	f	line:313	language:C++	class:buffer	signature:(const buffer & other,uint32_t data_len,Iter start)
buffer	src/buffer/buffer.h	/^    buffer();$/;"	p	line:163	language:C++	class:buffer	access:public	signature:()
buffer	src/buffer/buffer.h	/^    buffer(buffer&& other);$/;"	p	line:166	language:C++	class:buffer	access:public	signature:(buffer && other)
buffer	src/buffer/buffer.h	/^    buffer(const buffer& other);$/;"	p	line:165	language:C++	class:buffer	access:public	signature:(const buffer & other)
buffer	src/buffer/buffer.h	/^    buffer(const buffer& other, uint32_t data_len);$/;"	p	line:168	language:C++	class:buffer	access:public	signature:(const buffer & other,uint32_t data_len)
buffer	src/buffer/buffer.h	/^    buffer(const buffer& other, uint32_t data_len, Iter start);$/;"	p	line:170	language:C++	class:buffer	access:public	signature:(const buffer & other,uint32_t data_len,Iter start)
buffer	src/buffer/buffer.h	/^class buffer$/;"	c	line:158	language:C++
buffer::Iter	src/buffer/buffer.h	/^    using Iter = buffer_iter;$/;"	t	line:161	language:C++	class:buffer	typeref:typename:buffer_iter	access:public
buffer::append	src/buffer/buffer.cpp	/^int64_t buffer::append(buffer_chain &&chain)$/;"	f	line:540	language:C++	class:buffer	typeref:typename:int64_t	signature:(buffer_chain && chain)
buffer::append	src/buffer/buffer.cpp	/^int64_t buffer::append(const buffer& other, uint32_t data_len, Iter start)$/;"	f	line:461	language:C++	class:buffer	typeref:typename:int64_t	signature:(const buffer & other,uint32_t data_len,Iter start)
buffer::append	src/buffer/buffer.cpp	/^int64_t buffer::append(const buffer_chain &chain)\/\/TODO copy too much$/;"	f	line:517	language:C++	class:buffer	typeref:typename:int64_t	signature:(const buffer_chain & chain)
buffer::append	src/buffer/buffer.cpp	/^int64_t buffer::append(const char* data, uint32_t data_len)$/;"	f	line:557	language:C++	class:buffer	typeref:typename:int64_t	signature:(const char * data,uint32_t data_len)
buffer::append	src/buffer/buffer.h	/^    int64_t append(buffer_chain &&chain);$/;"	p	line:196	language:C++	class:buffer	typeref:typename:int64_t	access:public	signature:(buffer_chain && chain)
buffer::append	src/buffer/buffer.h	/^    int64_t append(const T& data);$/;"	p	line:188	language:C++	class:buffer	typeref:typename:int64_t	access:public	signature:(const T & data)
buffer::append	src/buffer/buffer.h	/^    int64_t append(const buffer& other, uint32_t data_len, Iter start);$/;"	p	line:191	language:C++	class:buffer	typeref:typename:int64_t	access:public	signature:(const buffer & other,uint32_t data_len,Iter start)
buffer::append	src/buffer/buffer.h	/^    int64_t append(const buffer_chain &chain);$/;"	p	line:195	language:C++	class:buffer	typeref:typename:int64_t	access:public	signature:(const buffer_chain & chain)
buffer::append	src/buffer/buffer.h	/^    int64_t append(const char* data, uint32_t data_len);$/;"	p	line:197	language:C++	class:buffer	typeref:typename:int64_t	access:public	signature:(const char * data,uint32_t data_len)
buffer::append	src/buffer/buffer.h	/^int64_t buffer::append(const T& data)$/;"	f	line:285	language:C++	class:buffer	typeref:typename:int64_t	signature:(const T & data)
buffer::append_printf	src/buffer/buffer.cpp	/^int64_t buffer::append_printf(const char* fmt, ...)$/;"	f	line:570	language:C++	class:buffer	typeref:typename:int64_t	signature:(const char * fmt,...)
buffer::append_printf	src/buffer/buffer.h	/^    int64_t append_printf(const char *fmt, ...);$/;"	p	line:198	language:C++	class:buffer	typeref:typename:int64_t	access:public	signature:(const char * fmt,...)
buffer::append_vprintf	src/buffer/buffer.cpp	/^int64_t buffer::append_vprintf(const char* fmt, va_list ap)$/;"	f	line:613	language:C++	class:buffer	typeref:typename:int64_t	signature:(const char * fmt,va_list ap)
buffer::append_vprintf	src/buffer/buffer.h	/^    int64_t append_vprintf(const char* fmt, va_list ap);$/;"	p	line:199	language:C++	class:buffer	typeref:typename:int64_t	access:public	signature:(const char * fmt,va_list ap)
buffer::begin	src/buffer/buffer.cpp	/^buffer::Iter buffer::begin()$/;"	f	line:413	language:C++	class:buffer	typeref:typename:buffer::Iter	signature:()
buffer::begin	src/buffer/buffer.h	/^    Iter begin();$/;"	p	line:180	language:C++	class:buffer	typeref:typename:Iter	access:public	signature:()
buffer::buffer	src/buffer/buffer.cpp	/^buffer::buffer() $/;"	f	line:260	language:C++	class:buffer	signature:()
buffer::buffer	src/buffer/buffer.cpp	/^buffer::buffer(const buffer& other) : chains_(), last_chain_with_data_(nullptr), total_len_(0)$/;"	f	line:268	language:C++	class:buffer	signature:(const buffer & other)
buffer::buffer	src/buffer/buffer.cpp	/^buffer::buffer(const buffer& other, uint32_t data_len) : chains_(), last_chain_with_data_(nullpt/;"	f	line:276	language:C++	class:buffer	signature:(const buffer & other,uint32_t data_len)
buffer::buffer	src/buffer/buffer.cpp	/^buffer::buffer(const buffer& other, uint32_t data_len, Iter start) : chains_(), last_chain_with_/;"	f	line:313	language:C++	class:buffer	signature:(const buffer & other,uint32_t data_len,Iter start)
buffer::buffer	src/buffer/buffer.h	/^    buffer();$/;"	p	line:163	language:C++	class:buffer	access:public	signature:()
buffer::buffer	src/buffer/buffer.h	/^    buffer(buffer&& other);$/;"	p	line:166	language:C++	class:buffer	access:public	signature:(buffer && other)
buffer::buffer	src/buffer/buffer.h	/^    buffer(const buffer& other);$/;"	p	line:165	language:C++	class:buffer	access:public	signature:(const buffer & other)
buffer::buffer	src/buffer/buffer.h	/^    buffer(const buffer& other, uint32_t data_len);$/;"	p	line:168	language:C++	class:buffer	access:public	signature:(const buffer & other,uint32_t data_len)
buffer::buffer	src/buffer/buffer.h	/^    buffer(const buffer& other, uint32_t data_len, Iter start);$/;"	p	line:170	language:C++	class:buffer	access:public	signature:(const buffer & other,uint32_t data_len,Iter start)
buffer::buffer_length	src/buffer/buffer.h	/^    uint32_t buffer_length() const {return total_len_;}$/;"	f	line:175	language:C++	class:buffer	typeref:typename:uint32_t	access:public	signature:() const
buffer::buffer_memcmp	src/buffer/buffer.cpp	/^bool buffer::buffer_memcmp(const char* source, uint32_t len, Iter start)$/;"	f	line:816	language:C++	class:buffer	typeref:typename:bool	signature:(const char * source,uint32_t len,Iter start)
buffer::buffer_memcmp	src/buffer/buffer.h	/^    bool buffer_memcmp(const char* source, uint32_t  len, Iter start);$/;"	p	line:230	language:C++	class:buffer	typeref:typename:bool	access:public	signature:(const char * source,uint32_t len,Iter start)
buffer::chain_number	src/buffer/buffer.h	/^    uint32_t chain_number() const {return this->chains_.size();}$/;"	f	line:239	language:C++	class:buffer	typeref:typename:uint32_t	access:public	signature:() const
buffer::chains_	src/buffer/buffer.h	/^    std::list<buffer_chain>           chains_;$/;"	m	line:265	language:C++	class:buffer	typeref:typename:std::list<buffer_chain>	access:private
buffer::copy_out_from	src/buffer/buffer.cpp	/^int64_t buffer::copy_out_from(void* data, uint32_t data_len, Iter start)$/;"	f	line:737	language:C++	class:buffer	typeref:typename:int64_t	signature:(void * data,uint32_t data_len,Iter start)
buffer::copy_out_from	src/buffer/buffer.h	/^    int64_t copy_out_from(void* data, uint32_t data_len, Iter start);$/;"	p	line:221	language:C++	class:buffer	typeref:typename:int64_t	access:public	signature:(void * data,uint32_t data_len,Iter start)
buffer::drain	src/buffer/buffer.cpp	/^int64_t buffer::drain(uint32_t len)$/;"	f	line:729	language:C++	class:buffer	typeref:typename:int64_t	signature:(uint32_t len)
buffer::drain	src/buffer/buffer.h	/^    int64_t drain(uint32_t len);$/;"	p	line:220	language:C++	class:buffer	typeref:typename:int64_t	access:public	signature:(uint32_t len)
buffer::end	src/buffer/buffer.cpp	/^buffer::Iter buffer::end()$/;"	f	line:418	language:C++	class:buffer	typeref:typename:buffer::Iter	signature:()
buffer::end	src/buffer/buffer.h	/^    Iter end();$/;"	p	line:182	language:C++	class:buffer	typeref:typename:Iter	access:public	signature:()
buffer::expand_if_needed	src/buffer/buffer.cpp	/^buffer_chain* buffer::expand_if_needed(uint32_t data_len)$/;"	f	line:940	language:C++	class:buffer	typeref:typename:buffer_chain *	signature:(uint32_t data_len)
buffer::expand_if_needed	src/buffer/buffer.h	/^    buffer_chain* expand_if_needed(uint32_t data_len);$/;"	p	line:259	language:C++	class:buffer	typeref:typename:buffer_chain *	access:private	signature:(uint32_t data_len)
buffer::first	src/buffer/buffer.h	/^    buffer_chain& first() { return chains_.front(); }$/;"	f	line:248	language:C++	class:buffer	typeref:typename:buffer_chain &	access:private	signature:()
buffer::first	src/buffer/buffer.h	/^    const buffer_chain& first() const { return chains_.front();}$/;"	f	line:249	language:C++	class:buffer	typeref:typename:const buffer_chain &	access:private	signature:() const
buffer::first_chain_length	src/buffer/buffer.cpp	/^uint32_t buffer::first_chain_length()$/;"	f	line:455	language:C++	class:buffer	typeref:typename:uint32_t	signature:()
buffer::first_chain_length	src/buffer/buffer.h	/^    uint32_t first_chain_length();$/;"	p	line:177	language:C++	class:buffer	typeref:typename:uint32_t	access:public	signature:()
buffer::free_trailing_empty_chains	src/buffer/buffer.cpp	/^buffer_chain* buffer::free_trailing_empty_chains()$/;"	f	line:992	language:C++	class:buffer	typeref:typename:buffer_chain *	signature:()
buffer::free_trailing_empty_chains	src/buffer/buffer.h	/^    buffer_chain* free_trailing_empty_chains();$/;"	p	line:260	language:C++	class:buffer	typeref:typename:buffer_chain *	access:private	signature:()
buffer::get_chains	src/buffer/buffer.h	/^  const std::list<buffer_chain> &get_chains() const { return this->chains_; }$/;"	f	line:271	language:C++	class:buffer	typeref:typename:const std::list<buffer_chain> &	access:public	signature:() const
buffer::is_last_chain_with_data	src/buffer/buffer.cpp	/^inline bool buffer::is_last_chain_with_data(const buffer_chain* current_chain) const$/;"	f	line:906	language:C++	class:buffer	typeref:typename:bool	signature:(const buffer_chain * current_chain) const
buffer::is_last_chain_with_data	src/buffer/buffer.h	/^    bool is_last_chain_with_data(const buffer_chain* current_chain) const;$/;"	p	line:237	language:C++	class:buffer	typeref:typename:bool	access:public	signature:(const buffer_chain * current_chain) const
buffer::iter_of_chain	src/buffer/buffer.cpp	/^buffer::Iter buffer::iter_of_chain(const buffer_chain& chain)$/;"	f	line:423	language:C++	class:buffer	typeref:typename:buffer::Iter	signature:(const buffer_chain & chain)
buffer::iter_of_chain	src/buffer/buffer.h	/^    Iter iter_of_chain(const buffer_chain& chain);$/;"	p	line:183	language:C++	class:buffer	typeref:typename:Iter	access:public	signature:(const buffer_chain & chain)
buffer::last	src/buffer/buffer.h	/^    buffer_chain& last() { return chains_.back(); }$/;"	f	line:250	language:C++	class:buffer	typeref:typename:buffer_chain &	access:private	signature:()
buffer::last	src/buffer/buffer.h	/^    const buffer_chain& last() const { return chains_.back(); }$/;"	f	line:251	language:C++	class:buffer	typeref:typename:const buffer_chain &	access:private	signature:() const
buffer::last_chain_with_data	src/buffer/buffer.h	/^    const buffer_chain* last_chain_with_data() const { return last_chain_with_data_; }$/;"	f	line:236	language:C++	class:buffer	typeref:typename:const buffer_chain *	access:public	signature:() const
buffer::last_chain_with_data_	src/buffer/buffer.h	/^    buffer_chain*                     last_chain_with_data_;\/\/最后一个有数据的chain$/;"	m	line:266	language:C++	class:buffer	typeref:typename:buffer_chain *	access:private
buffer::operator =	src/buffer/buffer.cpp	/^buffer& buffer::operator=(const buffer& other)$/;"	f	line:444	language:C++	class:buffer	typeref:typename:buffer &	signature:(const buffer & other)
buffer::operator =	src/buffer/buffer.h	/^    buffer& operator=(const buffer& other);$/;"	p	line:171	language:C++	class:buffer	typeref:typename:buffer &	access:public	signature:(const buffer & other)
buffer::peek	src/buffer/buffer.cpp	/^int buffer::peek(std::vector<const buffer_iovec*> vec_out, uint32_t len, Iter start)$/;"	f	line:898	language:C++	class:buffer	typeref:typename:int	signature:(std::vector<const buffer_iovec * > vec_out,uint32_t len,Iter start)
buffer::peek	src/buffer/buffer.h	/^    int peek(std::vector<const buffer_iovec*> vec_out, uint32_t len, Iter start);$/;"	p	line:234	language:C++	class:buffer	typeref:typename:int	access:public	signature:(std::vector<const buffer_iovec * > vec_out,uint32_t len,Iter start)
buffer::prepend	src/buffer/buffer.cpp	/^int buffer::prepend(const buffer& other, uint32_t data_len, Iter start)$/;"	f	line:620	language:C++	class:buffer	typeref:typename:int	signature:(const buffer & other,uint32_t data_len,Iter start)
buffer::prepend	src/buffer/buffer.h	/^    int prepend(const T& data);$/;"	p	line:202	language:C++	class:buffer	typeref:typename:int	access:public	signature:(const T & data)
buffer::prepend	src/buffer/buffer.h	/^    int prepend(const buffer& other, uint32_t data_len, Iter start);$/;"	p	line:205	language:C++	class:buffer	typeref:typename:int	access:public	signature:(const buffer & other,uint32_t data_len,Iter start)
buffer::prepend	src/buffer/buffer.h	/^int buffer::prepend(const T& data)$/;"	f	line:297	language:C++	class:buffer	typeref:typename:int	signature:(const T & data)
buffer::pullup	src/buffer/buffer.cpp	/^unsigned char* buffer::pullup(int64_t size)$/;"	f	line:628	language:C++	class:buffer	typeref:typename:unsigned char *	signature:(int64_t size)
buffer::pullup	src/buffer/buffer.h	/^    unsigned char* pullup(int64_t size);$/;"	p	line:213	language:C++	class:buffer	typeref:typename:unsigned char *	access:public	signature:(int64_t size)
buffer::push_back	src/buffer/buffer.cpp	/^buffer_chain* buffer::push_back(buffer_chain&& chain)$/;"	f	line:359	language:C++	class:buffer	typeref:typename:buffer_chain *	signature:(buffer_chain && chain)
buffer::push_back	src/buffer/buffer.cpp	/^buffer_chain* buffer::push_back(const buffer_chain& chain)$/;"	f	line:378	language:C++	class:buffer	typeref:typename:buffer_chain *	signature:(const buffer_chain & chain)
buffer::push_back	src/buffer/buffer.h	/^    buffer_chain* push_back(buffer_chain&& chain);$/;"	p	line:243	language:C++	class:buffer	typeref:typename:buffer_chain *	access:private	signature:(buffer_chain && chain)
buffer::push_back	src/buffer/buffer.h	/^    buffer_chain* push_back(const buffer_chain& chain);$/;"	p	line:244	language:C++	class:buffer	typeref:typename:buffer_chain *	access:private	signature:(const buffer_chain & chain)
buffer::push_front	src/buffer/buffer.cpp	/^buffer_chain* buffer::push_front(buffer_chain& chain)$/;"	f	line:405	language:C++	class:buffer	typeref:typename:buffer_chain *	signature:(buffer_chain & chain)
buffer::push_front	src/buffer/buffer.cpp	/^buffer_chain* buffer::push_front(buffer_chain&& chain)$/;"	f	line:396	language:C++	class:buffer	typeref:typename:buffer_chain *	signature:(buffer_chain && chain)
buffer::push_front	src/buffer/buffer.h	/^    buffer_chain* push_front(buffer_chain& chain);$/;"	p	line:246	language:C++	class:buffer	typeref:typename:buffer_chain *	access:private	signature:(buffer_chain & chain)
buffer::push_front	src/buffer/buffer.h	/^    buffer_chain* push_front(buffer_chain&& chain);$/;"	p	line:245	language:C++	class:buffer	typeref:typename:buffer_chain *	access:private	signature:(buffer_chain && chain)
buffer::read_line	src/buffer/buffer.cpp	/^int64_t buffer::read_line(char * read_out, uint32_t n, buffer_eol_style eol_style)$/;"	f	line:747	language:C++	class:buffer	typeref:typename:int64_t	signature:(char * read_out,uint32_t n,buffer_eol_style eol_style)
buffer::read_line	src/buffer/buffer.h	/^    int64_t read_line(char * read_out, uint32_t n, buffer_eol_style eol_style);$/;"	p	line:222	language:C++	class:buffer	typeref:typename:int64_t	access:public	signature:(char * read_out,uint32_t n,buffer_eol_style eol_style)
buffer::remove	src/buffer/buffer.cpp	/^int64_t buffer::remove(\/*out*\/void* data, uint32_t data_len)$/;"	f	line:686	language:C++	class:buffer	typeref:typename:int64_t	signature:(void * data,uint32_t data_len)
buffer::remove	src/buffer/buffer.h	/^    int64_t remove(\/*out*\/void* data, uint32_t data_len);$/;"	p	line:218	language:C++	class:buffer	typeref:typename:int64_t	access:public	signature:(void * data,uint32_t data_len)
buffer::search	src/buffer/buffer.cpp	/^buffer_iter buffer::search(const char* what, uint32_t len, Iter start)$/;"	f	line:762	language:C++	class:buffer	typeref:typename:buffer_iter	signature:(const char * what,uint32_t len,Iter start)
buffer::search	src/buffer/buffer.h	/^    buffer_iter search(const char* what, uint32_t len, Iter start);$/;"	p	line:225	language:C++	class:buffer	typeref:typename:buffer_iter	access:public	signature:(const char * what,uint32_t len,Iter start)
buffer::search_eol	src/buffer/buffer.cpp	/^buffer_iter buffer::search_eol(uint32_t* eol_len_out, buffer_eol_style eol_style, Iter start)$/;"	f	line:846	language:C++	class:buffer	typeref:typename:buffer_iter	signature:(uint32_t * eol_len_out,buffer_eol_style eol_style,Iter start)
buffer::search_eol	src/buffer/buffer.h	/^    buffer_iter search_eol(uint32_t* eol_len_out, buffer_eol_style eol_style, Iter start);$/;"	p	line:229	language:C++	class:buffer	typeref:typename:buffer_iter	access:public	signature:(uint32_t * eol_len_out,buffer_eol_style eol_style,Iter start)
buffer::search_range	src/buffer/buffer.cpp	/^buffer_iter buffer::search_range(const char* what, uint32_t len, Iter start, Iter end)$/;"	f	line:767	language:C++	class:buffer	typeref:typename:buffer_iter	signature:(const char * what,uint32_t len,Iter start,Iter end)
buffer::search_range	src/buffer/buffer.h	/^    buffer_iter search_range(const char* what, uint32_t len, Iter start, Iter end);$/;"	p	line:226	language:C++	class:buffer	typeref:typename:buffer_iter	access:public	signature:(const char * what,uint32_t len,Iter start,Iter end)
buffer::total_len	src/buffer/buffer.h	/^    uint32_t total_len() const { return total_len_; }$/;"	f	line:238	language:C++	class:buffer	typeref:typename:uint32_t	access:public	signature:() const
buffer::total_len_	src/buffer/buffer.h	/^    uint32_t                          total_len_;$/;"	m	line:267	language:C++	class:buffer	typeref:typename:uint32_t	access:private
buffer::update_last_chain_with_data	src/buffer/buffer.cpp	/^buffer_chain* buffer::update_last_chain_with_data(const buffer& other)$/;"	f	line:1018	language:C++	class:buffer	typeref:typename:buffer_chain *	signature:(const buffer & other)
buffer::update_last_chain_with_data	src/buffer/buffer.h	/^    buffer_chain* update_last_chain_with_data(const buffer& other);$/;"	p	line:261	language:C++	class:buffer	typeref:typename:buffer_chain *	access:private	signature:(const buffer & other)
buffer::update_next_field_after_copy	src/buffer/buffer.cpp	/^void buffer::update_next_field_after_copy()$/;"	f	line:1033	language:C++	class:buffer	typeref:typename:void	signature:()
buffer::update_next_field_after_copy	src/buffer/buffer.h	/^    void update_next_field_after_copy();$/;"	p	line:262	language:C++	class:buffer	typeref:typename:void	access:private	signature:()
buffer::validate_iter	src/buffer/buffer.cpp	/^bool buffer::validate_iter(const Iter& iter) const $/;"	f	line:913	language:C++	class:buffer	typeref:typename:bool	signature:(const Iter & iter) const
buffer::validate_iter	src/buffer/buffer.h	/^    bool validate_iter(const Iter& iter) const ;$/;"	p	line:240	language:C++	class:buffer	typeref:typename:bool	access:public	signature:(const Iter & iter) const
buffer::~buffer	src/buffer/buffer.h	/^    ~buffer() = default;$/;"	p	line:164	language:C++	class:buffer	access:public	signature:()
buffer_	src/buffer/buffer.h	/^    char*               buffer_;$/;"	m	line:147	language:C++	class:buffer_chain	typeref:typename:char *	access:private
buffer_	src/buffer/buffer.h	/^    const buffer*               buffer_;$/;"	m	line:65	language:C++	class:buffer_iter	typeref:typename:const buffer *	access:private
buffer_	test/buffer/buffer_test.cpp	/^    char buffer_[DUMMY_CLASS_SIZE];$/;"	m	line:25	language:C++	class:buffer_test::dummy_class	typeref:typename:char[]	file:	access:private
buffer_	test/buffer/buffer_test.cpp	/^    char buffer_[N];$/;"	m	line:34	language:C++	struct:buffer_test::SizableClass	typeref:typename:char[]	file:	access:public
buffer_	test/buffer/buffer_test.cpp	/^    char buffer_[N];$/;"	m	line:44	language:C++	struct:buffer_test::SizableClass_WithData	typeref:typename:char[]	file:	access:public
buffer_	test/buffer/buffer_test.cpp	/^    char buffer_[N];$/;"	m	line:61	language:C++	struct:buffer_test::SizableClass_WithChar	typeref:typename:char[]	file:	access:public
buffer_	test/substring_search/kmp_test.cpp	/^    char buffer_[N];$/;"	m	line:80	language:C++	struct:kmp_test::SizableClass_WithChar	typeref:typename:char[]	file:	access:public
buffer_chain	src/buffer/buffer.cpp	/^buffer_chain::buffer_chain(buffer* parent, uint32_t capacity) $/;"	f	line:82	language:C++	class:buffer_chain	signature:(buffer * parent,uint32_t capacity)
buffer_chain	src/buffer/buffer.cpp	/^buffer_chain::buffer_chain(buffer_chain&& other)$/;"	f	line:110	language:C++	class:buffer_chain	signature:(buffer_chain && other)
buffer_chain	src/buffer/buffer.cpp	/^buffer_chain::buffer_chain(const buffer_chain& other)$/;"	f	line:128	language:C++	class:buffer_chain	signature:(const buffer_chain & other)
buffer_chain	src/buffer/buffer.cpp	/^buffer_chain::buffer_chain(const buffer_chain& other, uint32_t data_len, Iter start)$/;"	f	line:141	language:C++	class:buffer_chain	signature:(const buffer_chain & other,uint32_t data_len,Iter start)
buffer_chain	src/buffer/buffer.h	/^    buffer_chain(buffer* parent = nullptr, uint32_t capacity = DEFAULT_CHAIN_SIZE);$/;"	p	line:81	language:C++	class:buffer_chain	access:public	signature:(buffer * parent=nullptr,uint32_t capacity=DEFAULT_CHAIN_SIZE)
buffer_chain	src/buffer/buffer.h	/^    buffer_chain(buffer_chain&& other);$/;"	p	line:86	language:C++	class:buffer_chain	access:public	signature:(buffer_chain && other)
buffer_chain	src/buffer/buffer.h	/^    buffer_chain(const buffer_chain& other);$/;"	p	line:84	language:C++	class:buffer_chain	access:public	signature:(const buffer_chain & other)
buffer_chain	src/buffer/buffer.h	/^    buffer_chain(const buffer_chain& other, uint32_t data_len, Iter start);$/;"	p	line:85	language:C++	class:buffer_chain	access:public	signature:(const buffer_chain & other,uint32_t data_len,Iter start)
buffer_chain	src/buffer/buffer.h	/^class buffer_chain{$/;"	c	line:77	language:C++
buffer_chain::DEFAULT_CHAIN_SIZE	src/buffer/buffer.h	/^    static const uint32_t DEFAULT_CHAIN_SIZE = 1024;$/;"	m	line:143	language:C++	class:buffer_chain	typeref:typename:const uint32_t	access:public
buffer_chain::Iter	src/buffer/buffer.h	/^    using Iter = buffer_iter;$/;"	t	line:80	language:C++	class:buffer_chain	typeref:typename:buffer_iter	access:public
buffer_chain::MAXIMUM_CHAIN_SIZE	src/buffer/buffer.h	/^    static const uint32_t MAXIMUM_CHAIN_SIZE = UINT32_MAX;$/;"	m	line:144	language:C++	class:buffer_chain	typeref:typename:const uint32_t	access:public
buffer_chain::MAXIMUM_SIZE_WHEN_EXPAND	src/buffer/buffer.h	/^    static const uint32_t MAXIMUM_SIZE_WHEN_EXPAND = 4096;$/;"	m	line:145	language:C++	class:buffer_chain	typeref:typename:const uint32_t	access:public
buffer_chain::append	src/buffer/buffer.cpp	/^int64_t buffer_chain::append(const void* data, uint32_t data_len)$/;"	f	line:204	language:C++	class:buffer_chain	typeref:typename:int64_t	signature:(const void * data,uint32_t data_len)
buffer_chain::append	src/buffer/buffer.cpp	/^uint32_t buffer_chain::append(const buffer_chain& chain)$/;"	f	line:184	language:C++	class:buffer_chain	typeref:typename:uint32_t	signature:(const buffer_chain & chain)
buffer_chain::append	src/buffer/buffer.cpp	/^uint32_t buffer_chain::append(const buffer_chain& chain, uint32_t len, Iter start)$/;"	f	line:193	language:C++	class:buffer_chain	typeref:typename:uint32_t	signature:(const buffer_chain & chain,uint32_t len,Iter start)
buffer_chain::append	src/buffer/buffer.h	/^    int64_t append(const T& data);$/;"	p	line:95	language:C++	class:buffer_chain	typeref:typename:int64_t	access:public	signature:(const T & data)
buffer_chain::append	src/buffer/buffer.h	/^    int64_t append(const void* data, uint32_t data_len);$/;"	p	line:97	language:C++	class:buffer_chain	typeref:typename:int64_t	access:public	signature:(const void * data,uint32_t data_len)
buffer_chain::append	src/buffer/buffer.h	/^    uint32_t append(const buffer_chain& chain);$/;"	p	line:100	language:C++	class:buffer_chain	typeref:typename:uint32_t	access:public	signature:(const buffer_chain & chain)
buffer_chain::append	src/buffer/buffer.h	/^    uint32_t append(const buffer_chain& chain, uint32_t len, Iter start);$/;"	p	line:101	language:C++	class:buffer_chain	typeref:typename:uint32_t	access:public	signature:(const buffer_chain & chain,uint32_t len,Iter start)
buffer_chain::append	src/buffer/buffer.h	/^int64_t buffer_chain::append(const T& data)$/;"	f	line:276	language:C++	class:buffer_chain	typeref:typename:int64_t	signature:(const T & data)
buffer_chain::begin	src/buffer/buffer.cpp	/^buffer_chain::Iter buffer_chain::begin() const$/;"	f	line:230	language:C++	class:buffer_chain	typeref:typename:buffer_chain::Iter	signature:() const
buffer_chain::begin	src/buffer/buffer.h	/^    Iter begin() const ;$/;"	p	line:123	language:C++	class:buffer_chain	typeref:typename:Iter	access:public	signature:() const
buffer_chain::buffer_	src/buffer/buffer.h	/^    char*               buffer_;$/;"	m	line:147	language:C++	class:buffer_chain	typeref:typename:char *	access:private
buffer_chain::buffer_chain	src/buffer/buffer.cpp	/^buffer_chain::buffer_chain(buffer* parent, uint32_t capacity) $/;"	f	line:82	language:C++	class:buffer_chain	signature:(buffer * parent,uint32_t capacity)
buffer_chain::buffer_chain	src/buffer/buffer.cpp	/^buffer_chain::buffer_chain(buffer_chain&& other)$/;"	f	line:110	language:C++	class:buffer_chain	signature:(buffer_chain && other)
buffer_chain::buffer_chain	src/buffer/buffer.cpp	/^buffer_chain::buffer_chain(const buffer_chain& other)$/;"	f	line:128	language:C++	class:buffer_chain	signature:(const buffer_chain & other)
buffer_chain::buffer_chain	src/buffer/buffer.cpp	/^buffer_chain::buffer_chain(const buffer_chain& other, uint32_t data_len, Iter start)$/;"	f	line:141	language:C++	class:buffer_chain	signature:(const buffer_chain & other,uint32_t data_len,Iter start)
buffer_chain::buffer_chain	src/buffer/buffer.h	/^    buffer_chain(buffer* parent = nullptr, uint32_t capacity = DEFAULT_CHAIN_SIZE);$/;"	p	line:81	language:C++	class:buffer_chain	access:public	signature:(buffer * parent=nullptr,uint32_t capacity=DEFAULT_CHAIN_SIZE)
buffer_chain::buffer_chain	src/buffer/buffer.h	/^    buffer_chain(buffer_chain&& other);$/;"	p	line:86	language:C++	class:buffer_chain	access:public	signature:(buffer_chain && other)
buffer_chain::buffer_chain	src/buffer/buffer.h	/^    buffer_chain(const buffer_chain& other);$/;"	p	line:84	language:C++	class:buffer_chain	access:public	signature:(const buffer_chain & other)
buffer_chain::buffer_chain	src/buffer/buffer.h	/^    buffer_chain(const buffer_chain& other, uint32_t data_len, Iter start);$/;"	p	line:85	language:C++	class:buffer_chain	access:public	signature:(const buffer_chain & other,uint32_t data_len,Iter start)
buffer_chain::calculate_actual_capacity	src/buffer/buffer.cpp	/^uint32_t buffer_chain::calculate_actual_capacity(uint32_t given_capacity)$/;"	f	line:240	language:C++	class:buffer_chain	typeref:typename:uint32_t	signature:(uint32_t given_capacity)
buffer_chain::calculate_actual_capacity	src/buffer/buffer.h	/^    uint32_t calculate_actual_capacity(uint32_t given_capacity);$/;"	p	line:141	language:C++	class:buffer_chain	typeref:typename:uint32_t	access:private	signature:(uint32_t given_capacity)
buffer_chain::capacity_	src/buffer/buffer.h	/^    uint32_t            capacity_;$/;"	m	line:148	language:C++	class:buffer_chain	typeref:typename:uint32_t	access:private
buffer_chain::chain_capacity	src/buffer/buffer.h	/^    uint32_t chain_capacity() const { return capacity_; }$/;"	f	line:114	language:C++	class:buffer_chain	typeref:typename:uint32_t	access:public	signature:() const
buffer_chain::chain_free_space	src/buffer/buffer.h	/^    uint32_t chain_free_space() const {return capacity_ - off_;}$/;"	f	line:93	language:C++	class:buffer_chain	typeref:typename:uint32_t	access:public	signature:() const
buffer_chain::end	src/buffer/buffer.cpp	/^buffer_chain::Iter buffer_chain::end() const$/;"	f	line:235	language:C++	class:buffer_chain	typeref:typename:buffer_chain::Iter	signature:() const
buffer_chain::end	src/buffer/buffer.h	/^    Iter end() const ;$/;"	p	line:124	language:C++	class:buffer_chain	typeref:typename:Iter	access:public	signature:() const
buffer_chain::get_buffer	src/buffer/buffer.h	/^    const void* get_buffer() const  { return buffer_; }$/;"	f	line:116	language:C++	class:buffer_chain	typeref:typename:const void *	access:public	signature:() const
buffer_chain::get_buffer	src/buffer/buffer.h	/^    void* get_buffer() { return buffer_; }$/;"	f	line:115	language:C++	class:buffer_chain	typeref:typename:void *	access:public	signature:()
buffer_chain::get_misalign	src/buffer/buffer.h	/^    uint32_t get_misalign()const {return misalign_;}$/;"	f	line:105	language:C++	class:buffer_chain	typeref:typename:uint32_t	access:public	signature:() const
buffer_chain::get_offset	src/buffer/buffer.h	/^    uint32_t get_offset() const {return off_;}$/;"	f	line:91	language:C++	class:buffer_chain	typeref:typename:uint32_t	access:public	signature:() const
buffer_chain::get_start_buffer	src/buffer/buffer.h	/^    const void* get_start_buffer() const {return static_cast<char*>(buffer_) + misalign_;}$/;"	f	line:118	language:C++	class:buffer_chain	typeref:typename:const void *	access:public	signature:() const
buffer_chain::get_start_buffer	src/buffer/buffer.h	/^    void* get_start_buffer() {return static_cast<char*>(buffer_) + misalign_;}$/;"	f	line:117	language:C++	class:buffer_chain	typeref:typename:void *	access:public	signature:()
buffer_chain::misalign_	src/buffer/buffer.h	/^    uint32_t            misalign_;$/;"	m	line:152	language:C++	class:buffer_chain	typeref:typename:uint32_t	access:private
buffer_chain::next	src/buffer/buffer.h	/^    buffer_chain* next() { return next_; }$/;"	f	line:120	language:C++	class:buffer_chain	typeref:typename:buffer_chain *	access:public	signature:()
buffer_chain::next	src/buffer/buffer.h	/^    const buffer_chain* next() const {return next_;}$/;"	f	line:121	language:C++	class:buffer_chain	typeref:typename:const buffer_chain *	access:public	signature:() const
buffer_chain::next_	src/buffer/buffer.h	/^    buffer_chain*       next_;$/;"	m	line:150	language:C++	class:buffer_chain	typeref:typename:buffer_chain *	access:private
buffer_chain::off_	src/buffer/buffer.h	/^    uint32_t            off_;\/\/offset into chain, the total number of bytes stored in the chai/;"	m	line:149	language:C++	class:buffer_chain	typeref:typename:uint32_t	access:private
buffer_chain::operator =	src/buffer/buffer.cpp	/^buffer_chain& buffer_chain::operator= (const buffer_chain& other)$/;"	f	line:164	language:C++	class:buffer_chain	typeref:typename:buffer_chain &	signature:(const buffer_chain & other)
buffer_chain::operator =	src/buffer/buffer.h	/^    buffer_chain& operator= (const buffer_chain& other);$/;"	p	line:89	language:C++	class:buffer_chain	typeref:typename:buffer_chain &	access:public	signature:(const buffer_chain & other)
buffer_chain::operator ==	src/buffer/buffer.h	/^    bool operator==(const buffer_chain& other) const$/;"	f	line:126	language:C++	class:buffer_chain	typeref:typename:bool	access:public	signature:(const buffer_chain & other) const
buffer_chain::parent_	src/buffer/buffer.h	/^    buffer*             parent_;$/;"	m	line:151	language:C++	class:buffer_chain	typeref:typename:buffer *	access:private
buffer_chain::set_misalign	src/buffer/buffer.h	/^    int64_t set_misalign(uint32_t misalign)$/;"	f	line:106	language:C++	class:buffer_chain	typeref:typename:int64_t	access:public	signature:(uint32_t misalign)
buffer_chain::set_next_chain	src/buffer/buffer.h	/^    void set_next_chain(buffer_chain* next) {next_ = next;}$/;"	f	line:119	language:C++	class:buffer_chain	typeref:typename:void	access:public	signature:(buffer_chain * next)
buffer_chain::set_offset	src/buffer/buffer.cpp	/^int buffer_chain::set_offset(uint32_t offset)$/;"	f	line:224	language:C++	class:buffer_chain	typeref:typename:int	signature:(uint32_t offset)
buffer_chain::set_offset	src/buffer/buffer.h	/^    int set_offset(uint32_t offset);$/;"	p	line:90	language:C++	class:buffer_chain	typeref:typename:int	access:public	signature:(uint32_t offset)
buffer_chain::size	src/buffer/buffer.h	/^    uint32_t size() const { return off_ - misalign_; }$/;"	f	line:92	language:C++	class:buffer_chain	typeref:typename:uint32_t	access:public	signature:() const
buffer_chain::validate_iter	src/buffer/buffer.cpp	/^bool buffer_chain::validate_iter(Iter it) const$/;"	f	line:215	language:C++	class:buffer_chain	typeref:typename:bool	signature:(Iter it) const
buffer_chain::validate_iter	src/buffer/buffer.h	/^    bool validate_iter(Iter it) const ;$/;"	p	line:125	language:C++	class:buffer_chain	typeref:typename:bool	access:public	signature:(Iter it) const
buffer_chain::~buffer_chain	src/buffer/buffer.cpp	/^buffer_chain::~buffer_chain()$/;"	f	line:104	language:C++	class:buffer_chain	signature:()
buffer_chain::~buffer_chain	src/buffer/buffer.h	/^    ~buffer_chain();$/;"	p	line:82	language:C++	class:buffer_chain	access:public	signature:()
buffer_eol_style	src/buffer/buffer.h	/^enum class buffer_eol_style{$/;"	g	line:20	language:C++
buffer_iovec	src/buffer/buffer.h	/^struct buffer_iovec{$/;"	s	line:72	language:C++
buffer_iovec::iob_len	src/buffer/buffer.h	/^    uint32_t      iob_len;$/;"	m	line:74	language:C++	struct:buffer_iovec	typeref:typename:uint32_t	access:public
buffer_iovec::iov_base	src/buffer/buffer.h	/^    void*         iov_base;$/;"	m	line:73	language:C++	struct:buffer_iovec	typeref:typename:void *	access:public
buffer_iter	src/buffer/buffer.cpp	/^buffer_iter::buffer_iter( const buffer* buffer_ptr$/;"	f	line:6	language:C++	class:buffer_iter	signature:(const buffer * buffer_ptr,const buffer_chain * chain,uint32_t offset_of_buffer,uint32_t chain_number,uint32_t offset_of_chain)
buffer_iter	src/buffer/buffer.h	/^    buffer_iter($/;"	p	line:34	language:C++	class:buffer_iter	access:protected	signature:(const buffer * buffer_ptr,const buffer_chain * chain,uint32_t offset_of_buffer,uint32_t chain_number,uint32_t offset_of_chain)
buffer_iter	src/buffer/buffer.h	/^    buffer_iter(const buffer_iter& other) = default;$/;"	p	line:42	language:C++	class:buffer_iter	access:public	signature:(const buffer_iter & other)
buffer_iter	src/buffer/buffer.h	/^class buffer_iter{$/;"	c	line:30	language:C++
buffer_iter::NULL_ITER	src/buffer/buffer.h	/^    static const            	buffer_iter NULL_ITER;$/;"	m	line:63	language:C++	class:buffer_iter	typeref:typename:const buffer_iter	access:public
buffer_iter::buffer_	src/buffer/buffer.h	/^    const buffer*               buffer_;$/;"	m	line:65	language:C++	class:buffer_iter	typeref:typename:const buffer *	access:private
buffer_iter::buffer_iter	src/buffer/buffer.cpp	/^buffer_iter::buffer_iter( const buffer* buffer_ptr$/;"	f	line:6	language:C++	class:buffer_iter	signature:(const buffer * buffer_ptr,const buffer_chain * chain,uint32_t offset_of_buffer,uint32_t chain_number,uint32_t offset_of_chain)
buffer_iter::buffer_iter	src/buffer/buffer.h	/^    buffer_iter($/;"	p	line:34	language:C++	class:buffer_iter	access:protected	signature:(const buffer * buffer_ptr,const buffer_chain * chain,uint32_t offset_of_buffer,uint32_t chain_number,uint32_t offset_of_chain)
buffer_iter::buffer_iter	src/buffer/buffer.h	/^    buffer_iter(const buffer_iter& other) = default;$/;"	p	line:42	language:C++	class:buffer_iter	access:public	signature:(const buffer_iter & other)
buffer_iter::chain	src/buffer/buffer.h	/^    const buffer_chain& chain() {return *chain_;}$/;"	f	line:54	language:C++	class:buffer_iter	typeref:typename:const buffer_chain &	access:public	signature:()
buffer_iter::chain_	src/buffer/buffer.h	/^    const buffer_chain*        	chain_;$/;"	m	line:66	language:C++	class:buffer_iter	typeref:typename:const buffer_chain *	access:private
buffer_iter::chain_number_	src/buffer/buffer.h	/^    uint32_t                    chain_number_;$/;"	m	line:68	language:C++	class:buffer_iter	typeref:typename:uint32_t	access:private
buffer_iter::get_buffer	src/buffer/buffer.h	/^    const buffer* get_buffer() const {return buffer_;}$/;"	f	line:46	language:C++	class:buffer_iter	typeref:typename:const buffer *	access:public	signature:() const
buffer_iter::is_valid	src/buffer/buffer.h	/^    bool is_valid() const{return buffer_ != nullptr && chain_ != nullptr;}$/;"	f	line:60	language:C++	class:buffer_iter	typeref:typename:bool	access:public	signature:() const
buffer_iter::offset	src/buffer/buffer.h	/^    uint32_t offset() const {return offset_of_chain_;}$/;"	f	line:45	language:C++	class:buffer_iter	typeref:typename:uint32_t	access:public	signature:() const
buffer_iter::offset_of_buffer_	src/buffer/buffer.h	/^    uint32_t                    offset_of_buffer_;$/;"	m	line:67	language:C++	class:buffer_iter	typeref:typename:uint32_t	access:private
buffer_iter::offset_of_chain_	src/buffer/buffer.h	/^    uint32_t                    offset_of_chain_;$/;"	m	line:69	language:C++	class:buffer_iter	typeref:typename:uint32_t	access:private
buffer_iter::operator +	src/buffer/buffer.cpp	/^buffer_iter& buffer_iter::operator+(uint32_t forward_steps)$/;"	f	line:22	language:C++	class:buffer_iter	typeref:typename:buffer_iter &	signature:(uint32_t forward_steps)
buffer_iter::operator +	src/buffer/buffer.h	/^    buffer_iter& operator+(uint32_t forward_steps);$/;"	p	line:53	language:C++	class:buffer_iter	typeref:typename:buffer_iter &	access:public	signature:(uint32_t forward_steps)
buffer_iter::operator <	src/buffer/buffer.cpp	/^bool buffer_iter::operator<(const buffer_iter& other)$/;"	f	line:69	language:C++	class:buffer_iter	typeref:typename:bool	signature:(const buffer_iter & other)
buffer_iter::operator <	src/buffer/buffer.h	/^    bool operator<(const buffer_iter& other);$/;"	p	line:58	language:C++	class:buffer_iter	typeref:typename:bool	access:public	signature:(const buffer_iter & other)
buffer_iter::operator =	src/buffer/buffer.h	/^    buffer_iter& operator=(const buffer_iter& other) = default;$/;"	p	line:43	language:C++	class:buffer_iter	typeref:typename:buffer_iter &	access:public	signature:(const buffer_iter & other)
buffer_iter::operator ==	src/buffer/buffer.cpp	/^bool buffer_iter::operator==(const buffer_iter& other)$/;"	f	line:74	language:C++	class:buffer_iter	typeref:typename:bool	signature:(const buffer_iter & other)
buffer_iter::operator ==	src/buffer/buffer.h	/^    bool operator==(const buffer_iter& other);$/;"	p	line:59	language:C++	class:buffer_iter	typeref:typename:bool	access:public	signature:(const buffer_iter & other)
buffer_iter::operator >	src/buffer/buffer.cpp	/^bool buffer_iter::operator>(const buffer_iter& other)$/;"	f	line:57	language:C++	class:buffer_iter	typeref:typename:bool	signature:(const buffer_iter & other)
buffer_iter::operator >	src/buffer/buffer.h	/^    bool operator>(const buffer_iter& other);$/;"	p	line:57	language:C++	class:buffer_iter	typeref:typename:bool	access:public	signature:(const buffer_iter & other)
buffer_length	src/buffer/buffer.h	/^    uint32_t buffer_length() const {return total_len_;}$/;"	f	line:175	language:C++	class:buffer	typeref:typename:uint32_t	access:public	signature:() const
buffer_memcmp	src/buffer/buffer.cpp	/^bool buffer::buffer_memcmp(const char* source, uint32_t len, Iter start)$/;"	f	line:816	language:C++	class:buffer	typeref:typename:bool	signature:(const char * source,uint32_t len,Iter start)
buffer_memcmp	src/buffer/buffer.h	/^    bool buffer_memcmp(const char* source, uint32_t  len, Iter start);$/;"	p	line:230	language:C++	class:buffer	typeref:typename:bool	access:public	signature:(const char * source,uint32_t len,Iter start)
buffer_test	test/buffer/buffer_test.cpp	/^namespace buffer_test$/;"	n	line:11	language:C++	file:
buffer_test::SizableClass	test/buffer/buffer_test.cpp	/^struct SizableClass{$/;"	s	line:29	language:C++	namespace:buffer_test	file:
buffer_test::SizableClass::SizableClass	test/buffer/buffer_test.cpp	/^    SizableClass()$/;"	f	line:30	language:C++	struct:buffer_test::SizableClass	file:	access:public	signature:()
buffer_test::SizableClass::buffer_	test/buffer/buffer_test.cpp	/^    char buffer_[N];$/;"	m	line:34	language:C++	struct:buffer_test::SizableClass	typeref:typename:char[]	file:	access:public
buffer_test::SizableClass_WithChar	test/buffer/buffer_test.cpp	/^struct SizableClass_WithChar{$/;"	s	line:53	language:C++	namespace:buffer_test	file:
buffer_test::SizableClass_WithChar::SizableClass_WithChar	test/buffer/buffer_test.cpp	/^    SizableClass_WithChar()$/;"	f	line:54	language:C++	struct:buffer_test::SizableClass_WithChar	file:	access:public	signature:()
buffer_test::SizableClass_WithChar::buffer_	test/buffer/buffer_test.cpp	/^    char buffer_[N];$/;"	m	line:61	language:C++	struct:buffer_test::SizableClass_WithChar	typeref:typename:char[]	file:	access:public
buffer_test::SizableClass_WithData	test/buffer/buffer_test.cpp	/^struct SizableClass_WithData{$/;"	s	line:38	language:C++	namespace:buffer_test	file:
buffer_test::SizableClass_WithData::SizableClass_WithData	test/buffer/buffer_test.cpp	/^    SizableClass_WithData()$/;"	f	line:39	language:C++	struct:buffer_test::SizableClass_WithData	file:	access:public	signature:()
buffer_test::SizableClass_WithData::buffer_	test/buffer/buffer_test.cpp	/^    char buffer_[N];$/;"	m	line:44	language:C++	struct:buffer_test::SizableClass_WithData	typeref:typename:char[]	file:	access:public
buffer_test::TEST	test/buffer/buffer_test.cpp	/^TEST(buffer, test_append_buffer)$/;"	f	line:177	language:C++	namespace:buffer_test	signature:(buffer,test_append_buffer)
buffer_test::TEST	test/buffer/buffer_test.cpp	/^TEST(buffer, test_buffer_append_chain)$/;"	f	line:214	language:C++	namespace:buffer_test	signature:(buffer,test_buffer_append_chain)
buffer_test::TEST	test/buffer/buffer_test.cpp	/^TEST(buffer, test_buffer_append_data)$/;"	f	line:711	language:C++	namespace:buffer_test	signature:(buffer,test_buffer_append_data)
buffer_test::TEST	test/buffer/buffer_test.cpp	/^TEST(buffer, test_buffer_append_printf)$/;"	f	line:669	language:C++	namespace:buffer_test	signature:(buffer,test_buffer_append_printf)
buffer_test::TEST	test/buffer/buffer_test.cpp	/^TEST(buffer, test_buffer_chain_constructor)$/;"	f	line:64	language:C++	namespace:buffer_test	signature:(buffer,test_buffer_chain_constructor)
buffer_test::TEST	test/buffer/buffer_test.cpp	/^TEST(buffer, test_buffer_iter)$/;"	f	line:607	language:C++	namespace:buffer_test	signature:(buffer,test_buffer_iter)
buffer_test::TEST	test/buffer/buffer_test.cpp	/^TEST(buffer, test_buffer_memcmp)$/;"	f	line:545	language:C++	namespace:buffer_test	signature:(buffer,test_buffer_memcmp)
buffer_test::TEST	test/buffer/buffer_test.cpp	/^TEST(buffer, test_buffer_read_line)$/;"	f	line:643	language:C++	namespace:buffer_test	signature:(buffer,test_buffer_read_line)
buffer_test::TEST	test/buffer/buffer_test.cpp	/^TEST(buffer, test_buffer_search_eol)$/;"	f	line:620	language:C++	namespace:buffer_test	signature:(buffer,test_buffer_search_eol)
buffer_test::TEST	test/buffer/buffer_test.cpp	/^TEST(buffer, test_buffer_search_range)$/;"	f	line:514	language:C++	namespace:buffer_test	signature:(buffer,test_buffer_search_range)
buffer_test::TEST	test/buffer/buffer_test.cpp	/^TEST(buffer, test_construct_and_append_buffer)$/;"	f	line:94	language:C++	namespace:buffer_test	signature:(buffer,test_construct_and_append_buffer)
buffer_test::TEST	test/buffer/buffer_test.cpp	/^TEST(buffer, test_copy_out_from)$/;"	f	line:471	language:C++	namespace:buffer_test	signature:(buffer,test_copy_out_from)
buffer_test::TEST	test/buffer/buffer_test.cpp	/^TEST(buffer, test_operator_equal)$/;"	f	line:167	language:C++	namespace:buffer_test	signature:(buffer,test_operator_equal)
buffer_test::TEST	test/buffer/buffer_test.cpp	/^TEST(buffer, test_pullup)$/;"	f	line:231	language:C++	namespace:buffer_test	signature:(buffer,test_pullup)
buffer_test::TEST	test/buffer/buffer_test.cpp	/^TEST(buffer, test_pullup_with_more_chains)$/;"	f	line:300	language:C++	namespace:buffer_test	signature:(buffer,test_pullup_with_more_chains)
buffer_test::TEST	test/buffer/buffer_test.cpp	/^TEST(buffer, test_remove)$/;"	f	line:402	language:C++	namespace:buffer_test	signature:(buffer,test_remove)
buffer_test::dis	test/buffer/buffer_test.cpp	/^static std::uniform_int_distribution<> dis(33, 126);$/;"	v	line:50	language:C++	namespace:buffer_test	typeref:typename:std::uniform_int_distribution<>	file:
buffer_test::dummy_class	test/buffer/buffer_test.cpp	/^class dummy_class$/;"	c	line:16	language:C++	namespace:buffer_test	file:
buffer_test::dummy_class::buffer_	test/buffer/buffer_test.cpp	/^    char buffer_[DUMMY_CLASS_SIZE];$/;"	m	line:25	language:C++	class:buffer_test::dummy_class	typeref:typename:char[]	file:	access:private
buffer_test::dummy_class::dummy_class	test/buffer/buffer_test.cpp	/^    dummy_class()$/;"	f	line:19	language:C++	class:buffer_test::dummy_class	file:	access:public	signature:()
buffer_test::gen	test/buffer/buffer_test.cpp	/^static std::mt19937 gen(rd());$/;"	p	line:49	language:C++	namespace:buffer_test	typeref:typename:std::mt19937	file:	signature:(rd ())
buffer_test::rd	test/buffer/buffer_test.cpp	/^static std::random_device rd;$/;"	v	line:48	language:C++	namespace:buffer_test	typeref:typename:std::random_device	file:
build	src/easylogging/easylogging++.cc	/^base::type::string_t DefaultLogBuilder::build(const LogMessage* logMessage, bool appendNewLine) /;"	f	line:2393	language:C++	class:el::base::DefaultLogBuilder	typeref:typename:base::type::string_t	signature:(const LogMessage * logMessage,bool appendNewLine) const
build	src/easylogging/easylogging++.cc	/^void TypedConfigurations::build(Configurations* configurations) {$/;"	f	line:1674	language:C++	class:el::base::TypedConfigurations	typeref:typename:void	signature:(Configurations * configurations)
build	src/easylogging/easylogging++.h	/^  base::type::string_t build(const LogMessage* logMessage, bool appendNewLine) const;$/;"	p	line:2765	language:C++	class:el::base::DefaultLogBuilder	typeref:typename:base::type::string_t	access:public	signature:(const LogMessage * logMessage,bool appendNewLine) const
build	src/easylogging/easylogging++.h	/^  virtual base::type::string_t build(const LogMessage* logMessage, bool appendNewLine) const = 0/;"	p	line:2201	language:C++	class:el::LogBuilder	typeref:typename:base::type::string_t	access:public	signature:(const LogMessage * logMessage,bool appendNewLine) const
build	src/easylogging/easylogging++.h	/^  void build(Configurations* configurations);$/;"	p	line:2019	language:C++	class:el::base::TypedConfigurations	typeref:typename:void	access:private	signature:(Configurations * configurations)
buildBaseFilename	src/easylogging/easylogging++.cc	/^void File::buildBaseFilename(const std::string& fullPath, char buff[], std::size_t limit, const /;"	f	line:845	language:C++	class:el::base::utils::File	typeref:typename:void	signature:(const std::string & fullPath,char buff[],std::size_t limit,const char * separator)
buildBaseFilename	src/easylogging/easylogging++.h	/^  static void buildBaseFilename(const std::string& fullPath, char buff[],$/;"	p	line:1060	language:C++	class:el::base::utils::File	typeref:typename:void	access:public	signature:(const std::string & fullPath,char buff[],std::size_t limit=base::consts::kSourceFilenameMaxLength,const char * seperator=base::consts::kFilePathSeperator)
buildStrippedFilename	src/easylogging/easylogging++.cc	/^void File::buildStrippedFilename(const char* filename, char buff[], std::size_t limit) {$/;"	f	line:833	language:C++	class:el::base::utils::File	typeref:typename:void	signature:(const char * filename,char buff[],std::size_t limit)
buildStrippedFilename	src/easylogging/easylogging++.h	/^  static void buildStrippedFilename(const char* filename, char buff[],$/;"	p	line:1057	language:C++	class:el::base::utils::File	typeref:typename:void	access:public	signature:(const char * filename,char buff[],std::size_t limit=base::consts::kSourceFilenameMaxLength)
buildTimeInfo	src/easylogging/easylogging++.cc	/^struct ::tm* DateTime::buildTimeInfo(struct timeval* currTime, struct ::tm* timeInfo) {$/;"	f	line:1229	language:C++	class:el::base::utils::DateTime	typeref:struct:::tm *	signature:(struct timeval * currTime,struct::tm * timeInfo)
buildTimeInfo	src/easylogging/easylogging++.h	/^  static struct ::tm* buildTimeInfo(struct timeval* currTime, struct ::tm* timeInfo);$/;"	p	line:1204	language:C++	class:el::base::utils::DateTime	typeref:struct:::tm *	access:public	signature:(struct timeval * currTime,struct::tm * timeInfo)
build_search_table	src/substring_search/KMP.cpp	/^build_search_table(const char* pattern, size_t len)$/;"	f	line:6	language:C++	namespace:substring_search	typeref:typename:std::shared_ptr<std::vector<int>>	signature:(const char * pattern,size_t len)
build_search_table	src/substring_search/KMP.h	/^build_search_table(const char *pattern, size_t len);$/;"	p	line:13	language:C++	namespace:substring_search	typeref:typename:std::shared_ptr<std::vector<int>>	signature:(const char * pattern,size_t len)
build_search_table_callback	test/substring_search/kmp_test.cpp	/^using build_search_table_callback = std::shared_ptr<std::vector<int>> (*)(const char*, size_t);$/;"	t	line:17	language:C++	namespace:kmp_test	file:
builder	src/design_patterns/builder/builder.h	/^    static HtmlBuilder builder(const std::string &root_name);$/;"	p	line:40	language:C++	struct:design_patterns::HtmlElement	typeref:typename:HtmlBuilder	access:public	signature:(const std::string & root_name)
builder	src/design_patterns/builder/builder.h	/^HtmlBuilder HtmlElement::builder(const std::string &root_name)$/;"	f	line:75	language:C++	class:design_patterns::HtmlElement	typeref:typename:HtmlBuilder	signature:(const std::string & root_name)
builder_ptr	src/design_patterns/builder/builder.h	/^    static std::unique_ptr<HtmlBuilder> builder_ptr(const std::string &root_name);$/;"	p	line:41	language:C++	struct:design_patterns::HtmlElement	typeref:typename:std::unique_ptr<HtmlBuilder>	access:public	signature:(const std::string & root_name)
builder_ptr	src/design_patterns/builder/builder.h	/^std::unique_ptr<HtmlBuilder> HtmlElement::builder_ptr(const std::string &root_name)$/;"	f	line:80	language:C++	class:design_patterns::HtmlElement	typeref:typename:std::unique_ptr<HtmlBuilder>	signature:(const std::string & root_name)
bytebuf	src/bytebuf/bytebuf.cpp	/^bytebuf::bytebuf(unsigned int capacity) $/;"	f	line:4	language:C++	class:bytebuf	signature:(unsigned int capacity)
bytebuf	src/bytebuf/bytebuf.h	/^    bytebuf(const bytebuf& other) = default;$/;"	p	line:22	language:C++	class:bytebuf	access:public	signature:(const bytebuf & other)
bytebuf	src/bytebuf/bytebuf.h	/^    bytebuf(unsigned int capacity = DEFAULT_CAPACITY);$/;"	p	line:20	language:C++	class:bytebuf	access:public	signature:(unsigned int capacity=DEFAULT_CAPACITY)
bytebuf	src/bytebuf/bytebuf.h	/^class bytebuf$/;"	c	line:9	language:C++
bytebuf::DEFAULT_CAPACITY	src/bytebuf/bytebuf.h	/^    static const int DEFAULT_CAPACITY = 128;$/;"	m	line:18	language:C++	class:bytebuf	typeref:typename:const int	access:public
bytebuf::MAX_CAPACITY	src/bytebuf/bytebuf.h	/^    static const unsigned int MAX_CAPACITY = INT32_MAX;$/;"	m	line:17	language:C++	class:bytebuf	typeref:typename:const unsigned int	access:public
bytebuf::buf_	src/bytebuf/bytebuf.h	/^    std::vector<char>   buf_;$/;"	m	line:15	language:C++	class:bytebuf	typeref:typename:std::vector<char>	access:private
bytebuf::bytebuf	src/bytebuf/bytebuf.cpp	/^bytebuf::bytebuf(unsigned int capacity) $/;"	f	line:4	language:C++	class:bytebuf	signature:(unsigned int capacity)
bytebuf::bytebuf	src/bytebuf/bytebuf.h	/^    bytebuf(const bytebuf& other) = default;$/;"	p	line:22	language:C++	class:bytebuf	access:public	signature:(const bytebuf & other)
bytebuf::bytebuf	src/bytebuf/bytebuf.h	/^    bytebuf(unsigned int capacity = DEFAULT_CAPACITY);$/;"	p	line:20	language:C++	class:bytebuf	access:public	signature:(unsigned int capacity=DEFAULT_CAPACITY)
bytebuf::capacity	src/bytebuf/bytebuf.h	/^    unsigned int capacity() const {return capacity_;}$/;"	f	line:29	language:C++	class:bytebuf	typeref:typename:unsigned int	access:public	signature:() const
bytebuf::capacity_	src/bytebuf/bytebuf.h	/^    unsigned int        capacity_;$/;"	m	line:12	language:C++	class:bytebuf	typeref:typename:unsigned int	access:private
bytebuf::clear	src/bytebuf/bytebuf.cpp	/^void bytebuf::clear()$/;"	f	line:24	language:C++	class:bytebuf	typeref:typename:void	signature:()
bytebuf::clear	src/bytebuf/bytebuf.h	/^    void clear();$/;"	p	line:43	language:C++	class:bytebuf	typeref:typename:void	access:public	signature:()
bytebuf::discardReadBytes	src/bytebuf/bytebuf.cpp	/^void bytebuf::discardReadBytes()$/;"	f	line:13	language:C++	class:bytebuf	typeref:typename:void	signature:()
bytebuf::discardReadBytes	src/bytebuf/bytebuf.h	/^    void discardReadBytes();$/;"	p	line:42	language:C++	class:bytebuf	typeref:typename:void	access:public	signature:()
bytebuf::find	src/bytebuf/bytebuf.h	/^    int find(const T& target);$/;"	p	line:40	language:C++	class:bytebuf	typeref:typename:int	access:public	signature:(const T & target)
bytebuf::find	src/bytebuf/bytebuf.h	/^int bytebuf::find(const T& target)$/;"	f	line:71	language:C++	class:bytebuf	typeref:typename:int	signature:(const T & target)
bytebuf::isReadable	src/bytebuf/bytebuf.h	/^    bool isReadable() const {return readIndex_ > 0;}$/;"	f	line:27	language:C++	class:bytebuf	typeref:typename:bool	access:public	signature:() const
bytebuf::isWritable	src/bytebuf/bytebuf.h	/^    bool isWritable() const {return writableBytes() > 0;}$/;"	f	line:28	language:C++	class:bytebuf	typeref:typename:bool	access:public	signature:() const
bytebuf::operator =	src/bytebuf/bytebuf.h	/^    bytebuf& operator=(const bytebuf& other) = default;$/;"	p	line:23	language:C++	class:bytebuf	typeref:typename:bytebuf &	access:public	signature:(const bytebuf & other)
bytebuf::peek	src/bytebuf/bytebuf.h	/^    template <typename T> void peek(T* dest);$/;"	p	line:34	language:C++	class:bytebuf	typeref:typename:void	access:public	signature:(T * dest)
bytebuf::peek	src/bytebuf/bytebuf.h	/^void bytebuf::peek(T* dest)$/;"	f	line:54	language:C++	class:bytebuf	typeref:typename:void	signature:(T * dest)
bytebuf::peekN	src/bytebuf/bytebuf.cpp	/^void bytebuf::peekN(void* dest, unsigned int n)$/;"	f	line:36	language:C++	class:bytebuf	typeref:typename:void	signature:(void * dest,unsigned int n)
bytebuf::peekN	src/bytebuf/bytebuf.h	/^    void peekN(void* dest, unsigned int n);$/;"	p	line:37	language:C++	class:bytebuf	typeref:typename:void	access:public	signature:(void * dest,unsigned int n)
bytebuf::read	src/bytebuf/bytebuf.h	/^    template <typename T> void read(T* dest);$/;"	p	line:33	language:C++	class:bytebuf	typeref:typename:void	access:public	signature:(T * dest)
bytebuf::read	src/bytebuf/bytebuf.h	/^void bytebuf::read(T* dest)$/;"	f	line:47	language:C++	class:bytebuf	typeref:typename:void	signature:(T * dest)
bytebuf::readIndex	src/bytebuf/bytebuf.h	/^    unsigned int readIndex() const {return readIndex_;}$/;"	f	line:30	language:C++	class:bytebuf	typeref:typename:unsigned int	access:public	signature:() const
bytebuf::readIndex_	src/bytebuf/bytebuf.h	/^    unsigned int        readIndex_;$/;"	m	line:14	language:C++	class:bytebuf	typeref:typename:unsigned int	access:private
bytebuf::readN	src/bytebuf/bytebuf.cpp	/^void bytebuf::readN(void* dest, unsigned int n)$/;"	f	line:30	language:C++	class:bytebuf	typeref:typename:void	signature:(void * dest,unsigned int n)
bytebuf::readN	src/bytebuf/bytebuf.h	/^    void readN(void* dest, unsigned int n);$/;"	p	line:36	language:C++	class:bytebuf	typeref:typename:void	access:public	signature:(void * dest,unsigned int n)
bytebuf::readableBytes	src/bytebuf/bytebuf.h	/^    unsigned int readableBytes() const {return writeIndex_ - readIndex_;}$/;"	f	line:26	language:C++	class:bytebuf	typeref:typename:unsigned int	access:public	signature:() const
bytebuf::writableBytes	src/bytebuf/bytebuf.h	/^    unsigned int writableBytes() const {return capacity_ - writeIndex_;}$/;"	f	line:25	language:C++	class:bytebuf	typeref:typename:unsigned int	access:public	signature:() const
bytebuf::write	src/bytebuf/bytebuf.h	/^    template <typename T> void write(const T& source);$/;"	p	line:35	language:C++	class:bytebuf	typeref:typename:void	access:public	signature:(const T & source)
bytebuf::write	src/bytebuf/bytebuf.h	/^void bytebuf::write(const T& source)$/;"	f	line:63	language:C++	class:bytebuf	typeref:typename:void	signature:(const T & source)
bytebuf::writeIndex	src/bytebuf/bytebuf.h	/^    unsigned int writeIndex() const {return writeIndex_;}$/;"	f	line:31	language:C++	class:bytebuf	typeref:typename:unsigned int	access:public	signature:() const
bytebuf::writeIndex_	src/bytebuf/bytebuf.h	/^    unsigned int        writeIndex_;$/;"	m	line:13	language:C++	class:bytebuf	typeref:typename:unsigned int	access:private
bytebuf::writeN	src/bytebuf/bytebuf.cpp	/^void bytebuf::writeN(const void* source, unsigned int n)$/;"	f	line:43	language:C++	class:bytebuf	typeref:typename:void	signature:(const void * source,unsigned int n)
bytebuf::writeN	src/bytebuf/bytebuf.h	/^    void writeN(const void* source, unsigned int n);$/;"	p	line:38	language:C++	class:bytebuf	typeref:typename:void	access:public	signature:(const void * source,unsigned int n)
bytebuf::~bytebuf	src/bytebuf/bytebuf.h	/^    ~bytebuf() = default;$/;"	p	line:21	language:C++	class:bytebuf	access:public	signature:()
bytebuf_test	src/bytebuf/test.h	/^namespace bytebuf_test$/;"	n	line:4	language:C++
bytebuf_test::run_tests	src/bytebuf/test.h	/^void run_tests(){$/;"	f	line:77	language:C++	namespace:bytebuf_test	typeref:typename:void	signature:()
bytebuf_test::test1	src/bytebuf/test.h	/^void test1(){$/;"	f	line:6	language:C++	namespace:bytebuf_test	typeref:typename:void	signature:()
bytes_per_section	src/mysql_gtid/mysql_gtid.cpp	/^const int MySQLUuid::bytes_per_section[MySQLUuid::SECTION_NUM] = {8, 4, 4, 4,$/;"	m	line:7	language:C++	class:MySQLUuid	typeref:typename:const int[]
bytes_per_section	src/mysql_gtid/mysql_gtid.h	/^  static const int bytes_per_section[SECTION_NUM];$/;"	m	line:23	language:C++	struct:MySQLUuid	typeref:typename:const int[]	access:public
cStringCaseEq	src/easylogging/easylogging++.cc	/^bool Str::cStringCaseEq(const char* s1, const char* s2) {$/;"	f	line:962	language:C++	class:el::base::utils::Str	typeref:typename:bool	signature:(const char * s1,const char * s2)
cStringCaseEq	src/easylogging/easylogging++.h	/^  static bool cStringCaseEq(const char* s1, const char* s2);$/;"	p	line:1122	language:C++	class:el::base::utils::Str	typeref:typename:bool	access:public	signature:(const char * s1,const char * s2)
cStringEq	src/easylogging/easylogging++.cc	/^bool Str::cStringEq(const char* s1, const char* s2) {$/;"	f	line:956	language:C++	class:el::base::utils::Str	typeref:typename:bool	signature:(const char * s1,const char * s2)
cStringEq	src/easylogging/easylogging++.h	/^  static bool cStringEq(const char* s1, const char* s2);$/;"	p	line:1118	language:C++	class:el::base::utils::Str	typeref:typename:bool	access:public	signature:(const char * s1,const char * s2)
calculate_actual_capacity	src/buffer/buffer.cpp	/^uint32_t buffer_chain::calculate_actual_capacity(uint32_t given_capacity)$/;"	f	line:240	language:C++	class:buffer_chain	typeref:typename:uint32_t	signature:(uint32_t given_capacity)
calculate_actual_capacity	src/buffer/buffer.h	/^    uint32_t calculate_actual_capacity(uint32_t given_capacity);$/;"	p	line:141	language:C++	class:buffer_chain	typeref:typename:uint32_t	access:private	signature:(uint32_t given_capacity)
callback	src/easylogging/easylogging++.h	/^  static T* callback(const std::string& id, std::unordered_map<std::string, TPtr>* mapT) {$/;"	f	line:1549	language:C++	class:el::base::utils::Utils	typeref:typename:T *	access:public	signature:(const std::string & id,std::unordered_map<std::string,TPtr> * mapT)
capacity	src/bytebuf/bytebuf.h	/^    unsigned int capacity() const {return capacity_;}$/;"	f	line:29	language:C++	class:bytebuf	typeref:typename:unsigned int	access:public	signature:() const
capacity_	src/buffer/buffer.h	/^    uint32_t            capacity_;$/;"	m	line:148	language:C++	class:buffer_chain	typeref:typename:uint32_t	access:private
capacity_	src/bytebuf/bytebuf.h	/^    unsigned int        capacity_;$/;"	m	line:12	language:C++	class:bytebuf	typeref:typename:unsigned int	access:private
caseInsensitiveEqual	src/string_piece/string_piece.h	/^    bool caseInsensitiveEqual(recipes::AddLowConst_t<Iter> str)$/;"	f	line:99	language:C++	class:string_piece::Range	typeref:typename:bool	access:public	signature:(recipes::AddLowConst_t<Iter> str)
castFromInt	src/easylogging/easylogging++.h	/^  static ConfigurationType castFromInt(base::type::EnumType c) {$/;"	f	line:675	language:C++	class:el::ConfigurationTypeHelper	typeref:typename:ConfigurationType	access:public	signature:(base::type::EnumType c)
castFromInt	src/easylogging/easylogging++.h	/^  static Level castFromInt(base::type::EnumType l) {$/;"	f	line:614	language:C++	class:el::LevelHelper	typeref:typename:Level	access:public	signature:(base::type::EnumType l)
castToInt	src/easylogging/easylogging++.h	/^  static base::type::EnumType castToInt(ConfigurationType configurationType) {$/;"	f	line:671	language:C++	class:el::ConfigurationTypeHelper	typeref:typename:base::type::EnumType	access:public	signature:(ConfigurationType configurationType)
castToInt	src/easylogging/easylogging++.h	/^  static base::type::EnumType castToInt(Level level) {$/;"	f	line:610	language:C++	class:el::LevelHelper	typeref:typename:base::type::EnumType	access:public	signature:(Level level)
cbegin	src/easylogging/easylogging++.h	/^  virtual inline const_iterator cbegin(void) const ELPP_FINAL {$/;"	f	line:1320	language:C++	class:el::base::utils::AbstractRegistry	typeref:typename:const_iterator	access:public	signature:(void) const
cbegin	src/string_piece/string_piece.h	/^    const_iterator cbegin() const {return begin_;}$/;"	f	line:74	language:C++	class:string_piece::Range	typeref:typename:const_iterator	access:public	signature:() const
cend	src/easylogging/easylogging++.h	/^  virtual inline const_iterator cend(void) const ELPP_FINAL {$/;"	f	line:1325	language:C++	class:el::base::utils::AbstractRegistry	typeref:typename:const_iterator	access:public	signature:(void) const
cend	src/string_piece/string_piece.h	/^    const_iterator cend() const {return end_;}$/;"	f	line:76	language:C++	class:string_piece::Range	typeref:typename:const_iterator	access:public	signature:() const
chain	src/buffer/buffer.h	/^    const buffer_chain& chain() {return *chain_;}$/;"	f	line:54	language:C++	class:buffer_iter	typeref:typename:const buffer_chain &	access:public	signature:()
chain_	src/buffer/buffer.h	/^    const buffer_chain*        	chain_;$/;"	m	line:66	language:C++	class:buffer_iter	typeref:typename:const buffer_chain *	access:private
chain_capacity	src/buffer/buffer.h	/^    uint32_t chain_capacity() const { return capacity_; }$/;"	f	line:114	language:C++	class:buffer_chain	typeref:typename:uint32_t	access:public	signature:() const
chain_free_space	src/buffer/buffer.h	/^    uint32_t chain_free_space() const {return capacity_ - off_;}$/;"	f	line:93	language:C++	class:buffer_chain	typeref:typename:uint32_t	access:public	signature:() const
chain_number	src/buffer/buffer.h	/^    uint32_t chain_number() const {return this->chains_.size();}$/;"	f	line:239	language:C++	class:buffer	typeref:typename:uint32_t	access:public	signature:() const
chain_number_	src/buffer/buffer.h	/^    uint32_t                    chain_number_;$/;"	m	line:68	language:C++	class:buffer_iter	typeref:typename:uint32_t	access:private
chains_	src/buffer/buffer.h	/^    std::list<buffer_chain>           chains_;$/;"	m	line:265	language:C++	class:buffer	typeref:typename:std::list<buffer_chain>	access:private
char_t	src/easylogging/easylogging++.h	/^typedef wchar_t char_t;$/;"	t	line:514	language:C++	namespace:el::base::type	typeref:typename:wchar_t
checkpoint	src/easylogging/easylogging++.cc	/^void PerformanceTracker::checkpoint(const std::string& id, const char* file, base::type::LineNum/;"	f	line:2712	language:C++	class:el::base::PerformanceTracker	typeref:typename:void	signature:(const std::string & id,const char * file,base::type::LineNumber line,const char * func)
checkpoint	src/easylogging/easylogging++.h	/^  void checkpoint(const std::string& id = std::string(), const char* file = __FILE__,$/;"	p	line:3477	language:C++	class:el::base::PerformanceTracker	typeref:typename:void	access:public	signature:(const std::string & id=std::string (),const char * file=__FILE__,base::type::LineNumber line=__LINE__,const char * func="")
checkpointId	src/easylogging/easylogging++.h	/^  inline std::string checkpointId(void) const {$/;"	f	line:3428	language:C++	class:el::PerformanceTrackingData	typeref:typename:std::string	access:public	signature:(void) const
children	src/design_patterns/builder/groovy_builder.h	/^    vector<Tag> children;$/;"	m	line:16	language:C++	struct:design_patterns::Tag	typeref:typename:vector<Tag>	access:public
city	src/design_patterns/prototype/prototype.h	/^    string city;$/;"	m	line:16	language:C++	struct:design_patterns::WorkAddress	typeref:typename:string	access:public
clean	src/easylogging/easylogging++.cc	/^bool AsyncDispatchWorker::clean(void) {$/;"	f	line:2304	language:C++	class:el::base::AsyncDispatchWorker	typeref:typename:bool	signature:(void)
clean	src/easylogging/easylogging++.h	/^  bool clean(void);$/;"	p	line:2741	language:C++	class:el::base::AsyncDispatchWorker	typeref:typename:bool	access:public	signature:(void)
clear	src/al/MinHeap.h	/^    void clear() {container_.clear();}$/;"	f	line:31	language:C++	class:al::MinHeap	typeref:typename:void	access:public	signature:()
clear	src/bytebuf/bytebuf.cpp	/^void bytebuf::clear()$/;"	f	line:24	language:C++	class:bytebuf	typeref:typename:void	signature:()
clear	src/bytebuf/bytebuf.h	/^    void clear();$/;"	p	line:43	language:C++	class:bytebuf	typeref:typename:void	access:public	signature:()
clear	src/easylogging/easylogging++.h	/^  inline void clear(void) {$/;"	f	line:1810	language:C++	class:el::Configurations	typeref:typename:void	access:public	signature:(void)
clearAll	src/http/HttpHeaders.cpp	/^void HttpHeaders::clearAll()$/;"	f	line:161	language:C++	class:http::HttpHeaders	typeref:typename:void	signature:()
clearAll	src/http/HttpHeaders.h	/^    void clearAll();$/;"	p	line:57	language:C++	class:http::HttpHeaders	typeref:typename:void	access:private	signature:()
clearBuff	src/easylogging/easylogging++.cc	/^char* Str::clearBuff(char buff[], std::size_t lim) {$/;"	f	line:1010	language:C++	class:el::base::utils::Str	typeref:typename:char *	signature:(char buff[],std::size_t lim)
clearBuff	src/easylogging/easylogging++.h	/^  static char* clearBuff(char buff[], std::size_t lim);$/;"	p	line:1129	language:C++	class:el::base::utils::Str	typeref:typename:char *	access:public	signature:(char buff[],std::size_t lim)
clearModules	src/easylogging/easylogging++.h	/^  inline void clearModules(void) {$/;"	f	line:2426	language:C++	class:el::base::VRegistry	typeref:typename:void	access:public	signature:(void)
clearVModules	src/easylogging/easylogging++.cc	/^void Loggers::clearVModules(void) {$/;"	f	line:3098	language:C++	class:el::Loggers	typeref:typename:void	signature:(void)
clearVModules	src/easylogging/easylogging++.h	/^  static void clearVModules(void);$/;"	p	line:3889	language:C++	class:el::Loggers	typeref:typename:void	access:public	signature:(void)
code_t	src/http/HttpHeaders.h	/^    using code_t = HttpHeaderCode;$/;"	t	line:31	language:C++	class:http::HttpHeaders	typeref:typename:HttpHeaderCode	access:private
codes_	src/http/HttpHeaders.h	/^    vector_t<HttpHeaderCode>            codes_;$/;"	m	line:96	language:C++	class:http::HttpHeaders	typeref:typename:vector_t<HttpHeaderCode>	access:private
codes_deleted_	src/http/HttpHeaders.h	/^    size_t                              codes_deleted_;$/;"	m	line:99	language:C++	class:http::HttpHeaders	typeref:typename:size_t	access:private
color_	src/design_patterns/basic/SOLID_Open_Close.h	/^    Color color_;$/;"	m	line:22	language:C++	class:design_patterns::Product	typeref:typename:Color	access:private
color_	src/design_patterns/basic/SOLID_Open_Close.h	/^    Color color_;$/;"	m	line:86	language:C++	class:design_patterns::ColorSpec	typeref:typename:Color	access:public
commandLineArgs	src/easylogging/easylogging++.h	/^  inline const base::utils::CommandLineArgs* commandLineArgs(void) const {$/;"	f	line:2589	language:C++	class:el::base::Storage	typeref:typename:const base::utils::CommandLineArgs *	access:public	signature:(void) const
commandLineArgs	src/easylogging/easylogging++.h	/^  static inline const el::base::utils::CommandLineArgs* commandLineArgs(void) {$/;"	f	line:3754	language:C++	class:el::Helpers	typeref:typename:const el::base::utils::CommandLineArgs *	access:public	signature:(void)
common_type	src/tests/type_traits.h	/^    struct common_type<_Tp, _Up, _Vp...>$/;"	s	line:2137	language:C++	namespace:std	inherits:__expanded_common_type_wrapper<typename__member_type_wrapper<common_type<_Tp,_Up>>::type,_Vp...>::type
common_type	src/tests/type_traits.h	/^    struct common_type<_Tp, _Up>$/;"	s	line:2132	language:C++	namespace:std	inherits:__common_type_impl<_Tp,_Up>::type
common_type	src/tests/type_traits.h	/^    struct common_type<_Tp>$/;"	s	line:2128	language:C++	namespace:std
common_type_t	src/tests/type_traits.h	/^    using common_type_t = typename common_type<_Tp...>::type;$/;"	t	line:2350	language:C++	namespace:std	typeref:typename:common_type<_Tp...>::type
conditional	src/tests/type_traits.h	/^    struct conditional$/;"	s	line:2069	language:C++	namespace:std
conditional	src/tests/type_traits.h	/^    struct conditional<false, _Iftrue, _Iffalse>$/;"	s	line:2074	language:C++	namespace:std
conditional_t	src/tests/type_traits.h	/^    using conditional_t = typename conditional<_Cond, _Iftrue, _Iffalse>::type;$/;"	t	line:2346	language:C++	namespace:std	typeref:typename:conditional<_Cond,_Iftrue,_Iffalse>::type
configString	src/easylogging/easylogging++.cc	/^  const char* configString;$/;"	m	line:201	language:C++	struct:el::ConfigurationStringToTypeItem	typeref:typename:const char *	file:	access:public
configStringToTypeMap	src/easylogging/easylogging++.cc	/^static struct ConfigurationStringToTypeItem configStringToTypeMap[] = {$/;"	v	line:205	language:C++	namespace:el	typeref:struct:ConfigurationStringToTypeItem[]	file:
configType	src/easylogging/easylogging++.cc	/^  ConfigurationType configType;$/;"	m	line:202	language:C++	struct:el::ConfigurationStringToTypeItem	typeref:typename:ConfigurationType	file:	access:public
configurationFile	src/easylogging/easylogging++.h	/^  inline const std::string& configurationFile(void) const {$/;"	f	line:1818	language:C++	class:el::Configurations	typeref:typename:const std::string &	access:public	signature:(void) const
configurationType	src/easylogging/easylogging++.h	/^  inline ConfigurationType configurationType(void) const {$/;"	f	line:1689	language:C++	class:el::Configuration	typeref:typename:ConfigurationType	access:public	signature:(void) const
configurations	src/easylogging/easylogging++.h	/^  const Configurations* configurations(void) const {$/;"	f	line:1914	language:C++	class:el::base::TypedConfigurations	typeref:typename:const Configurations *	access:public	signature:(void) const
configurations	src/easylogging/easylogging++.h	/^  inline Configurations* configurations(void) {$/;"	f	line:2244	language:C++	class:el::Logger	typeref:typename:Configurations *	access:public	signature:(void)
configure	src/easylogging/easylogging++.cc	/^void Logger::configure(const Configurations& configurations) {$/;"	f	line:647	language:C++	class:el::Logger	typeref:typename:void	signature:(const Configurations & configurations)
configure	src/easylogging/easylogging++.h	/^  void configure(const Configurations& configurations);$/;"	p	line:2227	language:C++	class:el::Logger	typeref:typename:void	access:public	signature:(const Configurations & configurations)
configureFromArg	src/easylogging/easylogging++.cc	/^bool Loggers::configureFromArg(const char* argKey) {$/;"	f	line:3068	language:C++	class:el::Loggers	typeref:typename:bool	signature:(const char * argKey)
configureFromArg	src/easylogging/easylogging++.h	/^  static bool configureFromArg(const char* argKey);$/;"	p	line:3839	language:C++	class:el::Loggers	typeref:typename:bool	access:public	signature:(const char * argKey)
configureFromGlobal	src/easylogging/easylogging++.cc	/^void Loggers::configureFromGlobal(const char* globalConfigurationFilePath) {$/;"	f	line:3027	language:C++	class:el::Loggers	typeref:typename:void	signature:(const char * globalConfigurationFilePath)
configureFromGlobal	src/easylogging/easylogging++.h	/^  static void configureFromGlobal(const char* globalConfigurationFilePath);$/;"	p	line:3834	language:C++	class:el::Loggers	typeref:typename:void	access:public	signature:(const char * globalConfigurationFilePath)
const_char	test/http_parser/http_parser_test.cpp	/^    using const_char = const char*;$/;"	t	line:38	language:C++	function:http_parser_test::test_traits	typeref:typename:const char *	file:
const_iterator	src/easylogging/easylogging++.h	/^  typedef typename Container::const_iterator const_iterator;$/;"	t	line:1257	language:C++	class:el::base::utils::AbstractRegistry	typeref:typename:Container::const_iterator	access:public
const_iterator	src/easylogging/easylogging++.h	/^  typedef typename Container::const_iterator const_iterator;$/;"	t	line:2796	language:C++	class:el::base::workarounds::IterableContainer	typeref:typename:Container::const_iterator	access:public
const_iterator	src/easylogging/easylogging++.h	/^  typedef typename Registry<T_Ptr, T_Key>::const_iterator const_iterator;$/;"	t	line:1372	language:C++	class:el::base::utils::Registry	typeref:typename:Registry<T_Ptr,T_Key>::const_iterator	access:public
const_iterator	src/easylogging/easylogging++.h	/^  typedef typename RegistryWithPred<T_Ptr, Pred>::const_iterator const_iterator;$/;"	t	line:1448	language:C++	class:el::base::utils::RegistryWithPred	typeref:typename:RegistryWithPred<T_Ptr,Pred>::const_iterator	access:public
const_iterator	src/string_piece/string_piece.h	/^    using const_iterator = std::add_const_t<iterator>;$/;"	t	line:50	language:C++	class:string_piece::Range	typeref:typename:std::add_const_t<iterator>	access:public
const_string_piece	src/http/HttpHeaders.h	/^    using const_string_piece = string_piece::const_string_piece;$/;"	t	line:33	language:C++	class:http::HttpHeaders	typeref:typename:string_piece::const_string_piece	access:private
const_string_piece	src/string_piece/string_piece.h	/^using const_string_piece = Range<const char*>;$/;"	t	line:138	language:C++	namespace:string_piece	typeref:typename:Range<const char * >
const_string_piece_t	src/http_parser/URLParser.h	/^    using const_string_piece_t = string_piece::const_string_piece;$/;"	t	line:14	language:C++	class:http::URLParser	typeref:typename:string_piece::const_string_piece	access:public
const_type	src/utils/type_traits.h	/^  typedef int const_type;$/;"	t	line:16	language:C++	struct:recipes::IsCharPointer	typeref:typename:int	access:public
construct	src/easylogging/easylogging++.cc	/^Writer& Writer::construct(Logger* logger, bool needLock) {$/;"	f	line:2532	language:C++	class:el::base::Writer	typeref:typename:Writer &	signature:(Logger * logger,bool needLock)
construct	src/easylogging/easylogging++.cc	/^Writer& Writer::construct(int count, const char* loggerIds, ...) {$/;"	f	line:2539	language:C++	class:el::base::Writer	typeref:typename:Writer &	signature:(int count,const char * loggerIds,...)
construct	src/easylogging/easylogging++.h	/^  Writer& construct(Logger* logger, bool needLock = true);$/;"	p	line:3229	language:C++	class:el::base::Writer	typeref:typename:Writer &	access:public	signature:(Logger * logger,bool needLock=true)
construct	src/easylogging/easylogging++.h	/^  Writer& construct(int count, const char* loggerIds, ...);$/;"	p	line:3230	language:C++	class:el::base::Writer	typeref:typename:Writer &	access:public	signature:(int count,const char * loggerIds,...)
consts	src/easylogging/easylogging++.cc	/^namespace consts {$/;"	n	line:28	language:C++	namespace:el::base	file:
consts	src/easylogging/easylogging++.h	/^namespace consts {$/;"	n	line:730	language:C++	namespace:el::base
container_	src/al/MinHeap.h	/^    ContainerType container_;$/;"	m	line:43	language:C++	class:al::MinHeap	typeref:typename:ContainerType	access:private
contains	src/easylogging/easylogging++.cc	/^bool Str::contains(const char* str, char c) {$/;"	f	line:981	language:C++	class:el::base::utils::Str	typeref:typename:bool	signature:(const char * str,char c)
contains	src/easylogging/easylogging++.h	/^  static bool contains(const char* str, char c);$/;"	p	line:1125	language:C++	class:el::base::utils::Str	typeref:typename:bool	access:public	signature:(const char * str,char c)
contains_sidno	src/mysql_gtid/mysql_gtid.cpp	/^bool MySQLGtidSet::contains_sidno(MySQLSidno sidno) const {$/;"	f	line:192	language:C++	class:MySQLGtidSet	typeref:typename:bool	signature:(MySQLSidno sidno) const
contains_sidno	src/mysql_gtid/mysql_gtid.h	/^  bool contains_sidno(MySQLSidno sidno) const;$/;"	p	line:89	language:C++	class:MySQLGtidSet	typeref:typename:bool	access:private	signature:(MySQLSidno sidno) const
content_length	src/http_parser/http_parser.h	/^  uint64_t content_length; \/* # bytes in body (0 if no Content-Length header) *\/$/;"	m	line:305	language:C++	struct:http_parser	typeref:typename:uint64_t	access:public
context_	src/design_patterns/basic/maybemonad.h	/^    T *context_;$/;"	m	line:49	language:C++	class:design_patterns::Maybe	typeref:typename:T *	access:private
continueRunning	src/easylogging/easylogging++.h	/^  bool continueRunning(void) const {$/;"	f	line:2752	language:C++	class:el::base::AsyncDispatchWorker	typeref:typename:bool	access:public	signature:(void) const
convertAndAddToBuff	src/easylogging/easylogging++.cc	/^char* Str::convertAndAddToBuff(std::size_t n, int len, char* buf, const char* bufLim, bool zeroP/;"	f	line:989	language:C++	class:el::base::utils::Str	typeref:typename:char *	signature:(std::size_t n,int len,char * buf,const char * bufLim,bool zeroPadded)
convertAndAddToBuff	src/easylogging/easylogging++.h	/^  static char* convertAndAddToBuff(std::size_t n, int len, char* buf, const char* bufLim, bool z/;"	p	line:1127	language:C++	class:el::base::utils::Str	typeref:typename:char *	access:public	signature:(std::size_t n,int len,char * buf,const char * bufLim,bool zeroPadded=true)
convertFromString	src/easylogging/easylogging++.cc	/^ConfigurationType ConfigurationTypeHelper::convertFromString(const char* configStr) {$/;"	f	line:218	language:C++	class:el::ConfigurationTypeHelper	typeref:typename:ConfigurationType	signature:(const char * configStr)
convertFromString	src/easylogging/easylogging++.cc	/^Level LevelHelper::convertFromString(const char* levelStr) {$/;"	f	line:165	language:C++	class:el::LevelHelper	typeref:typename:Level	signature:(const char * levelStr)
convertFromString	src/easylogging/easylogging++.h	/^  static ConfigurationType convertFromString(const char* configStr);$/;"	p	line:684	language:C++	class:el::ConfigurationTypeHelper	typeref:typename:ConfigurationType	access:public	signature:(const char * configStr)
convertFromString	src/easylogging/easylogging++.h	/^  static Level convertFromString(const char* levelStr);$/;"	p	line:623	language:C++	class:el::LevelHelper	typeref:typename:Level	access:public	signature:(const char * levelStr)
convertTemplateToStdString	src/easylogging/easylogging++.h	/^  static std::string convertTemplateToStdString(const T& templ) {$/;"	f	line:3734	language:C++	class:el::Helpers	typeref:typename:std::string	access:public	signature:(const T & templ)
convertToColoredOutput	src/easylogging/easylogging++.cc	/^void LogBuilder::convertToColoredOutput(base::type::string_t* logLine, Level level) {$/;"	f	line:585	language:C++	class:el::LogBuilder	typeref:typename:void	signature:(base::type::string_t * logLine,Level level)
convertToColoredOutput	src/easylogging/easylogging++.h	/^  void convertToColoredOutput(base::type::string_t* logLine, Level level);$/;"	p	line:2202	language:C++	class:el::LogBuilder	typeref:typename:void	access:public	signature:(base::type::string_t * logLine,Level level)
convertToString	src/easylogging/easylogging++.cc	/^const char* ConfigurationTypeHelper::convertToString(ConfigurationType configurationType) {$/;"	f	line:186	language:C++	class:el::ConfigurationTypeHelper	typeref:typename:const char *	signature:(ConfigurationType configurationType)
convertToString	src/easylogging/easylogging++.cc	/^const char* LevelHelper::convertToString(Level level) {$/;"	f	line:136	language:C++	class:el::LevelHelper	typeref:typename:const char *	signature:(Level level)
convertToString	src/easylogging/easylogging++.h	/^  static const char* convertToString(ConfigurationType configurationType);$/;"	p	line:680	language:C++	class:el::ConfigurationTypeHelper	typeref:typename:const char *	access:public	signature:(ConfigurationType configurationType)
convertToString	src/easylogging/easylogging++.h	/^  static const char* convertToString(Level level);$/;"	p	line:619	language:C++	class:el::LevelHelper	typeref:typename:const char *	access:public	signature:(Level level)
copy	src/string_piece/string_piece.h	/^    recipes::RemoveLowConst_t<Iter> copy()$/;"	f	line:112	language:C++	class:string_piece::Range	typeref:typename:recipes::RemoveLowConst_t<Iter>	access:public	signature:()
copyFrom	src/http/HttpHeaders.cpp	/^char *copyFrom(const std::string &str)$/;"	f	line:187	language:C++	namespace:http	typeref:typename:char *	signature:(const std::string & str)
copyFrom	src/http/HttpHeaders.cpp	/^char *copyFrom(string_piece::const_string_piece str)$/;"	f	line:182	language:C++	namespace:http	typeref:typename:char *	signature:(string_piece::const_string_piece str)
copyFrom	src/http/HttpHeaders.h	/^char *copyFrom(const std::string &str);$/;"	p	line:117	language:C++	namespace:http	typeref:typename:char *	signature:(const std::string & str)
copyFrom	src/http/HttpHeaders.h	/^char *copyFrom(string_piece::const_string_piece str);$/;"	p	line:116	language:C++	namespace:http	typeref:typename:char *	signature:(string_piece::const_string_piece str)
copy_out_from	src/buffer/buffer.cpp	/^int64_t buffer::copy_out_from(void* data, uint32_t data_len, Iter start)$/;"	f	line:737	language:C++	class:buffer	typeref:typename:int64_t	signature:(void * data,uint32_t data_len,Iter start)
copy_out_from	src/buffer/buffer.h	/^    int64_t copy_out_from(void* data, uint32_t data_len, Iter start);$/;"	p	line:221	language:C++	class:buffer	typeref:typename:int64_t	access:public	signature:(void * data,uint32_t data_len,Iter start)
count	src/design_patterns/basic/thread_safe_singleton.h	/^    static int count;$/;"	m	line:62	language:C++	struct:design_patterns::A	typeref:typename:int	access:public
count	src/design_patterns/basic/thread_safe_singleton.h	/^int A::count = 0;$/;"	m	line:65	language:C++	class:design_patterns::A	typeref:typename:int
crashAbort	src/easylogging/easylogging++.cc	/^static inline void crashAbort(int sig) {$/;"	f	line:2879	language:C++	namespace:el::base::debug	typeref:typename:void	file:	signature:(int sig)
crashAbort	src/easylogging/easylogging++.cc	/^void Helpers::crashAbort(int sig, const char* sourceFile, unsigned int long line) {$/;"	f	line:2921	language:C++	class:el::Helpers	typeref:typename:void	signature:(int sig,const char * sourceFile,unsigned int long line)
crashAbort	src/easylogging/easylogging++.h	/^  static void crashAbort(int sig, const char* sourceFile = "", unsigned int long line = 0);$/;"	p	line:3684	language:C++	class:el::Helpers	typeref:typename:void	access:public	signature:(int sig,const char * sourceFile="",unsigned int long line=0)
crashReason	src/easylogging/easylogging++.cc	/^static std::string crashReason(int sig) {$/;"	f	line:2842	language:C++	namespace:el::base::debug	typeref:typename:std::string	file:	signature:(int sig)
createPath	src/easylogging/easylogging++.cc	/^bool File::createPath(const std::string& path) {$/;"	f	line:782	language:C++	class:el::base::utils::File	typeref:typename:bool	signature:(const std::string & path)
createPath	src/easylogging/easylogging++.h	/^  static bool createPath(const std::string& path);$/;"	p	line:1052	language:C++	class:el::base::utils::File	typeref:typename:bool	access:public	signature:(const std::string & path)
creature_name	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    string creature_name;$/;"	m	line:18	language:C++	class:design_patterns::Query	typeref:typename:string	access:public
currentHost	src/easylogging/easylogging++.cc	/^std::string OS::currentHost(void) {$/;"	f	line:1132	language:C++	class:el::base::utils::OS	typeref:typename:std::string	signature:(void)
currentHost	src/easylogging/easylogging++.h	/^  static std::string currentHost(void);$/;"	p	line:1173	language:C++	class:el::base::utils::OS	typeref:typename:std::string	access:public	signature:(void)
currentUser	src/easylogging/easylogging++.cc	/^std::string OS::currentUser(void) {$/;"	f	line:1119	language:C++	class:el::base::utils::OS	typeref:typename:std::string	signature:(void)
currentUser	src/easylogging/easylogging++.h	/^  static std::string currentUser(void);$/;"	p	line:1168	language:C++	class:el::base::utils::OS	typeref:typename:std::string	access:public	signature:(void)
customFormatSpecifiers	src/easylogging/easylogging++.h	/^  const std::vector<CustomFormatSpecifier>* customFormatSpecifiers(void) const {$/;"	f	line:2629	language:C++	class:el::base::Storage	typeref:typename:const std::vector<CustomFormatSpecifier> *	access:public	signature:(void) const
customFormatSpecifiersLock	src/easylogging/easylogging++.h	/^  base::threading::Mutex& customFormatSpecifiersLock() {$/;"	f	line:2633	language:C++	class:el::base::Storage	typeref:typename:base::threading::Mutex &	access:public	signature:()
cv	src/easylogging/easylogging++.h	/^  std::condition_variable cv;$/;"	m	line:2756	language:C++	class:el::base::AsyncDispatchWorker	typeref:typename:std::condition_variable	access:private
data	src/easylogging/easylogging++.h	/^  inline LogDispatchData* data(void) {$/;"	f	line:2499	language:C++	class:el::base::AsyncLogItem	typeref:typename:LogDispatchData *	access:public	signature:(void)
data	src/http_parser/http_parser.h	/^  void *data; \/* A pointer to get hook to the "connection" or "socket" object *\/$/;"	m	line:322	language:C++	struct:http_parser	typeref:typename:void *	access:public
dataType	src/easylogging/easylogging++.h	/^  inline PerformanceTrackingData::DataType dataType(void) const {$/;"	f	line:3422	language:C++	class:el::PerformanceTrackingData	typeref:typename:PerformanceTrackingData::DataType	access:public	signature:(void) const
dateTimeFormat	src/easylogging/easylogging++.h	/^  inline const std::string& dateTimeFormat(void) const {$/;"	f	line:1600	language:C++	class:el::base::LogFormat	typeref:typename:const std::string &	access:public	signature:(void) const
debug	src/easylogging/easylogging++.cc	/^namespace debug {$/;"	n	line:2759	language:C++	namespace:el::base	file:
debug	src/easylogging/easylogging++.h	/^namespace debug {$/;"	n	line:3562	language:C++	namespace:el::base
decay	src/tests/type_traits.h	/^    class decay $/;"	c	line:2020	language:C++	namespace:std
decay_t	src/tests/type_traits.h	/^    using decay_t = typename decay<_Tp>::type;$/;"	t	line:2338	language:C++	namespace:std	typeref:typename:decay<_Tp>::type
declval	src/tests/type_traits.h	/^    inline typename add_rvalue_reference<_Tp>::type declval() noexcept$/;"	f	line:2157	language:C++	namespace:std	typeref:typename:add_rvalue_reference<_Tp>::type	signature:()
declval	src/tests/type_traits.h	/^    typename add_rvalue_reference<_Tp>::type declval() noexcept;$/;"	p	line:673	language:C++	namespace:std	typeref:typename:add_rvalue_reference<_Tp>::type	signature:()
deepCopy	src/easylogging/easylogging++.h	/^  virtual void deepCopy(const AbstractRegistry<T_Ptr, Container>&) = 0;$/;"	p	line:1353	language:C++	class:el::base::utils::AbstractRegistry	typeref:typename:void	access:protected	signature:(const AbstractRegistry<T_Ptr,Container> &)
deepCopy	src/easylogging/easylogging++.h	/^  virtual void deepCopy(const AbstractRegistry<T_Ptr, std::unordered_map<T_Key, T_Ptr*>>& sr) EL/;"	f	line:1433	language:C++	class:el::base::utils::Registry	typeref:typename:void	access:private	signature:(const AbstractRegistry<T_Ptr,std::unordered_map<T_Key,T_Ptr * >> & sr)
deepCopy	src/easylogging/easylogging++.h	/^  virtual void deepCopy(const AbstractRegistry<T_Ptr, std::vector<T_Ptr*>>& sr) {$/;"	f	line:1524	language:C++	class:el::base::utils::RegistryWithPred	typeref:typename:void	access:private	signature:(const AbstractRegistry<T_Ptr,std::vector<T_Ptr * >> & sr)
defaultConfigurations	src/easylogging/easylogging++.cc	/^const Configurations* Loggers::defaultConfigurations(void) {$/;"	f	line:3004	language:C++	class:el::Loggers	typeref:typename:const Configurations *	signature:(void)
defaultConfigurations	src/easylogging/easylogging++.h	/^  inline Configurations* defaultConfigurations(void) {$/;"	f	line:2358	language:C++	class:el::base::RegisteredLoggers	typeref:typename:Configurations *	access:public	signature:(void)
defaultConfigurations	src/easylogging/easylogging++.h	/^  static const Configurations* defaultConfigurations(void);$/;"	p	line:3825	language:C++	class:el::Loggers	typeref:typename:const Configurations *	access:public	signature:(void)
defaultCrashHandler	src/easylogging/easylogging++.cc	/^static inline void defaultCrashHandler(int sig) {$/;"	f	line:2886	language:C++	namespace:el::base::debug	typeref:typename:void	file:	signature:(int sig)
defaultPreRollOutCallback	src/easylogging/easylogging++.h	/^static inline void defaultPreRollOutCallback(const char*, std::size_t) {}$/;"	f	line:809	language:C++	namespace:el::base	typeref:typename:void	signature:(const char *,std::size_t)
defaultTypedConfigurations	src/easylogging/easylogging++.cc	/^base::TypedConfigurations Loggers::defaultTypedConfigurations(void) {$/;"	f	line:3012	language:C++	class:el::Loggers	typeref:typename:base::TypedConfigurations	signature:(void)
defaultTypedConfigurations	src/easylogging/easylogging++.h	/^  static base::TypedConfigurations defaultTypedConfigurations(void);$/;"	p	line:3829	language:C++	class:el::Loggers	typeref:typename:base::TypedConfigurations	access:public	signature:(void)
defence	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    enum Argument {attack, defence} argument;$/;"	e	line:19	language:C++	enum:design_patterns::Query::Argument	access:public
defence	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    int defence;$/;"	m	line:65	language:C++	struct:design_patterns::NewCreature	typeref:typename:int	access:private
defence	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^    int defence;$/;"	m	line:19	language:C++	class:design_patterns::Creature	typeref:typename:int	access:public
description	src/http_parser/http_parser.cpp	/^  const char *description;$/;"	m	line:473	language:C++	struct:__anon7e0e35540108	typeref:typename:const char *	file:	access:public
design_patterns	src/design_patterns/basic/SOLID_Open_Close.h	/^namespace design_patterns$/;"	n	line:7	language:C++
design_patterns	src/design_patterns/basic/maybemonad.h	/^namespace design_patterns{$/;"	n	line:8	language:C++
design_patterns	src/design_patterns/basic/thread_safe_singleton.h	/^namespace design_patterns$/;"	n	line:12	language:C++
design_patterns	src/design_patterns/builder/builder.h	/^namespace design_patterns$/;"	n	line:9	language:C++
design_patterns	src/design_patterns/builder/groovy_builder.h	/^namespace design_patterns$/;"	n	line:8	language:C++
design_patterns	src/design_patterns/chain_of_responsibility/broke_chain.h	/^namespace design_patterns$/;"	n	line:11	language:C++
design_patterns	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^namespace design_patterns$/;"	n	line:7	language:C++
design_patterns	src/design_patterns/factory/factory_method.h	/^namespace design_patterns$/;"	n	line:4	language:C++
design_patterns	src/design_patterns/prototype/prototype.h	/^namespace design_patterns$/;"	n	line:11	language:C++
design_patterns::A	src/design_patterns/basic/thread_safe_singleton.h	/^struct A$/;"	s	line:55	language:C++	namespace:design_patterns
design_patterns::A::A	src/design_patterns/basic/thread_safe_singleton.h	/^    A() : _(1000){$/;"	f	line:57	language:C++	struct:design_patterns::A	access:public	signature:()
design_patterns::A::_	src/design_patterns/basic/thread_safe_singleton.h	/^    std::vector<std::vector<std::string>> _;$/;"	m	line:61	language:C++	struct:design_patterns::A	typeref:typename:std::vector<std::vector<std::string>>	access:public
design_patterns::A::count	src/design_patterns/basic/thread_safe_singleton.h	/^    static int count;$/;"	m	line:62	language:C++	struct:design_patterns::A	typeref:typename:int	access:public
design_patterns::A::count	src/design_patterns/basic/thread_safe_singleton.h	/^int A::count = 0;$/;"	m	line:65	language:C++	class:design_patterns::A	typeref:typename:int
design_patterns::A::name	src/design_patterns/basic/thread_safe_singleton.h	/^    std::string name = "abcd";$/;"	m	line:60	language:C++	struct:design_patterns::A	typeref:typename:std::string	access:public
design_patterns::Address	src/design_patterns/basic/maybemonad.h	/^struct Address{$/;"	s	line:10	language:C++	namespace:design_patterns
design_patterns::Address::Address	src/design_patterns/basic/maybemonad.h	/^    explicit Address(std::string* name) : name(name){}$/;"	f	line:11	language:C++	struct:design_patterns::Address	access:public	signature:(std::string * name)
design_patterns::Address::name	src/design_patterns/basic/maybemonad.h	/^    std::string *name;$/;"	m	line:12	language:C++	struct:design_patterns::Address	typeref:typename:std::string *	access:public
design_patterns::Blue	src/design_patterns/basic/SOLID_Open_Close.h	/^enum class Color{Green, Red, Blue};$/;"	e	line:9	language:C++	enum:design_patterns::Color	access:public
design_patterns::Color	src/design_patterns/basic/SOLID_Open_Close.h	/^enum class Color{Green, Red, Blue};$/;"	g	line:9	language:C++	namespace:design_patterns
design_patterns::ColorSpec	src/design_patterns/basic/SOLID_Open_Close.h	/^class ColorSpec : public ISpecification<Product>$/;"	c	line:78	language:C++	namespace:design_patterns	inherits:ISpecification<Product>
design_patterns::ColorSpec::ColorSpec	src/design_patterns/basic/SOLID_Open_Close.h	/^    ColorSpec(Color color) : color_(color){}$/;"	f	line:81	language:C++	class:design_patterns::ColorSpec	access:public	signature:(Color color)
design_patterns::ColorSpec::color_	src/design_patterns/basic/SOLID_Open_Close.h	/^    Color color_;$/;"	m	line:86	language:C++	class:design_patterns::ColorSpec	typeref:typename:Color	access:public
design_patterns::ColorSpec::is_satisfied	src/design_patterns/basic/SOLID_Open_Close.h	/^    bool is_satisfied(Product* p) override $/;"	f	line:82	language:C++	class:design_patterns::ColorSpec	typeref:typename:bool	access:public	signature:(Product * p)
design_patterns::Contact	src/design_patterns/prototype/prototype.h	/^struct Contact$/;"	s	line:37	language:C++	namespace:design_patterns
design_patterns::Contact::Contact	src/design_patterns/prototype/prototype.h	/^    Contact(const Contact &obj)$/;"	f	line:44	language:C++	struct:design_patterns::Contact	access:public	signature:(const Contact & obj)
design_patterns::Contact::Contact	src/design_patterns/prototype/prototype.h	/^    Contact(const string& name, WorkAddress* workAddress)$/;"	f	line:39	language:C++	struct:design_patterns::Contact	access:public	signature:(const string & name,WorkAddress * workAddress)
design_patterns::Contact::name	src/design_patterns/prototype/prototype.h	/^    string name;$/;"	m	line:50	language:C++	struct:design_patterns::Contact	typeref:typename:string	access:public
design_patterns::Contact::work_address	src/design_patterns/prototype/prototype.h	/^    WorkAddress* work_address;$/;"	m	line:51	language:C++	struct:design_patterns::Contact	typeref:typename:WorkAddress *	access:public
design_patterns::Contact::~Contact	src/design_patterns/prototype/prototype.h	/^    ~Contact()$/;"	f	line:52	language:C++	struct:design_patterns::Contact	access:public	signature:()
design_patterns::Creature	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^class Creature$/;"	c	line:9	language:C++	namespace:design_patterns
design_patterns::Creature::Creature	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^    Creature(const string& name, int attack, int defence)$/;"	f	line:12	language:C++	class:design_patterns::Creature	access:public	signature:(const string & name,int attack,int defence)
design_patterns::Creature::attack	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^    int attack;$/;"	m	line:18	language:C++	class:design_patterns::Creature	typeref:typename:int	access:public
design_patterns::Creature::defence	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^    int defence;$/;"	m	line:19	language:C++	class:design_patterns::Creature	typeref:typename:int	access:public
design_patterns::Creature::name	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^    string name;$/;"	m	line:17	language:C++	class:design_patterns::Creature	typeref:typename:string	access:public
design_patterns::CreatureModifier	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^class CreatureModifier$/;"	c	line:30	language:C++	namespace:design_patterns
design_patterns::CreatureModifier::CreatureModifier	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^    CreatureModifier(Creature& creature) : targetCreature(creature), next_(0){}$/;"	f	line:33	language:C++	class:design_patterns::CreatureModifier	access:public	signature:(Creature & creature)
design_patterns::CreatureModifier::add	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^    void add(CreatureModifier& modifier)$/;"	f	line:36	language:C++	class:design_patterns::CreatureModifier	typeref:typename:void	access:public	signature:(CreatureModifier & modifier)
design_patterns::CreatureModifier::execute	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^    virtual void execute()$/;"	f	line:42	language:C++	class:design_patterns::CreatureModifier	typeref:typename:void	access:public	signature:()
design_patterns::CreatureModifier::next_	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^    CreatureModifier* next_;$/;"	m	line:49	language:C++	class:design_patterns::CreatureModifier	typeref:typename:CreatureModifier *	access:protected
design_patterns::CreatureModifier::targetCreature	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^    Creature& targetCreature;$/;"	m	line:48	language:C++	class:design_patterns::CreatureModifier	typeref:typename:Creature &	access:protected
design_patterns::CreatureModifier::~CreatureModifier	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^    virtual ~CreatureModifier(){}$/;"	f	line:34	language:C++	class:design_patterns::CreatureModifier	access:public	signature:()
design_patterns::DoubleAttackModifier	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^class DoubleAttackModifier : public CreatureModifier$/;"	c	line:52	language:C++	namespace:design_patterns	inherits:CreatureModifier
design_patterns::DoubleAttackModifier::DoubleAttackModifier	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^    DoubleAttackModifier(Creature& creature) : CreatureModifier(creature){}$/;"	f	line:55	language:C++	class:design_patterns::DoubleAttackModifier	access:public	signature:(Creature & creature)
design_patterns::DoubleAttackModifier::execute	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^    void execute() override$/;"	f	line:56	language:C++	class:design_patterns::DoubleAttackModifier	typeref:typename:void	access:public	signature:()
design_patterns::DoubleDefenceModifier	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^class DoubleDefenceModifier : public CreatureModifier$/;"	c	line:63	language:C++	namespace:design_patterns	inherits:CreatureModifier
design_patterns::DoubleDefenceModifier::DoubleDefenceModifier	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^    DoubleDefenceModifier(Creature& creature) : CreatureModifier(creature){}$/;"	f	line:66	language:C++	class:design_patterns::DoubleDefenceModifier	access:public	signature:(Creature & creature)
design_patterns::DoubleDefenceModifier::execute	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^    void execute() override$/;"	f	line:67	language:C++	class:design_patterns::DoubleDefenceModifier	typeref:typename:void	access:public	signature:()
design_patterns::Filter	src/design_patterns/basic/SOLID_Open_Close.h	/^class Filter : public IFilter<Product>$/;"	c	line:63	language:C++	namespace:design_patterns	inherits:IFilter<Product>
design_patterns::Filter::Products_t	src/design_patterns/basic/SOLID_Open_Close.h	/^    using Products_t = std::vector<Product*>;$/;"	t	line:66	language:C++	class:design_patterns::Filter	typeref:typename:std::vector<Product * >	access:public
design_patterns::Filter::filter	src/design_patterns/basic/SOLID_Open_Close.h	/^    Products_t filter(Products_t products, ISpecification<Product>& spec) override$/;"	f	line:67	language:C++	class:design_patterns::Filter	typeref:typename:Products_t	access:public	signature:(Products_t products,ISpecification<Product> & spec)
design_patterns::Game	src/design_patterns/chain_of_responsibility/broke_chain.h	/^class Game$/;"	c	line:28	language:C++	namespace:design_patterns
design_patterns::Game::queries	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    signal<void(Query&)> queries;$/;"	m	line:31	language:C++	class:design_patterns::Game	typeref:typename:signal<void (Query &)>	access:public
design_patterns::Green	src/design_patterns/basic/SOLID_Open_Close.h	/^enum class Color{Green, Red, Blue};$/;"	e	line:9	language:C++	enum:design_patterns::Color	access:public
design_patterns::HtmlBuilder	src/design_patterns/builder/builder.h	/^struct HtmlBuilder$/;"	s	line:44	language:C++	namespace:design_patterns
design_patterns::HtmlBuilder::HtmlBuilder	src/design_patterns/builder/builder.h	/^    HtmlBuilder(const std::string& root_name)$/;"	f	line:46	language:C++	struct:design_patterns::HtmlBuilder	access:public	signature:(const std::string & root_name)
design_patterns::HtmlBuilder::add_child	src/design_patterns/builder/builder.h	/^    HtmlBuilder &add_child(const std::string& child_name, const std::string& child_text)$/;"	f	line:51	language:C++	struct:design_patterns::HtmlBuilder	typeref:typename:HtmlBuilder &	access:public	signature:(const std::string & child_name,const std::string & child_text)
design_patterns::HtmlBuilder::add_child2	src/design_patterns/builder/builder.h	/^    HtmlBuilder* add_child2(const std::string &child_name, const std::string &child_text)$/;"	f	line:58	language:C++	struct:design_patterns::HtmlBuilder	typeref:typename:HtmlBuilder *	access:public	signature:(const std::string & child_name,const std::string & child_text)
design_patterns::HtmlBuilder::operator HtmlElement	src/design_patterns/builder/builder.h	/^    operator HtmlElement() { return root; }$/;"	f	line:70	language:C++	struct:design_patterns::HtmlBuilder	access:public	signature:()
design_patterns::HtmlBuilder::root	src/design_patterns/builder/builder.h	/^    HtmlElement root;$/;"	m	line:72	language:C++	struct:design_patterns::HtmlBuilder	typeref:typename:HtmlElement	access:public
design_patterns::HtmlBuilder::str	src/design_patterns/builder/builder.h	/^    std::string str() const $/;"	f	line:65	language:C++	struct:design_patterns::HtmlBuilder	typeref:typename:std::string	access:public	signature:() const
design_patterns::HtmlElement	src/design_patterns/builder/builder.h	/^struct HtmlElement$/;"	s	line:13	language:C++	namespace:design_patterns
design_patterns::HtmlElement::HtmlElement	src/design_patterns/builder/builder.h	/^    HtmlElement(){}$/;"	f	line:20	language:C++	struct:design_patterns::HtmlElement	access:public	signature:()
design_patterns::HtmlElement::HtmlElement	src/design_patterns/builder/builder.h	/^    HtmlElement(const std::string& name, const std::string& text)$/;"	f	line:21	language:C++	struct:design_patterns::HtmlElement	access:public	signature:(const std::string & name,const std::string & text)
design_patterns::HtmlElement::builder	src/design_patterns/builder/builder.h	/^    static HtmlBuilder builder(const std::string &root_name);$/;"	p	line:40	language:C++	struct:design_patterns::HtmlElement	typeref:typename:HtmlBuilder	access:public	signature:(const std::string & root_name)
design_patterns::HtmlElement::builder	src/design_patterns/builder/builder.h	/^HtmlBuilder HtmlElement::builder(const std::string &root_name)$/;"	f	line:75	language:C++	class:design_patterns::HtmlElement	typeref:typename:HtmlBuilder	signature:(const std::string & root_name)
design_patterns::HtmlElement::builder_ptr	src/design_patterns/builder/builder.h	/^    static std::unique_ptr<HtmlBuilder> builder_ptr(const std::string &root_name);$/;"	p	line:41	language:C++	struct:design_patterns::HtmlElement	typeref:typename:std::unique_ptr<HtmlBuilder>	access:public	signature:(const std::string & root_name)
design_patterns::HtmlElement::builder_ptr	src/design_patterns/builder/builder.h	/^std::unique_ptr<HtmlBuilder> HtmlElement::builder_ptr(const std::string &root_name)$/;"	f	line:80	language:C++	class:design_patterns::HtmlElement	typeref:typename:std::unique_ptr<HtmlBuilder>	signature:(const std::string & root_name)
design_patterns::HtmlElement::elements	src/design_patterns/builder/builder.h	/^    std::vector<HtmlElement> elements;$/;"	m	line:17	language:C++	struct:design_patterns::HtmlElement	typeref:typename:std::vector<HtmlElement>	access:public
design_patterns::HtmlElement::indent_size	src/design_patterns/builder/builder.h	/^    const size_t indent_size = 2;$/;"	m	line:18	language:C++	struct:design_patterns::HtmlElement	typeref:typename:const size_t	access:public
design_patterns::HtmlElement::name	src/design_patterns/builder/builder.h	/^    std::string name;$/;"	m	line:15	language:C++	struct:design_patterns::HtmlElement	typeref:typename:std::string	access:public
design_patterns::HtmlElement::str	src/design_patterns/builder/builder.h	/^    std::string str(int indent = 0) const$/;"	f	line:24	language:C++	struct:design_patterns::HtmlElement	typeref:typename:std::string	access:public	signature:(int indent=0) const
design_patterns::HtmlElement::text	src/design_patterns/builder/builder.h	/^    std::string text;$/;"	m	line:16	language:C++	struct:design_patterns::HtmlElement	typeref:typename:std::string	access:public
design_patterns::IFilter	src/design_patterns/basic/SOLID_Open_Close.h	/^class IFilter{$/;"	c	line:58	language:C++	namespace:design_patterns
design_patterns::IFilter::filter	src/design_patterns/basic/SOLID_Open_Close.h	/^    virtual std::vector<T*> filter(std::vector<T*> products, ISpecification<T>& spec) = 0;$/;"	p	line:60	language:C++	class:design_patterns::IFilter	typeref:typename:std::vector<T * >	access:public	signature:(std::vector<T * > products,ISpecification<T> & spec)
design_patterns::IMG	src/design_patterns/builder/groovy_builder.h	/^struct IMG : public Tag$/;"	s	line:27	language:C++	namespace:design_patterns	inherits:Tag
design_patterns::IMG::IMG	src/design_patterns/builder/groovy_builder.h	/^    IMG(string url) : Tag("IMG", "")$/;"	f	line:29	language:C++	struct:design_patterns::IMG	access:public	signature:(string url)
design_patterns::ISpecification	src/design_patterns/basic/SOLID_Open_Close.h	/^class ISpecification{$/;"	c	line:52	language:C++	namespace:design_patterns
design_patterns::ISpecification::is_satisfied	src/design_patterns/basic/SOLID_Open_Close.h	/^    virtual bool is_satisfied(T* item) = 0;$/;"	p	line:54	language:C++	class:design_patterns::ISpecification	typeref:typename:bool	access:public	signature:(T * item)
design_patterns::Large	src/design_patterns/basic/SOLID_Open_Close.h	/^enum class Size{Small, Medium, Large};$/;"	e	line:10	language:C++	enum:design_patterns::Size	access:public
design_patterns::Maybe	src/design_patterns/basic/maybemonad.h	/^class Maybe{$/;"	c	line:22	language:C++	namespace:design_patterns
design_patterns::Maybe::Do	src/design_patterns/basic/maybemonad.h	/^    auto Do(Func&& f)$/;"	f	line:40	language:C++	class:design_patterns::Maybe	typeref:typename:auto	access:public	signature:(Func && f)
design_patterns::Maybe::Maybe	src/design_patterns/basic/maybemonad.h	/^    explicit Maybe(T* const context) : context_(context){}$/;"	f	line:24	language:C++	class:design_patterns::Maybe	access:public	signature:(T * const context)
design_patterns::Maybe::With	src/design_patterns/basic/maybemonad.h	/^    auto With(Func&& f)$/;"	f	line:26	language:C++	class:design_patterns::Maybe	typeref:typename:auto	access:public	signature:(Func && f)
design_patterns::Maybe::context_	src/design_patterns/basic/maybemonad.h	/^    T *context_;$/;"	m	line:49	language:C++	class:design_patterns::Maybe	typeref:typename:T *	access:private
design_patterns::Medium	src/design_patterns/basic/SOLID_Open_Close.h	/^enum class Size{Small, Medium, Large};$/;"	e	line:10	language:C++	enum:design_patterns::Size	access:public
design_patterns::Monad_test	src/design_patterns/basic/maybemonad.h	/^void Monad_test()$/;"	f	line:53	language:C++	namespace:design_patterns	typeref:typename:void	signature:()
design_patterns::NewCreature	src/design_patterns/chain_of_responsibility/broke_chain.h	/^struct NewCreature$/;"	s	line:34	language:C++	namespace:design_patterns
design_patterns::NewCreature::NewCreature	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    NewCreature(Game& game, const string& name, int attack, int defence)$/;"	f	line:36	language:C++	struct:design_patterns::NewCreature	access:public	signature:(Game & game,const string & name,int attack,int defence)
design_patterns::NewCreature::attack	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    int attack;$/;"	m	line:64	language:C++	struct:design_patterns::NewCreature	typeref:typename:int	access:private
design_patterns::NewCreature::defence	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    int defence;$/;"	m	line:65	language:C++	struct:design_patterns::NewCreature	typeref:typename:int	access:private
design_patterns::NewCreature::game	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    Game& game;$/;"	m	line:62	language:C++	struct:design_patterns::NewCreature	typeref:typename:Game &	access:private
design_patterns::NewCreature::getAttack	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    int getAttack()$/;"	f	line:42	language:C++	struct:design_patterns::NewCreature	typeref:typename:int	access:public	signature:()
design_patterns::NewCreature::getDefence	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    int getDefence()$/;"	f	line:48	language:C++	struct:design_patterns::NewCreature	typeref:typename:int	access:public	signature:()
design_patterns::NewCreature::name	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    string name;$/;"	m	line:63	language:C++	struct:design_patterns::NewCreature	typeref:typename:string	access:private
design_patterns::NewCreatureModifier	src/design_patterns/chain_of_responsibility/broke_chain.h	/^struct NewCreatureModifier$/;"	s	line:68	language:C++	namespace:design_patterns
design_patterns::NewCreatureModifier::NewCreatureModifier	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    NewCreatureModifier(Game& game, NewCreature& creature) $/;"	f	line:70	language:C++	struct:design_patterns::NewCreatureModifier	access:public	signature:(Game & game,NewCreature & creature)
design_patterns::NewCreatureModifier::add	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    void add(NewCreatureModifier& modifier)$/;"	f	line:75	language:C++	struct:design_patterns::NewCreatureModifier	typeref:typename:void	access:public	signature:(NewCreatureModifier & modifier)
design_patterns::NewCreatureModifier::execute	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    void execute()$/;"	f	line:81	language:C++	struct:design_patterns::NewCreatureModifier	typeref:typename:void	access:public	signature:()
design_patterns::NewCreatureModifier::game_	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    Game& game_;$/;"	m	line:88	language:C++	struct:design_patterns::NewCreatureModifier	typeref:typename:Game &	access:private
design_patterns::NewCreatureModifier::next_	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    NewCreatureModifier* next_;$/;"	m	line:87	language:C++	struct:design_patterns::NewCreatureModifier	typeref:typename:NewCreatureModifier *	access:private
design_patterns::NewCreatureModifier::targetCreature	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    NewCreature& targetCreature;$/;"	m	line:86	language:C++	struct:design_patterns::NewCreatureModifier	typeref:typename:NewCreature &	access:private
design_patterns::NewCreatureModifier::~NewCreatureModifier	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    virtual ~NewCreatureModifier(){}$/;"	f	line:73	language:C++	struct:design_patterns::NewCreatureModifier	access:public	signature:()
design_patterns::OC_test	src/design_patterns/basic/SOLID_Open_Close.h	/^void OC_test()$/;"	f	line:102	language:C++	namespace:design_patterns	typeref:typename:void	signature:()
design_patterns::P	src/design_patterns/builder/groovy_builder.h	/^struct P : public Tag$/;"	s	line:20	language:C++	namespace:design_patterns	inherits:Tag
design_patterns::P::P	src/design_patterns/builder/groovy_builder.h	/^    P(initializer_list<Tag> children) : Tag("p", "", children)$/;"	f	line:22	language:C++	struct:design_patterns::P	access:public	signature:(initializer_list<Tag> children)
design_patterns::Person	src/design_patterns/basic/maybemonad.h	/^struct Person{$/;"	s	line:15	language:C++	namespace:design_patterns
design_patterns::Person::Person	src/design_patterns/basic/maybemonad.h	/^    Person(){}$/;"	f	line:16	language:C++	struct:design_patterns::Person	access:public	signature:()
design_patterns::Person::Person	src/design_patterns/basic/maybemonad.h	/^    explicit Person(Address* addr) : addr(addr){}$/;"	f	line:17	language:C++	struct:design_patterns::Person	access:public	signature:(Address * addr)
design_patterns::Person::addr	src/design_patterns/basic/maybemonad.h	/^    Address *addr = nullptr;$/;"	m	line:18	language:C++	struct:design_patterns::Person	typeref:typename:Address *	access:public
design_patterns::PollReactorImpl	src/design_patterns/factory/factory_method.h	/^class PollReactorImpl : public ReactorImpl{$/;"	c	line:36	language:C++	namespace:design_patterns	inherits:ReactorImpl
design_patterns::PollReactorImpl::PollReactorImpl	src/design_patterns/factory/factory_method.h	/^    PollReactorImpl(int handle) : ReactorImpl(handle){}$/;"	f	line:38	language:C++	class:design_patterns::PollReactorImpl	access:public	signature:(int handle)
design_patterns::Product	src/design_patterns/basic/SOLID_Open_Close.h	/^class Product{$/;"	c	line:12	language:C++	namespace:design_patterns
design_patterns::Product::Product	src/design_patterns/basic/SOLID_Open_Close.h	/^    Product(const std::string& name, Color color, Size size)$/;"	f	line:14	language:C++	class:design_patterns::Product	access:public	signature:(const std::string & name,Color color,Size size)
design_patterns::Product::color_	src/design_patterns/basic/SOLID_Open_Close.h	/^    Color color_;$/;"	m	line:22	language:C++	class:design_patterns::Product	typeref:typename:Color	access:private
design_patterns::Product::getColor	src/design_patterns/basic/SOLID_Open_Close.h	/^    Color getColor() const {return color_;}$/;"	f	line:17	language:C++	class:design_patterns::Product	typeref:typename:Color	access:public	signature:() const
design_patterns::Product::getName	src/design_patterns/basic/SOLID_Open_Close.h	/^    std::string getName() const {return name_;}$/;"	f	line:18	language:C++	class:design_patterns::Product	typeref:typename:std::string	access:public	signature:() const
design_patterns::Product::getSize	src/design_patterns/basic/SOLID_Open_Close.h	/^    Size getSize() const {return size_;}$/;"	f	line:19	language:C++	class:design_patterns::Product	typeref:typename:Size	access:public	signature:() const
design_patterns::Product::name_	src/design_patterns/basic/SOLID_Open_Close.h	/^    std::string name_;$/;"	m	line:21	language:C++	class:design_patterns::Product	typeref:typename:std::string	access:private
design_patterns::Product::size_	src/design_patterns/basic/SOLID_Open_Close.h	/^    Size size_;$/;"	m	line:23	language:C++	class:design_patterns::Product	typeref:typename:Size	access:private
design_patterns::ProductFilter	src/design_patterns/basic/SOLID_Open_Close.h	/^class ProductFilter{$/;"	c	line:26	language:C++	namespace:design_patterns
design_patterns::ProductFilter::Products_t	src/design_patterns/basic/SOLID_Open_Close.h	/^    using Products_t = std::vector<Product*>;$/;"	t	line:28	language:C++	class:design_patterns::ProductFilter	typeref:typename:std::vector<Product * >	access:public
design_patterns::ProductFilter::filter_by_Color	src/design_patterns/basic/SOLID_Open_Close.h	/^    static  Products_t filter_by_Color(Products_t products, Color color)$/;"	f	line:29	language:C++	class:design_patterns::ProductFilter	typeref:typename:Products_t	access:public	signature:(Products_t products,Color color)
design_patterns::ProductFilter::filter_by_Size	src/design_patterns/basic/SOLID_Open_Close.h	/^    static Products_t filter_by_Size(Products_t products, Size size)$/;"	f	line:39	language:C++	class:design_patterns::ProductFilter	typeref:typename:Products_t	access:public	signature:(Products_t products,Size size)
design_patterns::Query	src/design_patterns/chain_of_responsibility/broke_chain.h	/^class Query$/;"	c	line:15	language:C++	namespace:design_patterns
design_patterns::Query::Argument	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    enum Argument {attack, defence} argument;$/;"	g	line:19	language:C++	class:design_patterns::Query	access:public
design_patterns::Query::Query	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    Query(const string& name, Argument argument, int result)$/;"	f	line:22	language:C++	class:design_patterns::Query	access:public	signature:(const string & name,Argument argument,int result)
design_patterns::Query::argument	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    enum Argument {attack, defence} argument;$/;"	m	line:19	language:C++	class:design_patterns::Query	typeref:enum:design_patterns::Query::Argument	access:public
design_patterns::Query::attack	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    enum Argument {attack, defence} argument;$/;"	e	line:19	language:C++	enum:design_patterns::Query::Argument	access:public
design_patterns::Query::creature_name	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    string creature_name;$/;"	m	line:18	language:C++	class:design_patterns::Query	typeref:typename:string	access:public
design_patterns::Query::defence	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    enum Argument {attack, defence} argument;$/;"	e	line:19	language:C++	enum:design_patterns::Query::Argument	access:public
design_patterns::Query::result	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    int result;$/;"	m	line:20	language:C++	class:design_patterns::Query	typeref:typename:int	access:public
design_patterns::ReactorImpl	src/design_patterns/factory/factory_method.h	/^class ReactorImpl{$/;"	c	line:16	language:C++	namespace:design_patterns
design_patterns::ReactorImpl::ReactorImpl	src/design_patterns/factory/factory_method.h	/^    ReactorImpl(int handle) : handle_(handle){}$/;"	f	line:18	language:C++	class:design_patterns::ReactorImpl	access:protected	signature:(int handle)
design_patterns::ReactorImpl::destroy	src/design_patterns/factory/factory_method.h	/^    void destroy()$/;"	f	line:23	language:C++	class:design_patterns::ReactorImpl	typeref:typename:void	access:public	signature:()
design_patterns::ReactorImpl::handle_	src/design_patterns/factory/factory_method.h	/^    int handle_;$/;"	m	line:28	language:C++	class:design_patterns::ReactorImpl	typeref:typename:int	access:private
design_patterns::ReactorImpl::makePollReactor	src/design_patterns/factory/factory_method.h	/^    static ReactorImpl& makePollReactor();$/;"	p	line:22	language:C++	class:design_patterns::ReactorImpl	typeref:typename:ReactorImpl &	access:public	signature:()
design_patterns::ReactorImpl::makePollReactor	src/design_patterns/factory/factory_method.h	/^ReactorImpl& ReactorImpl::makePollReactor()$/;"	f	line:45	language:C++	class:design_patterns::ReactorImpl	typeref:typename:ReactorImpl &	signature:()
design_patterns::ReactorImpl::makeSelectReactor	src/design_patterns/factory/factory_method.h	/^    static ReactorImpl& makeSelectReactor();$/;"	p	line:21	language:C++	class:design_patterns::ReactorImpl	typeref:typename:ReactorImpl &	access:public	signature:()
design_patterns::ReactorImpl::makeSelectReactor	src/design_patterns/factory/factory_method.h	/^ReactorImpl& ReactorImpl::makeSelectReactor()$/;"	f	line:41	language:C++	class:design_patterns::ReactorImpl	typeref:typename:ReactorImpl &	signature:()
design_patterns::ReactorImpl::~ReactorImpl	src/design_patterns/factory/factory_method.h	/^    virtual ~ReactorImpl(){}$/;"	f	line:19	language:C++	class:design_patterns::ReactorImpl	access:protected	signature:()
design_patterns::Red	src/design_patterns/basic/SOLID_Open_Close.h	/^enum class Color{Green, Red, Blue};$/;"	e	line:9	language:C++	enum:design_patterns::Color	access:public
design_patterns::SelectReactorImpl	src/design_patterns/factory/factory_method.h	/^class SelectReactorImpl : public ReactorImpl{$/;"	c	line:31	language:C++	namespace:design_patterns	inherits:ReactorImpl
design_patterns::SelectReactorImpl::SelectReactorImpl	src/design_patterns/factory/factory_method.h	/^    SelectReactorImpl(int handle) : ReactorImpl(handle){}$/;"	f	line:33	language:C++	class:design_patterns::SelectReactorImpl	access:public	signature:(int handle)
design_patterns::SingletonUsingVolatile	src/design_patterns/basic/thread_safe_singleton.h	/^class SingletonUsingVolatile{$/;"	c	line:112	language:C++	namespace:design_patterns
design_patterns::SingletonUsingVolatile::getInstance	src/design_patterns/basic/thread_safe_singleton.h	/^    static T* getInstance()$/;"	f	line:114	language:C++	class:design_patterns::SingletonUsingVolatile	typeref:typename:T *	access:public	signature:()
design_patterns::SingletonUsingVolatile::instance_	src/design_patterns/basic/thread_safe_singleton.h	/^    static T* instance_;$/;"	m	line:138	language:C++	class:design_patterns::SingletonUsingVolatile	typeref:typename:T *	access:private
design_patterns::SingletonUsingVolatile::isInitialized_	src/design_patterns/basic/thread_safe_singleton.h	/^    static volatile bool isInitialized_;$/;"	m	line:140	language:C++	class:design_patterns::SingletonUsingVolatile	typeref:typename:volatile bool	access:private
design_patterns::SingletonUsingVolatile::mutex_	src/design_patterns/basic/thread_safe_singleton.h	/^    static std::mutex mutex_;$/;"	m	line:139	language:C++	class:design_patterns::SingletonUsingVolatile	typeref:typename:std::mutex	access:private
design_patterns::SingletonUsingVolatile<T>::instance_	src/design_patterns/basic/thread_safe_singleton.h	/^template <typename T> T* SingletonUsingVolatile<T>::instance_ = nullptr;$/;"	m	line:143	language:C++	class:design_patterns::SingletonUsingVolatile<T>	typeref:typename:T *
design_patterns::SingletonUsingVolatile<T>::isInitialized_	src/design_patterns/basic/thread_safe_singleton.h	/^template <typename T> volatile bool SingletonUsingVolatile<T>::isInitialized_ = false;$/;"	m	line:145	language:C++	class:design_patterns::SingletonUsingVolatile<T>	typeref:typename:volatile bool
design_patterns::SingletonUsingVolatile<T>::mutex_	src/design_patterns/basic/thread_safe_singleton.h	/^template <typename T> std::mutex SingletonUsingVolatile<T>::mutex_; $/;"	m	line:144	language:C++	class:design_patterns::SingletonUsingVolatile<T>	typeref:typename:std::mutex
design_patterns::SingletonWithCallOnce	src/design_patterns/basic/thread_safe_singleton.h	/^class SingletonWithCallOnce{$/;"	c	line:78	language:C++	namespace:design_patterns
design_patterns::SingletonWithCallOnce::getInstance	src/design_patterns/basic/thread_safe_singleton.h	/^    static std::shared_ptr<T> getInstance()$/;"	f	line:80	language:C++	class:design_patterns::SingletonWithCallOnce	typeref:typename:std::shared_ptr<T>	access:public	signature:()
design_patterns::SingletonWithCallOnce::init	src/design_patterns/basic/thread_safe_singleton.h	/^    static void init()$/;"	f	line:90	language:C++	class:design_patterns::SingletonWithCallOnce	typeref:typename:void	access:private	signature:()
design_patterns::SingletonWithCallOnce::instance_	src/design_patterns/basic/thread_safe_singleton.h	/^    static std::shared_ptr<T> instance_;$/;"	m	line:96	language:C++	class:design_patterns::SingletonWithCallOnce	typeref:typename:std::shared_ptr<T>	access:private
design_patterns::SingletonWithCallOnce::instance_init_flag_	src/design_patterns/basic/thread_safe_singleton.h	/^    static std::once_flag instance_init_flag_;$/;"	m	line:95	language:C++	class:design_patterns::SingletonWithCallOnce	typeref:typename:std::once_flag	access:private
design_patterns::SingletonWithCallOnce<T>::instance_	src/design_patterns/basic/thread_safe_singleton.h	/^std::shared_ptr<T> SingletonWithCallOnce<T>::instance_;$/;"	m	line:102	language:C++	class:design_patterns::SingletonWithCallOnce<T>	typeref:typename:std::shared_ptr<T>
design_patterns::SingletonWithCallOnce<T>::instance_init_flag_	src/design_patterns/basic/thread_safe_singleton.h	/^std::once_flag SingletonWithCallOnce<T>::instance_init_flag_;$/;"	m	line:100	language:C++	class:design_patterns::SingletonWithCallOnce<T>	typeref:typename:std::once_flag
design_patterns::Size	src/design_patterns/basic/SOLID_Open_Close.h	/^enum class Size{Small, Medium, Large};$/;"	g	line:10	language:C++	namespace:design_patterns
design_patterns::SizeSpec	src/design_patterns/basic/SOLID_Open_Close.h	/^class SizeSpec : public ISpecification<Product>$/;"	c	line:89	language:C++	namespace:design_patterns	inherits:ISpecification<Product>
design_patterns::SizeSpec::SizeSpec	src/design_patterns/basic/SOLID_Open_Close.h	/^    SizeSpec(Size size) : size_(size){}$/;"	f	line:92	language:C++	class:design_patterns::SizeSpec	access:public	signature:(Size size)
design_patterns::SizeSpec::is_satisfied	src/design_patterns/basic/SOLID_Open_Close.h	/^    bool is_satisfied(Product* p) override $/;"	f	line:93	language:C++	class:design_patterns::SizeSpec	typeref:typename:bool	access:public	signature:(Product * p)
design_patterns::SizeSpec::size_	src/design_patterns/basic/SOLID_Open_Close.h	/^    Size size_;$/;"	m	line:98	language:C++	class:design_patterns::SizeSpec	typeref:typename:Size	access:public
design_patterns::Small	src/design_patterns/basic/SOLID_Open_Close.h	/^enum class Size{Small, Medium, Large};$/;"	e	line:10	language:C++	enum:design_patterns::Size	access:public
design_patterns::Tag	src/design_patterns/builder/groovy_builder.h	/^struct Tag$/;"	s	line:10	language:C++	namespace:design_patterns
design_patterns::Tag::Tag	src/design_patterns/builder/groovy_builder.h	/^    Tag(const string &name, const string &text, const vector<Tag> &children) : name(name), text(/;"	f	line:13	language:C++	struct:design_patterns::Tag	access:public	signature:(const string & name,const string & text,const vector<Tag> & children)
design_patterns::Tag::Tag	src/design_patterns/builder/groovy_builder.h	/^    Tag(const string& name, const string& text) : name(name), text(text), children(), attributes/;"	f	line:12	language:C++	struct:design_patterns::Tag	access:public	signature:(const string & name,const string & text)
design_patterns::Tag::attributes	src/design_patterns/builder/groovy_builder.h	/^    vector<pair<string, string>> attributes;$/;"	m	line:17	language:C++	struct:design_patterns::Tag	typeref:typename:vector<pair<string,string>>	access:public
design_patterns::Tag::children	src/design_patterns/builder/groovy_builder.h	/^    vector<Tag> children;$/;"	m	line:16	language:C++	struct:design_patterns::Tag	typeref:typename:vector<Tag>	access:public
design_patterns::Tag::name	src/design_patterns/builder/groovy_builder.h	/^    string name;$/;"	m	line:14	language:C++	struct:design_patterns::Tag	typeref:typename:string	access:public
design_patterns::Tag::text	src/design_patterns/builder/groovy_builder.h	/^    string text;$/;"	m	line:15	language:C++	struct:design_patterns::Tag	typeref:typename:string	access:public
design_patterns::ThreadSafe_Singleton_WithoutLock	src/design_patterns/basic/thread_safe_singleton.h	/^class ThreadSafe_Singleton_WithoutLock$/;"	c	line:45	language:C++	namespace:design_patterns
design_patterns::ThreadSafe_Singleton_WithoutLock::getInstance	src/design_patterns/basic/thread_safe_singleton.h	/^    static std::shared_ptr<T> getInstance()$/;"	f	line:48	language:C++	class:design_patterns::ThreadSafe_Singleton_WithoutLock	typeref:typename:std::shared_ptr<T>	access:public	signature:()
design_patterns::WorkAddress	src/design_patterns/prototype/prototype.h	/^struct WorkAddress{$/;"	s	line:14	language:C++	namespace:design_patterns
design_patterns::WorkAddress::WorkAddress	src/design_patterns/prototype/prototype.h	/^    WorkAddress(const WorkAddress& addr)$/;"	f	line:22	language:C++	struct:design_patterns::WorkAddress	access:public	signature:(const WorkAddress & addr)
design_patterns::WorkAddress::WorkAddress	src/design_patterns/prototype/prototype.h	/^    WorkAddress(const string& street, const string& city, int suite)$/;"	f	line:19	language:C++	struct:design_patterns::WorkAddress	access:public	signature:(const string & street,const string & city,int suite)
design_patterns::WorkAddress::city	src/design_patterns/prototype/prototype.h	/^    string city;$/;"	m	line:16	language:C++	struct:design_patterns::WorkAddress	typeref:typename:string	access:public
design_patterns::WorkAddress::street	src/design_patterns/prototype/prototype.h	/^    string street;$/;"	m	line:15	language:C++	struct:design_patterns::WorkAddress	typeref:typename:string	access:public
design_patterns::WorkAddress::suite	src/design_patterns/prototype/prototype.h	/^    int suite;$/;"	m	line:17	language:C++	struct:design_patterns::WorkAddress	typeref:typename:int	access:public
design_patterns::action1	src/design_patterns/chain_of_responsibility/broke_chain.h	/^void action1()$/;"	f	line:92	language:C++	namespace:design_patterns	typeref:typename:void	signature:()
design_patterns::operator <<	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    friend ostream& operator<< (ostream& os, const NewCreature& creature)$/;"	f	line:53	language:C++	namespace:design_patterns	typeref:typename:ostream &	signature:(ostream & os,const NewCreature & creature)
design_patterns::operator <<	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^    friend ostream& operator<< (ostream& os, const Creature& creature)$/;"	f	line:21	language:C++	namespace:design_patterns	typeref:typename:ostream &	signature:(ostream & os,const Creature & creature)
design_patterns::operator <<	src/design_patterns/prototype/prototype.h	/^    friend ostream& operator<< (ostream& os, const Contact& obj)$/;"	f	line:57	language:C++	namespace:design_patterns	typeref:typename:ostream &	signature:(ostream & os,const Contact & obj)
design_patterns::operator <<	src/design_patterns/prototype/prototype.h	/^    friend std::ostream& operator<< (std::ostream& os, const WorkAddress& addr)$/;"	f	line:29	language:C++	namespace:design_patterns	typeref:typename:std::ostream &	signature:(std::ostream & os,const WorkAddress & addr)
design_patterns::run_threads	src/design_patterns/basic/thread_safe_singleton.h	/^void run_threads(Func f)$/;"	f	line:162	language:C++	namespace:design_patterns	typeref:typename:void	signature:(Func f)
design_patterns::test_broke_chain	src/design_patterns/chain_of_responsibility/broke_chain.h	/^void test_broke_chain()$/;"	f	line:97	language:C++	namespace:design_patterns	typeref:typename:void	signature:()
design_patterns::test_build	src/design_patterns/builder/builder.h	/^void test_build()$/;"	f	line:85	language:C++	namespace:design_patterns	typeref:typename:void	signature:()
design_patterns::test_factory_method	src/design_patterns/factory/factory_method.h	/^void test_factory_method()$/;"	f	line:51	language:C++	namespace:design_patterns	typeref:typename:void	signature:()
design_patterns::test_groovy_builder	src/design_patterns/builder/groovy_builder.h	/^void test_groovy_builder()$/;"	f	line:37	language:C++	namespace:design_patterns	typeref:typename:void	signature:()
design_patterns::test_pointer_chain	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^void test_pointer_chain()$/;"	f	line:74	language:C++	namespace:design_patterns	typeref:typename:void	signature:()
design_patterns::test_prototype	src/design_patterns/prototype/prototype.h	/^int test_prototype()$/;"	f	line:64	language:C++	namespace:design_patterns	typeref:typename:int	signature:()
design_patterns::thread_routine	src/design_patterns/basic/thread_safe_singleton.h	/^void thread_routine()$/;"	f	line:68	language:C++	namespace:design_patterns	typeref:typename:void	signature:()
design_patterns::thread_routine2	src/design_patterns/basic/thread_safe_singleton.h	/^void thread_routine2()$/;"	f	line:104	language:C++	namespace:design_patterns	typeref:typename:void	signature:()
design_patterns::thread_routine3	src/design_patterns/basic/thread_safe_singleton.h	/^void thread_routine3()$/;"	f	line:147	language:C++	namespace:design_patterns	typeref:typename:void	signature:()
design_patterns::thread_routine4	src/design_patterns/basic/thread_safe_singleton.h	/^void thread_routine4()$/;"	f	line:154	language:C++	namespace:design_patterns	typeref:typename:void	signature:()
design_patterns::thread_safe_singleton	src/design_patterns/basic/thread_safe_singleton.h	/^class thread_safe_singleton{$/;"	c	line:16	language:C++	namespace:design_patterns
design_patterns::thread_safe_singleton::getInstance	src/design_patterns/basic/thread_safe_singleton.h	/^    static std::shared_ptr<T> getInstance()$/;"	f	line:18	language:C++	class:design_patterns::thread_safe_singleton	typeref:typename:std::shared_ptr<T>	access:public	signature:()
design_patterns::thread_safe_singleton::instance_	src/design_patterns/basic/thread_safe_singleton.h	/^    static std::shared_ptr<T>      instance_;$/;"	m	line:38	language:C++	class:design_patterns::thread_safe_singleton	typeref:typename:std::shared_ptr<T>	access:private
design_patterns::thread_safe_singleton::mutex_	src/design_patterns/basic/thread_safe_singleton.h	/^    static std::mutex              mutex_;$/;"	m	line:37	language:C++	class:design_patterns::thread_safe_singleton	typeref:typename:std::mutex	access:private
design_patterns::thread_safe_singleton<T>::instance_	src/design_patterns/basic/thread_safe_singleton.h	/^template<typename T> std::shared_ptr<T> thread_safe_singleton<T>::instance_;$/;"	m	line:42	language:C++	class:design_patterns::thread_safe_singleton<T>	typeref:typename:std::shared_ptr<T>
design_patterns::thread_safe_singleton<T>::mutex_	src/design_patterns/basic/thread_safe_singleton.h	/^template<typename T> std::mutex thread_safe_singleton<T>::mutex_;$/;"	m	line:41	language:C++	class:design_patterns::thread_safe_singleton<T>	typeref:typename:std::mutex
design_patterns::thread_safe_singleton_test	src/design_patterns/basic/thread_safe_singleton.h	/^void thread_safe_singleton_test(){$/;"	f	line:179	language:C++	namespace:design_patterns	typeref:typename:void	signature:()
destroy	src/design_patterns/factory/factory_method.h	/^    void destroy()$/;"	f	line:23	language:C++	class:design_patterns::ReactorImpl	typeref:typename:void	access:public	signature:()
detail	src/easylogging/easylogging++.h	/^  const char* detail;$/;"	m	line:780	language:C++	struct:el::base::consts::__anondf7eda890208	typeref:typename:const char *	access:public
difference_type	src/string_piece/string_piece.h	/^    using difference_type = typename it_traits::difference_type;$/;"	t	line:46	language:C++	class:string_piece::Range	typeref:typename:it_traits::difference_type	access:public
dis	src/easylogging/test_easylogging.h	/^static std::uniform_int_distribution<> dis(33, 126);$/;"	v	line:40	language:C++	namespace:easylogging	typeref:typename:std::uniform_int_distribution<>
dis	test/buffer/buffer_test.cpp	/^static std::uniform_int_distribution<> dis(33, 126);$/;"	v	line:50	language:C++	namespace:buffer_test	typeref:typename:std::uniform_int_distribution<>	file:
dis	test/substring_search/kmp_test.cpp	/^static std::uniform_int_distribution<> dis(33, 34);$/;"	v	line:69	language:C++	namespace:kmp_test	typeref:typename:std::uniform_int_distribution<>	file:
discardReadBytes	src/bytebuf/bytebuf.cpp	/^void bytebuf::discardReadBytes()$/;"	f	line:13	language:C++	class:bytebuf	typeref:typename:void	signature:()
discardReadBytes	src/bytebuf/bytebuf.h	/^    void discardReadBytes();$/;"	p	line:42	language:C++	class:bytebuf	typeref:typename:void	access:public	signature:()
dispatch	src/easylogging/easylogging++.cc	/^void DefaultLogDispatchCallback::dispatch(base::type::string_t&& logLine) {$/;"	f	line:2216	language:C++	class:el::base::DefaultLogDispatchCallback	typeref:typename:void	signature:(base::type::string_t && logLine)
dispatch	src/easylogging/easylogging++.cc	/^void LogDispatcher::dispatch(void) {$/;"	f	line:2474	language:C++	class:el::base::LogDispatcher	typeref:typename:void	signature:(void)
dispatch	src/easylogging/easylogging++.h	/^  void dispatch(base::type::string_t&& logLine);$/;"	p	line:2729	language:C++	class:el::base::DefaultLogDispatchCallback	typeref:typename:void	access:private	signature:(base::type::string_t && logLine)
dispatch	src/easylogging/easylogging++.h	/^  void dispatch(void);$/;"	p	line:2776	language:C++	class:el::base::LogDispatcher	typeref:typename:void	access:public	signature:(void)
dispatchAction	src/easylogging/easylogging++.h	/^  inline base::DispatchAction dispatchAction(void) const {$/;"	f	line:2163	language:C++	class:el::LogDispatchData	typeref:typename:base::DispatchAction	access:public	signature:(void) const
disposeHeaderNames	src/http/HttpHeaders.cpp	/^void HttpHeaders::disposeHeaderNames()$/;"	f	line:171	language:C++	class:http::HttpHeaders	typeref:typename:void	signature:()
disposeHeaderNames	src/http/HttpHeaders.h	/^    void disposeHeaderNames();$/;"	p	line:56	language:C++	class:http::HttpHeaders	typeref:typename:void	access:private	signature:()
drain	src/buffer/buffer.cpp	/^int64_t buffer::drain(uint32_t len)$/;"	f	line:729	language:C++	class:buffer	typeref:typename:int64_t	signature:(uint32_t len)
drain	src/buffer/buffer.h	/^    int64_t drain(uint32_t len);$/;"	p	line:220	language:C++	class:buffer	typeref:typename:int64_t	access:public	signature:(uint32_t len)
dummy_class	test/buffer/buffer_test.cpp	/^    dummy_class()$/;"	f	line:19	language:C++	class:buffer_test::dummy_class	file:	access:public	signature:()
dummy_class	test/buffer/buffer_test.cpp	/^class dummy_class$/;"	c	line:16	language:C++	namespace:buffer_test	file:
easylogging	src/easylogging/test_easylogging.h	/^namespace easylogging$/;"	n	line:9	language:C++
easylogging::dis	src/easylogging/test_easylogging.h	/^static std::uniform_int_distribution<> dis(33, 126);$/;"	v	line:40	language:C++	namespace:easylogging	typeref:typename:std::uniform_int_distribution<>
easylogging::gen	src/easylogging/test_easylogging.h	/^static std::mt19937 gen(rd());$/;"	p	line:39	language:C++	namespace:easylogging	typeref:typename:std::mt19937	signature:(rd ())
easylogging::main_thread_routine	src/easylogging/test_easylogging.h	/^void main_thread_routine(string* str)$/;"	f	line:42	language:C++	namespace:easylogging	typeref:typename:void	signature:(string * str)
easylogging::rd	src/easylogging/test_easylogging.h	/^static std::random_device rd;$/;"	v	line:38	language:C++	namespace:easylogging	typeref:typename:std::random_device
easylogging::setupLogger	src/easylogging/test_easylogging.h	/^void setupLogger()$/;"	f	line:11	language:C++	namespace:easylogging	typeref:typename:void	signature:()
easylogging::test	src/easylogging/test_easylogging.h	/^void test()$/;"	f	line:54	language:C++	namespace:easylogging	typeref:typename:void	signature:()
easylogging::threadRoutine	src/easylogging/test_easylogging.h	/^void threadRoutine(const string& str)$/;"	f	line:28	language:C++	namespace:easylogging	typeref:typename:void	signature:(const string & str)
el	src/easylogging/easylogging++.cc	/^namespace el {$/;"	n	line:23	language:C++	file:
el	src/easylogging/easylogging++.h	/^namespace el {$/;"	n	line:469	language:C++
el	src/easylogging/easylogging++.h	/^namespace el {$/;"	n	line:498	language:C++
el	src/easylogging/easylogging++.h	/^namespace el {$/;"	n	line:601	language:C++
el::AllowVerboseIfModuleNotSpecified	src/easylogging/easylogging++.h	/^  AllowVerboseIfModuleNotSpecified = 2,$/;"	e	line:698	language:C++	enum:el::LoggingFlag	access:public
el::AutoSpacing	src/easylogging/easylogging++.h	/^  AutoSpacing = 8192,$/;"	e	line:722	language:C++	enum:el::LoggingFlag	access:public
el::Callback	src/easylogging/easylogging++.h	/^class Callback : protected base::threading::ThreadSafe {$/;"	c	line:2142	language:C++	namespace:el	inherits:base::threading::ThreadSafe
el::Callback::Callback	src/easylogging/easylogging++.h	/^  Callback(void) : m_enabled(true) {}$/;"	f	line:2144	language:C++	class:el::Callback	access:public	signature:(void)
el::Callback::enabled	src/easylogging/easylogging++.h	/^  inline bool enabled(void) const {$/;"	f	line:2145	language:C++	class:el::Callback	typeref:typename:bool	access:public	signature:(void) const
el::Callback::handle	src/easylogging/easylogging++.h	/^  virtual void handle(const T* handlePtr) = 0;$/;"	p	line:2153	language:C++	class:el::Callback	typeref:typename:void	access:protected	signature:(const T * handlePtr)
el::Callback::m_enabled	src/easylogging/easylogging++.h	/^  bool m_enabled;$/;"	m	line:2155	language:C++	class:el::Callback	typeref:typename:bool	access:private
el::Callback::setEnabled	src/easylogging/easylogging++.h	/^  inline void setEnabled(bool enabled) {$/;"	f	line:2148	language:C++	class:el::Callback	typeref:typename:void	access:public	signature:(bool enabled)
el::ColoredTerminalOutput	src/easylogging/easylogging++.h	/^  ColoredTerminalOutput = 64,$/;"	e	line:708	language:C++	enum:el::LoggingFlag	access:public
el::Configuration	src/easylogging/easylogging++.h	/^class Configuration : public Loggable {$/;"	c	line:1672	language:C++	namespace:el	inherits:Loggable
el::Configuration::Configuration	src/easylogging/easylogging++.cc	/^Configuration::Configuration(Level level, ConfigurationType configurationType, const std::string/;"	f	line:255	language:C++	class:el::Configuration	signature:(Level level,ConfigurationType configurationType,const std::string & value)
el::Configuration::Configuration	src/easylogging/easylogging++.cc	/^Configuration::Configuration(const Configuration& c) :$/;"	f	line:239	language:C++	class:el::Configuration	signature:(const Configuration & c)
el::Configuration::Configuration	src/easylogging/easylogging++.h	/^  Configuration(Level level, ConfigurationType configurationType, const std::string& value);$/;"	p	line:1681	language:C++	class:el::Configuration	access:public	signature:(Level level,ConfigurationType configurationType,const std::string & value)
el::Configuration::Configuration	src/easylogging/easylogging++.h	/^  Configuration(const Configuration& c);$/;"	p	line:1674	language:C++	class:el::Configuration	access:public	signature:(const Configuration & c)
el::Configuration::Predicate	src/easylogging/easylogging++.h	/^  class Predicate {$/;"	c	line:1708	language:C++	class:el::Configuration	access:public
el::Configuration::Predicate::Predicate	src/easylogging/easylogging++.cc	/^Configuration::Predicate::Predicate(Level level, ConfigurationType configurationType) :$/;"	f	line:268	language:C++	class:el::Configuration::Predicate	signature:(Level level,ConfigurationType configurationType)
el::Configuration::Predicate::Predicate	src/easylogging/easylogging++.h	/^    Predicate(Level level, ConfigurationType configurationType);$/;"	p	line:1710	language:C++	class:el::Configuration::Predicate	access:public	signature:(Level level,ConfigurationType configurationType)
el::Configuration::Predicate::m_configurationType	src/easylogging/easylogging++.h	/^    ConfigurationType m_configurationType;$/;"	m	line:1716	language:C++	class:el::Configuration::Predicate	typeref:typename:ConfigurationType	access:private
el::Configuration::Predicate::m_level	src/easylogging/easylogging++.h	/^    Level m_level;$/;"	m	line:1715	language:C++	class:el::Configuration::Predicate	typeref:typename:Level	access:private
el::Configuration::Predicate::operator ()	src/easylogging/easylogging++.cc	/^bool Configuration::Predicate::operator()(const Configuration* conf) const {$/;"	f	line:273	language:C++	class:el::Configuration::Predicate	typeref:typename:bool	signature:(const Configuration * conf) const
el::Configuration::Predicate::operator ()	src/easylogging/easylogging++.h	/^    bool operator()(const Configuration* conf) const;$/;"	p	line:1712	language:C++	class:el::Configuration::Predicate	typeref:typename:bool	access:public	signature:(const Configuration * conf) const
el::Configuration::configurationType	src/easylogging/easylogging++.h	/^  inline ConfigurationType configurationType(void) const {$/;"	f	line:1689	language:C++	class:el::Configuration	typeref:typename:ConfigurationType	access:public	signature:(void) const
el::Configuration::level	src/easylogging/easylogging++.h	/^  inline Level level(void) const {$/;"	f	line:1684	language:C++	class:el::Configuration	typeref:typename:Level	access:public	signature:(void) const
el::Configuration::log	src/easylogging/easylogging++.cc	/^void Configuration::log(el::base::type::ostream_t& os) const {$/;"	f	line:261	language:C++	class:el::Configuration	typeref:typename:void	signature:(el::base::type::ostream_t & os) const
el::Configuration::log	src/easylogging/easylogging++.h	/^  virtual void log(el::base::type::ostream_t& os) const;$/;"	p	line:1705	language:C++	class:el::Configuration	typeref:typename:void	access:public	signature:(el::base::type::ostream_t & os) const
el::Configuration::m_configurationType	src/easylogging/easylogging++.h	/^  ConfigurationType m_configurationType;$/;"	m	line:1721	language:C++	class:el::Configuration	typeref:typename:ConfigurationType	access:private
el::Configuration::m_level	src/easylogging/easylogging++.h	/^  Level m_level;$/;"	m	line:1720	language:C++	class:el::Configuration	typeref:typename:Level	access:private
el::Configuration::m_value	src/easylogging/easylogging++.h	/^  std::string m_value;$/;"	m	line:1722	language:C++	class:el::Configuration	typeref:typename:std::string	access:private
el::Configuration::operator =	src/easylogging/easylogging++.cc	/^Configuration& Configuration::operator=(const Configuration& c) {$/;"	f	line:245	language:C++	class:el::Configuration	typeref:typename:Configuration &	signature:(const Configuration & c)
el::Configuration::operator =	src/easylogging/easylogging++.h	/^  Configuration& operator=(const Configuration& c);$/;"	p	line:1675	language:C++	class:el::Configuration	typeref:typename:Configuration &	access:public	signature:(const Configuration & c)
el::Configuration::setValue	src/easylogging/easylogging++.h	/^  inline void setValue(const std::string& value) {$/;"	f	line:1701	language:C++	class:el::Configuration	typeref:typename:void	access:public	signature:(const std::string & value)
el::Configuration::value	src/easylogging/easylogging++.h	/^  inline const std::string& value(void) const {$/;"	f	line:1694	language:C++	class:el::Configuration	typeref:typename:const std::string &	access:public	signature:(void) const
el::Configuration::~Configuration	src/easylogging/easylogging++.h	/^  virtual ~Configuration(void) {$/;"	f	line:1677	language:C++	class:el::Configuration	access:public	signature:(void)
el::ConfigurationStringToTypeItem	src/easylogging/easylogging++.cc	/^struct ConfigurationStringToTypeItem {$/;"	s	line:200	language:C++	namespace:el	file:
el::ConfigurationStringToTypeItem::configString	src/easylogging/easylogging++.cc	/^  const char* configString;$/;"	m	line:201	language:C++	struct:el::ConfigurationStringToTypeItem	typeref:typename:const char *	file:	access:public
el::ConfigurationStringToTypeItem::configType	src/easylogging/easylogging++.cc	/^  ConfigurationType configType;$/;"	m	line:202	language:C++	struct:el::ConfigurationStringToTypeItem	typeref:typename:ConfigurationType	file:	access:public
el::ConfigurationType	src/easylogging/easylogging++.h	/^enum class ConfigurationType : base::type::EnumType {$/;"	g	line:632	language:C++	namespace:el	typeref:typename:base::type::EnumType
el::ConfigurationTypeHelper	src/easylogging/easylogging++.h	/^class ConfigurationTypeHelper : base::StaticClass {$/;"	c	line:664	language:C++	namespace:el	inherits:base::StaticClass
el::ConfigurationTypeHelper::castFromInt	src/easylogging/easylogging++.h	/^  static ConfigurationType castFromInt(base::type::EnumType c) {$/;"	f	line:675	language:C++	class:el::ConfigurationTypeHelper	typeref:typename:ConfigurationType	access:public	signature:(base::type::EnumType c)
el::ConfigurationTypeHelper::castToInt	src/easylogging/easylogging++.h	/^  static base::type::EnumType castToInt(ConfigurationType configurationType) {$/;"	f	line:671	language:C++	class:el::ConfigurationTypeHelper	typeref:typename:base::type::EnumType	access:public	signature:(ConfigurationType configurationType)
el::ConfigurationTypeHelper::convertFromString	src/easylogging/easylogging++.cc	/^ConfigurationType ConfigurationTypeHelper::convertFromString(const char* configStr) {$/;"	f	line:218	language:C++	class:el::ConfigurationTypeHelper	typeref:typename:ConfigurationType	signature:(const char * configStr)
el::ConfigurationTypeHelper::convertFromString	src/easylogging/easylogging++.h	/^  static ConfigurationType convertFromString(const char* configStr);$/;"	p	line:684	language:C++	class:el::ConfigurationTypeHelper	typeref:typename:ConfigurationType	access:public	signature:(const char * configStr)
el::ConfigurationTypeHelper::convertToString	src/easylogging/easylogging++.cc	/^const char* ConfigurationTypeHelper::convertToString(ConfigurationType configurationType) {$/;"	f	line:186	language:C++	class:el::ConfigurationTypeHelper	typeref:typename:const char *	signature:(ConfigurationType configurationType)
el::ConfigurationTypeHelper::convertToString	src/easylogging/easylogging++.h	/^  static const char* convertToString(ConfigurationType configurationType);$/;"	p	line:680	language:C++	class:el::ConfigurationTypeHelper	typeref:typename:const char *	access:public	signature:(ConfigurationType configurationType)
el::ConfigurationTypeHelper::forEachConfigType	src/easylogging/easylogging++.cc	/^void ConfigurationTypeHelper::forEachConfigType(base::type::EnumType* startIndex, const std::fun/;"	f	line:227	language:C++	class:el::ConfigurationTypeHelper	typeref:typename:void	signature:(base::type::EnumType * startIndex,const std::function<bool (void)> & fn)
el::ConfigurationTypeHelper::forEachConfigType	src/easylogging/easylogging++.h	/^  static inline void forEachConfigType(base::type::EnumType* startIndex, const std::function<boo/;"	p	line:690	language:C++	class:el::ConfigurationTypeHelper	typeref:typename:void	access:public	signature:(base::type::EnumType * startIndex,const std::function<bool (void)> & fn)
el::ConfigurationTypeHelper::kMaxValid	src/easylogging/easylogging++.h	/^  static const base::type::EnumType kMaxValid = static_cast<base::type::EnumType>(ConfigurationT/;"	m	line:669	language:C++	class:el::ConfigurationTypeHelper	typeref:typename:const base::type::EnumType	access:public
el::ConfigurationTypeHelper::kMinValid	src/easylogging/easylogging++.h	/^  static const base::type::EnumType kMinValid = static_cast<base::type::EnumType>(ConfigurationT/;"	m	line:667	language:C++	class:el::ConfigurationTypeHelper	typeref:typename:const base::type::EnumType	access:public
el::Configurations	src/easylogging/easylogging++.h	/^class Configurations : public base::utils::RegistryWithPred<Configuration, Configuration::Predic/;"	c	line:1728	language:C++	namespace:el	inherits:base::utils::RegistryWithPred<Configuration,Configuration::Predicate>
el::Configurations::Configurations	src/easylogging/easylogging++.cc	/^Configurations::Configurations(const std::string& configurationFile, bool useDefaultsForRemainin/;"	f	line:284	language:C++	class:el::Configurations	signature:(const std::string & configurationFile,bool useDefaultsForRemaining,Configurations * base)
el::Configurations::Configurations	src/easylogging/easylogging++.cc	/^Configurations::Configurations(void) :$/;"	f	line:279	language:C++	class:el::Configurations	signature:(void)
el::Configurations::Configurations	src/easylogging/easylogging++.h	/^  Configurations(const std::string& configurationFile, bool useDefaultsForRemaining = true,$/;"	p	line:1739	language:C++	class:el::Configurations	access:public	signature:(const std::string & configurationFile,bool useDefaultsForRemaining=true,Configurations * base=nullptr)
el::Configurations::Configurations	src/easylogging/easylogging++.h	/^  Configurations(void);$/;"	p	line:1731	language:C++	class:el::Configurations	access:public	signature:(void)
el::Configurations::Parser	src/easylogging/easylogging++.h	/^  class Parser : base::StaticClass {$/;"	c	line:1838	language:C++	class:el::Configurations	inherits:base::StaticClass	access:public
el::Configurations::Parser::ignoreComments	src/easylogging/easylogging++.cc	/^void Configurations::Parser::ignoreComments(std::string* line) {$/;"	f	line:445	language:C++	class:el::Configurations::Parser	typeref:typename:void	signature:(std::string * line)
el::Configurations::Parser::ignoreComments	src/easylogging/easylogging++.h	/^    static void ignoreComments(std::string* line);$/;"	p	line:1865	language:C++	class:el::Configurations::Parser	typeref:typename:void	access:private	signature:(std::string * line)
el::Configurations::Parser::isComment	src/easylogging/easylogging++.cc	/^bool Configurations::Parser::isComment(const std::string& line) {$/;"	f	line:468	language:C++	class:el::Configurations::Parser	typeref:typename:bool	signature:(const std::string & line)
el::Configurations::Parser::isComment	src/easylogging/easylogging++.h	/^    static bool isComment(const std::string& line);$/;"	p	line:1867	language:C++	class:el::Configurations::Parser	typeref:typename:bool	access:private	signature:(const std::string & line)
el::Configurations::Parser::isConfig	src/easylogging/easylogging++.cc	/^bool Configurations::Parser::isConfig(const std::string& line) {$/;"	f	line:472	language:C++	class:el::Configurations::Parser	typeref:typename:bool	signature:(const std::string & line)
el::Configurations::Parser::isConfig	src/easylogging/easylogging++.h	/^    static inline bool isConfig(const std::string& line);$/;"	p	line:1868	language:C++	class:el::Configurations::Parser	typeref:typename:bool	access:private	signature:(const std::string & line)
el::Configurations::Parser::isLevel	src/easylogging/easylogging++.cc	/^bool Configurations::Parser::isLevel(const std::string& line) {$/;"	f	line:464	language:C++	class:el::Configurations::Parser	typeref:typename:bool	signature:(const std::string & line)
el::Configurations::Parser::isLevel	src/easylogging/easylogging++.h	/^    static bool isLevel(const std::string& line);$/;"	p	line:1866	language:C++	class:el::Configurations::Parser	typeref:typename:bool	access:private	signature:(const std::string & line)
el::Configurations::Parser::parseFromFile	src/easylogging/easylogging++.cc	/^bool Configurations::Parser::parseFromFile(const std::string& configurationFile, Configurations*/;"	f	line:411	language:C++	class:el::Configurations::Parser	typeref:typename:bool	signature:(const std::string & configurationFile,Configurations * sender,Configurations * base)
el::Configurations::Parser::parseFromFile	src/easylogging/easylogging++.h	/^    static bool parseFromFile(const std::string& configurationFile, Configurations* sender,$/;"	p	line:1847	language:C++	class:el::Configurations::Parser	typeref:typename:bool	access:public	signature:(const std::string & configurationFile,Configurations * sender,Configurations * base=nullptr)
el::Configurations::Parser::parseFromText	src/easylogging/easylogging++.cc	/^bool Configurations::Parser::parseFromText(const std::string& configurationsString, Configuratio/;"	f	line:429	language:C++	class:el::Configurations::Parser	typeref:typename:bool	signature:(const std::string & configurationsString,Configurations * sender,Configurations * base)
el::Configurations::Parser::parseFromText	src/easylogging/easylogging++.h	/^    static bool parseFromText(const std::string& configurationsString, Configurations* sender,$/;"	p	line:1860	language:C++	class:el::Configurations::Parser	typeref:typename:bool	access:public	signature:(const std::string & configurationsString,Configurations * sender,Configurations * base=nullptr)
el::Configurations::Parser::parseLine	src/easylogging/easylogging++.cc	/^bool Configurations::Parser::parseLine(std::string* line, std::string* currConfigStr, std::strin/;"	f	line:480	language:C++	class:el::Configurations::Parser	typeref:typename:bool	signature:(std::string * line,std::string * currConfigStr,std::string * currLevelStr,Level * currLevel,Configurations * conf)
el::Configurations::Parser::parseLine	src/easylogging/easylogging++.h	/^    static bool parseLine(std::string* line, std::string* currConfigStr, std::string* currLevelS/;"	p	line:1869	language:C++	class:el::Configurations::Parser	typeref:typename:bool	access:private	signature:(std::string * line,std::string * currConfigStr,std::string * currLevelStr,Level * currLevel,Configurations * conf)
el::Configurations::clear	src/easylogging/easylogging++.h	/^  inline void clear(void) {$/;"	f	line:1810	language:C++	class:el::Configurations	typeref:typename:void	access:public	signature:(void)
el::Configurations::configurationFile	src/easylogging/easylogging++.h	/^  inline const std::string& configurationFile(void) const {$/;"	f	line:1818	language:C++	class:el::Configurations	typeref:typename:const std::string &	access:public	signature:(void) const
el::Configurations::get	src/easylogging/easylogging++.h	/^  inline Configuration* get(Level level, ConfigurationType configurationType) {$/;"	f	line:1796	language:C++	class:el::Configurations	typeref:typename:Configuration *	access:public	signature:(Level level,ConfigurationType configurationType)
el::Configurations::hasConfiguration	src/easylogging/easylogging++.cc	/^bool Configurations::hasConfiguration(ConfigurationType configurationType) {$/;"	f	line:326	language:C++	class:el::Configurations	typeref:typename:bool	signature:(ConfigurationType configurationType)
el::Configurations::hasConfiguration	src/easylogging/easylogging++.cc	/^bool Configurations::hasConfiguration(Level level, ConfigurationType configurationType) {$/;"	f	line:338	language:C++	class:el::Configurations	typeref:typename:bool	signature:(Level level,ConfigurationType configurationType)
el::Configurations::hasConfiguration	src/easylogging/easylogging++.h	/^  bool hasConfiguration(ConfigurationType configurationType);$/;"	p	line:1771	language:C++	class:el::Configurations	typeref:typename:bool	access:public	signature:(ConfigurationType configurationType)
el::Configurations::hasConfiguration	src/easylogging/easylogging++.h	/^  bool hasConfiguration(Level level, ConfigurationType configurationType);$/;"	p	line:1776	language:C++	class:el::Configurations	typeref:typename:bool	access:public	signature:(Level level,ConfigurationType configurationType)
el::Configurations::m_configurationFile	src/easylogging/easylogging++.h	/^  std::string m_configurationFile;$/;"	m	line:1874	language:C++	class:el::Configurations	typeref:typename:std::string	access:private
el::Configurations::m_isFromFile	src/easylogging/easylogging++.h	/^  bool m_isFromFile;$/;"	m	line:1875	language:C++	class:el::Configurations	typeref:typename:bool	access:private
el::Configurations::parseFromFile	src/easylogging/easylogging++.cc	/^bool Configurations::parseFromFile(const std::string& configurationFile, Configurations* base) {$/;"	f	line:294	language:C++	class:el::Configurations	typeref:typename:bool	signature:(const std::string & configurationFile,Configurations * base)
el::Configurations::parseFromFile	src/easylogging/easylogging++.h	/^  bool parseFromFile(const std::string& configurationFile, Configurations* base = nullptr);$/;"	p	line:1751	language:C++	class:el::Configurations	typeref:typename:bool	access:public	signature:(const std::string & configurationFile,Configurations * base=nullptr)
el::Configurations::parseFromText	src/easylogging/easylogging++.cc	/^bool Configurations::parseFromText(const std::string& configurationsString, Configurations* base/;"	f	line:308	language:C++	class:el::Configurations	typeref:typename:bool	signature:(const std::string & configurationsString,Configurations * base)
el::Configurations::parseFromText	src/easylogging/easylogging++.h	/^  bool parseFromText(const std::string& configurationsString, Configurations* base = nullptr);$/;"	p	line:1761	language:C++	class:el::Configurations	typeref:typename:bool	access:public	signature:(const std::string & configurationsString,Configurations * base=nullptr)
el::Configurations::set	src/easylogging/easylogging++.cc	/^void Configurations::set(Configuration* conf) {$/;"	f	line:357	language:C++	class:el::Configurations	typeref:typename:void	signature:(Configuration * conf)
el::Configurations::set	src/easylogging/easylogging++.cc	/^void Configurations::set(Level level, ConfigurationType configurationType, const std::string& va/;"	f	line:349	language:C++	class:el::Configurations	typeref:typename:void	signature:(Level level,ConfigurationType configurationType,const std::string & value)
el::Configurations::set	src/easylogging/easylogging++.h	/^  void set(Configuration* conf);$/;"	p	line:1794	language:C++	class:el::Configurations	typeref:typename:void	access:public	signature:(Configuration * conf)
el::Configurations::set	src/easylogging/easylogging++.h	/^  void set(Level level, ConfigurationType configurationType, const std::string& value);$/;"	p	line:1790	language:C++	class:el::Configurations	typeref:typename:void	access:public	signature:(Level level,ConfigurationType configurationType,const std::string & value)
el::Configurations::setFromBase	src/easylogging/easylogging++.cc	/^void Configurations::setFromBase(Configurations* base) {$/;"	f	line:316	language:C++	class:el::Configurations	typeref:typename:void	signature:(Configurations * base)
el::Configurations::setFromBase	src/easylogging/easylogging++.h	/^  void setFromBase(Configurations* base);$/;"	p	line:1765	language:C++	class:el::Configurations	typeref:typename:void	access:public	signature:(Configurations * base)
el::Configurations::setGlobally	src/easylogging/easylogging++.cc	/^void Configurations::setGlobally(ConfigurationType configurationType, const std::string& value,$/;"	f	line:559	language:C++	class:el::Configurations	typeref:typename:void	signature:(ConfigurationType configurationType,const std::string & value,bool includeGlobalLevel)
el::Configurations::setGlobally	src/easylogging/easylogging++.h	/^  inline void setGlobally(ConfigurationType configurationType, const std::string& value) {$/;"	f	line:1805	language:C++	class:el::Configurations	typeref:typename:void	access:public	signature:(ConfigurationType configurationType,const std::string & value)
el::Configurations::setGlobally	src/easylogging/easylogging++.h	/^  void setGlobally(ConfigurationType configurationType, const std::string& value, bool includeGl/;"	p	line:1886	language:C++	class:el::Configurations	typeref:typename:void	access:private	signature:(ConfigurationType configurationType,const std::string & value,bool includeGlobalLevel)
el::Configurations::setRemainingToDefault	src/easylogging/easylogging++.cc	/^void Configurations::setRemainingToDefault(void) {$/;"	f	line:388	language:C++	class:el::Configurations	typeref:typename:void	signature:(void)
el::Configurations::setRemainingToDefault	src/easylogging/easylogging++.h	/^  void setRemainingToDefault(void);$/;"	p	line:1832	language:C++	class:el::Configurations	typeref:typename:void	access:public	signature:(void)
el::Configurations::setToDefault	src/easylogging/easylogging++.cc	/^void Configurations::setToDefault(void) {$/;"	f	line:364	language:C++	class:el::Configurations	typeref:typename:void	signature:(void)
el::Configurations::setToDefault	src/easylogging/easylogging++.h	/^  void setToDefault(void);$/;"	p	line:1823	language:C++	class:el::Configurations	typeref:typename:void	access:public	signature:(void)
el::Configurations::unsafeSet	src/easylogging/easylogging++.cc	/^void Configurations::unsafeSet(Level level, ConfigurationType configurationType, const std::stri/;"	f	line:547	language:C++	class:el::Configurations	typeref:typename:void	signature:(Level level,ConfigurationType configurationType,const std::string & value)
el::Configurations::unsafeSet	src/easylogging/easylogging++.h	/^  void unsafeSet(Level level, ConfigurationType configurationType, const std::string& value);$/;"	p	line:1882	language:C++	class:el::Configurations	typeref:typename:void	access:private	signature:(Level level,ConfigurationType configurationType,const std::string & value)
el::Configurations::unsafeSetGlobally	src/easylogging/easylogging++.cc	/^void Configurations::unsafeSetGlobally(ConfigurationType configurationType, const std::string& v/;"	f	line:571	language:C++	class:el::Configurations	typeref:typename:void	signature:(ConfigurationType configurationType,const std::string & value,bool includeGlobalLevel)
el::Configurations::unsafeSetGlobally	src/easylogging/easylogging++.h	/^  void unsafeSetGlobally(ConfigurationType configurationType, const std::string& value, bool inc/;"	p	line:1890	language:C++	class:el::Configurations	typeref:typename:void	access:private	signature:(ConfigurationType configurationType,const std::string & value,bool includeGlobalLevel)
el::Configurations::unsafeSetIfNotExist	src/easylogging/easylogging++.cc	/^void Configurations::unsafeSetIfNotExist(Level level, ConfigurationType configurationType, const/;"	f	line:540	language:C++	class:el::Configurations	typeref:typename:void	signature:(Level level,ConfigurationType configurationType,const std::string & value)
el::Configurations::unsafeSetIfNotExist	src/easylogging/easylogging++.h	/^  void unsafeSetIfNotExist(Level level, ConfigurationType configurationType, const std::string& /;"	p	line:1879	language:C++	class:el::Configurations	typeref:typename:void	access:private	signature:(Level level,ConfigurationType configurationType,const std::string & value)
el::Configurations::~Configurations	src/easylogging/easylogging++.h	/^  virtual ~Configurations(void) {$/;"	f	line:1742	language:C++	class:el::Configurations	access:public	signature:(void)
el::CreateLoggerAutomatically	src/easylogging/easylogging++.h	/^  CreateLoggerAutomatically = 4096,$/;"	e	line:720	language:C++	enum:el::LoggingFlag	access:public
el::CustomFormatSpecifier	src/easylogging/easylogging++.h	/^class CustomFormatSpecifier {$/;"	c	line:1645	language:C++	namespace:el
el::CustomFormatSpecifier::CustomFormatSpecifier	src/easylogging/easylogging++.h	/^  CustomFormatSpecifier(const char* formatSpecifier, const FormatSpecifierValueResolver& resolve/;"	f	line:1647	language:C++	class:el::CustomFormatSpecifier	access:public	signature:(const char * formatSpecifier,const FormatSpecifierValueResolver & resolver)
el::CustomFormatSpecifier::formatSpecifier	src/easylogging/easylogging++.h	/^  inline const char* formatSpecifier(void) const {$/;"	f	line:1649	language:C++	class:el::CustomFormatSpecifier	typeref:typename:const char *	access:public	signature:(void) const
el::CustomFormatSpecifier::m_formatSpecifier	src/easylogging/easylogging++.h	/^  const char* m_formatSpecifier;$/;"	m	line:1660	language:C++	class:el::CustomFormatSpecifier	typeref:typename:const char *	access:private
el::CustomFormatSpecifier::m_resolver	src/easylogging/easylogging++.h	/^  FormatSpecifierValueResolver m_resolver;$/;"	m	line:1661	language:C++	class:el::CustomFormatSpecifier	typeref:typename:FormatSpecifierValueResolver	access:private
el::CustomFormatSpecifier::operator ==	src/easylogging/easylogging++.h	/^  inline bool operator==(const char* formatSpecifier) {$/;"	f	line:1655	language:C++	class:el::CustomFormatSpecifier	typeref:typename:bool	access:public	signature:(const char * formatSpecifier)
el::CustomFormatSpecifier::resolver	src/easylogging/easylogging++.h	/^  inline const FormatSpecifierValueResolver& resolver(void) const {$/;"	f	line:1652	language:C++	class:el::CustomFormatSpecifier	typeref:typename:const FormatSpecifierValueResolver &	access:public	signature:(void) const
el::Debug	src/easylogging/easylogging++.h	/^  Debug = 4,$/;"	e	line:578	language:C++	enum:el::Level	access:public
el::DisableApplicationAbortOnFatalLog	src/easylogging/easylogging++.h	/^  DisableApplicationAbortOnFatalLog = 8,$/;"	e	line:702	language:C++	enum:el::LoggingFlag	access:public
el::DisablePerformanceTrackingCheckpointComparison	src/easylogging/easylogging++.h	/^  DisablePerformanceTrackingCheckpointComparison = 256,$/;"	e	line:712	language:C++	enum:el::LoggingFlag	access:public
el::DisableVModules	src/easylogging/easylogging++.h	/^  DisableVModules = 512,$/;"	e	line:714	language:C++	enum:el::LoggingFlag	access:public
el::DisableVModulesExtensions	src/easylogging/easylogging++.h	/^  DisableVModulesExtensions = 1024,$/;"	e	line:716	language:C++	enum:el::LoggingFlag	access:public
el::Enabled	src/easylogging/easylogging++.h	/^  Enabled = 1,$/;"	e	line:635	language:C++	enum:el::ConfigurationType	access:public
el::Error	src/easylogging/easylogging++.h	/^  Error = 16,$/;"	e	line:582	language:C++	enum:el::Level	access:public
el::Fatal	src/easylogging/easylogging++.h	/^  Fatal = 8,$/;"	e	line:580	language:C++	enum:el::Level	access:public
el::Filename	src/easylogging/easylogging++.h	/^  Filename = 16,$/;"	e	line:644	language:C++	enum:el::ConfigurationType	access:public
el::FixedTimeFormat	src/easylogging/easylogging++.h	/^  FixedTimeFormat = 16384,$/;"	e	line:724	language:C++	enum:el::LoggingFlag	access:public
el::Format	src/easylogging/easylogging++.h	/^  Format = 8,$/;"	e	line:642	language:C++	enum:el::ConfigurationType	access:public
el::FormatSpecifierValueResolver	src/easylogging/easylogging++.h	/^typedef std::function<std::string(const LogMessage*)> FormatSpecifierValueResolver;$/;"	t	line:1641	language:C++	namespace:el
el::Global	src/easylogging/easylogging++.h	/^  Global = 1,$/;"	e	line:574	language:C++	enum:el::Level	access:public
el::Helpers	src/easylogging/easylogging++.h	/^class Helpers : base::StaticClass {$/;"	c	line:3650	language:C++	namespace:el	inherits:base::StaticClass
el::Helpers::commandLineArgs	src/easylogging/easylogging++.h	/^  static inline const el::base::utils::CommandLineArgs* commandLineArgs(void) {$/;"	f	line:3754	language:C++	class:el::Helpers	typeref:typename:const el::base::utils::CommandLineArgs *	access:public	signature:(void)
el::Helpers::convertTemplateToStdString	src/easylogging/easylogging++.h	/^  static std::string convertTemplateToStdString(const T& templ) {$/;"	f	line:3734	language:C++	class:el::Helpers	typeref:typename:std::string	access:public	signature:(const T & templ)
el::Helpers::crashAbort	src/easylogging/easylogging++.cc	/^void Helpers::crashAbort(int sig, const char* sourceFile, unsigned int long line) {$/;"	f	line:2921	language:C++	class:el::Helpers	typeref:typename:void	signature:(int sig,const char * sourceFile,unsigned int long line)
el::Helpers::crashAbort	src/easylogging/easylogging++.h	/^  static void crashAbort(int sig, const char* sourceFile = "", unsigned int long line = 0);$/;"	p	line:3684	language:C++	class:el::Helpers	typeref:typename:void	access:public	signature:(int sig,const char * sourceFile="",unsigned int long line=0)
el::Helpers::getThreadName	src/easylogging/easylogging++.h	/^  static inline std::string getThreadName() {$/;"	f	line:3672	language:C++	class:el::Helpers	typeref:typename:std::string	access:public	signature:()
el::Helpers::hasCustomFormatSpecifier	src/easylogging/easylogging++.h	/^  static inline bool hasCustomFormatSpecifier(const char* formatSpecifier) {$/;"	f	line:3771	language:C++	class:el::Helpers	typeref:typename:bool	access:public	signature:(const char * formatSpecifier)
el::Helpers::installCustomFormatSpecifier	src/easylogging/easylogging++.h	/^  static inline void installCustomFormatSpecifier(const CustomFormatSpecifier& customFormatSpeci/;"	f	line:3763	language:C++	class:el::Helpers	typeref:typename:void	access:public	signature:(const CustomFormatSpecifier & customFormatSpecifier)
el::Helpers::installLogDispatchCallback	src/easylogging/easylogging++.h	/^  static inline bool installLogDispatchCallback(const std::string& id) {$/;"	f	line:3704	language:C++	class:el::Helpers	typeref:typename:bool	access:public	signature:(const std::string & id)
el::Helpers::installPerformanceTrackingCallback	src/easylogging/easylogging++.h	/^  static inline bool installPerformanceTrackingCallback(const std::string& id) {$/;"	f	line:3719	language:C++	class:el::Helpers	typeref:typename:bool	access:public	signature:(const std::string & id)
el::Helpers::installPreRollOutCallback	src/easylogging/easylogging++.h	/^  static inline void installPreRollOutCallback(const PreRollOutCallback& callback) {$/;"	f	line:3695	language:C++	class:el::Helpers	typeref:typename:void	access:public	signature:(const PreRollOutCallback & callback)
el::Helpers::logCrashReason	src/easylogging/easylogging++.cc	/^void Helpers::logCrashReason(int sig, bool stackTraceIfAvailable, Level level, const char* logge/;"	f	line:2935	language:C++	class:el::Helpers	typeref:typename:void	signature:(int sig,bool stackTraceIfAvailable,Level level,const char * logger)
el::Helpers::logCrashReason	src/easylogging/easylogging++.h	/^  static void logCrashReason(int sig, bool stackTraceIfAvailable = false,$/;"	p	line:3690	language:C++	class:el::Helpers	typeref:typename:void	access:public	signature:(int sig,bool stackTraceIfAvailable=false,Level level=Level::Fatal,const char * logger=base::consts::kDefaultLoggerId)
el::Helpers::logDispatchCallback	src/easylogging/easylogging++.h	/^  static inline T* logDispatchCallback(const std::string& id) {$/;"	f	line:3713	language:C++	class:el::Helpers	typeref:typename:T *	access:public	signature:(const std::string & id)
el::Helpers::performanceTrackingCallback	src/easylogging/easylogging++.h	/^  static inline T* performanceTrackingCallback(const std::string& id) {$/;"	f	line:3728	language:C++	class:el::Helpers	typeref:typename:T *	access:public	signature:(const std::string & id)
el::Helpers::reserveCustomFormatSpecifiers	src/easylogging/easylogging++.h	/^  static inline void reserveCustomFormatSpecifiers(std::size_t size) {$/;"	f	line:3759	language:C++	class:el::Helpers	typeref:typename:void	access:public	signature:(std::size_t size)
el::Helpers::setArgs	src/easylogging/easylogging++.h	/^  static inline void setArgs(int argc, char** argv) {$/;"	f	line:3661	language:C++	class:el::Helpers	typeref:typename:void	access:public	signature:(int argc,char ** argv)
el::Helpers::setArgs	src/easylogging/easylogging++.h	/^  static inline void setArgs(int argc, const char** argv) {$/;"	f	line:3665	language:C++	class:el::Helpers	typeref:typename:void	access:public	signature:(int argc,const char ** argv)
el::Helpers::setCrashHandler	src/easylogging/easylogging++.h	/^  static inline void setCrashHandler(const el::base::debug::CrashHandler::Handler& crashHandler)/;"	f	line:3679	language:C++	class:el::Helpers	typeref:typename:void	access:public	signature:(const el::base::debug::CrashHandler::Handler & crashHandler)
el::Helpers::setStorage	src/easylogging/easylogging++.h	/^  static inline void setStorage(base::type::StoragePointer storage) {$/;"	f	line:3653	language:C++	class:el::Helpers	typeref:typename:void	access:public	signature:(base::type::StoragePointer storage)
el::Helpers::setThreadName	src/easylogging/easylogging++.h	/^  static inline void setThreadName(const std::string& name) {$/;"	f	line:3669	language:C++	class:el::Helpers	typeref:typename:void	access:public	signature:(const std::string & name)
el::Helpers::storage	src/easylogging/easylogging++.h	/^  static inline base::type::StoragePointer storage() {$/;"	f	line:3657	language:C++	class:el::Helpers	typeref:typename:base::type::StoragePointer	access:public	signature:()
el::Helpers::uninstallCustomFormatSpecifier	src/easylogging/easylogging++.h	/^  static inline bool uninstallCustomFormatSpecifier(const char* formatSpecifier) {$/;"	f	line:3767	language:C++	class:el::Helpers	typeref:typename:bool	access:public	signature:(const char * formatSpecifier)
el::Helpers::uninstallLogDispatchCallback	src/easylogging/easylogging++.h	/^  static inline void uninstallLogDispatchCallback(const std::string& id) {$/;"	f	line:3709	language:C++	class:el::Helpers	typeref:typename:void	access:public	signature:(const std::string & id)
el::Helpers::uninstallPerformanceTrackingCallback	src/easylogging/easylogging++.h	/^  static inline void uninstallPerformanceTrackingCallback(const std::string& id) {$/;"	f	line:3724	language:C++	class:el::Helpers	typeref:typename:void	access:public	signature:(const std::string & id)
el::Helpers::uninstallPreRollOutCallback	src/easylogging/easylogging++.h	/^  static inline void uninstallPreRollOutCallback(void) {$/;"	f	line:3699	language:C++	class:el::Helpers	typeref:typename:void	access:public	signature:(void)
el::Helpers::validateFileRolling	src/easylogging/easylogging++.h	/^  static inline void validateFileRolling(Logger* logger, Level level) {$/;"	f	line:3774	language:C++	class:el::Helpers	typeref:typename:void	access:public	signature:(Logger * logger,Level level)
el::HierarchicalLogging	src/easylogging/easylogging++.h	/^  HierarchicalLogging = 2048,$/;"	e	line:718	language:C++	enum:el::LoggingFlag	access:public
el::IgnoreSigInt	src/easylogging/easylogging++.h	/^  IgnoreSigInt = 32768,$/;"	e	line:726	language:C++	enum:el::LoggingFlag	access:public
el::ImmediateFlush	src/easylogging/easylogging++.h	/^  ImmediateFlush = 16,$/;"	e	line:704	language:C++	enum:el::LoggingFlag	access:public
el::Info	src/easylogging/easylogging++.h	/^  Info = 128,$/;"	e	line:588	language:C++	enum:el::Level	access:public
el::Level	src/easylogging/easylogging++.h	/^enum class Level : base::type::EnumType {$/;"	g	line:572	language:C++	namespace:el	typeref:typename:base::type::EnumType
el::LevelHelper	src/easylogging/easylogging++.h	/^class LevelHelper : base::StaticClass {$/;"	c	line:603	language:C++	namespace:el	inherits:base::StaticClass
el::LevelHelper::castFromInt	src/easylogging/easylogging++.h	/^  static Level castFromInt(base::type::EnumType l) {$/;"	f	line:614	language:C++	class:el::LevelHelper	typeref:typename:Level	access:public	signature:(base::type::EnumType l)
el::LevelHelper::castToInt	src/easylogging/easylogging++.h	/^  static base::type::EnumType castToInt(Level level) {$/;"	f	line:610	language:C++	class:el::LevelHelper	typeref:typename:base::type::EnumType	access:public	signature:(Level level)
el::LevelHelper::convertFromString	src/easylogging/easylogging++.cc	/^Level LevelHelper::convertFromString(const char* levelStr) {$/;"	f	line:165	language:C++	class:el::LevelHelper	typeref:typename:Level	signature:(const char * levelStr)
el::LevelHelper::convertFromString	src/easylogging/easylogging++.h	/^  static Level convertFromString(const char* levelStr);$/;"	p	line:623	language:C++	class:el::LevelHelper	typeref:typename:Level	access:public	signature:(const char * levelStr)
el::LevelHelper::convertToString	src/easylogging/easylogging++.cc	/^const char* LevelHelper::convertToString(Level level) {$/;"	f	line:136	language:C++	class:el::LevelHelper	typeref:typename:const char *	signature:(Level level)
el::LevelHelper::convertToString	src/easylogging/easylogging++.h	/^  static const char* convertToString(Level level);$/;"	p	line:619	language:C++	class:el::LevelHelper	typeref:typename:const char *	access:public	signature:(Level level)
el::LevelHelper::forEachLevel	src/easylogging/easylogging++.cc	/^void LevelHelper::forEachLevel(base::type::EnumType* startIndex, const std::function<bool(void)>/;"	f	line:174	language:C++	class:el::LevelHelper	typeref:typename:void	signature:(base::type::EnumType * startIndex,const std::function<bool (void)> & fn)
el::LevelHelper::forEachLevel	src/easylogging/easylogging++.h	/^  static void forEachLevel(base::type::EnumType* startIndex, const std::function<bool(void)>& fn/;"	p	line:628	language:C++	class:el::LevelHelper	typeref:typename:void	access:public	signature:(base::type::EnumType * startIndex,const std::function<bool (void)> & fn)
el::LevelHelper::kMaxValid	src/easylogging/easylogging++.h	/^  static const base::type::EnumType kMaxValid = static_cast<base::type::EnumType>(Level::Info);$/;"	m	line:608	language:C++	class:el::LevelHelper	typeref:typename:const base::type::EnumType	access:public
el::LevelHelper::kMinValid	src/easylogging/easylogging++.h	/^  static const base::type::EnumType kMinValid = static_cast<base::type::EnumType>(Level::Trace);$/;"	m	line:606	language:C++	class:el::LevelHelper	typeref:typename:const base::type::EnumType	access:public
el::LogBuilder	src/easylogging/easylogging++.h	/^class LogBuilder : base::NoCopy {$/;"	c	line:2195	language:C++	namespace:el	inherits:base::NoCopy
el::LogBuilder::LogBuilder	src/easylogging/easylogging++.h	/^  LogBuilder() : m_termSupportsColor(base::utils::OS::termSupportsColor()) {}$/;"	f	line:2197	language:C++	class:el::LogBuilder	access:public	signature:()
el::LogBuilder::build	src/easylogging/easylogging++.h	/^  virtual base::type::string_t build(const LogMessage* logMessage, bool appendNewLine) const = 0/;"	p	line:2201	language:C++	class:el::LogBuilder	typeref:typename:base::type::string_t	access:public	signature:(const LogMessage * logMessage,bool appendNewLine) const
el::LogBuilder::convertToColoredOutput	src/easylogging/easylogging++.cc	/^void LogBuilder::convertToColoredOutput(base::type::string_t* logLine, Level level) {$/;"	f	line:585	language:C++	class:el::LogBuilder	typeref:typename:void	signature:(base::type::string_t * logLine,Level level)
el::LogBuilder::convertToColoredOutput	src/easylogging/easylogging++.h	/^  void convertToColoredOutput(base::type::string_t* logLine, Level level);$/;"	p	line:2202	language:C++	class:el::LogBuilder	typeref:typename:void	access:public	signature:(base::type::string_t * logLine,Level level)
el::LogBuilder::m_termSupportsColor	src/easylogging/easylogging++.h	/^  bool m_termSupportsColor;$/;"	m	line:2204	language:C++	class:el::LogBuilder	typeref:typename:bool	access:private
el::LogBuilder::~LogBuilder	src/easylogging/easylogging++.h	/^  virtual ~LogBuilder(void) {$/;"	f	line:2198	language:C++	class:el::LogBuilder	access:public	signature:(void)
el::LogBuilderPtr	src/easylogging/easylogging++.h	/^typedef std::shared_ptr<LogBuilder> LogBuilderPtr;$/;"	t	line:2207	language:C++	namespace:el	typeref:typename:std::shared_ptr<LogBuilder>
el::LogDetailedCrashReason	src/easylogging/easylogging++.h	/^  LogDetailedCrashReason = 4,$/;"	e	line:700	language:C++	enum:el::LoggingFlag	access:public
el::LogDispatchCallback	src/easylogging/easylogging++.h	/^class LogDispatchCallback : public Callback<LogDispatchData> {$/;"	c	line:2178	language:C++	namespace:el	inherits:Callback<LogDispatchData>
el::LogDispatchCallback::fileHandle	src/easylogging/easylogging++.cc	/^base::threading::Mutex& LogDispatchCallback::fileHandle(const LogDispatchData* data) {$/;"	f	line:2198	language:C++	class:el::LogDispatchCallback	typeref:typename:base::threading::Mutex &	signature:(const LogDispatchData * data)
el::LogDispatchCallback::fileHandle	src/easylogging/easylogging++.h	/^  base::threading::Mutex& fileHandle(const LogDispatchData* data);$/;"	p	line:2181	language:C++	class:el::LogDispatchCallback	typeref:typename:base::threading::Mutex &	access:protected	signature:(const LogDispatchData * data)
el::LogDispatchCallback::handle	src/easylogging/easylogging++.cc	/^void LogDispatchCallback::handle(const LogDispatchData* data) {$/;"	f	line:2187	language:C++	class:el::LogDispatchCallback	typeref:typename:void	signature:(const LogDispatchData * data)
el::LogDispatchCallback::handle	src/easylogging/easylogging++.h	/^  virtual void handle(const LogDispatchData* data);$/;"	p	line:2180	language:C++	class:el::LogDispatchCallback	typeref:typename:void	access:protected	signature:(const LogDispatchData * data)
el::LogDispatchCallback::m_fileLocks	src/easylogging/easylogging++.h	/^  std::unordered_map<std::string, std::unique_ptr<base::threading::Mutex>> m_fileLocks;$/;"	m	line:2184	language:C++	class:el::LogDispatchCallback	typeref:typename:std::unordered_map<std::string,std::unique_ptr<base::threading::Mutex>>	access:private
el::LogDispatchCallback::m_fileLocksMapLock	src/easylogging/easylogging++.h	/^  base::threading::Mutex m_fileLocksMapLock;$/;"	m	line:2185	language:C++	class:el::LogDispatchCallback	typeref:typename:base::threading::Mutex	access:private
el::LogDispatchData	src/easylogging/easylogging++.h	/^class LogDispatchData {$/;"	c	line:2157	language:C++	namespace:el
el::LogDispatchData::LogDispatchData	src/easylogging/easylogging++.h	/^  LogDispatchData() : m_logMessage(nullptr), m_dispatchAction(base::DispatchAction::None) {}$/;"	f	line:2159	language:C++	class:el::LogDispatchData	access:public	signature:()
el::LogDispatchData::dispatchAction	src/easylogging/easylogging++.h	/^  inline base::DispatchAction dispatchAction(void) const {$/;"	f	line:2163	language:C++	class:el::LogDispatchData	typeref:typename:base::DispatchAction	access:public	signature:(void) const
el::LogDispatchData::logMessage	src/easylogging/easylogging++.h	/^  inline const LogMessage* logMessage(void) const {$/;"	f	line:2160	language:C++	class:el::LogDispatchData	typeref:typename:const LogMessage *	access:public	signature:(void) const
el::LogDispatchData::m_dispatchAction	src/easylogging/easylogging++.h	/^  base::DispatchAction m_dispatchAction;$/;"	m	line:2174	language:C++	class:el::LogDispatchData	typeref:typename:base::DispatchAction	access:private
el::LogDispatchData::m_logMessage	src/easylogging/easylogging++.h	/^  LogMessage* m_logMessage;$/;"	m	line:2173	language:C++	class:el::LogDispatchData	typeref:typename:LogMessage *	access:private
el::LogDispatchData::setDispatchAction	src/easylogging/easylogging++.h	/^  inline void setDispatchAction(base::DispatchAction dispatchAction) {$/;"	f	line:2169	language:C++	class:el::LogDispatchData	typeref:typename:void	access:public	signature:(base::DispatchAction dispatchAction)
el::LogDispatchData::setLogMessage	src/easylogging/easylogging++.h	/^  inline void setLogMessage(LogMessage* logMessage) {$/;"	f	line:2166	language:C++	class:el::LogDispatchData	typeref:typename:void	access:public	signature:(LogMessage * logMessage)
el::LogFlushThreshold	src/easylogging/easylogging++.h	/^  LogFlushThreshold = 256,$/;"	e	line:659	language:C++	enum:el::ConfigurationType	access:public
el::LogMessage	src/easylogging/easylogging++.h	/^class LogMessage {$/;"	c	line:2452	language:C++	namespace:el
el::LogMessage::LogMessage	src/easylogging/easylogging++.h	/^  LogMessage(Level level, const std::string& file, base::type::LineNumber line, const std::strin/;"	f	line:2454	language:C++	class:el::LogMessage	access:public	signature:(Level level,const std::string & file,base::type::LineNumber line,const std::string & func,base::type::VerboseLevel verboseLevel,Logger * logger)
el::LogMessage::file	src/easylogging/easylogging++.h	/^  inline const std::string& file(void) const {$/;"	f	line:2462	language:C++	class:el::LogMessage	typeref:typename:const std::string &	access:public	signature:(void) const
el::LogMessage::func	src/easylogging/easylogging++.h	/^  inline const std::string& func(void) const {$/;"	f	line:2468	language:C++	class:el::LogMessage	typeref:typename:const std::string &	access:public	signature:(void) const
el::LogMessage::level	src/easylogging/easylogging++.h	/^  inline Level level(void) const {$/;"	f	line:2459	language:C++	class:el::LogMessage	typeref:typename:Level	access:public	signature:(void) const
el::LogMessage::line	src/easylogging/easylogging++.h	/^  inline base::type::LineNumber line(void) const {$/;"	f	line:2465	language:C++	class:el::LogMessage	typeref:typename:base::type::LineNumber	access:public	signature:(void) const
el::LogMessage::logger	src/easylogging/easylogging++.h	/^  inline Logger* logger(void) const {$/;"	f	line:2474	language:C++	class:el::LogMessage	typeref:typename:Logger *	access:public	signature:(void) const
el::LogMessage::m_file	src/easylogging/easylogging++.h	/^  std::string m_file;$/;"	m	line:2482	language:C++	class:el::LogMessage	typeref:typename:std::string	access:private
el::LogMessage::m_func	src/easylogging/easylogging++.h	/^  std::string m_func;$/;"	m	line:2484	language:C++	class:el::LogMessage	typeref:typename:std::string	access:private
el::LogMessage::m_level	src/easylogging/easylogging++.h	/^  Level m_level;$/;"	m	line:2481	language:C++	class:el::LogMessage	typeref:typename:Level	access:private
el::LogMessage::m_line	src/easylogging/easylogging++.h	/^  base::type::LineNumber m_line;$/;"	m	line:2483	language:C++	class:el::LogMessage	typeref:typename:base::type::LineNumber	access:private
el::LogMessage::m_logger	src/easylogging/easylogging++.h	/^  Logger* m_logger;$/;"	m	line:2486	language:C++	class:el::LogMessage	typeref:typename:Logger *	access:private
el::LogMessage::m_message	src/easylogging/easylogging++.h	/^  base::type::string_t m_message;$/;"	m	line:2487	language:C++	class:el::LogMessage	typeref:typename:base::type::string_t	access:private
el::LogMessage::m_verboseLevel	src/easylogging/easylogging++.h	/^  base::type::VerboseLevel m_verboseLevel;$/;"	m	line:2485	language:C++	class:el::LogMessage	typeref:typename:base::type::VerboseLevel	access:private
el::LogMessage::message	src/easylogging/easylogging++.h	/^  inline const base::type::string_t& message(void) const {$/;"	f	line:2477	language:C++	class:el::LogMessage	typeref:typename:const base::type::string_t &	access:public	signature:(void) const
el::LogMessage::verboseLevel	src/easylogging/easylogging++.h	/^  inline base::type::VerboseLevel verboseLevel(void) const {$/;"	f	line:2471	language:C++	class:el::LogMessage	typeref:typename:base::type::VerboseLevel	access:public	signature:(void) const
el::Loggable	src/easylogging/easylogging++.h	/^class Loggable {$/;"	c	line:1562	language:C++	namespace:el
el::Loggable::log	src/easylogging/easylogging++.h	/^  virtual void log(el::base::type::ostream_t&) const = 0;$/;"	p	line:1565	language:C++	class:el::Loggable	typeref:typename:void	access:public	signature:(el::base::type::ostream_t &) const
el::Loggable::~Loggable	src/easylogging/easylogging++.h	/^  virtual ~Loggable(void) {}$/;"	f	line:1564	language:C++	class:el::Loggable	access:public	signature:(void)
el::Logger	src/easylogging/easylogging++.h	/^class Logger : public base::threading::ThreadSafe, public Loggable {$/;"	c	line:2211	language:C++	namespace:el	inherits:base::threading::ThreadSafe,Loggable
el::Logger::Logger	src/easylogging/easylogging++.cc	/^Logger::Logger(const Logger& logger) {$/;"	f	line:622	language:C++	class:el::Logger	signature:(const Logger & logger)
el::Logger::Logger	src/easylogging/easylogging++.cc	/^Logger::Logger(const std::string& id, base::LogStreamsReferenceMap* logStreamsReference) :$/;"	f	line:602	language:C++	class:el::Logger	signature:(const std::string & id,base::LogStreamsReferenceMap * logStreamsReference)
el::Logger::Logger	src/easylogging/easylogging++.cc	/^Logger::Logger(const std::string& id, const Configurations& configurations,$/;"	f	line:611	language:C++	class:el::Logger	signature:(const std::string & id,const Configurations & configurations,base::LogStreamsReferenceMap * logStreamsReference)
el::Logger::Logger	src/easylogging/easylogging++.h	/^  Logger(const Logger& logger);$/;"	p	line:2215	language:C++	class:el::Logger	access:public	signature:(const Logger & logger)
el::Logger::Logger	src/easylogging/easylogging++.h	/^  Logger(const std::string& id, base::LogStreamsReferenceMap* logStreamsReference);$/;"	p	line:2213	language:C++	class:el::Logger	access:public	signature:(const std::string & id,base::LogStreamsReferenceMap * logStreamsReference)
el::Logger::Logger	src/easylogging/easylogging++.h	/^  Logger(const std::string& id, const Configurations& configurations, base::LogStreamsReferenceM/;"	p	line:2214	language:C++	class:el::Logger	access:public	signature:(const std::string & id,const Configurations & configurations,base::LogStreamsReferenceMap * logStreamsReference)
el::Logger::Logger	src/easylogging/easylogging++.h	/^  Logger(void);$/;"	p	line:2319	language:C++	class:el::Logger	access:private	signature:(void)
el::Logger::configurations	src/easylogging/easylogging++.h	/^  inline Configurations* configurations(void) {$/;"	f	line:2244	language:C++	class:el::Logger	typeref:typename:Configurations *	access:public	signature:(void)
el::Logger::configure	src/easylogging/easylogging++.cc	/^void Logger::configure(const Configurations& configurations) {$/;"	f	line:647	language:C++	class:el::Logger	typeref:typename:void	signature:(const Configurations & configurations)
el::Logger::configure	src/easylogging/easylogging++.h	/^  void configure(const Configurations& configurations);$/;"	p	line:2227	language:C++	class:el::Logger	typeref:typename:void	access:public	signature:(const Configurations & configurations)
el::Logger::enabled	src/easylogging/easylogging++.h	/^  inline bool enabled(Level level) const {$/;"	f	line:2271	language:C++	class:el::Logger	typeref:typename:bool	access:public	signature:(Level level) const
el::Logger::flush	src/easylogging/easylogging++.cc	/^void Logger::flush(Level level, base::type::fstream_t* fs) {$/;"	f	line:690	language:C++	class:el::Logger	typeref:typename:void	signature:(Level level,base::type::fstream_t * fs)
el::Logger::flush	src/easylogging/easylogging++.cc	/^void Logger::flush(void) {$/;"	f	line:680	language:C++	class:el::Logger	typeref:typename:void	signature:(void)
el::Logger::flush	src/easylogging/easylogging++.h	/^  void flush(Level level, base::type::fstream_t* fs);$/;"	p	line:2257	language:C++	class:el::Logger	typeref:typename:void	access:public	signature:(Level level,base::type::fstream_t * fs)
el::Logger::flush	src/easylogging/easylogging++.h	/^  void flush(void);$/;"	p	line:2255	language:C++	class:el::Logger	typeref:typename:void	access:public	signature:(void)
el::Logger::id	src/easylogging/easylogging++.h	/^  inline const std::string& id(void) const {$/;"	f	line:2232	language:C++	class:el::Logger	typeref:typename:const std::string &	access:public	signature:(void) const
el::Logger::initUnflushedCount	src/easylogging/easylogging++.cc	/^void Logger::initUnflushedCount(void) {$/;"	f	line:704	language:C++	class:el::Logger	typeref:typename:void	signature:(void)
el::Logger::initUnflushedCount	src/easylogging/easylogging++.h	/^  void initUnflushedCount(void);$/;"	p	line:2335	language:C++	class:el::Logger	typeref:typename:void	access:private	signature:(void)
el::Logger::isFlushNeeded	src/easylogging/easylogging++.h	/^  inline bool isFlushNeeded(Level level) {$/;"	f	line:2259	language:C++	class:el::Logger	typeref:typename:bool	access:public	signature:(Level level)
el::Logger::isValidId	src/easylogging/easylogging++.cc	/^bool Logger::isValidId(const std::string& id) {$/;"	f	line:671	language:C++	class:el::Logger	typeref:typename:bool	signature:(const std::string & id)
el::Logger::isValidId	src/easylogging/easylogging++.h	/^  static bool isValidId(const std::string& id);$/;"	p	line:2252	language:C++	class:el::Logger	typeref:typename:bool	access:public	signature:(const std::string & id)
el::Logger::log	src/easylogging/easylogging++.h	/^  inline void log(Level, const T&);$/;"	p	line:2332	language:C++	class:el::Logger	typeref:typename:void	access:private	signature:(Level,const T &)
el::Logger::log	src/easylogging/easylogging++.h	/^  virtual inline void log(el::base::type::ostream_t& os) const {$/;"	f	line:2222	language:C++	class:el::Logger	typeref:typename:void	access:public	signature:(el::base::type::ostream_t & os) const
el::Logger::log	src/easylogging/easylogging++.h	/^  void log(Level, const char*, const T&, const Args&...);$/;"	p	line:2329	language:C++	class:el::Logger	typeref:typename:void	access:private	signature:(Level,const char *,const T &,const Args &...)
el::Logger::log	src/easylogging/easylogging++.h	/^inline void Logger::log(Level level, const T& log) {$/;"	f	line:3303	language:C++	class:el::Logger	typeref:typename:void	signature:(Level level,const T & log)
el::Logger::log	src/easylogging/easylogging++.h	/^inline void Logger::log(Level level, const char* s, const T& value, const Args&... args) {$/;"	f	line:3298	language:C++	class:el::Logger	typeref:typename:void	signature:(Level level,const char * s,const T & value,const Args &...args)
el::Logger::logBuilder	src/easylogging/easylogging++.h	/^  inline LogBuilder* logBuilder(void) const {$/;"	f	line:2263	language:C++	class:el::Logger	typeref:typename:LogBuilder *	access:public	signature:(void) const
el::Logger::log_	src/easylogging/easylogging++.h	/^  inline void log_(Level, int, const T&);$/;"	p	line:2326	language:C++	class:el::Logger	typeref:typename:void	access:private	signature:(Level,int,const T &)
el::Logger::log_	src/easylogging/easylogging++.h	/^  void log_(Level, int, const char*, const T&, const Args&...);$/;"	p	line:2323	language:C++	class:el::Logger	typeref:typename:void	access:private	signature:(Level,int,const char *,const T &,const Args &...)
el::Logger::log_	src/easylogging/easylogging++.h	/^void Logger::log_(Level level, int vlevel, const T& log) {$/;"	f	line:3284	language:C++	class:el::Logger	typeref:typename:void	signature:(Level level,int vlevel,const T & log)
el::Logger::log_	src/easylogging/easylogging++.h	/^void Logger::log_(Level level, int vlevel, const char* s, const T& value, const Args&... args) {$/;"	f	line:3263	language:C++	class:el::Logger	typeref:typename:void	signature:(Level level,int vlevel,const char * s,const T & value,const Args &...args)
el::Logger::m_configurations	src/easylogging/easylogging++.h	/^  Configurations m_configurations;$/;"	m	line:2302	language:C++	class:el::Logger	typeref:typename:Configurations	access:private
el::Logger::m_id	src/easylogging/easylogging++.h	/^  std::string m_id;$/;"	m	line:2297	language:C++	class:el::Logger	typeref:typename:std::string	access:private
el::Logger::m_isConfigured	src/easylogging/easylogging++.h	/^  bool m_isConfigured;$/;"	m	line:2301	language:C++	class:el::Logger	typeref:typename:bool	access:private
el::Logger::m_logBuilder	src/easylogging/easylogging++.h	/^  LogBuilderPtr m_logBuilder;$/;"	m	line:2305	language:C++	class:el::Logger	typeref:typename:LogBuilderPtr	access:private
el::Logger::m_logStreamsReference	src/easylogging/easylogging++.h	/^  base::LogStreamsReferenceMap* m_logStreamsReference;$/;"	m	line:2304	language:C++	class:el::Logger	typeref:typename:base::LogStreamsReferenceMap *	access:private
el::Logger::m_parentApplicationName	src/easylogging/easylogging++.h	/^  std::string m_parentApplicationName;$/;"	m	line:2300	language:C++	class:el::Logger	typeref:typename:std::string	access:private
el::Logger::m_stream	src/easylogging/easylogging++.h	/^  base::type::stringstream_t m_stream;$/;"	m	line:2299	language:C++	class:el::Logger	typeref:typename:base::type::stringstream_t	access:private
el::Logger::m_typedConfigurations	src/easylogging/easylogging++.h	/^  base::TypedConfigurations* m_typedConfigurations;$/;"	m	line:2298	language:C++	class:el::Logger	typeref:typename:base::TypedConfigurations *	access:private
el::Logger::m_unflushedCount	src/easylogging/easylogging++.h	/^  std::unordered_map<Level, unsigned int> m_unflushedCount;$/;"	m	line:2303	language:C++	class:el::Logger	typeref:typename:std::unordered_map<Level,unsigned int>	access:private
el::Logger::operator =	src/easylogging/easylogging++.cc	/^Logger& Logger::operator=(const Logger& logger) {$/;"	f	line:633	language:C++	class:el::Logger	typeref:typename:Logger &	signature:(const Logger & logger)
el::Logger::operator =	src/easylogging/easylogging++.h	/^  Logger& operator=(const Logger& logger);$/;"	p	line:2216	language:C++	class:el::Logger	typeref:typename:Logger &	access:public	signature:(const Logger & logger)
el::Logger::parentApplicationName	src/easylogging/easylogging++.h	/^  inline const std::string& parentApplicationName(void) const {$/;"	f	line:2236	language:C++	class:el::Logger	typeref:typename:const std::string &	access:public	signature:(void) const
el::Logger::reconfigure	src/easylogging/easylogging++.cc	/^void Logger::reconfigure(void) {$/;"	f	line:666	language:C++	class:el::Logger	typeref:typename:void	signature:(void)
el::Logger::reconfigure	src/easylogging/easylogging++.h	/^  void reconfigure(void);$/;"	p	line:2230	language:C++	class:el::Logger	typeref:typename:void	access:public	signature:(void)
el::Logger::resolveLoggerFormatSpec	src/easylogging/easylogging++.cc	/^void Logger::resolveLoggerFormatSpec(void) const {$/;"	f	line:713	language:C++	class:el::Logger	typeref:typename:void	signature:(void) const
el::Logger::resolveLoggerFormatSpec	src/easylogging/easylogging++.h	/^  void resolveLoggerFormatSpec(void) const;$/;"	p	line:2341	language:C++	class:el::Logger	typeref:typename:void	access:private	signature:(void) const
el::Logger::setLogBuilder	src/easylogging/easylogging++.h	/^  inline void setLogBuilder(const LogBuilderPtr& logBuilder) {$/;"	f	line:2267	language:C++	class:el::Logger	typeref:typename:void	access:public	signature:(const LogBuilderPtr & logBuilder)
el::Logger::setParentApplicationName	src/easylogging/easylogging++.h	/^  inline void setParentApplicationName(const std::string& parentApplicationName) {$/;"	f	line:2240	language:C++	class:el::Logger	typeref:typename:void	access:public	signature:(const std::string & parentApplicationName)
el::Logger::stream	src/easylogging/easylogging++.h	/^  inline base::type::stringstream_t& stream(void) {$/;"	f	line:2337	language:C++	class:el::Logger	typeref:typename:base::type::stringstream_t &	access:private	signature:(void)
el::Logger::typedConfigurations	src/easylogging/easylogging++.h	/^  inline base::TypedConfigurations* typedConfigurations(void) {$/;"	f	line:2248	language:C++	class:el::Logger	typeref:typename:base::TypedConfigurations *	access:public	signature:(void)
el::Logger::verbose	src/easylogging/easylogging++.h	/^  inline void verbose(int, const T&);$/;"	p	line:2286	language:C++	class:el::Logger	typeref:typename:void	access:public	signature:(int,const T &)
el::Logger::verbose	src/easylogging/easylogging++.h	/^  inline void verbose(int, const char*, const T&, const Args&...);$/;"	p	line:2283	language:C++	class:el::Logger	typeref:typename:void	access:public	signature:(int,const char *,const T &,const Args &...)
el::Logger::verbose	src/easylogging/easylogging++.h	/^inline void Logger::verbose(int vlevel, const T& log) {$/;"	f	line:3314	language:C++	class:el::Logger	typeref:typename:void	signature:(int vlevel,const T & log)
el::Logger::verbose	src/easylogging/easylogging++.h	/^inline void Logger::verbose(int vlevel, const char* s, const T& value, const Args&... args) {$/;"	f	line:3309	language:C++	class:el::Logger	typeref:typename:void	signature:(int vlevel,const char * s,const T & value,const Args &...args)
el::Logger::verbose	src/easylogging/easylogging++.h	/^inline void Logger::verbose(int, const T&) {$/;"	f	line:3324	language:C++	class:el::Logger	typeref:typename:void	signature:(int,const T &)
el::Logger::verbose	src/easylogging/easylogging++.h	/^inline void Logger::verbose(int, const char*, const T&, const Args&...) {$/;"	f	line:3320	language:C++	class:el::Logger	typeref:typename:void	signature:(int,const char *,const T &,const Args &...)
el::Logger::~Logger	src/easylogging/easylogging++.h	/^  virtual ~Logger(void) {$/;"	f	line:2218	language:C++	class:el::Logger	access:public	signature:(void)
el::LoggerRegistrationCallback	src/easylogging/easylogging++.h	/^class LoggerRegistrationCallback : public Callback<Logger> {$/;"	c	line:2191	language:C++	namespace:el	inherits:Callback<Logger>
el::Loggers	src/easylogging/easylogging++.h	/^class Loggers : base::StaticClass {$/;"	c	line:3780	language:C++	namespace:el	inherits:base::StaticClass
el::Loggers::ScopedAddFlag	src/easylogging/easylogging++.h	/^  class ScopedAddFlag {$/;"	c	line:3855	language:C++	class:el::Loggers	access:public
el::Loggers::ScopedAddFlag::ScopedAddFlag	src/easylogging/easylogging++.h	/^    ScopedAddFlag(LoggingFlag flag) : m_flag(flag) {$/;"	f	line:3857	language:C++	class:el::Loggers::ScopedAddFlag	access:public	signature:(LoggingFlag flag)
el::Loggers::ScopedAddFlag::m_flag	src/easylogging/easylogging++.h	/^    LoggingFlag m_flag;$/;"	m	line:3864	language:C++	class:el::Loggers::ScopedAddFlag	typeref:typename:LoggingFlag	access:private
el::Loggers::ScopedAddFlag::~ScopedAddFlag	src/easylogging/easylogging++.h	/^    ~ScopedAddFlag(void) {$/;"	f	line:3860	language:C++	class:el::Loggers::ScopedAddFlag	access:public	signature:(void)
el::Loggers::ScopedRemoveFlag	src/easylogging/easylogging++.h	/^  class ScopedRemoveFlag {$/;"	c	line:3867	language:C++	class:el::Loggers	access:public
el::Loggers::ScopedRemoveFlag::ScopedRemoveFlag	src/easylogging/easylogging++.h	/^    ScopedRemoveFlag(LoggingFlag flag) : m_flag(flag) {$/;"	f	line:3869	language:C++	class:el::Loggers::ScopedRemoveFlag	access:public	signature:(LoggingFlag flag)
el::Loggers::ScopedRemoveFlag::m_flag	src/easylogging/easylogging++.h	/^    LoggingFlag m_flag;$/;"	m	line:3876	language:C++	class:el::Loggers::ScopedRemoveFlag	typeref:typename:LoggingFlag	access:private
el::Loggers::ScopedRemoveFlag::~ScopedRemoveFlag	src/easylogging/easylogging++.h	/^    ~ScopedRemoveFlag(void) {$/;"	f	line:3872	language:C++	class:el::Loggers::ScopedRemoveFlag	access:public	signature:(void)
el::Loggers::addFlag	src/easylogging/easylogging++.h	/^  static inline void addFlag(LoggingFlag flag) {$/;"	f	line:3843	language:C++	class:el::Loggers	typeref:typename:void	access:public	signature:(LoggingFlag flag)
el::Loggers::clearVModules	src/easylogging/easylogging++.cc	/^void Loggers::clearVModules(void) {$/;"	f	line:3098	language:C++	class:el::Loggers	typeref:typename:void	signature:(void)
el::Loggers::clearVModules	src/easylogging/easylogging++.h	/^  static void clearVModules(void);$/;"	p	line:3889	language:C++	class:el::Loggers	typeref:typename:void	access:public	signature:(void)
el::Loggers::configureFromArg	src/easylogging/easylogging++.cc	/^bool Loggers::configureFromArg(const char* argKey) {$/;"	f	line:3068	language:C++	class:el::Loggers	typeref:typename:bool	signature:(const char * argKey)
el::Loggers::configureFromArg	src/easylogging/easylogging++.h	/^  static bool configureFromArg(const char* argKey);$/;"	p	line:3839	language:C++	class:el::Loggers	typeref:typename:bool	access:public	signature:(const char * argKey)
el::Loggers::configureFromGlobal	src/easylogging/easylogging++.cc	/^void Loggers::configureFromGlobal(const char* globalConfigurationFilePath) {$/;"	f	line:3027	language:C++	class:el::Loggers	typeref:typename:void	signature:(const char * globalConfigurationFilePath)
el::Loggers::configureFromGlobal	src/easylogging/easylogging++.h	/^  static void configureFromGlobal(const char* globalConfigurationFilePath);$/;"	p	line:3834	language:C++	class:el::Loggers	typeref:typename:void	access:public	signature:(const char * globalConfigurationFilePath)
el::Loggers::defaultConfigurations	src/easylogging/easylogging++.cc	/^const Configurations* Loggers::defaultConfigurations(void) {$/;"	f	line:3004	language:C++	class:el::Loggers	typeref:typename:const Configurations *	signature:(void)
el::Loggers::defaultConfigurations	src/easylogging/easylogging++.h	/^  static const Configurations* defaultConfigurations(void);$/;"	p	line:3825	language:C++	class:el::Loggers	typeref:typename:const Configurations *	access:public	signature:(void)
el::Loggers::defaultTypedConfigurations	src/easylogging/easylogging++.cc	/^base::TypedConfigurations Loggers::defaultTypedConfigurations(void) {$/;"	f	line:3012	language:C++	class:el::Loggers	typeref:typename:base::TypedConfigurations	signature:(void)
el::Loggers::defaultTypedConfigurations	src/easylogging/easylogging++.h	/^  static base::TypedConfigurations defaultTypedConfigurations(void);$/;"	p	line:3829	language:C++	class:el::Loggers	typeref:typename:base::TypedConfigurations	access:public	signature:(void)
el::Loggers::flushAll	src/easylogging/easylogging++.cc	/^void Loggers::flushAll(void) {$/;"	f	line:3080	language:C++	class:el::Loggers	typeref:typename:void	signature:(void)
el::Loggers::flushAll	src/easylogging/easylogging++.h	/^  static void flushAll(void);$/;"	p	line:3841	language:C++	class:el::Loggers	typeref:typename:void	access:public	signature:(void)
el::Loggers::getLogger	src/easylogging/easylogging++.cc	/^Logger* Loggers::getLogger(const std::string& identity, bool registerIfNotAvailable) {$/;"	f	line:2943	language:C++	class:el::Loggers	typeref:typename:Logger *	signature:(const std::string & identity,bool registerIfNotAvailable)
el::Loggers::getLogger	src/easylogging/easylogging++.h	/^  static Logger* getLogger(const std::string& identity, bool registerIfNotAvailable = true);$/;"	p	line:3783	language:C++	class:el::Loggers	typeref:typename:Logger *	access:public	signature:(const std::string & identity,bool registerIfNotAvailable=true)
el::Loggers::hasFlag	src/easylogging/easylogging++.h	/^  static inline bool hasFlag(LoggingFlag flag) {$/;"	f	line:3851	language:C++	class:el::Loggers	typeref:typename:bool	access:public	signature:(LoggingFlag flag)
el::Loggers::hasLogger	src/easylogging/easylogging++.cc	/^bool Loggers::hasLogger(const std::string& identity) {$/;"	f	line:2955	language:C++	class:el::Loggers	typeref:typename:bool	signature:(const std::string & identity)
el::Loggers::hasLogger	src/easylogging/easylogging++.h	/^  static bool hasLogger(const std::string& identity);$/;"	p	line:3804	language:C++	class:el::Loggers	typeref:typename:bool	access:public	signature:(const std::string & identity)
el::Loggers::installLoggerRegistrationCallback	src/easylogging/easylogging++.h	/^  static inline bool installLoggerRegistrationCallback(const std::string& id) {$/;"	f	line:3788	language:C++	class:el::Loggers	typeref:typename:bool	access:public	signature:(const std::string & id)
el::Loggers::logStreamsReference	src/easylogging/easylogging++.cc	/^const base::LogStreamsReferenceMap* Loggers::logStreamsReference(void) {$/;"	f	line:3008	language:C++	class:el::Loggers	typeref:typename:const base::LogStreamsReferenceMap *	signature:(void)
el::Loggers::logStreamsReference	src/easylogging/easylogging++.h	/^  static const base::LogStreamsReferenceMap* logStreamsReference(void);$/;"	p	line:3827	language:C++	class:el::Loggers	typeref:typename:const base::LogStreamsReferenceMap *	access:public	signature:(void)
el::Loggers::loggerRegistrationCallback	src/easylogging/easylogging++.h	/^  static inline T* loggerRegistrationCallback(const std::string& id) {$/;"	f	line:3797	language:C++	class:el::Loggers	typeref:typename:T *	access:public	signature:(const std::string & id)
el::Loggers::populateAllLoggerIds	src/easylogging/easylogging++.cc	/^std::vector<std::string>* Loggers::populateAllLoggerIds(std::vector<std::string>* targetList) {$/;"	f	line:3018	language:C++	class:el::Loggers	typeref:typename:std::vector<std::string> *	signature:(std::vector<std::string> * targetList)
el::Loggers::populateAllLoggerIds	src/easylogging/easylogging++.h	/^  static std::vector<std::string>* populateAllLoggerIds(std::vector<std::string>* targetList);$/;"	p	line:3832	language:C++	class:el::Loggers	typeref:typename:std::vector<std::string> *	access:public	signature:(std::vector<std::string> * targetList)
el::Loggers::reconfigureAllLoggers	src/easylogging/easylogging++.cc	/^void Loggers::reconfigureAllLoggers(Level level, ConfigurationType configurationType,$/;"	f	line:2987	language:C++	class:el::Loggers	typeref:typename:void	signature:(Level level,ConfigurationType configurationType,const std::string & value)
el::Loggers::reconfigureAllLoggers	src/easylogging/easylogging++.cc	/^void Loggers::reconfigureAllLoggers(const Configurations& configurations) {$/;"	f	line:2980	language:C++	class:el::Loggers	typeref:typename:void	signature:(const Configurations & configurations)
el::Loggers::reconfigureAllLoggers	src/easylogging/easylogging++.h	/^  static inline void reconfigureAllLoggers(ConfigurationType configurationType, const std::strin/;"	f	line:3815	language:C++	class:el::Loggers	typeref:typename:void	access:public	signature:(ConfigurationType configurationType,const std::string & value)
el::Loggers::reconfigureAllLoggers	src/easylogging/easylogging++.h	/^  static void reconfigureAllLoggers(Level level, ConfigurationType configurationType,$/;"	p	line:3819	language:C++	class:el::Loggers	typeref:typename:void	access:public	signature:(Level level,ConfigurationType configurationType,const std::string & value)
el::Loggers::reconfigureAllLoggers	src/easylogging/easylogging++.h	/^  static void reconfigureAllLoggers(const Configurations& configurations);$/;"	p	line:3813	language:C++	class:el::Loggers	typeref:typename:void	access:public	signature:(const Configurations & configurations)
el::Loggers::reconfigureLogger	src/easylogging/easylogging++.cc	/^Logger* Loggers::reconfigureLogger(Logger* logger, const Configurations& configurations) {$/;"	f	line:2959	language:C++	class:el::Loggers	typeref:typename:Logger *	signature:(Logger * logger,const Configurations & configurations)
el::Loggers::reconfigureLogger	src/easylogging/easylogging++.cc	/^Logger* Loggers::reconfigureLogger(const std::string& identity, ConfigurationType configurationT/;"	f	line:2969	language:C++	class:el::Loggers	typeref:typename:Logger *	signature:(const std::string & identity,ConfigurationType configurationType,const std::string & value)
el::Loggers::reconfigureLogger	src/easylogging/easylogging++.cc	/^Logger* Loggers::reconfigureLogger(const std::string& identity, const Configurations& configurat/;"	f	line:2965	language:C++	class:el::Loggers	typeref:typename:Logger *	signature:(const std::string & identity,const Configurations & configurations)
el::Loggers::reconfigureLogger	src/easylogging/easylogging++.h	/^  static Logger* reconfigureLogger(Logger* logger, const Configurations& configurations);$/;"	p	line:3806	language:C++	class:el::Loggers	typeref:typename:Logger *	access:public	signature:(Logger * logger,const Configurations & configurations)
el::Loggers::reconfigureLogger	src/easylogging/easylogging++.h	/^  static Logger* reconfigureLogger(const std::string& identity, ConfigurationType configurationT/;"	p	line:3810	language:C++	class:el::Loggers	typeref:typename:Logger *	access:public	signature:(const std::string & identity,ConfigurationType configurationType,const std::string & value)
el::Loggers::reconfigureLogger	src/easylogging/easylogging++.h	/^  static Logger* reconfigureLogger(const std::string& identity, const Configurations& configurat/;"	p	line:3808	language:C++	class:el::Loggers	typeref:typename:Logger *	access:public	signature:(const std::string & identity,const Configurations & configurations)
el::Loggers::removeFlag	src/easylogging/easylogging++.h	/^  static inline void removeFlag(LoggingFlag flag) {$/;"	f	line:3847	language:C++	class:el::Loggers	typeref:typename:void	access:public	signature:(LoggingFlag flag)
el::Loggers::setDefaultConfigurations	src/easylogging/easylogging++.cc	/^void Loggers::setDefaultConfigurations(const Configurations& configurations, bool reconfigureExi/;"	f	line:2997	language:C++	class:el::Loggers	typeref:typename:void	signature:(const Configurations & configurations,bool reconfigureExistingLoggers)
el::Loggers::setDefaultConfigurations	src/easylogging/easylogging++.h	/^  static void setDefaultConfigurations(const Configurations& configurations,$/;"	p	line:3822	language:C++	class:el::Loggers	typeref:typename:void	access:public	signature:(const Configurations & configurations,bool reconfigureExistingLoggers=false)
el::Loggers::setDefaultLogBuilder	src/easylogging/easylogging++.cc	/^void Loggers::setDefaultLogBuilder(el::LogBuilderPtr& logBuilderPtr) {$/;"	f	line:2947	language:C++	class:el::Loggers	typeref:typename:void	signature:(el::LogBuilderPtr & logBuilderPtr)
el::Loggers::setDefaultLogBuilder	src/easylogging/easylogging++.h	/^  static void setDefaultLogBuilder(el::LogBuilderPtr& logBuilderPtr);$/;"	p	line:3785	language:C++	class:el::Loggers	typeref:typename:void	access:public	signature:(el::LogBuilderPtr & logBuilderPtr)
el::Loggers::setLoggingLevel	src/easylogging/easylogging++.h	/^  static void setLoggingLevel(Level level) {$/;"	f	line:3879	language:C++	class:el::Loggers	typeref:typename:void	access:public	signature:(Level level)
el::Loggers::setVModules	src/easylogging/easylogging++.cc	/^void Loggers::setVModules(const char* modules) {$/;"	f	line:3092	language:C++	class:el::Loggers	typeref:typename:void	signature:(const char * modules)
el::Loggers::setVModules	src/easylogging/easylogging++.h	/^  static void setVModules(const char* modules);$/;"	p	line:3887	language:C++	class:el::Loggers	typeref:typename:void	access:public	signature:(const char * modules)
el::Loggers::setVerboseLevel	src/easylogging/easylogging++.cc	/^void Loggers::setVerboseLevel(base::type::VerboseLevel level) {$/;"	f	line:3084	language:C++	class:el::Loggers	typeref:typename:void	signature:(base::type::VerboseLevel level)
el::Loggers::setVerboseLevel	src/easylogging/easylogging++.h	/^  static void setVerboseLevel(base::type::VerboseLevel level);$/;"	p	line:3883	language:C++	class:el::Loggers	typeref:typename:void	access:public	signature:(base::type::VerboseLevel level)
el::Loggers::uninstallLoggerRegistrationCallback	src/easylogging/easylogging++.h	/^  static inline void uninstallLoggerRegistrationCallback(const std::string& id) {$/;"	f	line:3793	language:C++	class:el::Loggers	typeref:typename:void	access:public	signature:(const std::string & id)
el::Loggers::unregisterLogger	src/easylogging/easylogging++.cc	/^bool Loggers::unregisterLogger(const std::string& identity) {$/;"	f	line:2951	language:C++	class:el::Loggers	typeref:typename:bool	signature:(const std::string & identity)
el::Loggers::unregisterLogger	src/easylogging/easylogging++.h	/^  static bool unregisterLogger(const std::string& identity);$/;"	p	line:3802	language:C++	class:el::Loggers	typeref:typename:bool	access:public	signature:(const std::string & identity)
el::Loggers::verboseLevel	src/easylogging/easylogging++.cc	/^base::type::VerboseLevel Loggers::verboseLevel(void) {$/;"	f	line:3088	language:C++	class:el::Loggers	typeref:typename:base::type::VerboseLevel	signature:(void)
el::Loggers::verboseLevel	src/easylogging/easylogging++.h	/^  static base::type::VerboseLevel verboseLevel(void);$/;"	p	line:3885	language:C++	class:el::Loggers	typeref:typename:base::type::VerboseLevel	access:public	signature:(void)
el::LoggingFlag	src/easylogging/easylogging++.h	/^enum class LoggingFlag : base::type::EnumType {$/;"	g	line:693	language:C++	namespace:el	typeref:typename:base::type::EnumType
el::MaxLogFileSize	src/easylogging/easylogging++.h	/^  MaxLogFileSize = 128,$/;"	e	line:657	language:C++	enum:el::ConfigurationType	access:public
el::MillisecondsWidth	src/easylogging/easylogging++.h	/^  MillisecondsWidth = SubsecondPrecision,$/;"	e	line:648	language:C++	enum:el::ConfigurationType	access:public
el::MultiLoggerSupport	src/easylogging/easylogging++.h	/^  MultiLoggerSupport = 128,$/;"	e	line:710	language:C++	enum:el::LoggingFlag	access:public
el::NewLineForContainer	src/easylogging/easylogging++.h	/^  NewLineForContainer = 1,$/;"	e	line:695	language:C++	enum:el::LoggingFlag	access:public
el::PerformanceTracking	src/easylogging/easylogging++.h	/^  PerformanceTracking = 64,$/;"	e	line:652	language:C++	enum:el::ConfigurationType	access:public
el::PerformanceTrackingCallback	src/easylogging/easylogging++.h	/^class PerformanceTrackingCallback : public Callback<PerformanceTrackingData> {$/;"	c	line:2187	language:C++	namespace:el	inherits:Callback<PerformanceTrackingData>
el::PerformanceTrackingData	src/easylogging/easylogging++.h	/^class PerformanceTrackingData {$/;"	c	line:3407	language:C++	namespace:el
el::PerformanceTrackingData::Checkpoint	src/easylogging/easylogging++.h	/^    Checkpoint = 1, Complete = 2$/;"	e	line:3410	language:C++	enum:el::PerformanceTrackingData::DataType	access:public
el::PerformanceTrackingData::Complete	src/easylogging/easylogging++.h	/^    Checkpoint = 1, Complete = 2$/;"	e	line:3410	language:C++	enum:el::PerformanceTrackingData::DataType	access:public
el::PerformanceTrackingData::DataType	src/easylogging/easylogging++.h	/^  enum class DataType : base::type::EnumType {$/;"	g	line:3409	language:C++	class:el::PerformanceTrackingData	typeref:typename:base::type::EnumType	access:public
el::PerformanceTrackingData::PerformanceTrackingData	src/easylogging/easylogging++.h	/^  explicit PerformanceTrackingData(DataType dataType) : m_performanceTracker(nullptr),$/;"	f	line:3413	language:C++	class:el::PerformanceTrackingData	access:public	signature:(DataType dataType)
el::PerformanceTrackingData::blockName	src/easylogging/easylogging++.h	/^  inline const std::string* blockName(void) const;$/;"	p	line:3415	language:C++	class:el::PerformanceTrackingData	typeref:typename:const std::string *	access:public	signature:(void) const
el::PerformanceTrackingData::blockName	src/easylogging/easylogging++.h	/^inline const std::string* PerformanceTrackingData::blockName() const {$/;"	f	line:3544	language:C++	class:el::PerformanceTrackingData	typeref:typename:const std::string *	signature:() const
el::PerformanceTrackingData::checkpointId	src/easylogging/easylogging++.h	/^  inline std::string checkpointId(void) const {$/;"	f	line:3428	language:C++	class:el::PerformanceTrackingData	typeref:typename:std::string	access:public	signature:(void) const
el::PerformanceTrackingData::dataType	src/easylogging/easylogging++.h	/^  inline PerformanceTrackingData::DataType dataType(void) const {$/;"	f	line:3422	language:C++	class:el::PerformanceTrackingData	typeref:typename:PerformanceTrackingData::DataType	access:public	signature:(void) const
el::PerformanceTrackingData::endTime	src/easylogging/easylogging++.h	/^  inline const struct timeval* endTime(void) const;$/;"	p	line:3417	language:C++	class:el::PerformanceTrackingData	typeref:typename:const struct timeval *	access:public	signature:(void) const
el::PerformanceTrackingData::endTime	src/easylogging/easylogging++.h	/^inline const struct timeval* PerformanceTrackingData::endTime() const {$/;"	f	line:3550	language:C++	class:el::PerformanceTrackingData	typeref:typename:const struct timeval *	signature:() const
el::PerformanceTrackingData::file	src/easylogging/easylogging++.h	/^  inline const char* file(void) const {$/;"	f	line:3431	language:C++	class:el::PerformanceTrackingData	typeref:typename:const char *	access:public	signature:(void) const
el::PerformanceTrackingData::firstCheckpoint	src/easylogging/easylogging++.h	/^  inline bool firstCheckpoint(void) const {$/;"	f	line:3425	language:C++	class:el::PerformanceTrackingData	typeref:typename:bool	access:public	signature:(void) const
el::PerformanceTrackingData::formattedTimeTaken	src/easylogging/easylogging++.h	/^  inline const base::type::string_t* formattedTimeTaken() const {$/;"	f	line:3440	language:C++	class:el::PerformanceTrackingData	typeref:typename:const base::type::string_t *	access:public	signature:() const
el::PerformanceTrackingData::func	src/easylogging/easylogging++.h	/^  inline const char* func(void) const {$/;"	f	line:3437	language:C++	class:el::PerformanceTrackingData	typeref:typename:const char *	access:public	signature:(void) const
el::PerformanceTrackingData::init	src/easylogging/easylogging++.h	/^  inline void init(base::PerformanceTracker* performanceTracker, bool firstCheckpoint = false) {$/;"	f	line:3453	language:C++	class:el::PerformanceTrackingData	typeref:typename:void	access:private	signature:(base::PerformanceTracker * performanceTracker,bool firstCheckpoint=false)
el::PerformanceTrackingData::lastCheckpointTime	src/easylogging/easylogging++.h	/^  inline const struct timeval* lastCheckpointTime(void) const;$/;"	p	line:3418	language:C++	class:el::PerformanceTrackingData	typeref:typename:const struct timeval *	access:public	signature:(void) const
el::PerformanceTrackingData::lastCheckpointTime	src/easylogging/easylogging++.h	/^inline const struct timeval* PerformanceTrackingData::lastCheckpointTime() const {$/;"	f	line:3553	language:C++	class:el::PerformanceTrackingData	typeref:typename:const struct timeval *	signature:() const
el::PerformanceTrackingData::line	src/easylogging/easylogging++.h	/^  inline base::type::LineNumber line(void) const {$/;"	f	line:3434	language:C++	class:el::PerformanceTrackingData	typeref:typename:base::type::LineNumber	access:public	signature:(void) const
el::PerformanceTrackingData::loggerId	src/easylogging/easylogging++.h	/^  inline const std::string& loggerId(void) const;$/;"	p	line:3443	language:C++	class:el::PerformanceTrackingData	typeref:typename:const std::string &	access:public	signature:(void) const
el::PerformanceTrackingData::loggerId	src/easylogging/easylogging++.h	/^inline const std::string& PerformanceTrackingData::loggerId(void) const {$/;"	f	line:3556	language:C++	class:el::PerformanceTrackingData	typeref:typename:const std::string &	signature:(void) const
el::PerformanceTrackingData::m_checkpointId	src/easylogging/easylogging++.h	/^  std::string m_checkpointId;$/;"	m	line:3449	language:C++	class:el::PerformanceTrackingData	typeref:typename:std::string	access:private
el::PerformanceTrackingData::m_dataType	src/easylogging/easylogging++.h	/^  PerformanceTrackingData::DataType m_dataType;$/;"	m	line:3447	language:C++	class:el::PerformanceTrackingData	typeref:typename:PerformanceTrackingData::DataType	access:private
el::PerformanceTrackingData::m_file	src/easylogging/easylogging++.h	/^  const char* m_file;$/;"	m	line:3450	language:C++	class:el::PerformanceTrackingData	typeref:typename:const char *	access:private
el::PerformanceTrackingData::m_firstCheckpoint	src/easylogging/easylogging++.h	/^  bool m_firstCheckpoint;$/;"	m	line:3448	language:C++	class:el::PerformanceTrackingData	typeref:typename:bool	access:private
el::PerformanceTrackingData::m_formattedTimeTaken	src/easylogging/easylogging++.h	/^  base::type::string_t m_formattedTimeTaken;$/;"	m	line:3446	language:C++	class:el::PerformanceTrackingData	typeref:typename:base::type::string_t	access:private
el::PerformanceTrackingData::m_func	src/easylogging/easylogging++.h	/^  const char* m_func;$/;"	m	line:3452	language:C++	class:el::PerformanceTrackingData	typeref:typename:const char *	access:private
el::PerformanceTrackingData::m_line	src/easylogging/easylogging++.h	/^  base::type::LineNumber m_line;$/;"	m	line:3451	language:C++	class:el::PerformanceTrackingData	typeref:typename:base::type::LineNumber	access:private
el::PerformanceTrackingData::m_performanceTracker	src/easylogging/easylogging++.h	/^  base::PerformanceTracker* m_performanceTracker;$/;"	m	line:3445	language:C++	class:el::PerformanceTrackingData	typeref:typename:base::PerformanceTracker *	access:private
el::PerformanceTrackingData::performanceTracker	src/easylogging/easylogging++.h	/^  inline const base::PerformanceTracker* performanceTracker(void) const {$/;"	f	line:3419	language:C++	class:el::PerformanceTrackingData	typeref:typename:const base::PerformanceTracker *	access:public	signature:(void) const
el::PerformanceTrackingData::startTime	src/easylogging/easylogging++.h	/^  inline const struct timeval* startTime(void) const;$/;"	p	line:3416	language:C++	class:el::PerformanceTrackingData	typeref:typename:const struct timeval *	access:public	signature:(void) const
el::PerformanceTrackingData::startTime	src/easylogging/easylogging++.h	/^inline const struct timeval* PerformanceTrackingData::startTime() const {$/;"	f	line:3547	language:C++	class:el::PerformanceTrackingData	typeref:typename:const struct timeval *	signature:() const
el::PreRollOutCallback	src/easylogging/easylogging++.h	/^typedef std::function<void(const char*, std::size_t)> PreRollOutCallback;$/;"	t	line:807	language:C++	namespace:el
el::StrictLogFileSizeCheck	src/easylogging/easylogging++.h	/^  StrictLogFileSizeCheck = 32,$/;"	e	line:706	language:C++	enum:el::LoggingFlag	access:public
el::StringToLevelItem	src/easylogging/easylogging++.cc	/^struct StringToLevelItem {$/;"	s	line:149	language:C++	namespace:el	file:
el::StringToLevelItem::level	src/easylogging/easylogging++.cc	/^  Level level;$/;"	m	line:151	language:C++	struct:el::StringToLevelItem	typeref:typename:Level	file:	access:public
el::StringToLevelItem::levelString	src/easylogging/easylogging++.cc	/^  const char* levelString;$/;"	m	line:150	language:C++	struct:el::StringToLevelItem	typeref:typename:const char *	file:	access:public
el::SubsecondPrecision	src/easylogging/easylogging++.h	/^  SubsecondPrecision = 32,$/;"	e	line:646	language:C++	enum:el::ConfigurationType	access:public
el::SysLogInitializer	src/easylogging/easylogging++.h	/^class SysLogInitializer {$/;"	c	line:3631	language:C++	namespace:el
el::SysLogInitializer::SysLogInitializer	src/easylogging/easylogging++.h	/^  SysLogInitializer(const char* processIdent, int options = 0, int facility = 0) {$/;"	f	line:3633	language:C++	class:el::SysLogInitializer	access:public	signature:(const char * processIdent,int options=0,int facility=0)
el::SysLogInitializer::~SysLogInitializer	src/easylogging/easylogging++.h	/^  virtual ~SysLogInitializer(void) {$/;"	f	line:3642	language:C++	class:el::SysLogInitializer	access:public	signature:(void)
el::ToFile	src/easylogging/easylogging++.h	/^  ToFile = 2,$/;"	e	line:637	language:C++	enum:el::ConfigurationType	access:public
el::ToStandardOutput	src/easylogging/easylogging++.h	/^  ToStandardOutput = 4,$/;"	e	line:640	language:C++	enum:el::ConfigurationType	access:public
el::Trace	src/easylogging/easylogging++.h	/^  Trace = 2,$/;"	e	line:576	language:C++	enum:el::Level	access:public
el::Unknown	src/easylogging/easylogging++.h	/^  Unknown = 1010$/;"	e	line:590	language:C++	enum:el::Level	access:public
el::Unknown	src/easylogging/easylogging++.h	/^  Unknown = 1010$/;"	e	line:661	language:C++	enum:el::ConfigurationType	access:public
el::Verbose	src/easylogging/easylogging++.h	/^  Verbose = 64,$/;"	e	line:586	language:C++	enum:el::Level	access:public
el::VersionInfo	src/easylogging/easylogging++.h	/^class VersionInfo : base::StaticClass {$/;"	c	line:3891	language:C++	namespace:el	inherits:base::StaticClass
el::VersionInfo::releaseDate	src/easylogging/easylogging++.cc	/^const std::string VersionInfo::releaseDate(void) {$/;"	f	line:3108	language:C++	class:el::VersionInfo	typeref:typename:const std::string	signature:(void)
el::VersionInfo::releaseDate	src/easylogging/easylogging++.h	/^  static const std::string releaseDate(void);$/;"	p	line:3897	language:C++	class:el::VersionInfo	typeref:typename:const std::string	access:public	signature:(void)
el::VersionInfo::version	src/easylogging/easylogging++.cc	/^const std::string VersionInfo::version(void) {$/;"	f	line:3104	language:C++	class:el::VersionInfo	typeref:typename:const std::string	signature:(void)
el::VersionInfo::version	src/easylogging/easylogging++.h	/^  static const std::string version(void);$/;"	p	line:3894	language:C++	class:el::VersionInfo	typeref:typename:const std::string	access:public	signature:(void)
el::Warning	src/easylogging/easylogging++.h	/^  Warning = 32,$/;"	e	line:584	language:C++	enum:el::Level	access:public
el::base	src/easylogging/easylogging++.cc	/^namespace base {$/;"	n	line:2203	language:C++	namespace:el	file:
el::base	src/easylogging/easylogging++.cc	/^namespace base {$/;"	n	line:26	language:C++	namespace:el	file:
el::base	src/easylogging/easylogging++.cc	/^namespace base {$/;"	n	line:724	language:C++	namespace:el	file:
el::base	src/easylogging/easylogging++.h	/^namespace base {$/;"	n	line:1572	language:C++	namespace:el
el::base	src/easylogging/easylogging++.h	/^namespace base {$/;"	n	line:1893	language:C++	namespace:el
el::base	src/easylogging/easylogging++.h	/^namespace base {$/;"	n	line:2343	language:C++	namespace:el
el::base	src/easylogging/easylogging++.h	/^namespace base {$/;"	n	line:2489	language:C++	namespace:el
el::base	src/easylogging/easylogging++.h	/^namespace base {$/;"	n	line:2762	language:C++	namespace:el
el::base	src/easylogging/easylogging++.h	/^namespace base {$/;"	n	line:3460	language:C++	namespace:el
el::base	src/easylogging/easylogging++.h	/^namespace base {$/;"	n	line:3560	language:C++	namespace:el
el::base	src/easylogging/easylogging++.h	/^namespace base {$/;"	n	line:480	language:C++	namespace:el
el::base	src/easylogging/easylogging++.h	/^namespace base {$/;"	n	line:500	language:C++	namespace:el
el::base	src/easylogging/easylogging++.h	/^namespace base {$/;"	n	line:728	language:C++	namespace:el
el::base	src/easylogging/easylogging++.h	/^namespace base {$/;"	n	line:808	language:C++	namespace:el
el::base::AppName	src/easylogging/easylogging++.h	/^  AppName = 1 << 11,$/;"	e	line:826	language:C++	enum:el::base::FormatFlags	access:public
el::base::AsyncDispatchWorker	src/easylogging/easylogging++.h	/^class AsyncDispatchWorker : public base::IWorker, public base::threading::ThreadSafe {$/;"	c	line:2736	language:C++	namespace:el::base	inherits:base::IWorker,base::threading::ThreadSafe
el::base::AsyncDispatchWorker::AsyncDispatchWorker	src/easylogging/easylogging++.cc	/^AsyncDispatchWorker::AsyncDispatchWorker() {$/;"	f	line:2293	language:C++	class:el::base::AsyncDispatchWorker	signature:()
el::base::AsyncDispatchWorker::AsyncDispatchWorker	src/easylogging/easylogging++.h	/^  AsyncDispatchWorker();$/;"	p	line:2738	language:C++	class:el::base::AsyncDispatchWorker	access:public	signature:()
el::base::AsyncDispatchWorker::clean	src/easylogging/easylogging++.cc	/^bool AsyncDispatchWorker::clean(void) {$/;"	f	line:2304	language:C++	class:el::base::AsyncDispatchWorker	typeref:typename:bool	signature:(void)
el::base::AsyncDispatchWorker::clean	src/easylogging/easylogging++.h	/^  bool clean(void);$/;"	p	line:2741	language:C++	class:el::base::AsyncDispatchWorker	typeref:typename:bool	access:public	signature:(void)
el::base::AsyncDispatchWorker::continueRunning	src/easylogging/easylogging++.h	/^  bool continueRunning(void) const {$/;"	f	line:2752	language:C++	class:el::base::AsyncDispatchWorker	typeref:typename:bool	access:public	signature:(void) const
el::base::AsyncDispatchWorker::cv	src/easylogging/easylogging++.h	/^  std::condition_variable cv;$/;"	m	line:2756	language:C++	class:el::base::AsyncDispatchWorker	typeref:typename:std::condition_variable	access:private
el::base::AsyncDispatchWorker::emptyQueue	src/easylogging/easylogging++.cc	/^void AsyncDispatchWorker::emptyQueue(void) {$/;"	f	line:2314	language:C++	class:el::base::AsyncDispatchWorker	typeref:typename:void	signature:(void)
el::base::AsyncDispatchWorker::emptyQueue	src/easylogging/easylogging++.h	/^  void emptyQueue(void);$/;"	p	line:2742	language:C++	class:el::base::AsyncDispatchWorker	typeref:typename:void	access:public	signature:(void)
el::base::AsyncDispatchWorker::handle	src/easylogging/easylogging++.cc	/^void AsyncDispatchWorker::handle(AsyncLogItem* logItem) {$/;"	f	line:2329	language:C++	class:el::base::AsyncDispatchWorker	typeref:typename:void	signature:(AsyncLogItem * logItem)
el::base::AsyncDispatchWorker::handle	src/easylogging/easylogging++.h	/^  void handle(AsyncLogItem* logItem);$/;"	p	line:2744	language:C++	class:el::base::AsyncDispatchWorker	typeref:typename:void	access:public	signature:(AsyncLogItem * logItem)
el::base::AsyncDispatchWorker::m_continueRunning	src/easylogging/easylogging++.h	/^  bool m_continueRunning;$/;"	m	line:2757	language:C++	class:el::base::AsyncDispatchWorker	typeref:typename:bool	access:private
el::base::AsyncDispatchWorker::m_continueRunningLock	src/easylogging/easylogging++.h	/^  base::threading::Mutex m_continueRunningLock;$/;"	m	line:2758	language:C++	class:el::base::AsyncDispatchWorker	typeref:typename:base::threading::Mutex	access:private
el::base::AsyncDispatchWorker::run	src/easylogging/easylogging++.cc	/^void AsyncDispatchWorker::run(void) {$/;"	f	line:2383	language:C++	class:el::base::AsyncDispatchWorker	typeref:typename:void	signature:(void)
el::base::AsyncDispatchWorker::run	src/easylogging/easylogging++.h	/^  void run(void);$/;"	p	line:2745	language:C++	class:el::base::AsyncDispatchWorker	typeref:typename:void	access:public	signature:(void)
el::base::AsyncDispatchWorker::setContinueRunning	src/easylogging/easylogging++.h	/^  void setContinueRunning(bool value) {$/;"	f	line:2747	language:C++	class:el::base::AsyncDispatchWorker	typeref:typename:void	access:public	signature:(bool value)
el::base::AsyncDispatchWorker::start	src/easylogging/easylogging++.cc	/^void AsyncDispatchWorker::start(void) {$/;"	f	line:2322	language:C++	class:el::base::AsyncDispatchWorker	typeref:typename:void	signature:(void)
el::base::AsyncDispatchWorker::start	src/easylogging/easylogging++.h	/^  virtual void start(void);$/;"	p	line:2743	language:C++	class:el::base::AsyncDispatchWorker	typeref:typename:void	access:public	signature:(void)
el::base::AsyncDispatchWorker::~AsyncDispatchWorker	src/easylogging/easylogging++.cc	/^AsyncDispatchWorker::~AsyncDispatchWorker() {$/;"	f	line:2297	language:C++	class:el::base::AsyncDispatchWorker	signature:()
el::base::AsyncDispatchWorker::~AsyncDispatchWorker	src/easylogging/easylogging++.h	/^  virtual ~AsyncDispatchWorker();$/;"	p	line:2739	language:C++	class:el::base::AsyncDispatchWorker	access:public	signature:()
el::base::AsyncLogDispatchCallback	src/easylogging/easylogging++.h	/^class AsyncLogDispatchCallback : public LogDispatchCallback {$/;"	c	line:2732	language:C++	namespace:el::base	inherits:LogDispatchCallback
el::base::AsyncLogDispatchCallback::handle	src/easylogging/easylogging++.cc	/^void AsyncLogDispatchCallback::handle(const LogDispatchData* data) {$/;"	f	line:2277	language:C++	class:el::base::AsyncLogDispatchCallback	typeref:typename:void	signature:(const LogDispatchData * data)
el::base::AsyncLogDispatchCallback::handle	src/easylogging/easylogging++.h	/^  void handle(const LogDispatchData* data);$/;"	p	line:2734	language:C++	class:el::base::AsyncLogDispatchCallback	typeref:typename:void	access:protected	signature:(const LogDispatchData * data)
el::base::AsyncLogItem	src/easylogging/easylogging++.h	/^class AsyncLogItem {$/;"	c	line:2491	language:C++	namespace:el::base
el::base::AsyncLogItem::AsyncLogItem	src/easylogging/easylogging++.h	/^  explicit AsyncLogItem(const LogMessage& logMessage, const LogDispatchData& data, const base::t/;"	f	line:2493	language:C++	class:el::base::AsyncLogItem	access:public	signature:(const LogMessage & logMessage,const LogDispatchData & data,const base::type::string_t & logLine)
el::base::AsyncLogItem::data	src/easylogging/easylogging++.h	/^  inline LogDispatchData* data(void) {$/;"	f	line:2499	language:C++	class:el::base::AsyncLogItem	typeref:typename:LogDispatchData *	access:public	signature:(void)
el::base::AsyncLogItem::logLine	src/easylogging/easylogging++.h	/^  inline base::type::string_t logLine(void) {$/;"	f	line:2502	language:C++	class:el::base::AsyncLogItem	typeref:typename:base::type::string_t	access:public	signature:(void)
el::base::AsyncLogItem::logMessage	src/easylogging/easylogging++.h	/^  inline LogMessage* logMessage(void) {$/;"	f	line:2496	language:C++	class:el::base::AsyncLogItem	typeref:typename:LogMessage *	access:public	signature:(void)
el::base::AsyncLogItem::m_dispatchData	src/easylogging/easylogging++.h	/^  LogDispatchData m_dispatchData;$/;"	m	line:2507	language:C++	class:el::base::AsyncLogItem	typeref:typename:LogDispatchData	access:private
el::base::AsyncLogItem::m_logLine	src/easylogging/easylogging++.h	/^  base::type::string_t m_logLine;$/;"	m	line:2508	language:C++	class:el::base::AsyncLogItem	typeref:typename:base::type::string_t	access:private
el::base::AsyncLogItem::m_logMessage	src/easylogging/easylogging++.h	/^  LogMessage m_logMessage;$/;"	m	line:2506	language:C++	class:el::base::AsyncLogItem	typeref:typename:LogMessage	access:private
el::base::AsyncLogItem::~AsyncLogItem	src/easylogging/easylogging++.h	/^  virtual ~AsyncLogItem() {}$/;"	f	line:2495	language:C++	class:el::base::AsyncLogItem	access:public	signature:()
el::base::AsyncLogQueue	src/easylogging/easylogging++.h	/^class AsyncLogQueue : public base::threading::ThreadSafe {$/;"	c	line:2510	language:C++	namespace:el::base	inherits:base::threading::ThreadSafe
el::base::AsyncLogQueue::empty	src/easylogging/easylogging++.h	/^  inline bool empty(void) {$/;"	f	line:2535	language:C++	class:el::base::AsyncLogQueue	typeref:typename:bool	access:public	signature:(void)
el::base::AsyncLogQueue::front	src/easylogging/easylogging++.h	/^  inline AsyncLogItem front(void) {$/;"	f	line:2531	language:C++	class:el::base::AsyncLogQueue	typeref:typename:AsyncLogItem	access:public	signature:(void)
el::base::AsyncLogQueue::m_queue	src/easylogging/easylogging++.h	/^  std::queue<AsyncLogItem> m_queue;$/;"	m	line:2540	language:C++	class:el::base::AsyncLogQueue	typeref:typename:std::queue<AsyncLogItem>	access:private
el::base::AsyncLogQueue::next	src/easylogging/easylogging++.h	/^  inline AsyncLogItem next(void) {$/;"	f	line:2516	language:C++	class:el::base::AsyncLogQueue	typeref:typename:AsyncLogItem	access:public	signature:(void)
el::base::AsyncLogQueue::pop	src/easylogging/easylogging++.h	/^  inline void pop(void) {$/;"	f	line:2527	language:C++	class:el::base::AsyncLogQueue	typeref:typename:void	access:public	signature:(void)
el::base::AsyncLogQueue::push	src/easylogging/easylogging++.h	/^  inline void push(const AsyncLogItem& item) {$/;"	f	line:2523	language:C++	class:el::base::AsyncLogQueue	typeref:typename:void	access:public	signature:(const AsyncLogItem & item)
el::base::AsyncLogQueue::~AsyncLogQueue	src/easylogging/easylogging++.h	/^  virtual ~AsyncLogQueue() {$/;"	f	line:2512	language:C++	class:el::base::AsyncLogQueue	access:public	signature:()
el::base::DateTime	src/easylogging/easylogging++.h	/^  DateTime = 1 << 1,$/;"	e	line:816	language:C++	enum:el::base::FormatFlags	access:public
el::base::Day	src/easylogging/easylogging++.h	/^  Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	e	line:812	language:C++	enum:el::base::TimestampUnit	access:public
el::base::DefaultLogBuilder	src/easylogging/easylogging++.h	/^class DefaultLogBuilder : public LogBuilder {$/;"	c	line:2763	language:C++	namespace:el::base	inherits:LogBuilder
el::base::DefaultLogBuilder::build	src/easylogging/easylogging++.cc	/^base::type::string_t DefaultLogBuilder::build(const LogMessage* logMessage, bool appendNewLine) /;"	f	line:2393	language:C++	class:el::base::DefaultLogBuilder	typeref:typename:base::type::string_t	signature:(const LogMessage * logMessage,bool appendNewLine) const
el::base::DefaultLogBuilder::build	src/easylogging/easylogging++.h	/^  base::type::string_t build(const LogMessage* logMessage, bool appendNewLine) const;$/;"	p	line:2765	language:C++	class:el::base::DefaultLogBuilder	typeref:typename:base::type::string_t	access:public	signature:(const LogMessage * logMessage,bool appendNewLine) const
el::base::DefaultLogDispatchCallback	src/easylogging/easylogging++.h	/^class DefaultLogDispatchCallback : public LogDispatchCallback {$/;"	c	line:2724	language:C++	namespace:el::base	inherits:LogDispatchCallback
el::base::DefaultLogDispatchCallback::dispatch	src/easylogging/easylogging++.cc	/^void DefaultLogDispatchCallback::dispatch(base::type::string_t&& logLine) {$/;"	f	line:2216	language:C++	class:el::base::DefaultLogDispatchCallback	typeref:typename:void	signature:(base::type::string_t && logLine)
el::base::DefaultLogDispatchCallback::dispatch	src/easylogging/easylogging++.h	/^  void dispatch(base::type::string_t&& logLine);$/;"	p	line:2729	language:C++	class:el::base::DefaultLogDispatchCallback	typeref:typename:void	access:private	signature:(base::type::string_t && logLine)
el::base::DefaultLogDispatchCallback::handle	src/easylogging/easylogging++.cc	/^void DefaultLogDispatchCallback::handle(const LogDispatchData* data) {$/;"	f	line:2206	language:C++	class:el::base::DefaultLogDispatchCallback	typeref:typename:void	signature:(const LogDispatchData * data)
el::base::DefaultLogDispatchCallback::handle	src/easylogging/easylogging++.h	/^  void handle(const LogDispatchData* data);$/;"	p	line:2726	language:C++	class:el::base::DefaultLogDispatchCallback	typeref:typename:void	access:protected	signature:(const LogDispatchData * data)
el::base::DefaultLogDispatchCallback::m_data	src/easylogging/easylogging++.h	/^  const LogDispatchData* m_data;$/;"	m	line:2728	language:C++	class:el::base::DefaultLogDispatchCallback	typeref:typename:const LogDispatchData *	access:private
el::base::DefaultPerformanceTrackingCallback	src/easylogging/easylogging++.h	/^class DefaultPerformanceTrackingCallback : public PerformanceTrackingCallback {$/;"	c	line:3509	language:C++	namespace:el::base	inherits:PerformanceTrackingCallback
el::base::DefaultPerformanceTrackingCallback::handle	src/easylogging/easylogging++.h	/^  void handle(const PerformanceTrackingData* data) {$/;"	f	line:3511	language:C++	class:el::base::DefaultPerformanceTrackingCallback	typeref:typename:void	access:protected	signature:(const PerformanceTrackingData * data)
el::base::DefaultPerformanceTrackingCallback::m_data	src/easylogging/easylogging++.h	/^  const PerformanceTrackingData* m_data;$/;"	m	line:3541	language:C++	class:el::base::DefaultPerformanceTrackingCallback	typeref:typename:const PerformanceTrackingData *	access:private
el::base::DispatchAction	src/easylogging/easylogging++.h	/^enum class DispatchAction : base::type::EnumType {$/;"	g	line:2137	language:C++	namespace:el::base	typeref:typename:base::type::EnumType
el::base::File	src/easylogging/easylogging++.h	/^  File = 1 << 3,$/;"	e	line:818	language:C++	enum:el::base::FormatFlags	access:public
el::base::FileBase	src/easylogging/easylogging++.h	/^  FileBase = 1 << 14,$/;"	e	line:829	language:C++	enum:el::base::FormatFlags	access:public
el::base::FileStreamPtr	src/easylogging/easylogging++.h	/^typedef std::shared_ptr<base::type::fstream_t> FileStreamPtr;$/;"	t	line:1894	language:C++	namespace:el::base	typeref:typename:std::shared_ptr<base::type::fstream_t>
el::base::FormatFlags	src/easylogging/easylogging++.h	/^enum class FormatFlags : base::type::EnumType {$/;"	g	line:815	language:C++	namespace:el::base	typeref:typename:base::type::EnumType
el::base::Function	src/easylogging/easylogging++.h	/^  Function = 1 << 6,$/;"	e	line:821	language:C++	enum:el::base::FormatFlags	access:public
el::base::HitCounter	src/easylogging/easylogging++.h	/^class HitCounter {$/;"	c	line:2031	language:C++	namespace:el::base
el::base::HitCounter::HitCounter	src/easylogging/easylogging++.h	/^  HitCounter(const HitCounter& hitCounter) :$/;"	f	line:2045	language:C++	class:el::base::HitCounter	access:public	signature:(const HitCounter & hitCounter)
el::base::HitCounter::HitCounter	src/easylogging/easylogging++.h	/^  HitCounter(const char* filename, base::type::LineNumber lineNumber) :$/;"	f	line:2039	language:C++	class:el::base::HitCounter	access:public	signature:(const char * filename,base::type::LineNumber lineNumber)
el::base::HitCounter::HitCounter	src/easylogging/easylogging++.h	/^  HitCounter(void) :$/;"	f	line:2033	language:C++	class:el::base::HitCounter	access:public	signature:(void)
el::base::HitCounter::Predicate	src/easylogging/easylogging++.h	/^  class Predicate {$/;"	c	line:2093	language:C++	class:el::base::HitCounter	access:public
el::base::HitCounter::Predicate::Predicate	src/easylogging/easylogging++.h	/^    Predicate(const char* filename, base::type::LineNumber lineNumber)$/;"	f	line:2095	language:C++	class:el::base::HitCounter::Predicate	access:public	signature:(const char * filename,base::type::LineNumber lineNumber)
el::base::HitCounter::Predicate::m_filename	src/easylogging/easylogging++.h	/^    const char* m_filename;$/;"	m	line:2106	language:C++	class:el::base::HitCounter::Predicate	typeref:typename:const char *	access:private
el::base::HitCounter::Predicate::m_lineNumber	src/easylogging/easylogging++.h	/^    base::type::LineNumber m_lineNumber;$/;"	m	line:2107	language:C++	class:el::base::HitCounter::Predicate	typeref:typename:base::type::LineNumber	access:private
el::base::HitCounter::Predicate::operator ()	src/easylogging/easylogging++.h	/^    inline bool operator()(const HitCounter* counter) {$/;"	f	line:2099	language:C++	class:el::base::HitCounter::Predicate	typeref:typename:bool	access:public	signature:(const HitCounter * counter)
el::base::HitCounter::filename	src/easylogging/easylogging++.h	/^  inline const char* filename(void) const {$/;"	f	line:2077	language:C++	class:el::base::HitCounter	typeref:typename:const char *	access:public	signature:(void) const
el::base::HitCounter::hitCounts	src/easylogging/easylogging++.h	/^  inline std::size_t hitCounts(void) const {$/;"	f	line:2085	language:C++	class:el::base::HitCounter	typeref:typename:std::size_t	access:public	signature:(void) const
el::base::HitCounter::increment	src/easylogging/easylogging++.h	/^  inline void increment(void) {$/;"	f	line:2089	language:C++	class:el::base::HitCounter	typeref:typename:void	access:public	signature:(void)
el::base::HitCounter::lineNumber	src/easylogging/easylogging++.h	/^  inline base::type::LineNumber lineNumber(void) const {$/;"	f	line:2081	language:C++	class:el::base::HitCounter	typeref:typename:base::type::LineNumber	access:public	signature:(void) const
el::base::HitCounter::m_filename	src/easylogging/easylogging++.h	/^  const char* m_filename;$/;"	m	line:2111	language:C++	class:el::base::HitCounter	typeref:typename:const char *	access:private
el::base::HitCounter::m_hitCounts	src/easylogging/easylogging++.h	/^  std::size_t m_hitCounts;$/;"	m	line:2113	language:C++	class:el::base::HitCounter	typeref:typename:std::size_t	access:private
el::base::HitCounter::m_lineNumber	src/easylogging/easylogging++.h	/^  base::type::LineNumber m_lineNumber;$/;"	m	line:2112	language:C++	class:el::base::HitCounter	typeref:typename:base::type::LineNumber	access:private
el::base::HitCounter::operator =	src/easylogging/easylogging++.h	/^  HitCounter& operator=(const HitCounter& hitCounter) {$/;"	f	line:2051	language:C++	class:el::base::HitCounter	typeref:typename:HitCounter &	access:public	signature:(const HitCounter & hitCounter)
el::base::HitCounter::resetLocation	src/easylogging/easylogging++.h	/^  inline void resetLocation(const char* filename, base::type::LineNumber lineNumber) {$/;"	f	line:2064	language:C++	class:el::base::HitCounter	typeref:typename:void	access:public	signature:(const char * filename,base::type::LineNumber lineNumber)
el::base::HitCounter::validateHitCounts	src/easylogging/easylogging++.h	/^  inline void validateHitCounts(std::size_t n) {$/;"	f	line:2070	language:C++	class:el::base::HitCounter	typeref:typename:void	access:public	signature:(std::size_t n)
el::base::HitCounter::~HitCounter	src/easylogging/easylogging++.h	/^  virtual ~HitCounter(void) {$/;"	f	line:2060	language:C++	class:el::base::HitCounter	access:public	signature:(void)
el::base::Host	src/easylogging/easylogging++.h	/^  Host = 1 << 8,$/;"	e	line:823	language:C++	enum:el::base::FormatFlags	access:public
el::base::Hour	src/easylogging/easylogging++.h	/^  Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	e	line:812	language:C++	enum:el::base::TimestampUnit	access:public
el::base::IWorker	src/easylogging/easylogging++.h	/^class IWorker {$/;"	c	line:2542	language:C++	namespace:el::base
el::base::IWorker::start	src/easylogging/easylogging++.h	/^  virtual void start() = 0;$/;"	p	line:2545	language:C++	class:el::base::IWorker	typeref:typename:void	access:public	signature:()
el::base::IWorker::~IWorker	src/easylogging/easylogging++.h	/^  virtual ~IWorker() {}$/;"	f	line:2544	language:C++	class:el::base::IWorker	access:public	signature:()
el::base::Level	src/easylogging/easylogging++.h	/^  Level = 1 << 13,$/;"	e	line:828	language:C++	enum:el::base::FormatFlags	access:public
el::base::LevelShort	src/easylogging/easylogging++.h	/^  LevelShort = 1 << 15$/;"	e	line:830	language:C++	enum:el::base::FormatFlags	access:public
el::base::Line	src/easylogging/easylogging++.h	/^  Line = 1 << 4,$/;"	e	line:819	language:C++	enum:el::base::FormatFlags	access:public
el::base::Location	src/easylogging/easylogging++.h	/^  Location = 1 << 5,$/;"	e	line:820	language:C++	enum:el::base::FormatFlags	access:public
el::base::LogDispatcher	src/easylogging/easylogging++.h	/^class LogDispatcher : base::NoCopy {$/;"	c	line:2768	language:C++	namespace:el::base	inherits:base::NoCopy
el::base::LogDispatcher::LogDispatcher	src/easylogging/easylogging++.h	/^  LogDispatcher(bool proceed, LogMessage* logMessage, base::DispatchAction dispatchAction) :$/;"	f	line:2770	language:C++	class:el::base::LogDispatcher	access:public	signature:(bool proceed,LogMessage * logMessage,base::DispatchAction dispatchAction)
el::base::LogDispatcher::dispatch	src/easylogging/easylogging++.cc	/^void LogDispatcher::dispatch(void) {$/;"	f	line:2474	language:C++	class:el::base::LogDispatcher	typeref:typename:void	signature:(void)
el::base::LogDispatcher::dispatch	src/easylogging/easylogging++.h	/^  void dispatch(void);$/;"	p	line:2776	language:C++	class:el::base::LogDispatcher	typeref:typename:void	access:public	signature:(void)
el::base::LogDispatcher::m_dispatchAction	src/easylogging/easylogging++.h	/^  base::DispatchAction m_dispatchAction;$/;"	m	line:2781	language:C++	class:el::base::LogDispatcher	typeref:typename:base::DispatchAction	access:private
el::base::LogDispatcher::m_logMessage	src/easylogging/easylogging++.h	/^  LogMessage* m_logMessage;$/;"	m	line:2780	language:C++	class:el::base::LogDispatcher	typeref:typename:LogMessage *	access:private
el::base::LogDispatcher::m_proceed	src/easylogging/easylogging++.h	/^  bool m_proceed;$/;"	m	line:2779	language:C++	class:el::base::LogDispatcher	typeref:typename:bool	access:private
el::base::LogFormat	src/easylogging/easylogging++.h	/^class LogFormat : public Loggable {$/;"	c	line:1574	language:C++	namespace:el::base	inherits:Loggable
el::base::LogFormat::LogFormat	src/easylogging/easylogging++.cc	/^LogFormat::LogFormat(Level level, const base::type::string_t& format)$/;"	f	line:1444	language:C++	class:el::base::LogFormat	signature:(Level level,const base::type::string_t & format)
el::base::LogFormat::LogFormat	src/easylogging/easylogging++.cc	/^LogFormat::LogFormat(LogFormat&& logFormat) {$/;"	f	line:1460	language:C++	class:el::base::LogFormat	signature:(LogFormat && logFormat)
el::base::LogFormat::LogFormat	src/easylogging/easylogging++.cc	/^LogFormat::LogFormat(const LogFormat& logFormat):$/;"	f	line:1450	language:C++	class:el::base::LogFormat	signature:(const LogFormat & logFormat)
el::base::LogFormat::LogFormat	src/easylogging/easylogging++.cc	/^LogFormat::LogFormat(void) :$/;"	f	line:1434	language:C++	class:el::base::LogFormat	signature:(void)
el::base::LogFormat::LogFormat	src/easylogging/easylogging++.h	/^  LogFormat(Level level, const base::type::string_t& format);$/;"	p	line:1577	language:C++	class:el::base::LogFormat	access:public	signature:(Level level,const base::type::string_t & format)
el::base::LogFormat::LogFormat	src/easylogging/easylogging++.h	/^  LogFormat(LogFormat&& logFormat);$/;"	p	line:1579	language:C++	class:el::base::LogFormat	access:public	signature:(LogFormat && logFormat)
el::base::LogFormat::LogFormat	src/easylogging/easylogging++.h	/^  LogFormat(const LogFormat& logFormat);$/;"	p	line:1578	language:C++	class:el::base::LogFormat	access:public	signature:(const LogFormat & logFormat)
el::base::LogFormat::LogFormat	src/easylogging/easylogging++.h	/^  LogFormat(void);$/;"	p	line:1576	language:C++	class:el::base::LogFormat	access:public	signature:(void)
el::base::LogFormat::addFlag	src/easylogging/easylogging++.h	/^  inline void addFlag(base::FormatFlags flag) {$/;"	f	line:1625	language:C++	class:el::base::LogFormat	typeref:typename:void	access:protected	signature:(base::FormatFlags flag)
el::base::LogFormat::dateTimeFormat	src/easylogging/easylogging++.h	/^  inline const std::string& dateTimeFormat(void) const {$/;"	f	line:1600	language:C++	class:el::base::LogFormat	typeref:typename:const std::string &	access:public	signature:(void) const
el::base::LogFormat::flags	src/easylogging/easylogging++.h	/^  inline base::type::EnumType flags(void) const {$/;"	f	line:1604	language:C++	class:el::base::LogFormat	typeref:typename:base::type::EnumType	access:public	signature:(void) const
el::base::LogFormat::format	src/easylogging/easylogging++.h	/^  inline const base::type::string_t& format(void) const {$/;"	f	line:1596	language:C++	class:el::base::LogFormat	typeref:typename:const base::type::string_t &	access:public	signature:(void) const
el::base::LogFormat::hasFlag	src/easylogging/easylogging++.h	/^  inline bool hasFlag(base::FormatFlags flag) const {$/;"	f	line:1608	language:C++	class:el::base::LogFormat	typeref:typename:bool	access:public	signature:(base::FormatFlags flag) const
el::base::LogFormat::level	src/easylogging/easylogging++.h	/^  inline Level level(void) const {$/;"	f	line:1588	language:C++	class:el::base::LogFormat	typeref:typename:Level	access:public	signature:(void) const
el::base::LogFormat::log	src/easylogging/easylogging++.h	/^  virtual void log(el::base::type::ostream_t& os) const {$/;"	f	line:1612	language:C++	class:el::base::LogFormat	typeref:typename:void	access:public	signature:(el::base::type::ostream_t & os) const
el::base::LogFormat::m_currentHost	src/easylogging/easylogging++.h	/^  std::string m_currentHost;$/;"	m	line:1636	language:C++	class:el::base::LogFormat	typeref:typename:std::string	access:private
el::base::LogFormat::m_currentUser	src/easylogging/easylogging++.h	/^  std::string m_currentUser;$/;"	m	line:1635	language:C++	class:el::base::LogFormat	typeref:typename:std::string	access:private
el::base::LogFormat::m_dateTimeFormat	src/easylogging/easylogging++.h	/^  std::string m_dateTimeFormat;$/;"	m	line:1633	language:C++	class:el::base::LogFormat	typeref:typename:std::string	access:private
el::base::LogFormat::m_flags	src/easylogging/easylogging++.h	/^  base::type::EnumType m_flags;$/;"	m	line:1634	language:C++	class:el::base::LogFormat	typeref:typename:base::type::EnumType	access:private
el::base::LogFormat::m_format	src/easylogging/easylogging++.h	/^  base::type::string_t m_format;$/;"	m	line:1632	language:C++	class:el::base::LogFormat	typeref:typename:base::type::string_t	access:private
el::base::LogFormat::m_level	src/easylogging/easylogging++.h	/^  Level m_level;$/;"	m	line:1630	language:C++	class:el::base::LogFormat	typeref:typename:Level	access:private
el::base::LogFormat::m_userFormat	src/easylogging/easylogging++.h	/^  base::type::string_t m_userFormat;$/;"	m	line:1631	language:C++	class:el::base::LogFormat	typeref:typename:base::type::string_t	access:private
el::base::LogFormat::operator =	src/easylogging/easylogging++.cc	/^LogFormat& LogFormat::operator=(const LogFormat& logFormat) {$/;"	f	line:1470	language:C++	class:el::base::LogFormat	typeref:typename:LogFormat &	signature:(const LogFormat & logFormat)
el::base::LogFormat::operator =	src/easylogging/easylogging++.h	/^  LogFormat& operator=(const LogFormat& logFormat);$/;"	p	line:1580	language:C++	class:el::base::LogFormat	typeref:typename:LogFormat &	access:public	signature:(const LogFormat & logFormat)
el::base::LogFormat::operator ==	src/easylogging/easylogging++.cc	/^bool LogFormat::operator==(const LogFormat& other) {$/;"	f	line:1482	language:C++	class:el::base::LogFormat	typeref:typename:bool	signature:(const LogFormat & other)
el::base::LogFormat::operator ==	src/easylogging/easylogging++.h	/^  bool operator==(const LogFormat& other);$/;"	p	line:1582	language:C++	class:el::base::LogFormat	typeref:typename:bool	access:public	signature:(const LogFormat & other)
el::base::LogFormat::parseFromFormat	src/easylogging/easylogging++.cc	/^void LogFormat::parseFromFormat(const base::type::string_t& userFormat) {$/;"	f	line:1489	language:C++	class:el::base::LogFormat	typeref:typename:void	signature:(const base::type::string_t & userFormat)
el::base::LogFormat::parseFromFormat	src/easylogging/easylogging++.h	/^  void parseFromFormat(const base::type::string_t& userFormat);$/;"	p	line:1586	language:C++	class:el::base::LogFormat	typeref:typename:void	access:public	signature:(const base::type::string_t & userFormat)
el::base::LogFormat::updateDateFormat	src/easylogging/easylogging++.cc	/^void LogFormat::updateDateFormat(std::size_t index, base::type::string_t& currFormat) {$/;"	f	line:1539	language:C++	class:el::base::LogFormat	typeref:typename:void	signature:(std::size_t index,base::type::string_t & currFormat)
el::base::LogFormat::updateDateFormat	src/easylogging/easylogging++.h	/^  virtual void updateDateFormat(std::size_t index, base::type::string_t& currFormat) ELPP_FINAL;$/;"	p	line:1620	language:C++	class:el::base::LogFormat	typeref:typename:void	access:protected	signature:(std::size_t index,base::type::string_t & currFormat)
el::base::LogFormat::updateFormatSpec	src/easylogging/easylogging++.cc	/^void LogFormat::updateFormatSpec(void) {$/;"	f	line:1566	language:C++	class:el::base::LogFormat	typeref:typename:void	signature:(void)
el::base::LogFormat::updateFormatSpec	src/easylogging/easylogging++.h	/^  virtual void updateFormatSpec(void) ELPP_FINAL;$/;"	p	line:1623	language:C++	class:el::base::LogFormat	typeref:typename:void	access:protected	signature:(void)
el::base::LogFormat::userFormat	src/easylogging/easylogging++.h	/^  inline const base::type::string_t& userFormat(void) const {$/;"	f	line:1592	language:C++	class:el::base::LogFormat	typeref:typename:const base::type::string_t &	access:public	signature:(void) const
el::base::LogFormat::~LogFormat	src/easylogging/easylogging++.h	/^  virtual ~LogFormat(void) {}$/;"	f	line:1581	language:C++	class:el::base::LogFormat	access:public	signature:(void)
el::base::LogMessage	src/easylogging/easylogging++.h	/^  LogMessage = 1 << 9,$/;"	e	line:824	language:C++	enum:el::base::FormatFlags	access:public
el::base::LogStreamsReferenceMap	src/easylogging/easylogging++.h	/^typedef std::unordered_map<std::string, FileStreamPtr> LogStreamsReferenceMap;$/;"	t	line:1895	language:C++	namespace:el::base	typeref:typename:std::unordered_map<std::string,FileStreamPtr>
el::base::LoggerId	src/easylogging/easylogging++.h	/^  LoggerId = 1 << 2,$/;"	e	line:817	language:C++	enum:el::base::FormatFlags	access:public
el::base::MessageBuilder	src/easylogging/easylogging++.h	/^class MessageBuilder {$/;"	c	line:2860	language:C++	namespace:el::base
el::base::MessageBuilder::MessageBuilder	src/easylogging/easylogging++.h	/^  MessageBuilder(void) : m_logger(nullptr), m_containerLogSeperator(ELPP_LITERAL("")) {}$/;"	f	line:2862	language:C++	class:el::base::MessageBuilder	access:public	signature:(void)
el::base::MessageBuilder::initialize	src/easylogging/easylogging++.cc	/^void MessageBuilder::initialize(Logger* logger) {$/;"	f	line:2506	language:C++	class:el::base::MessageBuilder	typeref:typename:void	signature:(Logger * logger)
el::base::MessageBuilder::initialize	src/easylogging/easylogging++.h	/^  void initialize(Logger* logger);$/;"	p	line:2863	language:C++	class:el::base::MessageBuilder	typeref:typename:void	access:public	signature:(Logger * logger)
el::base::MessageBuilder::iterableQueue_	src/easylogging/easylogging++.h	/^    base::workarounds::IterableQueue<T, Container> iterableQueue_ =$/;"	m	line:2936	language:C++	class:el::base::MessageBuilder	typeref:typename:base::workarounds::IterableQueue<T,Container>	access:public
el::base::MessageBuilder::m_containerLogSeperator	src/easylogging/easylogging++.h	/^  const base::type::char_t* m_containerLogSeperator;$/;"	m	line:3149	language:C++	class:el::base::MessageBuilder	typeref:typename:const base::type::char_t *	access:private
el::base::MessageBuilder::m_logger	src/easylogging/easylogging++.h	/^  Logger* m_logger;$/;"	m	line:3148	language:C++	class:el::base::MessageBuilder	typeref:typename:Logger *	access:private
el::base::MessageBuilder::operator <<	src/easylogging/easylogging++.cc	/^MessageBuilder& MessageBuilder::operator<<(const wchar_t* msg) {$/;"	f	line:2512	language:C++	class:el::base::MessageBuilder	typeref:typename:MessageBuilder &	signature:(const wchar_t * msg)
el::base::MessageBuilder::operator <<	src/easylogging/easylogging++.h	/^  MessageBuilder& operator<<(const QHash<K, V>& hash_) {$/;"	f	line:3064	language:C++	class:el::base::MessageBuilder	typeref:typename:MessageBuilder &	access:public	signature:(const QHash<K,V> & hash_)
el::base::MessageBuilder::operator <<	src/easylogging/easylogging++.h	/^  MessageBuilder& operator<<(const QMap<K, V>& map_) {$/;"	f	line:3038	language:C++	class:el::base::MessageBuilder	typeref:typename:MessageBuilder &	access:public	signature:(const QMap<K,V> & map_)
el::base::MessageBuilder::operator <<	src/easylogging/easylogging++.h	/^  MessageBuilder& operator<<(const std::bitset<Size>& bitset_) {$/;"	f	line:2962	language:C++	class:el::base::MessageBuilder	typeref:typename:MessageBuilder &	access:public	signature:(const std::bitset<Size> & bitset_)
el::base::MessageBuilder::operator <<	src/easylogging/easylogging++.h	/^  MessageBuilder& operator<<(const std::pair<First, Second>& pair_) {$/;"	f	line:2953	language:C++	class:el::base::MessageBuilder	typeref:typename:MessageBuilder &	access:public	signature:(const std::pair<First,Second> & pair_)
el::base::MessageBuilder::operator <<	src/easylogging/easylogging++.h	/^  MessageBuilder& operator<<(const wchar_t* msg);$/;"	p	line:2894	language:C++	class:el::base::MessageBuilder	typeref:typename:MessageBuilder &	access:public	signature:(const wchar_t * msg)
el::base::MessageBuilder::operator <<	src/easylogging/easylogging++.h	/^  inline MessageBuilder& operator<<(QChar msg) {$/;"	f	line:3014	language:C++	class:el::base::MessageBuilder	typeref:typename:MessageBuilder &	access:public	signature:(QChar msg)
el::base::MessageBuilder::operator <<	src/easylogging/easylogging++.h	/^  inline MessageBuilder& operator<<(const QByteArray& msg) {$/;"	f	line:2992	language:C++	class:el::base::MessageBuilder	typeref:typename:MessageBuilder &	access:public	signature:(const QByteArray & msg)
el::base::MessageBuilder::operator <<	src/easylogging/easylogging++.h	/^  inline MessageBuilder& operator<<(const QLatin1String& msg) {$/;"	f	line:3018	language:C++	class:el::base::MessageBuilder	typeref:typename:MessageBuilder &	access:public	signature:(const QLatin1String & msg)
el::base::MessageBuilder::operator <<	src/easylogging/easylogging++.h	/^  inline MessageBuilder& operator<<(const QMultiHash<K, V>& multiHash_) {$/;"	f	line:3085	language:C++	class:el::base::MessageBuilder	typeref:typename:MessageBuilder &	access:public	signature:(const QMultiHash<K,V> & multiHash_)
el::base::MessageBuilder::operator <<	src/easylogging/easylogging++.h	/^  inline MessageBuilder& operator<<(const QMultiMap<K, V>& map_) {$/;"	f	line:3059	language:C++	class:el::base::MessageBuilder	typeref:typename:MessageBuilder &	access:public	signature:(const QMultiMap<K,V> & map_)
el::base::MessageBuilder::operator <<	src/easylogging/easylogging++.h	/^  inline MessageBuilder& operator<<(const QStringRef& msg) {$/;"	f	line:2995	language:C++	class:el::base::MessageBuilder	typeref:typename:MessageBuilder &	access:public	signature:(const QStringRef & msg)
el::base::MessageBuilder::operator <<	src/easylogging/easylogging++.h	/^  inline MessageBuilder& operator<<(const std::array<T, Size>& array) {$/;"	f	line:2970	language:C++	class:el::base::MessageBuilder	typeref:typename:MessageBuilder &	access:public	signature:(const std::array<T,Size> & array)
el::base::MessageBuilder::operator <<	src/easylogging/easylogging++.h	/^  inline MessageBuilder& operator<<(const std::priority_queue<T, Container, Comparator>& priorit/;"	f	line:2947	language:C++	class:el::base::MessageBuilder	typeref:typename:MessageBuilder &	access:public	signature:(const std::priority_queue<T,Container,Comparator> & priorityQueue_)
el::base::MessageBuilder::operator <<	src/easylogging/easylogging++.h	/^  inline MessageBuilder& operator<<(const std::stack<T, Container>& stack_) {$/;"	f	line:2941	language:C++	class:el::base::MessageBuilder	typeref:typename:MessageBuilder &	access:public	signature:(const std::stack<T,Container> & stack_)
el::base::MessageBuilder::operator <<	src/easylogging/easylogging++.h	/^  inline MessageBuilder& operator<<(const std::string& msg) {$/;"	f	line:2874	language:C++	class:el::base::MessageBuilder	typeref:typename:MessageBuilder &	access:public	signature:(const std::string & msg)
el::base::MessageBuilder::operator <<	src/easylogging/easylogging++.h	/^  inline MessageBuilder& operator<<(qint64 msg) {$/;"	f	line:2998	language:C++	class:el::base::MessageBuilder	typeref:typename:MessageBuilder &	access:public	signature:(qint64 msg)
el::base::MessageBuilder::operator <<	src/easylogging/easylogging++.h	/^  inline MessageBuilder& operator<<(quint64 msg) {$/;"	f	line:3006	language:C++	class:el::base::MessageBuilder	typeref:typename:MessageBuilder &	access:public	signature:(quint64 msg)
el::base::MessageBuilder::operator <<	src/easylogging/easylogging++.h	/^  inline MessageBuilder& operator<<(std::ostream& (*OStreamMani)(std::ostream&)) {$/;"	f	line:2896	language:C++	class:el::base::MessageBuilder	typeref:typename:MessageBuilder &	access:public	signature:(std::ostream & (* OStreamMani)(std::ostream &))
el::base::MessageBuilder::writeIterator	src/easylogging/easylogging++.h	/^  MessageBuilder& writeIterator(Iterator begin_, Iterator end_, std::size_t size_) {$/;"	f	line:3152	language:C++	class:el::base::MessageBuilder	typeref:typename:MessageBuilder &	access:private	signature:(Iterator begin_,Iterator end_,std::size_t size_)
el::base::Microsecond	src/easylogging/easylogging++.h	/^  Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	e	line:812	language:C++	enum:el::base::TimestampUnit	access:public
el::base::Millisecond	src/easylogging/easylogging++.h	/^  Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	e	line:812	language:C++	enum:el::base::TimestampUnit	access:public
el::base::MillisecondsWidth	src/easylogging/easylogging++.h	/^typedef SubsecondPrecision MillisecondsWidth;$/;"	t	line:850	language:C++	namespace:el::base	typeref:typename:SubsecondPrecision
el::base::Minute	src/easylogging/easylogging++.h	/^  Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	e	line:812	language:C++	enum:el::base::TimestampUnit	access:public
el::base::NoCopy	src/easylogging/easylogging++.h	/^class NoCopy {$/;"	c	line:550	language:C++	namespace:el::base
el::base::NoCopy::NoCopy	src/easylogging/easylogging++.h	/^  NoCopy(const NoCopy&);$/;"	p	line:554	language:C++	class:el::base::NoCopy	access:private	signature:(const NoCopy &)
el::base::NoCopy::NoCopy	src/easylogging/easylogging++.h	/^  NoCopy(void) {}$/;"	f	line:552	language:C++	class:el::base::NoCopy	access:protected	signature:(void)
el::base::NoCopy::operator =	src/easylogging/easylogging++.h	/^  NoCopy& operator=(const NoCopy&);$/;"	p	line:555	language:C++	class:el::base::NoCopy	typeref:typename:NoCopy &	access:private	signature:(const NoCopy &)
el::base::None	src/easylogging/easylogging++.h	/^  None = 1, NormalLog = 2, SysLog = 4$/;"	e	line:2138	language:C++	enum:el::base::DispatchAction	access:public
el::base::NormalLog	src/easylogging/easylogging++.h	/^  None = 1, NormalLog = 2, SysLog = 4$/;"	e	line:2138	language:C++	enum:el::base::DispatchAction	access:public
el::base::NullWriter	src/easylogging/easylogging++.h	/^class NullWriter : base::NoCopy {$/;"	c	line:3169	language:C++	namespace:el::base	inherits:base::NoCopy
el::base::NullWriter::NullWriter	src/easylogging/easylogging++.h	/^  NullWriter(void) {}$/;"	f	line:3171	language:C++	class:el::base::NullWriter	access:public	signature:(void)
el::base::NullWriter::operator <<	src/easylogging/easylogging++.h	/^  inline NullWriter& operator<<(const T&) {$/;"	f	line:3179	language:C++	class:el::base::NullWriter	typeref:typename:NullWriter &	access:public	signature:(const T &)
el::base::NullWriter::operator <<	src/easylogging/easylogging++.h	/^  inline NullWriter& operator<<(std::ostream& (*)(std::ostream&)) {$/;"	f	line:3174	language:C++	class:el::base::NullWriter	typeref:typename:NullWriter &	access:public	signature:(std::ostream & (*)(std::ostream &))
el::base::PErrorWriter	src/easylogging/easylogging++.h	/^class PErrorWriter : public base::Writer {$/;"	c	line:3249	language:C++	namespace:el::base	inherits:base::Writer
el::base::PErrorWriter::PErrorWriter	src/easylogging/easylogging++.h	/^  PErrorWriter(Level level, const char* file, base::type::LineNumber line,$/;"	f	line:3251	language:C++	class:el::base::PErrorWriter	access:public	signature:(Level level,const char * file,base::type::LineNumber line,const char * func,base::DispatchAction dispatchAction=base::DispatchAction::NormalLog,base::type::VerboseLevel verboseLevel=0)
el::base::PErrorWriter::~PErrorWriter	src/easylogging/easylogging++.cc	/^PErrorWriter::~PErrorWriter(void) {$/;"	f	line:2656	language:C++	class:el::base::PErrorWriter	signature:(void)
el::base::PErrorWriter::~PErrorWriter	src/easylogging/easylogging++.h	/^  virtual ~PErrorWriter(void);$/;"	p	line:3257	language:C++	class:el::base::PErrorWriter	access:public	signature:(void)
el::base::PerformanceTracker	src/easylogging/easylogging++.h	/^class PerformanceTracker : public base::threading::ThreadSafe, public Loggable {$/;"	c	line:3463	language:C++	namespace:el::base	inherits:base::threading::ThreadSafe,Loggable
el::base::PerformanceTracker::PerformanceTracker	src/easylogging/easylogging++.cc	/^PerformanceTracker::PerformanceTracker(const std::string& blockName,$/;"	f	line:2672	language:C++	class:el::base::PerformanceTracker	signature:(const std::string & blockName,base::TimestampUnit timestampUnit,const std::string & loggerId,bool scopedLog,Level level)
el::base::PerformanceTracker::PerformanceTracker	src/easylogging/easylogging++.h	/^  PerformanceTracker(const PerformanceTracker& t) :$/;"	f	line:3470	language:C++	class:el::base::PerformanceTracker	access:public	signature:(const PerformanceTracker & t)
el::base::PerformanceTracker::PerformanceTracker	src/easylogging/easylogging++.h	/^  PerformanceTracker(const std::string& blockName,$/;"	p	line:3465	language:C++	class:el::base::PerformanceTracker	access:public	signature:(const std::string & blockName,base::TimestampUnit timestampUnit=base::TimestampUnit::Millisecond,const std::string & loggerId=std::string (el::base::consts::kPerformanceLoggerId),bool scopedLog=true,Level level=base::consts::kPerformanceTrackerDefaultLevel)
el::base::PerformanceTracker::PerformanceTracker	src/easylogging/easylogging++.h	/^  PerformanceTracker(void);$/;"	p	line:3494	language:C++	class:el::base::PerformanceTracker	access:private	signature:(void)
el::base::PerformanceTracker::checkpoint	src/easylogging/easylogging++.cc	/^void PerformanceTracker::checkpoint(const std::string& id, const char* file, base::type::LineNum/;"	f	line:2712	language:C++	class:el::base::PerformanceTracker	typeref:typename:void	signature:(const std::string & id,const char * file,base::type::LineNumber line,const char * func)
el::base::PerformanceTracker::checkpoint	src/easylogging/easylogging++.h	/^  void checkpoint(const std::string& id = std::string(), const char* file = __FILE__,$/;"	p	line:3477	language:C++	class:el::base::PerformanceTracker	typeref:typename:void	access:public	signature:(const std::string & id=std::string (),const char * file=__FILE__,base::type::LineNumber line=__LINE__,const char * func="")
el::base::PerformanceTracker::getFormattedTimeTaken	src/easylogging/easylogging++.cc	/^const base::type::string_t PerformanceTracker::getFormattedTimeTaken(struct timeval startTime) c/;"	f	line:2745	language:C++	class:el::base::PerformanceTracker	typeref:typename:const base::type::string_t	signature:(struct timeval startTime) const
el::base::PerformanceTracker::getFormattedTimeTaken	src/easylogging/easylogging++.h	/^  const base::type::string_t getFormattedTimeTaken(struct timeval startTime) const;$/;"	p	line:3503	language:C++	class:el::base::PerformanceTracker	typeref:typename:const base::type::string_t	access:private	signature:(struct timeval startTime) const
el::base::PerformanceTracker::getFormattedTimeTaken	src/easylogging/easylogging++.h	/^  const inline base::type::string_t getFormattedTimeTaken() const {$/;"	f	line:3499	language:C++	class:el::base::PerformanceTracker	typeref:typename:const base::type::string_t	access:private	signature:() const
el::base::PerformanceTracker::level	src/easylogging/easylogging++.h	/^  inline Level level(void) const {$/;"	f	line:3480	language:C++	class:el::base::PerformanceTracker	typeref:typename:Level	access:public	signature:(void) const
el::base::PerformanceTracker::log	src/easylogging/easylogging++.h	/^  virtual inline void log(el::base::type::ostream_t& os) const {$/;"	f	line:3505	language:C++	class:el::base::PerformanceTracker	typeref:typename:void	access:private	signature:(el::base::type::ostream_t & os) const
el::base::PerformanceTracker::m_blockName	src/easylogging/easylogging++.h	/^  std::string m_blockName;$/;"	m	line:3484	language:C++	class:el::base::PerformanceTracker	typeref:typename:std::string	access:private
el::base::PerformanceTracker::m_enabled	src/easylogging/easylogging++.h	/^  bool m_enabled;$/;"	m	line:3491	language:C++	class:el::base::PerformanceTracker	typeref:typename:bool	access:private
el::base::PerformanceTracker::m_endTime	src/easylogging/easylogging++.h	/^  struct timeval m_startTime, m_endTime, m_lastCheckpointTime;$/;"	m	line:3492	language:C++	class:el::base::PerformanceTracker	typeref:struct:timeval	access:private
el::base::PerformanceTracker::m_hasChecked	src/easylogging/easylogging++.h	/^  bool m_hasChecked;$/;"	m	line:3489	language:C++	class:el::base::PerformanceTracker	typeref:typename:bool	access:private
el::base::PerformanceTracker::m_lastCheckpointId	src/easylogging/easylogging++.h	/^  std::string m_lastCheckpointId;$/;"	m	line:3490	language:C++	class:el::base::PerformanceTracker	typeref:typename:std::string	access:private
el::base::PerformanceTracker::m_lastCheckpointTime	src/easylogging/easylogging++.h	/^  struct timeval m_startTime, m_endTime, m_lastCheckpointTime;$/;"	m	line:3492	language:C++	class:el::base::PerformanceTracker	typeref:struct:timeval	access:private
el::base::PerformanceTracker::m_level	src/easylogging/easylogging++.h	/^  Level m_level;$/;"	m	line:3488	language:C++	class:el::base::PerformanceTracker	typeref:typename:Level	access:private
el::base::PerformanceTracker::m_loggerId	src/easylogging/easylogging++.h	/^  std::string m_loggerId;$/;"	m	line:3486	language:C++	class:el::base::PerformanceTracker	typeref:typename:std::string	access:private
el::base::PerformanceTracker::m_scopedLog	src/easylogging/easylogging++.h	/^  bool m_scopedLog;$/;"	m	line:3487	language:C++	class:el::base::PerformanceTracker	typeref:typename:bool	access:private
el::base::PerformanceTracker::m_startTime	src/easylogging/easylogging++.h	/^  struct timeval m_startTime, m_endTime, m_lastCheckpointTime;$/;"	m	line:3492	language:C++	class:el::base::PerformanceTracker	typeref:struct:timeval	access:private
el::base::PerformanceTracker::m_timestampUnit	src/easylogging/easylogging++.h	/^  base::TimestampUnit m_timestampUnit;$/;"	m	line:3485	language:C++	class:el::base::PerformanceTracker	typeref:typename:base::TimestampUnit	access:private
el::base::PerformanceTracker::~PerformanceTracker	src/easylogging/easylogging++.cc	/^PerformanceTracker::~PerformanceTracker(void) {$/;"	f	line:2689	language:C++	class:el::base::PerformanceTracker	signature:(void)
el::base::PerformanceTracker::~PerformanceTracker	src/easylogging/easylogging++.h	/^  virtual ~PerformanceTracker(void);$/;"	p	line:3475	language:C++	class:el::base::PerformanceTracker	access:public	signature:(void)
el::base::RegisteredHitCounters	src/easylogging/easylogging++.h	/^class RegisteredHitCounters : public base::utils::RegistryWithPred<base::HitCounter, base::HitCo/;"	c	line:2116	language:C++	namespace:el::base	inherits:base::utils::RegistryWithPred<base::HitCounter,base::HitCounter::Predicate>
el::base::RegisteredHitCounters::getCounter	src/easylogging/easylogging++.h	/^  inline const base::HitCounter* getCounter(const char* filename, base::type::LineNumber lineNum/;"	f	line:2131	language:C++	class:el::base::RegisteredHitCounters	typeref:typename:const base::HitCounter *	access:public	signature:(const char * filename,base::type::LineNumber lineNumber)
el::base::RegisteredHitCounters::validateAfterN	src/easylogging/easylogging++.cc	/^bool RegisteredHitCounters::validateAfterN(const char* filename, base::type::LineNumber lineNumb/;"	f	line:1853	language:C++	class:el::base::RegisteredHitCounters	typeref:typename:bool	signature:(const char * filename,base::type::LineNumber lineNumber,std::size_t n)
el::base::RegisteredHitCounters::validateAfterN	src/easylogging/easylogging++.h	/^  bool validateAfterN(const char* filename, base::type::LineNumber lineNumber, std::size_t n);$/;"	p	line:2124	language:C++	class:el::base::RegisteredHitCounters	typeref:typename:bool	access:public	signature:(const char * filename,base::type::LineNumber lineNumber,std::size_t n)
el::base::RegisteredHitCounters::validateEveryN	src/easylogging/easylogging++.cc	/^bool RegisteredHitCounters::validateEveryN(const char* filename, base::type::LineNumber lineNumb/;"	f	line:1840	language:C++	class:el::base::RegisteredHitCounters	typeref:typename:bool	signature:(const char * filename,base::type::LineNumber lineNumber,std::size_t n)
el::base::RegisteredHitCounters::validateEveryN	src/easylogging/easylogging++.h	/^  bool validateEveryN(const char* filename, base::type::LineNumber lineNumber, std::size_t n);$/;"	p	line:2120	language:C++	class:el::base::RegisteredHitCounters	typeref:typename:bool	access:public	signature:(const char * filename,base::type::LineNumber lineNumber,std::size_t n)
el::base::RegisteredHitCounters::validateNTimes	src/easylogging/easylogging++.cc	/^bool RegisteredHitCounters::validateNTimes(const char* filename, base::type::LineNumber lineNumb/;"	f	line:1870	language:C++	class:el::base::RegisteredHitCounters	typeref:typename:bool	signature:(const char * filename,base::type::LineNumber lineNumber,std::size_t n)
el::base::RegisteredHitCounters::validateNTimes	src/easylogging/easylogging++.h	/^  bool validateNTimes(const char* filename, base::type::LineNumber lineNumber, std::size_t n);$/;"	p	line:2128	language:C++	class:el::base::RegisteredHitCounters	typeref:typename:bool	access:public	signature:(const char * filename,base::type::LineNumber lineNumber,std::size_t n)
el::base::RegisteredLoggers	src/easylogging/easylogging++.h	/^class RegisteredLoggers : public base::utils::Registry<Logger, std::string> {$/;"	c	line:2345	language:C++	namespace:el::base	inherits:base::utils::Registry<Logger,std::string>
el::base::RegisteredLoggers::RegisteredLoggers	src/easylogging/easylogging++.cc	/^RegisteredLoggers::RegisteredLoggers(const LogBuilderPtr& defaultLogBuilder) :$/;"	f	line:1885	language:C++	class:el::base::RegisteredLoggers	signature:(const LogBuilderPtr & defaultLogBuilder)
el::base::RegisteredLoggers::RegisteredLoggers	src/easylogging/easylogging++.h	/^  explicit RegisteredLoggers(const LogBuilderPtr& defaultLogBuilder);$/;"	p	line:2347	language:C++	class:el::base::RegisteredLoggers	access:public	signature:(const LogBuilderPtr & defaultLogBuilder)
el::base::RegisteredLoggers::defaultConfigurations	src/easylogging/easylogging++.h	/^  inline Configurations* defaultConfigurations(void) {$/;"	f	line:2358	language:C++	class:el::base::RegisteredLoggers	typeref:typename:Configurations *	access:public	signature:(void)
el::base::RegisteredLoggers::flushAll	src/easylogging/easylogging++.h	/^  inline void flushAll(void) {$/;"	f	line:2395	language:C++	class:el::base::RegisteredLoggers	typeref:typename:void	access:public	signature:(void)
el::base::RegisteredLoggers::get	src/easylogging/easylogging++.cc	/^Logger* RegisteredLoggers::get(const std::string& id, bool forceCreation) {$/;"	f	line:1890	language:C++	class:el::base::RegisteredLoggers	typeref:typename:Logger *	signature:(const std::string & id,bool forceCreation)
el::base::RegisteredLoggers::get	src/easylogging/easylogging++.h	/^  Logger* get(const std::string& id, bool forceCreation = true);$/;"	p	line:2362	language:C++	class:el::base::RegisteredLoggers	typeref:typename:Logger *	access:public	signature:(const std::string & id,bool forceCreation=true)
el::base::RegisteredLoggers::has	src/easylogging/easylogging++.h	/^  inline bool has(const std::string& id) {$/;"	f	line:2382	language:C++	class:el::base::RegisteredLoggers	typeref:typename:bool	access:public	signature:(const std::string & id)
el::base::RegisteredLoggers::installLoggerRegistrationCallback	src/easylogging/easylogging++.h	/^  inline bool installLoggerRegistrationCallback(const std::string& id) {$/;"	f	line:2365	language:C++	class:el::base::RegisteredLoggers	typeref:typename:bool	access:public	signature:(const std::string & id)
el::base::RegisteredLoggers::logStreamsReference	src/easylogging/easylogging++.h	/^  inline base::LogStreamsReferenceMap* logStreamsReference(void) {$/;"	f	line:2391	language:C++	class:el::base::RegisteredLoggers	typeref:typename:base::LogStreamsReferenceMap *	access:public	signature:(void)
el::base::RegisteredLoggers::loggerRegistrationCallback	src/easylogging/easylogging++.h	/^  inline T* loggerRegistrationCallback(const std::string& id) {$/;"	f	line:2376	language:C++	class:el::base::RegisteredLoggers	typeref:typename:T *	access:public	signature:(const std::string & id)
el::base::RegisteredLoggers::m_defaultConfigurations	src/easylogging/easylogging++.h	/^  Configurations m_defaultConfigurations;$/;"	m	line:2407	language:C++	class:el::base::RegisteredLoggers	typeref:typename:Configurations	access:private
el::base::RegisteredLoggers::m_defaultLogBuilder	src/easylogging/easylogging++.h	/^  LogBuilderPtr m_defaultLogBuilder;$/;"	m	line:2406	language:C++	class:el::base::RegisteredLoggers	typeref:typename:LogBuilderPtr	access:private
el::base::RegisteredLoggers::m_logStreamsReference	src/easylogging/easylogging++.h	/^  base::LogStreamsReferenceMap m_logStreamsReference;$/;"	m	line:2408	language:C++	class:el::base::RegisteredLoggers	typeref:typename:base::LogStreamsReferenceMap	access:private
el::base::RegisteredLoggers::m_loggerRegistrationCallbacks	src/easylogging/easylogging++.h	/^  std::unordered_map<std::string, base::type::LoggerRegistrationCallbackPtr> m_loggerRegistratio/;"	m	line:2409	language:C++	class:el::base::RegisteredLoggers	typeref:typename:std::unordered_map<std::string,base::type::LoggerRegistrationCallbackPtr>	access:private
el::base::RegisteredLoggers::remove	src/easylogging/easylogging++.cc	/^bool RegisteredLoggers::remove(const std::string& id) {$/;"	f	line:1914	language:C++	class:el::base::RegisteredLoggers	typeref:typename:bool	signature:(const std::string & id)
el::base::RegisteredLoggers::remove	src/easylogging/easylogging++.h	/^  bool remove(const std::string& id);$/;"	p	line:2380	language:C++	class:el::base::RegisteredLoggers	typeref:typename:bool	access:public	signature:(const std::string & id)
el::base::RegisteredLoggers::setDefaultConfigurations	src/easylogging/easylogging++.h	/^  inline void setDefaultConfigurations(const Configurations& configurations) {$/;"	f	line:2353	language:C++	class:el::base::RegisteredLoggers	typeref:typename:void	access:public	signature:(const Configurations & configurations)
el::base::RegisteredLoggers::setDefaultLogBuilder	src/easylogging/easylogging++.h	/^  inline void setDefaultLogBuilder(LogBuilderPtr& logBuilderPtr) {$/;"	f	line:2400	language:C++	class:el::base::RegisteredLoggers	typeref:typename:void	access:public	signature:(LogBuilderPtr & logBuilderPtr)
el::base::RegisteredLoggers::uninstallLoggerRegistrationCallback	src/easylogging/easylogging++.h	/^  inline void uninstallLoggerRegistrationCallback(const std::string& id) {$/;"	f	line:2371	language:C++	class:el::base::RegisteredLoggers	typeref:typename:void	access:public	signature:(const std::string & id)
el::base::RegisteredLoggers::unregister	src/easylogging/easylogging++.h	/^  inline void unregister(Logger*& logger) {$/;"	f	line:2386	language:C++	class:el::base::RegisteredLoggers	typeref:typename:void	access:public	signature:(Logger * & logger)
el::base::RegisteredLoggers::unsafeFlushAll	src/easylogging/easylogging++.cc	/^void RegisteredLoggers::unsafeFlushAll(void) {$/;"	f	line:1927	language:C++	class:el::base::RegisteredLoggers	typeref:typename:void	signature:(void)
el::base::RegisteredLoggers::unsafeFlushAll	src/easylogging/easylogging++.h	/^  void unsafeFlushAll(void);$/;"	p	line:2412	language:C++	class:el::base::RegisteredLoggers	typeref:typename:void	access:private	signature:(void)
el::base::RegisteredLoggers::~RegisteredLoggers	src/easylogging/easylogging++.h	/^  virtual ~RegisteredLoggers(void) {$/;"	f	line:2349	language:C++	class:el::base::RegisteredLoggers	access:public	signature:(void)
el::base::Second	src/easylogging/easylogging++.h	/^  Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	e	line:812	language:C++	enum:el::base::TimestampUnit	access:public
el::base::StaticClass	src/easylogging/easylogging++.h	/^class StaticClass {$/;"	c	line:561	language:C++	namespace:el::base
el::base::StaticClass::StaticClass	src/easylogging/easylogging++.h	/^  StaticClass(const StaticClass&);$/;"	p	line:564	language:C++	class:el::base::StaticClass	access:private	signature:(const StaticClass &)
el::base::StaticClass::StaticClass	src/easylogging/easylogging++.h	/^  StaticClass(void);$/;"	p	line:563	language:C++	class:el::base::StaticClass	access:private	signature:(void)
el::base::StaticClass::operator =	src/easylogging/easylogging++.h	/^  StaticClass& operator=(const StaticClass&);$/;"	p	line:565	language:C++	class:el::base::StaticClass	typeref:typename:StaticClass &	access:private	signature:(const StaticClass &)
el::base::Storage	src/easylogging/easylogging++.h	/^class Storage : base::NoCopy, public base::threading::ThreadSafe {$/;"	c	line:2549	language:C++	namespace:el::base	inherits:base::NoCopy,base::threading::ThreadSafe
el::base::Storage::Storage	src/easylogging/easylogging++.cc	/^Storage::Storage(const LogBuilderPtr& defaultLogBuilder, base::IWorker* asyncDispatchWorker) :$/;"	f	line:2062	language:C++	class:el::base::Storage	signature:(const LogBuilderPtr & defaultLogBuilder,base::IWorker * asyncDispatchWorker)
el::base::Storage::Storage	src/easylogging/easylogging++.h	/^  Storage(const LogBuilderPtr& defaultLogBuilder, base::IWorker* asyncDispatchWorker);$/;"	p	line:2552	language:C++	class:el::base::Storage	access:public	signature:(const LogBuilderPtr & defaultLogBuilder,base::IWorker * asyncDispatchWorker)
el::base::Storage::addFlag	src/easylogging/easylogging++.h	/^  inline void addFlag(LoggingFlag flag) {$/;"	f	line:2593	language:C++	class:el::base::Storage	typeref:typename:void	access:public	signature:(LoggingFlag flag)
el::base::Storage::asyncLogQueue	src/easylogging/easylogging++.h	/^  inline base::AsyncLogQueue* asyncLogQueue(void) const {$/;"	f	line:2584	language:C++	class:el::base::Storage	typeref:typename:base::AsyncLogQueue *	access:public	signature:(void) const
el::base::Storage::commandLineArgs	src/easylogging/easylogging++.h	/^  inline const base::utils::CommandLineArgs* commandLineArgs(void) const {$/;"	f	line:2589	language:C++	class:el::base::Storage	typeref:typename:const base::utils::CommandLineArgs *	access:public	signature:(void) const
el::base::Storage::customFormatSpecifiers	src/easylogging/easylogging++.h	/^  const std::vector<CustomFormatSpecifier>* customFormatSpecifiers(void) const {$/;"	f	line:2629	language:C++	class:el::base::Storage	typeref:typename:const std::vector<CustomFormatSpecifier> *	access:public	signature:(void) const
el::base::Storage::customFormatSpecifiersLock	src/easylogging/easylogging++.h	/^  base::threading::Mutex& customFormatSpecifiersLock() {$/;"	f	line:2633	language:C++	class:el::base::Storage	typeref:typename:base::threading::Mutex &	access:public	signature:()
el::base::Storage::flags	src/easylogging/easylogging++.h	/^  inline base::type::EnumType flags(void) const {$/;"	f	line:2605	language:C++	class:el::base::Storage	typeref:typename:base::type::EnumType	access:public	signature:(void) const
el::base::Storage::getThreadName	src/easylogging/easylogging++.h	/^  inline std::string getThreadName(const std::string& threadId) {$/;"	f	line:2681	language:C++	class:el::base::Storage	typeref:typename:std::string	access:public	signature:(const std::string & threadId)
el::base::Storage::hasCustomFormatSpecifier	src/easylogging/easylogging++.cc	/^bool Storage::hasCustomFormatSpecifier(const char* formatSpecifier) {$/;"	f	line:2131	language:C++	class:el::base::Storage	typeref:typename:bool	signature:(const char * formatSpecifier)
el::base::Storage::hasCustomFormatSpecifier	src/easylogging/easylogging++.h	/^  bool hasCustomFormatSpecifier(const char* formatSpecifier);$/;"	p	line:2625	language:C++	class:el::base::Storage	typeref:typename:bool	access:public	signature:(const char * formatSpecifier)
el::base::Storage::hasFlag	src/easylogging/easylogging++.h	/^  inline bool hasFlag(LoggingFlag flag) const {$/;"	f	line:2601	language:C++	class:el::base::Storage	typeref:typename:bool	access:public	signature:(LoggingFlag flag) const
el::base::Storage::hitCounters	src/easylogging/easylogging++.h	/^  inline base::RegisteredHitCounters* hitCounters(void) const {$/;"	f	line:2571	language:C++	class:el::base::Storage	typeref:typename:base::RegisteredHitCounters *	access:public	signature:(void) const
el::base::Storage::installCustomFormatSpecifier	src/easylogging/easylogging++.cc	/^void Storage::installCustomFormatSpecifier(const CustomFormatSpecifier& customFormatSpecifier) {$/;"	f	line:2137	language:C++	class:el::base::Storage	typeref:typename:void	signature:(const CustomFormatSpecifier & customFormatSpecifier)
el::base::Storage::installCustomFormatSpecifier	src/easylogging/easylogging++.h	/^  void installCustomFormatSpecifier(const CustomFormatSpecifier& customFormatSpecifier);$/;"	p	line:2626	language:C++	class:el::base::Storage	typeref:typename:void	access:public	signature:(const CustomFormatSpecifier & customFormatSpecifier)
el::base::Storage::installLogDispatchCallback	src/easylogging/easylogging++.h	/^  inline bool installLogDispatchCallback(const std::string& id) {$/;"	f	line:2642	language:C++	class:el::base::Storage	typeref:typename:bool	access:public	signature:(const std::string & id)
el::base::Storage::installPerformanceTrackingCallback	src/easylogging/easylogging++.h	/^  inline bool installPerformanceTrackingCallback(const std::string& id) {$/;"	f	line:2657	language:C++	class:el::base::Storage	typeref:typename:bool	access:public	signature:(const std::string & id)
el::base::Storage::logDispatchCallback	src/easylogging/easylogging++.h	/^  inline T* logDispatchCallback(const std::string& id) {$/;"	f	line:2651	language:C++	class:el::base::Storage	typeref:typename:T *	access:public	signature:(const std::string & id)
el::base::Storage::m_asyncDispatchWorker	src/easylogging/easylogging++.h	/^  base::IWorker* m_asyncDispatchWorker;$/;"	m	line:2696	language:C++	class:el::base::Storage	typeref:typename:base::IWorker *	access:private
el::base::Storage::m_asyncLogQueue	src/easylogging/easylogging++.h	/^  base::AsyncLogQueue* m_asyncLogQueue;$/;"	m	line:2695	language:C++	class:el::base::Storage	typeref:typename:base::AsyncLogQueue *	access:private
el::base::Storage::m_commandLineArgs	src/easylogging/easylogging++.h	/^  base::utils::CommandLineArgs m_commandLineArgs;$/;"	m	line:2698	language:C++	class:el::base::Storage	typeref:typename:base::utils::CommandLineArgs	access:private
el::base::Storage::m_customFormatSpecifiers	src/easylogging/easylogging++.h	/^  std::vector<CustomFormatSpecifier> m_customFormatSpecifiers;$/;"	m	line:2703	language:C++	class:el::base::Storage	typeref:typename:std::vector<CustomFormatSpecifier>	access:private
el::base::Storage::m_customFormatSpecifiersLock	src/easylogging/easylogging++.h	/^  base::threading::Mutex m_customFormatSpecifiersLock;$/;"	m	line:2704	language:C++	class:el::base::Storage	typeref:typename:base::threading::Mutex	access:private
el::base::Storage::m_flags	src/easylogging/easylogging++.h	/^  base::type::EnumType m_flags;$/;"	m	line:2692	language:C++	class:el::base::Storage	typeref:typename:base::type::EnumType	access:private
el::base::Storage::m_logDispatchCallbacks	src/easylogging/easylogging++.h	/^  std::unordered_map<std::string, base::type::LogDispatchCallbackPtr> m_logDispatchCallbacks;$/;"	m	line:2700	language:C++	class:el::base::Storage	typeref:typename:std::unordered_map<std::string,base::type::LogDispatchCallbackPtr>	access:private
el::base::Storage::m_loggingLevel	src/easylogging/easylogging++.h	/^  Level m_loggingLevel;$/;"	m	line:2706	language:C++	class:el::base::Storage	typeref:typename:Level	access:private
el::base::Storage::m_performanceTrackingCallbacks	src/easylogging/easylogging++.h	/^  std::unordered_map<std::string, base::type::PerformanceTrackingCallbackPtr> m_performanceTrack/;"	m	line:2701	language:C++	class:el::base::Storage	typeref:typename:std::unordered_map<std::string,base::type::PerformanceTrackingCallbackPtr>	access:private
el::base::Storage::m_preRollOutCallback	src/easylogging/easylogging++.h	/^  PreRollOutCallback m_preRollOutCallback;$/;"	m	line:2699	language:C++	class:el::base::Storage	typeref:typename:PreRollOutCallback	access:private
el::base::Storage::m_registeredHitCounters	src/easylogging/easylogging++.h	/^  base::RegisteredHitCounters* m_registeredHitCounters;$/;"	m	line:2690	language:C++	class:el::base::Storage	typeref:typename:base::RegisteredHitCounters *	access:private
el::base::Storage::m_registeredLoggers	src/easylogging/easylogging++.h	/^  base::RegisteredLoggers* m_registeredLoggers;$/;"	m	line:2691	language:C++	class:el::base::Storage	typeref:typename:base::RegisteredLoggers *	access:private
el::base::Storage::m_threadNames	src/easylogging/easylogging++.h	/^  std::unordered_map<std::string, std::string> m_threadNames;$/;"	m	line:2702	language:C++	class:el::base::Storage	typeref:typename:std::unordered_map<std::string,std::string>	access:private
el::base::Storage::m_threadNamesLock	src/easylogging/easylogging++.h	/^  base::threading::Mutex m_threadNamesLock;$/;"	m	line:2705	language:C++	class:el::base::Storage	typeref:typename:base::threading::Mutex	access:private
el::base::Storage::m_vRegistry	src/easylogging/easylogging++.h	/^  base::VRegistry* m_vRegistry;$/;"	m	line:2693	language:C++	class:el::base::Storage	typeref:typename:base::VRegistry *	access:private
el::base::Storage::performanceTrackingCallback	src/easylogging/easylogging++.h	/^  inline T* performanceTrackingCallback(const std::string& id) {$/;"	f	line:2669	language:C++	class:el::base::Storage	typeref:typename:T *	access:public	signature:(const std::string & id)
el::base::Storage::preRollOutCallback	src/easylogging/easylogging++.h	/^  inline PreRollOutCallback& preRollOutCallback(void) {$/;"	f	line:2621	language:C++	class:el::base::Storage	typeref:typename:PreRollOutCallback &	access:public	signature:(void)
el::base::Storage::registeredLoggers	src/easylogging/easylogging++.h	/^  inline base::RegisteredLoggers* registeredLoggers(void) const {$/;"	f	line:2575	language:C++	class:el::base::Storage	typeref:typename:base::RegisteredLoggers *	access:public	signature:(void) const
el::base::Storage::removeFlag	src/easylogging/easylogging++.h	/^  inline void removeFlag(LoggingFlag flag) {$/;"	f	line:2597	language:C++	class:el::base::Storage	typeref:typename:void	access:public	signature:(LoggingFlag flag)
el::base::Storage::setApplicationArguments	src/easylogging/easylogging++.cc	/^void Storage::setApplicationArguments(int argc, char** argv) {$/;"	f	line:2156	language:C++	class:el::base::Storage	typeref:typename:void	signature:(int argc,char ** argv)
el::base::Storage::setApplicationArguments	src/easylogging/easylogging++.h	/^  inline void setApplicationArguments(int argc, const char** argv) {$/;"	f	line:2718	language:C++	class:el::base::Storage	typeref:typename:void	access:private	signature:(int argc,const char ** argv)
el::base::Storage::setApplicationArguments	src/easylogging/easylogging++.h	/^  void setApplicationArguments(int argc, char** argv);$/;"	p	line:2716	language:C++	class:el::base::Storage	typeref:typename:void	access:private	signature:(int argc,char ** argv)
el::base::Storage::setFlags	src/easylogging/easylogging++.h	/^  inline void setFlags(base::type::EnumType flags) {$/;"	f	line:2609	language:C++	class:el::base::Storage	typeref:typename:void	access:public	signature:(base::type::EnumType flags)
el::base::Storage::setLoggingLevel	src/easylogging/easylogging++.h	/^  inline void setLoggingLevel(Level level) {$/;"	f	line:2637	language:C++	class:el::base::Storage	typeref:typename:void	access:public	signature:(Level level)
el::base::Storage::setPreRollOutCallback	src/easylogging/easylogging++.h	/^  inline void setPreRollOutCallback(const PreRollOutCallback& callback) {$/;"	f	line:2613	language:C++	class:el::base::Storage	typeref:typename:void	access:public	signature:(const PreRollOutCallback & callback)
el::base::Storage::setThreadName	src/easylogging/easylogging++.h	/^  inline void setThreadName(const std::string& name) {$/;"	f	line:2675	language:C++	class:el::base::Storage	typeref:typename:void	access:public	signature:(const std::string & name)
el::base::Storage::uninstallCustomFormatSpecifier	src/easylogging/easylogging++.cc	/^bool Storage::uninstallCustomFormatSpecifier(const char* formatSpecifier) {$/;"	f	line:2145	language:C++	class:el::base::Storage	typeref:typename:bool	signature:(const char * formatSpecifier)
el::base::Storage::uninstallCustomFormatSpecifier	src/easylogging/easylogging++.h	/^  bool uninstallCustomFormatSpecifier(const char* formatSpecifier);$/;"	p	line:2627	language:C++	class:el::base::Storage	typeref:typename:bool	access:public	signature:(const char * formatSpecifier)
el::base::Storage::uninstallLogDispatchCallback	src/easylogging/easylogging++.h	/^  inline void uninstallLogDispatchCallback(const std::string& id) {$/;"	f	line:2647	language:C++	class:el::base::Storage	typeref:typename:void	access:public	signature:(const std::string & id)
el::base::Storage::uninstallPerformanceTrackingCallback	src/easylogging/easylogging++.h	/^  inline void uninstallPerformanceTrackingCallback(const std::string& id) {$/;"	f	line:2663	language:C++	class:el::base::Storage	typeref:typename:void	access:public	signature:(const std::string & id)
el::base::Storage::unsetPreRollOutCallback	src/easylogging/easylogging++.h	/^  inline void unsetPreRollOutCallback(void) {$/;"	f	line:2617	language:C++	class:el::base::Storage	typeref:typename:void	access:public	signature:(void)
el::base::Storage::vRegistry	src/easylogging/easylogging++.h	/^  inline base::VRegistry* vRegistry(void) const {$/;"	f	line:2579	language:C++	class:el::base::Storage	typeref:typename:base::VRegistry *	access:public	signature:(void) const
el::base::Storage::validateAfterNCounter	src/easylogging/easylogging++.h	/^  inline bool validateAfterNCounter(const char* filename, base::type::LineNumber lineNumber, std/;"	f	line:2563	language:C++	class:el::base::Storage	typeref:typename:bool	access:public	signature:(const char * filename,base::type::LineNumber lineNumber,std::size_t n)
el::base::Storage::validateEveryNCounter	src/easylogging/easylogging++.h	/^  inline bool validateEveryNCounter(const char* filename, base::type::LineNumber lineNumber, std/;"	f	line:2559	language:C++	class:el::base::Storage	typeref:typename:bool	access:public	signature:(const char * filename,base::type::LineNumber lineNumber,std::size_t occasion)
el::base::Storage::validateNTimesCounter	src/easylogging/easylogging++.h	/^  inline bool validateNTimesCounter(const char* filename, base::type::LineNumber lineNumber, std/;"	f	line:2567	language:C++	class:el::base::Storage	typeref:typename:bool	access:public	signature:(const char * filename,base::type::LineNumber lineNumber,std::size_t n)
el::base::Storage::~Storage	src/easylogging/easylogging++.cc	/^Storage::~Storage(void) {$/;"	f	line:2112	language:C++	class:el::base::Storage	signature:(void)
el::base::Storage::~Storage	src/easylogging/easylogging++.h	/^  virtual ~Storage(void);$/;"	p	line:2557	language:C++	class:el::base::Storage	access:public	signature:(void)
el::base::SubsecondPrecision	src/easylogging/easylogging++.h	/^class SubsecondPrecision {$/;"	c	line:833	language:C++	namespace:el::base
el::base::SubsecondPrecision::SubsecondPrecision	src/easylogging/easylogging++.h	/^  SubsecondPrecision(void) {$/;"	f	line:835	language:C++	class:el::base::SubsecondPrecision	access:public	signature:(void)
el::base::SubsecondPrecision::SubsecondPrecision	src/easylogging/easylogging++.h	/^  explicit SubsecondPrecision(int width) {$/;"	f	line:838	language:C++	class:el::base::SubsecondPrecision	access:public	signature:(int width)
el::base::SubsecondPrecision::init	src/easylogging/easylogging++.cc	/^void SubsecondPrecision::init(int width) {$/;"	f	line:1408	language:C++	class:el::base::SubsecondPrecision	typeref:typename:void	signature:(int width)
el::base::SubsecondPrecision::init	src/easylogging/easylogging++.h	/^  void init(int width);$/;"	p	line:847	language:C++	class:el::base::SubsecondPrecision	typeref:typename:void	access:private	signature:(int width)
el::base::SubsecondPrecision::m_offset	src/easylogging/easylogging++.h	/^  unsigned int m_offset;$/;"	m	line:845	language:C++	class:el::base::SubsecondPrecision	typeref:typename:unsigned int	access:public
el::base::SubsecondPrecision::m_width	src/easylogging/easylogging++.h	/^  int m_width;$/;"	m	line:844	language:C++	class:el::base::SubsecondPrecision	typeref:typename:int	access:public
el::base::SubsecondPrecision::operator ==	src/easylogging/easylogging++.h	/^  bool operator==(const SubsecondPrecision& ssPrec) {$/;"	f	line:841	language:C++	class:el::base::SubsecondPrecision	typeref:typename:bool	access:public	signature:(const SubsecondPrecision & ssPrec)
el::base::SysLog	src/easylogging/easylogging++.h	/^  None = 1, NormalLog = 2, SysLog = 4$/;"	e	line:2138	language:C++	enum:el::base::DispatchAction	access:public
el::base::ThreadId	src/easylogging/easylogging++.h	/^  ThreadId = 1 << 12,$/;"	e	line:827	language:C++	enum:el::base::FormatFlags	access:public
el::base::TimestampUnit	src/easylogging/easylogging++.h	/^enum class TimestampUnit : base::type::EnumType {$/;"	g	line:811	language:C++	namespace:el::base	typeref:typename:base::type::EnumType
el::base::TypedConfigurations	src/easylogging/easylogging++.h	/^class TypedConfigurations : public base::threading::ThreadSafe {$/;"	c	line:1902	language:C++	namespace:el::base	inherits:base::threading::ThreadSafe
el::base::TypedConfigurations::TypedConfigurations	src/easylogging/easylogging++.cc	/^TypedConfigurations::TypedConfigurations(Configurations* configurations,$/;"	f	line:1617	language:C++	class:el::base::TypedConfigurations	signature:(Configurations * configurations,base::LogStreamsReferenceMap * logStreamsReference)
el::base::TypedConfigurations::TypedConfigurations	src/easylogging/easylogging++.cc	/^TypedConfigurations::TypedConfigurations(const TypedConfigurations& other) {$/;"	f	line:1624	language:C++	class:el::base::TypedConfigurations	signature:(const TypedConfigurations & other)
el::base::TypedConfigurations::TypedConfigurations	src/easylogging/easylogging++.h	/^  TypedConfigurations(Configurations* configurations, base::LogStreamsReferenceMap* logStreamsRe/;"	p	line:1907	language:C++	class:el::base::TypedConfigurations	access:public	signature:(Configurations * configurations,base::LogStreamsReferenceMap * logStreamsReference)
el::base::TypedConfigurations::TypedConfigurations	src/easylogging/easylogging++.h	/^  TypedConfigurations(const TypedConfigurations& other);$/;"	p	line:1909	language:C++	class:el::base::TypedConfigurations	access:public	signature:(const TypedConfigurations & other)
el::base::TypedConfigurations::build	src/easylogging/easylogging++.cc	/^void TypedConfigurations::build(Configurations* configurations) {$/;"	f	line:1674	language:C++	class:el::base::TypedConfigurations	typeref:typename:void	signature:(Configurations * configurations)
el::base::TypedConfigurations::build	src/easylogging/easylogging++.h	/^  void build(Configurations* configurations);$/;"	p	line:2019	language:C++	class:el::base::TypedConfigurations	typeref:typename:void	access:private	signature:(Configurations * configurations)
el::base::TypedConfigurations::configurations	src/easylogging/easylogging++.h	/^  const Configurations* configurations(void) const {$/;"	f	line:1914	language:C++	class:el::base::TypedConfigurations	typeref:typename:const Configurations *	access:public	signature:(void) const
el::base::TypedConfigurations::enabled	src/easylogging/easylogging++.cc	/^bool TypedConfigurations::enabled(Level level) {$/;"	f	line:1630	language:C++	class:el::base::TypedConfigurations	typeref:typename:bool	signature:(Level level)
el::base::TypedConfigurations::enabled	src/easylogging/easylogging++.h	/^  bool enabled(Level level);$/;"	p	line:1918	language:C++	class:el::base::TypedConfigurations	typeref:typename:bool	access:public	signature:(Level level)
el::base::TypedConfigurations::fileStream	src/easylogging/easylogging++.cc	/^base::type::fstream_t* TypedConfigurations::fileStream(Level level) {$/;"	f	line:1662	language:C++	class:el::base::TypedConfigurations	typeref:typename:base::type::fstream_t *	signature:(Level level)
el::base::TypedConfigurations::fileStream	src/easylogging/easylogging++.h	/^  base::type::fstream_t* fileStream(Level level);$/;"	p	line:1926	language:C++	class:el::base::TypedConfigurations	typeref:typename:base::type::fstream_t *	access:public	signature:(Level level)
el::base::TypedConfigurations::filename	src/easylogging/easylogging++.cc	/^const std::string& TypedConfigurations::filename(Level level) {$/;"	f	line:1638	language:C++	class:el::base::TypedConfigurations	typeref:typename:const std::string &	signature:(Level level)
el::base::TypedConfigurations::filename	src/easylogging/easylogging++.h	/^  const std::string& filename(Level level);$/;"	p	line:1920	language:C++	class:el::base::TypedConfigurations	typeref:typename:const std::string &	access:public	signature:(Level level)
el::base::TypedConfigurations::getConfigByRef	src/easylogging/easylogging++.h	/^  inline Conf_T& getConfigByRef(Level level, std::unordered_map<Level, Conf_T>* confMap, const c/;"	f	line:1957	language:C++	class:el::base::TypedConfigurations	typeref:typename:Conf_T &	access:private	signature:(Level level,std::unordered_map<Level,Conf_T> * confMap,const char * confName)
el::base::TypedConfigurations::getConfigByVal	src/easylogging/easylogging++.h	/^  inline Conf_T getConfigByVal(Level level, const std::unordered_map<Level, Conf_T>* confMap, co/;"	f	line:1951	language:C++	class:el::base::TypedConfigurations	typeref:typename:Conf_T	access:private	signature:(Level level,const std::unordered_map<Level,Conf_T> * confMap,const char * confName)
el::base::TypedConfigurations::getULong	src/easylogging/easylogging++.cc	/^unsigned long TypedConfigurations::getULong(std::string confVal) {$/;"	f	line:1728	language:C++	class:el::base::TypedConfigurations	typeref:typename:unsigned long	signature:(std::string confVal)
el::base::TypedConfigurations::getULong	src/easylogging/easylogging++.h	/^  unsigned long getULong(std::string confVal);$/;"	p	line:2020	language:C++	class:el::base::TypedConfigurations	typeref:typename:unsigned long	access:private	signature:(std::string confVal)
el::base::TypedConfigurations::insertFile	src/easylogging/easylogging++.cc	/^void TypedConfigurations::insertFile(Level level, const std::string& fullFilename) {$/;"	f	line:1782	language:C++	class:el::base::TypedConfigurations	typeref:typename:void	signature:(Level level,const std::string & fullFilename)
el::base::TypedConfigurations::insertFile	src/easylogging/easylogging++.h	/^  void insertFile(Level level, const std::string& fullFilename);$/;"	p	line:2022	language:C++	class:el::base::TypedConfigurations	typeref:typename:void	access:private	signature:(Level level,const std::string & fullFilename)
el::base::TypedConfigurations::logFlushThreshold	src/easylogging/easylogging++.cc	/^std::size_t TypedConfigurations::logFlushThreshold(Level level) {$/;"	f	line:1670	language:C++	class:el::base::TypedConfigurations	typeref:typename:std::size_t	signature:(Level level)
el::base::TypedConfigurations::logFlushThreshold	src/easylogging/easylogging++.h	/^  std::size_t logFlushThreshold(Level level);$/;"	p	line:1928	language:C++	class:el::base::TypedConfigurations	typeref:typename:std::size_t	access:public	signature:(Level level)
el::base::TypedConfigurations::logFormat	src/easylogging/easylogging++.cc	/^const base::LogFormat& TypedConfigurations::logFormat(Level level) {$/;"	f	line:1646	language:C++	class:el::base::TypedConfigurations	typeref:typename:const base::LogFormat &	signature:(Level level)
el::base::TypedConfigurations::logFormat	src/easylogging/easylogging++.h	/^  const base::LogFormat& logFormat(Level level);$/;"	p	line:1922	language:C++	class:el::base::TypedConfigurations	typeref:typename:const base::LogFormat &	access:public	signature:(Level level)
el::base::TypedConfigurations::m_configurations	src/easylogging/easylogging++.h	/^  Configurations* m_configurations;$/;"	m	line:1931	language:C++	class:el::base::TypedConfigurations	typeref:typename:Configurations *	access:private
el::base::TypedConfigurations::m_enabledMap	src/easylogging/easylogging++.h	/^  std::unordered_map<Level, bool> m_enabledMap;$/;"	m	line:1932	language:C++	class:el::base::TypedConfigurations	typeref:typename:std::unordered_map<Level,bool>	access:private
el::base::TypedConfigurations::m_fileStreamMap	src/easylogging/easylogging++.h	/^  std::unordered_map<Level, base::FileStreamPtr> m_fileStreamMap;$/;"	m	line:1939	language:C++	class:el::base::TypedConfigurations	typeref:typename:std::unordered_map<Level,base::FileStreamPtr>	access:private
el::base::TypedConfigurations::m_filenameMap	src/easylogging/easylogging++.h	/^  std::unordered_map<Level, std::string> m_filenameMap;$/;"	m	line:1934	language:C++	class:el::base::TypedConfigurations	typeref:typename:std::unordered_map<Level,std::string>	access:private
el::base::TypedConfigurations::m_logFlushThresholdMap	src/easylogging/easylogging++.h	/^  std::unordered_map<Level, std::size_t> m_logFlushThresholdMap;$/;"	m	line:1941	language:C++	class:el::base::TypedConfigurations	typeref:typename:std::unordered_map<Level,std::size_t>	access:private
el::base::TypedConfigurations::m_logFormatMap	src/easylogging/easylogging++.h	/^  std::unordered_map<Level, base::LogFormat> m_logFormatMap;$/;"	m	line:1936	language:C++	class:el::base::TypedConfigurations	typeref:typename:std::unordered_map<Level,base::LogFormat>	access:private
el::base::TypedConfigurations::m_logStreamsReference	src/easylogging/easylogging++.h	/^  base::LogStreamsReferenceMap* m_logStreamsReference;$/;"	m	line:1942	language:C++	class:el::base::TypedConfigurations	typeref:typename:base::LogStreamsReferenceMap *	access:private
el::base::TypedConfigurations::m_maxLogFileSizeMap	src/easylogging/easylogging++.h	/^  std::unordered_map<Level, std::size_t> m_maxLogFileSizeMap;$/;"	m	line:1940	language:C++	class:el::base::TypedConfigurations	typeref:typename:std::unordered_map<Level,std::size_t>	access:private
el::base::TypedConfigurations::m_performanceTrackingMap	src/easylogging/easylogging++.h	/^  std::unordered_map<Level, bool> m_performanceTrackingMap;$/;"	m	line:1938	language:C++	class:el::base::TypedConfigurations	typeref:typename:std::unordered_map<Level,bool>	access:private
el::base::TypedConfigurations::m_subsecondPrecisionMap	src/easylogging/easylogging++.h	/^  std::unordered_map<Level, base::SubsecondPrecision> m_subsecondPrecisionMap;$/;"	m	line:1937	language:C++	class:el::base::TypedConfigurations	typeref:typename:std::unordered_map<Level,base::SubsecondPrecision>	access:private
el::base::TypedConfigurations::m_toFileMap	src/easylogging/easylogging++.h	/^  std::unordered_map<Level, bool> m_toFileMap;$/;"	m	line:1933	language:C++	class:el::base::TypedConfigurations	typeref:typename:std::unordered_map<Level,bool>	access:private
el::base::TypedConfigurations::m_toStandardOutputMap	src/easylogging/easylogging++.h	/^  std::unordered_map<Level, bool> m_toStandardOutputMap;$/;"	m	line:1935	language:C++	class:el::base::TypedConfigurations	typeref:typename:std::unordered_map<Level,bool>	access:private
el::base::TypedConfigurations::maxLogFileSize	src/easylogging/easylogging++.cc	/^std::size_t TypedConfigurations::maxLogFileSize(Level level) {$/;"	f	line:1666	language:C++	class:el::base::TypedConfigurations	typeref:typename:std::size_t	signature:(Level level)
el::base::TypedConfigurations::maxLogFileSize	src/easylogging/easylogging++.h	/^  std::size_t maxLogFileSize(Level level);$/;"	p	line:1927	language:C++	class:el::base::TypedConfigurations	typeref:typename:std::size_t	access:public	signature:(Level level)
el::base::TypedConfigurations::millisecondsWidth	src/easylogging/easylogging++.cc	/^const base::MillisecondsWidth& TypedConfigurations::millisecondsWidth(Level level) {$/;"	f	line:1654	language:C++	class:el::base::TypedConfigurations	typeref:typename:const base::MillisecondsWidth &	signature:(Level level)
el::base::TypedConfigurations::millisecondsWidth	src/easylogging/easylogging++.h	/^  const base::MillisecondsWidth& millisecondsWidth(Level level = Level::Global);$/;"	p	line:1924	language:C++	class:el::base::TypedConfigurations	typeref:typename:const base::MillisecondsWidth &	access:public	signature:(Level level=Level::Global)
el::base::TypedConfigurations::performanceTracking	src/easylogging/easylogging++.cc	/^bool TypedConfigurations::performanceTracking(Level level) {$/;"	f	line:1658	language:C++	class:el::base::TypedConfigurations	typeref:typename:bool	signature:(Level level)
el::base::TypedConfigurations::performanceTracking	src/easylogging/easylogging++.h	/^  bool performanceTracking(Level level = Level::Global);$/;"	p	line:1925	language:C++	class:el::base::TypedConfigurations	typeref:typename:bool	access:public	signature:(Level level=Level::Global)
el::base::TypedConfigurations::resolveFilename	src/easylogging/easylogging++.cc	/^std::string TypedConfigurations::resolveFilename(const std::string& filename) {$/;"	f	line:1743	language:C++	class:el::base::TypedConfigurations	typeref:typename:std::string	signature:(const std::string & filename)
el::base::TypedConfigurations::resolveFilename	src/easylogging/easylogging++.h	/^  std::string resolveFilename(const std::string& filename);$/;"	p	line:2021	language:C++	class:el::base::TypedConfigurations	typeref:typename:std::string	access:private	signature:(const std::string & filename)
el::base::TypedConfigurations::setValue	src/easylogging/easylogging++.h	/^  void setValue(Level level, const Conf_T& value, std::unordered_map<Level, Conf_T>* confMap,$/;"	f	line:1996	language:C++	class:el::base::TypedConfigurations	typeref:typename:void	access:private	signature:(Level level,const Conf_T & value,std::unordered_map<Level,Conf_T> * confMap,bool includeGlobalLevel=true)
el::base::TypedConfigurations::subsecondPrecision	src/easylogging/easylogging++.cc	/^const base::SubsecondPrecision& TypedConfigurations::subsecondPrecision(Level level) {$/;"	f	line:1650	language:C++	class:el::base::TypedConfigurations	typeref:typename:const base::SubsecondPrecision &	signature:(Level level)
el::base::TypedConfigurations::subsecondPrecision	src/easylogging/easylogging++.h	/^  const base::SubsecondPrecision& subsecondPrecision(Level level = Level::Global);$/;"	p	line:1923	language:C++	class:el::base::TypedConfigurations	typeref:typename:const base::SubsecondPrecision &	access:public	signature:(Level level=Level::Global)
el::base::TypedConfigurations::toFile	src/easylogging/easylogging++.cc	/^bool TypedConfigurations::toFile(Level level) {$/;"	f	line:1634	language:C++	class:el::base::TypedConfigurations	typeref:typename:bool	signature:(Level level)
el::base::TypedConfigurations::toFile	src/easylogging/easylogging++.h	/^  bool toFile(Level level);$/;"	p	line:1919	language:C++	class:el::base::TypedConfigurations	typeref:typename:bool	access:public	signature:(Level level)
el::base::TypedConfigurations::toStandardOutput	src/easylogging/easylogging++.cc	/^bool TypedConfigurations::toStandardOutput(Level level) {$/;"	f	line:1642	language:C++	class:el::base::TypedConfigurations	typeref:typename:bool	signature:(Level level)
el::base::TypedConfigurations::toStandardOutput	src/easylogging/easylogging++.h	/^  bool toStandardOutput(Level level);$/;"	p	line:1921	language:C++	class:el::base::TypedConfigurations	typeref:typename:bool	access:public	signature:(Level level)
el::base::TypedConfigurations::unsafeGetConfigByRef	src/easylogging/easylogging++.h	/^  Conf_T& unsafeGetConfigByRef(Level level, std::unordered_map<Level, Conf_T>* confMap, const ch/;"	f	line:1980	language:C++	class:el::base::TypedConfigurations	typeref:typename:Conf_T &	access:private	signature:(Level level,std::unordered_map<Level,Conf_T> * confMap,const char * confName)
el::base::TypedConfigurations::unsafeGetConfigByVal	src/easylogging/easylogging++.h	/^  Conf_T unsafeGetConfigByVal(Level level, const std::unordered_map<Level, Conf_T>* confMap, con/;"	f	line:1963	language:C++	class:el::base::TypedConfigurations	typeref:typename:Conf_T	access:private	signature:(Level level,const std::unordered_map<Level,Conf_T> * confMap,const char * confName)
el::base::TypedConfigurations::unsafeValidateFileRolling	src/easylogging/easylogging++.cc	/^bool TypedConfigurations::unsafeValidateFileRolling(Level level, const PreRollOutCallback& preRo/;"	f	line:1819	language:C++	class:el::base::TypedConfigurations	typeref:typename:bool	signature:(Level level,const PreRollOutCallback & preRollOutCallback)
el::base::TypedConfigurations::unsafeValidateFileRolling	src/easylogging/easylogging++.h	/^  bool unsafeValidateFileRolling(Level level, const PreRollOutCallback& preRollOutCallback);$/;"	p	line:2023	language:C++	class:el::base::TypedConfigurations	typeref:typename:bool	access:private	signature:(Level level,const PreRollOutCallback & preRollOutCallback)
el::base::TypedConfigurations::validateFileRolling	src/easylogging/easylogging++.h	/^  inline bool validateFileRolling(Level level, const PreRollOutCallback& preRollOutCallback) {$/;"	f	line:2025	language:C++	class:el::base::TypedConfigurations	typeref:typename:bool	access:private	signature:(Level level,const PreRollOutCallback & preRollOutCallback)
el::base::TypedConfigurations::~TypedConfigurations	src/easylogging/easylogging++.h	/^  virtual ~TypedConfigurations(void) {$/;"	f	line:1911	language:C++	class:el::base::TypedConfigurations	access:public	signature:(void)
el::base::User	src/easylogging/easylogging++.h	/^  User = 1 << 7,$/;"	e	line:822	language:C++	enum:el::base::FormatFlags	access:public
el::base::VRegistry	src/easylogging/easylogging++.h	/^class VRegistry : base::NoCopy, public base::threading::ThreadSafe {$/;"	c	line:2415	language:C++	namespace:el::base	inherits:base::NoCopy,base::threading::ThreadSafe
el::base::VRegistry::VRegistry	src/easylogging/easylogging++.cc	/^VRegistry::VRegistry(base::type::VerboseLevel level, base::type::EnumType* pFlags) : m_level(lev/;"	f	line:1938	language:C++	class:el::base::VRegistry	signature:(base::type::VerboseLevel level,base::type::EnumType * pFlags)
el::base::VRegistry::VRegistry	src/easylogging/easylogging++.h	/^  explicit VRegistry(base::type::VerboseLevel level, base::type::EnumType* pFlags);$/;"	p	line:2417	language:C++	class:el::base::VRegistry	access:public	signature:(base::type::VerboseLevel level,base::type::EnumType * pFlags)
el::base::VRegistry::allowed	src/easylogging/easylogging++.cc	/^bool VRegistry::allowed(base::type::VerboseLevel vlevel, const char* file) {$/;"	f	line:2022	language:C++	class:el::base::VRegistry	typeref:typename:bool	signature:(base::type::VerboseLevel vlevel,const char * file)
el::base::VRegistry::allowed	src/easylogging/easylogging++.h	/^  bool allowed(base::type::VerboseLevel vlevel, const char* file);$/;"	p	line:2433	language:C++	class:el::base::VRegistry	typeref:typename:bool	access:public	signature:(base::type::VerboseLevel vlevel,const char * file)
el::base::VRegistry::clearModules	src/easylogging/easylogging++.h	/^  inline void clearModules(void) {$/;"	f	line:2426	language:C++	class:el::base::VRegistry	typeref:typename:void	access:public	signature:(void)
el::base::VRegistry::level	src/easylogging/easylogging++.h	/^  inline base::type::VerboseLevel level(void) const {$/;"	f	line:2422	language:C++	class:el::base::VRegistry	typeref:typename:base::type::VerboseLevel	access:public	signature:(void) const
el::base::VRegistry::m_level	src/easylogging/easylogging++.h	/^  base::type::VerboseLevel m_level;$/;"	m	line:2447	language:C++	class:el::base::VRegistry	typeref:typename:base::type::VerboseLevel	access:private
el::base::VRegistry::m_modules	src/easylogging/easylogging++.h	/^  std::unordered_map<std::string, base::type::VerboseLevel> m_modules;$/;"	m	line:2449	language:C++	class:el::base::VRegistry	typeref:typename:std::unordered_map<std::string,base::type::VerboseLevel>	access:private
el::base::VRegistry::m_pFlags	src/easylogging/easylogging++.h	/^  base::type::EnumType* m_pFlags;$/;"	m	line:2448	language:C++	class:el::base::VRegistry	typeref:typename:base::type::EnumType *	access:private
el::base::VRegistry::modules	src/easylogging/easylogging++.h	/^  inline const std::unordered_map<std::string, base::type::VerboseLevel>& modules(void) const {$/;"	f	line:2435	language:C++	class:el::base::VRegistry	typeref:typename:const std::unordered_map<std::string,base::type::VerboseLevel> &	access:public	signature:(void) const
el::base::VRegistry::setFromArgs	src/easylogging/easylogging++.cc	/^void VRegistry::setFromArgs(const base::utils::CommandLineArgs* commandLineArgs) {$/;"	f	line:2042	language:C++	class:el::base::VRegistry	typeref:typename:void	signature:(const base::utils::CommandLineArgs * commandLineArgs)
el::base::VRegistry::setFromArgs	src/easylogging/easylogging++.h	/^  void setFromArgs(const base::utils::CommandLineArgs* commandLineArgs);$/;"	p	line:2439	language:C++	class:el::base::VRegistry	typeref:typename:void	access:public	signature:(const base::utils::CommandLineArgs * commandLineArgs)
el::base::VRegistry::setLevel	src/easylogging/easylogging++.cc	/^void VRegistry::setLevel(base::type::VerboseLevel level) {$/;"	f	line:1942	language:C++	class:el::base::VRegistry	typeref:typename:void	signature:(base::type::VerboseLevel level)
el::base::VRegistry::setLevel	src/easylogging/easylogging++.h	/^  void setLevel(base::type::VerboseLevel level);$/;"	p	line:2420	language:C++	class:el::base::VRegistry	typeref:typename:void	access:public	signature:(base::type::VerboseLevel level)
el::base::VRegistry::setModules	src/easylogging/easylogging++.cc	/^void VRegistry::setModules(const char* modules) {$/;"	f	line:1950	language:C++	class:el::base::VRegistry	typeref:typename:void	signature:(const char * modules)
el::base::VRegistry::setModules	src/easylogging/easylogging++.h	/^  void setModules(const char* modules);$/;"	p	line:2431	language:C++	class:el::base::VRegistry	typeref:typename:void	access:public	signature:(const char * modules)
el::base::VRegistry::vModulesEnabled	src/easylogging/easylogging++.h	/^  inline bool vModulesEnabled(void) {$/;"	f	line:2442	language:C++	class:el::base::VRegistry	typeref:typename:bool	access:public	signature:(void)
el::base::VerboseLevel	src/easylogging/easylogging++.h	/^  VerboseLevel = 1 << 10,$/;"	e	line:825	language:C++	enum:el::base::FormatFlags	access:public
el::base::Writer	src/easylogging/easylogging++.h	/^class Writer : base::NoCopy {$/;"	c	line:3188	language:C++	namespace:el::base	inherits:base::NoCopy
el::base::Writer::Writer	src/easylogging/easylogging++.h	/^  Writer(Level level, const char* file, base::type::LineNumber line,$/;"	f	line:3190	language:C++	class:el::base::Writer	access:public	signature:(Level level,const char * file,base::type::LineNumber line,const char * func,base::DispatchAction dispatchAction=base::DispatchAction::NormalLog,base::type::VerboseLevel verboseLevel=0)
el::base::Writer::Writer	src/easylogging/easylogging++.h	/^  Writer(LogMessage* msg, base::DispatchAction dispatchAction = base::DispatchAction::NormalLog)/;"	f	line:3197	language:C++	class:el::base::Writer	access:public	signature:(LogMessage * msg,base::DispatchAction dispatchAction=base::DispatchAction::NormalLog)
el::base::Writer::construct	src/easylogging/easylogging++.cc	/^Writer& Writer::construct(Logger* logger, bool needLock) {$/;"	f	line:2532	language:C++	class:el::base::Writer	typeref:typename:Writer &	signature:(Logger * logger,bool needLock)
el::base::Writer::construct	src/easylogging/easylogging++.cc	/^Writer& Writer::construct(int count, const char* loggerIds, ...) {$/;"	f	line:2539	language:C++	class:el::base::Writer	typeref:typename:Writer &	signature:(int count,const char * loggerIds,...)
el::base::Writer::construct	src/easylogging/easylogging++.h	/^  Writer& construct(Logger* logger, bool needLock = true);$/;"	p	line:3229	language:C++	class:el::base::Writer	typeref:typename:Writer &	access:public	signature:(Logger * logger,bool needLock=true)
el::base::Writer::construct	src/easylogging/easylogging++.h	/^  Writer& construct(int count, const char* loggerIds, ...);$/;"	p	line:3230	language:C++	class:el::base::Writer	typeref:typename:Writer &	access:public	signature:(int count,const char * loggerIds,...)
el::base::Writer::initializeLogger	src/easylogging/easylogging++.cc	/^void Writer::initializeLogger(const std::string& loggerId, bool lookup, bool needLock) {$/;"	f	line:2558	language:C++	class:el::base::Writer	typeref:typename:void	signature:(const std::string & loggerId,bool lookup,bool needLock)
el::base::Writer::initializeLogger	src/easylogging/easylogging++.h	/^  void initializeLogger(const std::string& loggerId, bool lookup = true, bool needLock = true);$/;"	p	line:3245	language:C++	class:el::base::Writer	typeref:typename:void	access:protected	signature:(const std::string & loggerId,bool lookup=true,bool needLock=true)
el::base::Writer::m_dispatchAction	src/easylogging/easylogging++.h	/^  base::DispatchAction m_dispatchAction;$/;"	m	line:3241	language:C++	class:el::base::Writer	typeref:typename:base::DispatchAction	access:protected
el::base::Writer::m_file	src/easylogging/easylogging++.h	/^  const char* m_file;$/;"	m	line:3234	language:C++	class:el::base::Writer	typeref:typename:const char *	access:protected
el::base::Writer::m_func	src/easylogging/easylogging++.h	/^  const char* m_func;$/;"	m	line:3236	language:C++	class:el::base::Writer	typeref:typename:const char *	access:protected
el::base::Writer::m_level	src/easylogging/easylogging++.h	/^  Level m_level;$/;"	m	line:3233	language:C++	class:el::base::Writer	typeref:typename:Level	access:protected
el::base::Writer::m_line	src/easylogging/easylogging++.h	/^  const base::type::LineNumber m_line;$/;"	m	line:3235	language:C++	class:el::base::Writer	typeref:typename:const base::type::LineNumber	access:protected
el::base::Writer::m_logger	src/easylogging/easylogging++.h	/^  Logger* m_logger;$/;"	m	line:3238	language:C++	class:el::base::Writer	typeref:typename:Logger *	access:protected
el::base::Writer::m_loggerIds	src/easylogging/easylogging++.h	/^  std::vector<std::string> m_loggerIds;$/;"	m	line:3242	language:C++	class:el::base::Writer	typeref:typename:std::vector<std::string>	access:protected
el::base::Writer::m_messageBuilder	src/easylogging/easylogging++.h	/^  base::MessageBuilder m_messageBuilder;$/;"	m	line:3240	language:C++	class:el::base::Writer	typeref:typename:base::MessageBuilder	access:protected
el::base::Writer::m_msg	src/easylogging/easylogging++.h	/^  LogMessage* m_msg;$/;"	m	line:3232	language:C++	class:el::base::Writer	typeref:typename:LogMessage *	access:protected
el::base::Writer::m_proceed	src/easylogging/easylogging++.h	/^  bool m_proceed;$/;"	m	line:3239	language:C++	class:el::base::Writer	typeref:typename:bool	access:protected
el::base::Writer::m_verboseLevel	src/easylogging/easylogging++.h	/^  base::type::VerboseLevel m_verboseLevel;$/;"	m	line:3237	language:C++	class:el::base::Writer	typeref:typename:base::type::VerboseLevel	access:protected
el::base::Writer::operator <<	src/easylogging/easylogging++.h	/^  inline Writer& operator<<(const T& log) {$/;"	f	line:3207	language:C++	class:el::base::Writer	typeref:typename:Writer &	access:public	signature:(const T & log)
el::base::Writer::operator <<	src/easylogging/easylogging++.h	/^  inline Writer& operator<<(std::ostream& (*log)(std::ostream&)) {$/;"	f	line:3216	language:C++	class:el::base::Writer	typeref:typename:Writer &	access:public	signature:(std::ostream & (* log)(std::ostream &))
el::base::Writer::processDispatch	src/easylogging/easylogging++.cc	/^void Writer::processDispatch() {$/;"	f	line:2586	language:C++	class:el::base::Writer	typeref:typename:void	signature:()
el::base::Writer::processDispatch	src/easylogging/easylogging++.h	/^  void processDispatch();$/;"	p	line:3246	language:C++	class:el::base::Writer	typeref:typename:void	access:protected	signature:()
el::base::Writer::triggerDispatch	src/easylogging/easylogging++.cc	/^void Writer::triggerDispatch(void) {$/;"	f	line:2627	language:C++	class:el::base::Writer	typeref:typename:void	signature:(void)
el::base::Writer::triggerDispatch	src/easylogging/easylogging++.h	/^  void triggerDispatch(void);$/;"	p	line:3247	language:C++	class:el::base::Writer	typeref:typename:void	access:protected	signature:(void)
el::base::Writer::~Writer	src/easylogging/easylogging++.h	/^  virtual ~Writer(void) {$/;"	f	line:3202	language:C++	class:el::base::Writer	access:public	signature:(void)
el::base::consts	src/easylogging/easylogging++.cc	/^namespace consts {$/;"	n	line:28	language:C++	namespace:el::base	file:
el::base::consts	src/easylogging/easylogging++.h	/^namespace consts {$/;"	n	line:730	language:C++	namespace:el::base
el::base::consts::__anondf7eda890108	src/easylogging/easylogging++.h	/^const struct {$/;"	s	line:764	language:C++	namespace:el::base::consts
el::base::consts::__anondf7eda890108::unit	src/easylogging/easylogging++.h	/^  const base::type::char_t* unit;$/;"	m	line:766	language:C++	struct:el::base::consts::__anondf7eda890108	typeref:typename:const base::type::char_t *	access:public
el::base::consts::__anondf7eda890108::value	src/easylogging/easylogging++.h	/^  double value;$/;"	m	line:765	language:C++	struct:el::base::consts::__anondf7eda890108	typeref:typename:double	access:public
el::base::consts::__anondf7eda890208	src/easylogging/easylogging++.h	/^const struct {$/;"	s	line:776	language:C++	namespace:el::base::consts
el::base::consts::__anondf7eda890208::brief	src/easylogging/easylogging++.h	/^  const char* brief;$/;"	m	line:779	language:C++	struct:el::base::consts::__anondf7eda890208	typeref:typename:const char *	access:public
el::base::consts::__anondf7eda890208::detail	src/easylogging/easylogging++.h	/^  const char* detail;$/;"	m	line:780	language:C++	struct:el::base::consts::__anondf7eda890208	typeref:typename:const char *	access:public
el::base::consts::__anondf7eda890208::name	src/easylogging/easylogging++.h	/^  const char* name;$/;"	m	line:778	language:C++	struct:el::base::consts::__anondf7eda890208	typeref:typename:const char *	access:public
el::base::consts::__anondf7eda890208::numb	src/easylogging/easylogging++.h	/^  int numb;$/;"	m	line:777	language:C++	struct:el::base::consts::__anondf7eda890208	typeref:typename:int	access:public
el::base::consts::kAm	src/easylogging/easylogging++.cc	/^static const char* kAm                              =      "AM";$/;"	v	line:74	language:C++	namespace:el::base::consts	typeref:typename:const char *	file:
el::base::consts::kAppNameFormatSpecifier	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kAppNameFormatSpecifier          =      ELPP_LITERAL("%app");$/;"	v	line:48	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
el::base::consts::kConfigurationComment	src/easylogging/easylogging++.cc	/^static const char* kConfigurationComment                   =      "##";$/;"	v	line:109	language:C++	namespace:el::base::consts	typeref:typename:const char *	file:
el::base::consts::kConfigurationLevel	src/easylogging/easylogging++.cc	/^static const char* kConfigurationLevel                     =      "*";$/;"	v	line:110	language:C++	namespace:el::base::consts	typeref:typename:const char *	file:
el::base::consts::kConfigurationLoggerId	src/easylogging/easylogging++.cc	/^static const char* kConfigurationLoggerId                  =      "--";$/;"	v	line:111	language:C++	namespace:el::base::consts	typeref:typename:const char *	file:
el::base::consts::kCrashSignals	src/easylogging/easylogging++.h	/^} kCrashSignals[] = {$/;"	v	line:781	language:C++	namespace:el::base::consts	typeref:typename:const struct el::base::consts::__anondf7eda890208[]
el::base::consts::kCrashSignalsCount	src/easylogging/easylogging++.h	/^static const int kCrashSignalsCount                          =      sizeof(kCrashSignals) \/ siz/;"	v	line:804	language:C++	namespace:el::base::consts	typeref:typename:const int
el::base::consts::kCurrentHostFormatSpecifier	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kCurrentHostFormatSpecifier      =      ELPP_LITERAL("%host");$/;"	v	line:60	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
el::base::consts::kCurrentUserFormatSpecifier	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kCurrentUserFormatSpecifier      =      ELPP_LITERAL("%user");$/;"	v	line:59	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
el::base::consts::kDateTimeFormatSpecifier	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kDateTimeFormatSpecifier         =      ELPP_LITERAL("%datetime/;"	v	line:53	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
el::base::consts::kDateTimeFormatSpecifierForFilename	src/easylogging/easylogging++.cc	/^static const char* kDateTimeFormatSpecifierForFilename            =      "%datetime";$/;"	v	line:63	language:C++	namespace:el::base::consts	typeref:typename:const char *	file:
el::base::consts::kDays	src/easylogging/easylogging++.cc	/^static const char* kDays[7]                         =      { "Sunday", "Monday", "Tuesday", "Wed/;"	v	line:65	language:C++	namespace:el::base::consts	typeref:typename:const char * [7]	file:
el::base::consts::kDaysAbbrev	src/easylogging/easylogging++.cc	/^static const char* kDaysAbbrev[7]                   =      { "Sun", "Mon", "Tue", "Wed", "Thu", /;"	v	line:66	language:C++	namespace:el::base::consts	typeref:typename:const char * [7]	file:
el::base::consts::kDebugLevelLogValue	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kDebugLevelLogValue    =   ELPP_LITERAL("DEBUG");$/;"	v	line:33	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
el::base::consts::kDebugLevelShortLogValue	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kDebugLevelShortLogValue    =   ELPP_LITERAL("D");$/;"	v	line:41	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
el::base::consts::kDefaultDateTimeFormat	src/easylogging/easylogging++.cc	/^static const char* kDefaultDateTimeFormat           =      "%Y-%M-%d %H:%m:%s,%g";$/;"	v	line:71	language:C++	namespace:el::base::consts	typeref:typename:const char *	file:
el::base::consts::kDefaultDateTimeFormatInFilename	src/easylogging/easylogging++.cc	/^static const char* kDefaultDateTimeFormatInFilename =      "%Y-%M-%d_%H-%m";$/;"	v	line:72	language:C++	namespace:el::base::consts	typeref:typename:const char *	file:
el::base::consts::kDefaultLogFile	src/easylogging/easylogging++.cc	/^static const char* kDefaultLogFile                         =      "\/dev\/null";$/;"	v	line:90	language:C++	namespace:el::base::consts	typeref:typename:const char *	file:
el::base::consts::kDefaultLogFile	src/easylogging/easylogging++.cc	/^static const char* kDefaultLogFile                         =      "myeasylog.log";$/;"	v	line:97	language:C++	namespace:el::base::consts	typeref:typename:const char *	file:
el::base::consts::kDefaultLogFile	src/easylogging/easylogging++.cc	/^static const char* kDefaultLogFile                         =      "nul";$/;"	v	line:92	language:C++	namespace:el::base::consts	typeref:typename:const char *	file:
el::base::consts::kDefaultLogFile	src/easylogging/easylogging++.cc	/^static const char* kDefaultLogFile                         =      ELPP_DEFAULT_LOG_FILE;$/;"	v	line:95	language:C++	namespace:el::base::consts	typeref:typename:const char *	file:
el::base::consts::kDefaultLogFileParam	src/easylogging/easylogging++.cc	/^static const char* kDefaultLogFileParam                    =      "--default-log-file";$/;"	v	line:102	language:C++	namespace:el::base::consts	typeref:typename:const char *	file:
el::base::consts::kDefaultLoggerId	src/easylogging/easylogging++.h	/^static const char* kDefaultLoggerId                        =      "default";$/;"	v	line:740	language:C++	namespace:el::base::consts	typeref:typename:const char *
el::base::consts::kDefaultLoggerId	src/easylogging/easylogging++.h	/^static const char* kDefaultLoggerId                        =      ELPP_DEFAULT_LOGGER;$/;"	v	line:738	language:C++	namespace:el::base::consts	typeref:typename:const char *
el::base::consts::kDefaultSubsecondPrecision	src/easylogging/easylogging++.h	/^static const unsigned int kDefaultSubsecondPrecision       =      3;$/;"	v	line:735	language:C++	namespace:el::base::consts	typeref:typename:const unsigned int
el::base::consts::kErrorLevelLogValue	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kErrorLevelLogValue    =   ELPP_LITERAL("ERROR");$/;"	v	line:35	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
el::base::consts::kErrorLevelShortLogValue	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kErrorLevelShortLogValue    =   ELPP_LITERAL("E");$/;"	v	line:43	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
el::base::consts::kFatalLevelLogValue	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kFatalLevelLogValue    =   ELPP_LITERAL("FATAL");$/;"	v	line:36	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
el::base::consts::kFatalLevelShortLogValue	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kFatalLevelShortLogValue    =   ELPP_LITERAL("F");$/;"	v	line:44	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
el::base::consts::kFilePathSeperator	src/easylogging/easylogging++.h	/^static const char* kFilePathSeperator                      =      "\/";$/;"	v	line:758	language:C++	namespace:el::base::consts	typeref:typename:const char *
el::base::consts::kFilePathSeperator	src/easylogging/easylogging++.h	/^static const char* kFilePathSeperator                      =      "\\\\";$/;"	v	line:756	language:C++	namespace:el::base::consts	typeref:typename:const char *
el::base::consts::kFormatSpecifierChar	src/easylogging/easylogging++.h	/^static const char  kFormatSpecifierChar                    =      '%';$/;"	v	line:732	language:C++	namespace:el::base::consts	typeref:typename:const char
el::base::consts::kFormatSpecifierCharValue	src/easylogging/easylogging++.h	/^static const char  kFormatSpecifierCharValue               =      'v';$/;"	v	line:731	language:C++	namespace:el::base::consts	typeref:typename:const char
el::base::consts::kInfoLevelLogValue	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kInfoLevelLogValue     =   ELPP_LITERAL("INFO");$/;"	v	line:32	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
el::base::consts::kInfoLevelShortLogValue	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kInfoLevelShortLogValue     =   ELPP_LITERAL("I");$/;"	v	line:40	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
el::base::consts::kLogFileBaseFormatSpecifier	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kLogFileBaseFormatSpecifier      =      ELPP_LITERAL("%fbase");$/;"	v	line:55	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
el::base::consts::kLogFileFormatSpecifier	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kLogFileFormatSpecifier          =      ELPP_LITERAL("%file");$/;"	v	line:54	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
el::base::consts::kLogFunctionFormatSpecifier	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kLogFunctionFormatSpecifier      =      ELPP_LITERAL("%func");$/;"	v	line:58	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
el::base::consts::kLogLineFormatSpecifier	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kLogLineFormatSpecifier          =      ELPP_LITERAL("%line");$/;"	v	line:56	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
el::base::consts::kLogLocationFormatSpecifier	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kLogLocationFormatSpecifier      =      ELPP_LITERAL("%loc");$/;"	v	line:57	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
el::base::consts::kLoggerIdFormatSpecifier	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kLoggerIdFormatSpecifier         =      ELPP_LITERAL("%logger")/;"	v	line:49	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
el::base::consts::kLoggingFlagsParam	src/easylogging/easylogging++.cc	/^static const char* kLoggingFlagsParam                      =      "--logging-flags";$/;"	v	line:105	language:C++	namespace:el::base::consts	typeref:typename:const char *	file:
el::base::consts::kMaxLogPerContainer	src/easylogging/easylogging++.h	/^static const unsigned int kMaxLogPerContainer              =      100;$/;"	v	line:734	language:C++	namespace:el::base::consts	typeref:typename:const unsigned int
el::base::consts::kMaxLogPerCounter	src/easylogging/easylogging++.h	/^static const unsigned int kMaxLogPerCounter                =      100000;$/;"	v	line:733	language:C++	namespace:el::base::consts	typeref:typename:const unsigned int
el::base::consts::kMaxVerboseLevel	src/easylogging/easylogging++.cc	/^static const base::type::VerboseLevel kMaxVerboseLevel     =      9;$/;"	v	line:81	language:C++	namespace:el::base::consts	typeref:typename:const base::type::VerboseLevel	file:
el::base::consts::kMessageFormatSpecifier	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kMessageFormatSpecifier          =      ELPP_LITERAL("%msg");$/;"	v	line:61	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
el::base::consts::kMonths	src/easylogging/easylogging++.cc	/^static const char* kMonths[12]                      =      { "January", "February", "March", "Ap/;"	v	line:67	language:C++	namespace:el::base::consts	typeref:typename:const char * [12]	file:
el::base::consts::kMonthsAbbrev	src/easylogging/easylogging++.cc	/^static const char* kMonthsAbbrev[12]                =      { "Jan", "Feb", "Mar", "Apr", "May", /;"	v	line:70	language:C++	namespace:el::base::consts	typeref:typename:const char * [12]	file:
el::base::consts::kNullPointer	src/easylogging/easylogging++.cc	/^static const char* kNullPointer                            =      "nullptr";$/;"	v	line:78	language:C++	namespace:el::base::consts	typeref:typename:const char *	file:
el::base::consts::kPerformanceLoggerId	src/easylogging/easylogging++.h	/^static const char* kPerformanceLoggerId                    =      "performance";$/;"	v	line:747	language:C++	namespace:el::base::consts	typeref:typename:const char *
el::base::consts::kPerformanceLoggerId	src/easylogging/easylogging++.h	/^static const char* kPerformanceLoggerId                    =      ELPP_DEFAULT_PERFORMANCE_LOGGE/;"	v	line:745	language:C++	namespace:el::base::consts	typeref:typename:const char *
el::base::consts::kPerformanceTrackerDefaultLevel	src/easylogging/easylogging++.h	/^static const Level kPerformanceTrackerDefaultLevel         =      Level::Info;$/;"	v	line:763	language:C++	namespace:el::base::consts	typeref:typename:const Level
el::base::consts::kPm	src/easylogging/easylogging++.cc	/^static const char* kPm                              =      "PM";$/;"	v	line:75	language:C++	namespace:el::base::consts	typeref:typename:const char *	file:
el::base::consts::kSeverityLevelFormatSpecifier	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kSeverityLevelFormatSpecifier    =      ELPP_LITERAL("%level");$/;"	v	line:51	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
el::base::consts::kSeverityLevelShortFormatSpecifier	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kSeverityLevelShortFormatSpecifier    =      ELPP_LITERAL("%lev/;"	v	line:52	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
el::base::consts::kSourceFilenameMaxLength	src/easylogging/easylogging++.h	/^static const std::size_t kSourceFilenameMaxLength          =      100;$/;"	v	line:761	language:C++	namespace:el::base::consts	typeref:typename:const std::size_t
el::base::consts::kSourceLineMaxLength	src/easylogging/easylogging++.h	/^static const std::size_t kSourceLineMaxLength              =      10;$/;"	v	line:762	language:C++	namespace:el::base::consts	typeref:typename:const std::size_t
el::base::consts::kSysLogLoggerId	src/easylogging/easylogging++.h	/^static const char* kSysLogLoggerId                         =      "syslog";$/;"	v	line:752	language:C++	namespace:el::base::consts	typeref:typename:const char *
el::base::consts::kThreadIdFormatSpecifier	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kThreadIdFormatSpecifier         =      ELPP_LITERAL("%thread")/;"	v	line:50	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
el::base::consts::kTimeFormats	src/easylogging/easylogging++.h	/^} kTimeFormats[] = {$/;"	v	line:767	language:C++	namespace:el::base::consts	typeref:typename:const struct el::base::consts::__anondf7eda890108[]
el::base::consts::kTimeFormatsCount	src/easylogging/easylogging++.h	/^static const int kTimeFormatsCount                           =      sizeof(kTimeFormats) \/ size/;"	v	line:775	language:C++	namespace:el::base::consts	typeref:typename:const int
el::base::consts::kTraceLevelLogValue	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kTraceLevelLogValue    =   ELPP_LITERAL("TRACE");$/;"	v	line:39	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
el::base::consts::kTraceLevelShortLogValue	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kTraceLevelShortLogValue    =   ELPP_LITERAL("T");$/;"	v	line:46	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
el::base::consts::kUnknownHost	src/easylogging/easylogging++.cc	/^static const char* kUnknownHost                            =      "unknown-host";$/;"	v	line:83	language:C++	namespace:el::base::consts	typeref:typename:const char *	file:
el::base::consts::kUnknownUser	src/easylogging/easylogging++.cc	/^static const char* kUnknownUser                            =      "user";$/;"	v	line:82	language:C++	namespace:el::base::consts	typeref:typename:const char *	file:
el::base::consts::kValidLoggerIdSymbols	src/easylogging/easylogging++.cc	/^static const char* kValidLoggerIdSymbols                   =$/;"	v	line:107	language:C++	namespace:el::base::consts	typeref:typename:const char *	file:
el::base::consts::kVerboseLevelFormatSpecifier	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kVerboseLevelFormatSpecifier     =      ELPP_LITERAL("%vlevel")/;"	v	line:62	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
el::base::consts::kVerboseLevelLogValue	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kVerboseLevelLogValue  =$/;"	v	line:37	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
el::base::consts::kVerboseLevelShortLogValue	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kVerboseLevelShortLogValue  =   ELPP_LITERAL("V");$/;"	v	line:45	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
el::base::consts::kWarningLevelLogValue	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kWarningLevelLogValue  =   ELPP_LITERAL("WARNING");$/;"	v	line:34	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
el::base::consts::kWarningLevelShortLogValue	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kWarningLevelShortLogValue  =   ELPP_LITERAL("W");$/;"	v	line:42	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
el::base::consts::kYearBase	src/easylogging/easylogging++.cc	/^static const int kYearBase                          =      1900;$/;"	v	line:73	language:C++	namespace:el::base::consts	typeref:typename:const int	file:
el::base::debug	src/easylogging/easylogging++.cc	/^namespace debug {$/;"	n	line:2759	language:C++	namespace:el::base	file:
el::base::debug	src/easylogging/easylogging++.h	/^namespace debug {$/;"	n	line:3562	language:C++	namespace:el::base
el::base::debug::CrashHandler	src/easylogging/easylogging++.h	/^class CrashHandler : base::NoCopy {$/;"	c	line:3606	language:C++	namespace:el::base::debug	inherits:base::NoCopy
el::base::debug::CrashHandler::CrashHandler	src/easylogging/easylogging++.cc	/^CrashHandler::CrashHandler(bool useDefault) {$/;"	f	line:2893	language:C++	class:el::base::debug::CrashHandler	signature:(bool useDefault)
el::base::debug::CrashHandler::CrashHandler	src/easylogging/easylogging++.h	/^  explicit CrashHandler(bool useDefault);$/;"	p	line:3610	language:C++	class:el::base::debug::CrashHandler	access:public	signature:(bool useDefault)
el::base::debug::CrashHandler::CrashHandler	src/easylogging/easylogging++.h	/^  explicit CrashHandler(const Handler& cHandler) {$/;"	f	line:3611	language:C++	class:el::base::debug::CrashHandler	access:public	signature:(const Handler & cHandler)
el::base::debug::CrashHandler::Handler	src/easylogging/easylogging++.h	/^  typedef void (*Handler)(int);$/;"	t	line:3608	language:C++	class:el::base::debug::CrashHandler	typeref:typename:void (*)(int)	access:public
el::base::debug::CrashHandler::m_handler	src/easylogging/easylogging++.h	/^  Handler m_handler;$/;"	m	line:3617	language:C++	class:el::base::debug::CrashHandler	typeref:typename:Handler	access:private
el::base::debug::CrashHandler::setHandler	src/easylogging/easylogging++.cc	/^void CrashHandler::setHandler(const Handler& cHandler) {$/;"	f	line:2899	language:C++	class:el::base::debug::CrashHandler	typeref:typename:void	signature:(const Handler & cHandler)
el::base::debug::CrashHandler::setHandler	src/easylogging/easylogging++.h	/^  void setHandler(const Handler& cHandler);$/;"	p	line:3614	language:C++	class:el::base::debug::CrashHandler	typeref:typename:void	access:public	signature:(const Handler & cHandler)
el::base::debug::StackTrace	src/easylogging/easylogging++.h	/^class StackTrace : base::NoCopy {$/;"	c	line:3564	language:C++	namespace:el::base::debug	inherits:base::NoCopy
el::base::debug::StackTrace::StackTrace	src/easylogging/easylogging++.h	/^  StackTrace(void) {$/;"	f	line:3587	language:C++	class:el::base::debug::StackTrace	access:public	signature:(void)
el::base::debug::StackTrace::StackTraceEntry	src/easylogging/easylogging++.h	/^  class StackTraceEntry {$/;"	c	line:3568	language:C++	class:el::base::debug::StackTrace	access:public
el::base::debug::StackTrace::StackTraceEntry::StackTraceEntry	src/easylogging/easylogging++.cc	/^StackTrace::StackTraceEntry::StackTraceEntry(std::size_t index, const std::string& loc, const st/;"	f	line:2764	language:C++	class:el::base::debug::StackTrace::StackTraceEntry	signature:(std::size_t index,const std::string & loc,const std::string & demang,const std::string & hex,const std::string & addr)
el::base::debug::StackTrace::StackTraceEntry::StackTraceEntry	src/easylogging/easylogging++.h	/^    StackTraceEntry(std::size_t index, const std::string& loc) :$/;"	f	line:3572	language:C++	class:el::base::debug::StackTrace::StackTraceEntry	access:public	signature:(std::size_t index,const std::string & loc)
el::base::debug::StackTrace::StackTraceEntry::StackTraceEntry	src/easylogging/easylogging++.h	/^    StackTraceEntry(std::size_t index, const std::string& loc, const std::string& demang, const /;"	p	line:3570	language:C++	class:el::base::debug::StackTrace::StackTraceEntry	access:public	signature:(std::size_t index,const std::string & loc,const std::string & demang,const std::string & hex,const std::string & addr)
el::base::debug::StackTrace::StackTraceEntry::StackTraceEntry	src/easylogging/easylogging++.h	/^    StackTraceEntry(void);$/;"	p	line:3584	language:C++	class:el::base::debug::StackTrace::StackTraceEntry	access:private	signature:(void)
el::base::debug::StackTrace::StackTraceEntry::m_addr	src/easylogging/easylogging++.h	/^    std::string m_addr;$/;"	m	line:3580	language:C++	class:el::base::debug::StackTrace::StackTraceEntry	typeref:typename:std::string	access:public
el::base::debug::StackTrace::StackTraceEntry::m_demangled	src/easylogging/easylogging++.h	/^    std::string m_demangled;$/;"	m	line:3578	language:C++	class:el::base::debug::StackTrace::StackTraceEntry	typeref:typename:std::string	access:public
el::base::debug::StackTrace::StackTraceEntry::m_hex	src/easylogging/easylogging++.h	/^    std::string m_hex;$/;"	m	line:3579	language:C++	class:el::base::debug::StackTrace::StackTraceEntry	typeref:typename:std::string	access:public
el::base::debug::StackTrace::StackTraceEntry::m_index	src/easylogging/easylogging++.h	/^    std::size_t m_index;$/;"	m	line:3576	language:C++	class:el::base::debug::StackTrace::StackTraceEntry	typeref:typename:std::size_t	access:public
el::base::debug::StackTrace::StackTraceEntry::m_location	src/easylogging/easylogging++.h	/^    std::string m_location;$/;"	m	line:3577	language:C++	class:el::base::debug::StackTrace::StackTraceEntry	typeref:typename:std::string	access:public
el::base::debug::StackTrace::generateNew	src/easylogging/easylogging++.cc	/^void StackTrace::generateNew(void) {$/;"	f	line:2788	language:C++	class:el::base::debug::StackTrace	typeref:typename:void	signature:(void)
el::base::debug::StackTrace::generateNew	src/easylogging/easylogging++.h	/^  void generateNew(void);$/;"	p	line:3603	language:C++	class:el::base::debug::StackTrace	typeref:typename:void	access:private	signature:(void)
el::base::debug::StackTrace::getLatestStack	src/easylogging/easylogging++.h	/^  inline std::vector<StackTraceEntry>& getLatestStack(void) {$/;"	f	line:3594	language:C++	class:el::base::debug::StackTrace	typeref:typename:std::vector<StackTraceEntry> &	access:public	signature:(void)
el::base::debug::StackTrace::kMaxStack	src/easylogging/easylogging++.h	/^  static const unsigned int kMaxStack = 64;$/;"	m	line:3566	language:C++	class:el::base::debug::StackTrace	typeref:typename:const unsigned int	access:public
el::base::debug::StackTrace::kStackStart	src/easylogging/easylogging++.h	/^  static const unsigned int kStackStart = 2;  \/\/ We want to skip c'tor and StackTrace::generat/;"	m	line:3567	language:C++	class:el::base::debug::StackTrace	typeref:typename:const unsigned int	access:public
el::base::debug::StackTrace::m_stack	src/easylogging/easylogging++.h	/^  std::vector<StackTraceEntry> m_stack;$/;"	m	line:3601	language:C++	class:el::base::debug::StackTrace	typeref:typename:std::vector<StackTraceEntry>	access:private
el::base::debug::StackTrace::~StackTrace	src/easylogging/easylogging++.h	/^  virtual ~StackTrace(void) {$/;"	f	line:3591	language:C++	class:el::base::debug::StackTrace	access:public	signature:(void)
el::base::debug::crashAbort	src/easylogging/easylogging++.cc	/^static inline void crashAbort(int sig) {$/;"	f	line:2879	language:C++	namespace:el::base::debug	typeref:typename:void	file:	signature:(int sig)
el::base::debug::crashReason	src/easylogging/easylogging++.cc	/^static std::string crashReason(int sig) {$/;"	f	line:2842	language:C++	namespace:el::base::debug	typeref:typename:std::string	file:	signature:(int sig)
el::base::debug::defaultCrashHandler	src/easylogging/easylogging++.cc	/^static inline void defaultCrashHandler(int sig) {$/;"	f	line:2886	language:C++	namespace:el::base::debug	typeref:typename:void	file:	signature:(int sig)
el::base::debug::logCrashReason	src/easylogging/easylogging++.cc	/^static void logCrashReason(int sig, bool stackTraceIfAvailable, Level level, const char* logger)/;"	f	line:2862	language:C++	namespace:el::base::debug	typeref:typename:void	file:	signature:(int sig,bool stackTraceIfAvailable,Level level,const char * logger)
el::base::debug::operator <<	src/easylogging/easylogging++.cc	/^std::ostream& operator<<(std::ostream& os, const StackTrace& st) {$/;"	f	line:2780	language:C++	namespace:el::base::debug	typeref:typename:std::ostream &	signature:(std::ostream & os,const StackTrace & st)
el::base::debug::operator <<	src/easylogging/easylogging++.cc	/^std::ostream& operator<<(std::ostream& ss, const StackTrace::StackTraceEntry& si) {$/;"	f	line:2774	language:C++	namespace:el::base::debug	typeref:typename:std::ostream &	signature:(std::ostream & ss,const StackTrace::StackTraceEntry & si)
el::base::defaultPreRollOutCallback	src/easylogging/easylogging++.h	/^static inline void defaultPreRollOutCallback(const char*, std::size_t) {}$/;"	f	line:809	language:C++	namespace:el::base	typeref:typename:void	signature:(const char *,std::size_t)
el::base::threading	src/easylogging/easylogging++.cc	/^namespace threading {$/;"	n	line:1385	language:C++	namespace:el::base	file:
el::base::threading	src/easylogging/easylogging++.h	/^namespace threading {$/;"	n	line:892	language:C++	namespace:el::base
el::base::threading::Mutex	src/easylogging/easylogging++.h	/^typedef base::threading::internal::Mutex Mutex;$/;"	t	line:967	language:C++	namespace:el::base::threading	typeref:typename:base::threading::internal::Mutex
el::base::threading::ScopedLock	src/easylogging/easylogging++.h	/^typedef base::threading::internal::ScopedLock<base::threading::Mutex> ScopedLock;$/;"	t	line:968	language:C++	namespace:el::base::threading	typeref:typename:base::threading::internal::ScopedLock<base::threading::Mutex>
el::base::threading::ThreadSafe	src/easylogging/easylogging++.h	/^class ThreadSafe {$/;"	c	line:1001	language:C++	namespace:el::base::threading
el::base::threading::ThreadSafe::ThreadSafe	src/easylogging/easylogging++.h	/^  ThreadSafe(void) {}$/;"	f	line:1007	language:C++	class:el::base::threading::ThreadSafe	access:protected	signature:(void)
el::base::threading::ThreadSafe::acquireLock	src/easylogging/easylogging++.h	/^  virtual inline void acquireLock(void) ELPP_FINAL { m_mutex.lock(); }$/;"	f	line:1003	language:C++	class:el::base::threading::ThreadSafe	typeref:typename:void	access:public	signature:(void)
el::base::threading::ThreadSafe::lock	src/easylogging/easylogging++.h	/^  virtual inline base::threading::Mutex& lock(void) ELPP_FINAL { return m_mutex; }$/;"	f	line:1005	language:C++	class:el::base::threading::ThreadSafe	typeref:typename:base::threading::Mutex &	access:public	signature:(void)
el::base::threading::ThreadSafe::m_mutex	src/easylogging/easylogging++.h	/^  base::threading::Mutex m_mutex;$/;"	m	line:1010	language:C++	class:el::base::threading::ThreadSafe	typeref:typename:base::threading::Mutex	access:private
el::base::threading::ThreadSafe::releaseLock	src/easylogging/easylogging++.h	/^  virtual inline void releaseLock(void) ELPP_FINAL { m_mutex.unlock(); }$/;"	f	line:1004	language:C++	class:el::base::threading::ThreadSafe	typeref:typename:void	access:public	signature:(void)
el::base::threading::ThreadSafe::~ThreadSafe	src/easylogging/easylogging++.h	/^  virtual ~ThreadSafe(void) {}$/;"	f	line:1008	language:C++	class:el::base::threading::ThreadSafe	access:protected	signature:(void)
el::base::threading::getCurrentThreadId	src/easylogging/easylogging++.h	/^static inline std::string getCurrentThreadId(void) {$/;"	f	line:1032	language:C++	namespace:el::base::threading	typeref:typename:std::string	signature:(void)
el::base::threading::getCurrentThreadId	src/easylogging/easylogging++.h	/^static std::string getCurrentThreadId(void) {$/;"	f	line:1016	language:C++	namespace:el::base::threading	typeref:typename:std::string	signature:(void)
el::base::threading::getCurrentThreadId	src/easylogging/easylogging++.h	/^static std::string getCurrentThreadId(void) {$/;"	f	line:1025	language:C++	namespace:el::base::threading	typeref:typename:std::string	signature:(void)
el::base::threading::internal	src/easylogging/easylogging++.h	/^namespace internal {$/;"	n	line:895	language:C++	namespace:el::base::threading
el::base::threading::internal::Mutex	src/easylogging/easylogging++.h	/^class Mutex : base::NoCopy {$/;"	c	line:897	language:C++	namespace:el::base::threading::internal	inherits:base::NoCopy
el::base::threading::internal::Mutex::Mutex	src/easylogging/easylogging++.h	/^  Mutex(void) {$/;"	f	line:899	language:C++	class:el::base::threading::internal::Mutex	access:public	signature:(void)
el::base::threading::internal::Mutex::lock	src/easylogging/easylogging++.h	/^  inline void lock(void) {$/;"	f	line:919	language:C++	class:el::base::threading::internal::Mutex	typeref:typename:void	access:public	signature:(void)
el::base::threading::internal::Mutex::m_underlyingMutex	src/easylogging/easylogging++.h	/^  pthread_mutex_t m_underlyingMutex;$/;"	m	line:945	language:C++	class:el::base::threading::internal::Mutex	typeref:typename:pthread_mutex_t	access:private
el::base::threading::internal::Mutex::try_lock	src/easylogging/easylogging++.h	/^  inline bool try_lock(void) {$/;"	f	line:927	language:C++	class:el::base::threading::internal::Mutex	typeref:typename:bool	access:public	signature:(void)
el::base::threading::internal::Mutex::unlock	src/easylogging/easylogging++.h	/^  inline void unlock(void) {$/;"	f	line:935	language:C++	class:el::base::threading::internal::Mutex	typeref:typename:void	access:public	signature:(void)
el::base::threading::internal::Mutex::~Mutex	src/easylogging/easylogging++.h	/^  virtual ~Mutex(void) {$/;"	f	line:911	language:C++	class:el::base::threading::internal::Mutex	access:public	signature:(void)
el::base::threading::internal::ScopedLock	src/easylogging/easylogging++.h	/^class ScopedLock : base::NoCopy {$/;"	c	line:952	language:C++	namespace:el::base::threading::internal	inherits:base::NoCopy
el::base::threading::internal::ScopedLock::ScopedLock	src/easylogging/easylogging++.h	/^  ScopedLock(void);$/;"	p	line:964	language:C++	class:el::base::threading::internal::ScopedLock	access:private	signature:(void)
el::base::threading::internal::ScopedLock::ScopedLock	src/easylogging/easylogging++.h	/^  explicit ScopedLock(M& mutex) {$/;"	f	line:954	language:C++	class:el::base::threading::internal::ScopedLock	access:public	signature:(M & mutex)
el::base::threading::internal::ScopedLock::m_mutex	src/easylogging/easylogging++.h	/^  M* m_mutex;$/;"	m	line:963	language:C++	class:el::base::threading::internal::ScopedLock	typeref:typename:M *	access:private
el::base::threading::internal::ScopedLock::~ScopedLock	src/easylogging/easylogging++.h	/^  virtual ~ScopedLock(void) {$/;"	f	line:959	language:C++	class:el::base::threading::internal::ScopedLock	access:public	signature:(void)
el::base::threading::msleep	src/easylogging/easylogging++.cc	/^static void msleep(int ms) {$/;"	f	line:1390	language:C++	namespace:el::base::threading	typeref:typename:void	file:	signature:(int ms)
el::base::type	src/easylogging/easylogging++.h	/^namespace type {$/;"	n	line:502	language:C++	namespace:el::base
el::base::type::EnumType	src/easylogging/easylogging++.h	/^typedef unsigned int EnumType;$/;"	t	line:538	language:C++	namespace:el::base::type	typeref:typename:unsigned int
el::base::type::LineNumber	src/easylogging/easylogging++.h	/^typedef unsigned long int LineNumber;$/;"	t	line:540	language:C++	namespace:el::base::type	typeref:typename:unsigned long int
el::base::type::LogDispatchCallbackPtr	src/easylogging/easylogging++.h	/^typedef std::shared_ptr<LogDispatchCallback> LogDispatchCallbackPtr;$/;"	t	line:542	language:C++	namespace:el::base::type	typeref:typename:std::shared_ptr<LogDispatchCallback>
el::base::type::LoggerRegistrationCallbackPtr	src/easylogging/easylogging++.h	/^typedef std::shared_ptr<LoggerRegistrationCallback> LoggerRegistrationCallbackPtr;$/;"	t	line:544	language:C++	namespace:el::base::type	typeref:typename:std::shared_ptr<LoggerRegistrationCallback>
el::base::type::PerformanceTrackerPtr	src/easylogging/easylogging++.h	/^typedef std::unique_ptr<el::base::PerformanceTracker> PerformanceTrackerPtr;$/;"	t	line:545	language:C++	namespace:el::base::type	typeref:typename:std::unique_ptr<el::base::PerformanceTracker>
el::base::type::PerformanceTrackingCallbackPtr	src/easylogging/easylogging++.h	/^typedef std::shared_ptr<PerformanceTrackingCallback> PerformanceTrackingCallbackPtr;$/;"	t	line:543	language:C++	namespace:el::base::type	typeref:typename:std::shared_ptr<PerformanceTrackingCallback>
el::base::type::StoragePointer	src/easylogging/easylogging++.h	/^typedef std::shared_ptr<base::Storage> StoragePointer;$/;"	t	line:541	language:C++	namespace:el::base::type	typeref:typename:std::shared_ptr<base::Storage>
el::base::type::VerboseLevel	src/easylogging/easylogging++.h	/^typedef unsigned short VerboseLevel;$/;"	t	line:539	language:C++	namespace:el::base::type	typeref:typename:unsigned short
el::base::type::char_t	src/easylogging/easylogging++.h	/^typedef wchar_t char_t;$/;"	t	line:514	language:C++	namespace:el::base::type	typeref:typename:wchar_t
el::base::type::fstream_t	src/easylogging/easylogging++.h	/^typedef std::wfstream fstream_t;$/;"	t	line:517	language:C++	namespace:el::base::type	typeref:typename:std::wfstream
el::base::type::ostream_t	src/easylogging/easylogging++.h	/^typedef std::wostream ostream_t;$/;"	t	line:518	language:C++	namespace:el::base::type	typeref:typename:std::wostream
el::base::type::string_t	src/easylogging/easylogging++.h	/^typedef std::wstring string_t;$/;"	t	line:515	language:C++	namespace:el::base::type	typeref:typename:std::wstring
el::base::type::stringstream_t	src/easylogging/easylogging++.h	/^typedef std::wstringstream stringstream_t;$/;"	t	line:516	language:C++	namespace:el::base::type	typeref:typename:std::wstringstream
el::base::utils	src/easylogging/easylogging++.cc	/^namespace utils {$/;"	n	line:114	language:C++	namespace:el::base	file:
el::base::utils	src/easylogging/easylogging++.cc	/^namespace utils {$/;"	n	line:727	language:C++	namespace:el::base	file:
el::base::utils	src/easylogging/easylogging++.h	/^namespace utils {$/;"	n	line:1037	language:C++	namespace:el::base
el::base::utils	src/easylogging/easylogging++.h	/^namespace utils {$/;"	n	line:852	language:C++	namespace:el::base
el::base::utils::AbstractRegistry	src/easylogging/easylogging++.h	/^class AbstractRegistry : public base::threading::ThreadSafe {$/;"	c	line:1254	language:C++	namespace:el::base::utils	inherits:base::threading::ThreadSafe
el::base::utils::AbstractRegistry::AbstractRegistry	src/easylogging/easylogging++.h	/^  AbstractRegistry(AbstractRegistry&& sr) {$/;"	f	line:1263	language:C++	class:el::base::utils::AbstractRegistry	access:public	signature:(AbstractRegistry && sr)
el::base::utils::AbstractRegistry::AbstractRegistry	src/easylogging/easylogging++.h	/^  AbstractRegistry(void) {}$/;"	f	line:1260	language:C++	class:el::base::utils::AbstractRegistry	access:public	signature:(void)
el::base::utils::AbstractRegistry::begin	src/easylogging/easylogging++.h	/^  virtual inline iterator begin(void) ELPP_FINAL {$/;"	f	line:1309	language:C++	class:el::base::utils::AbstractRegistry	typeref:typename:iterator	access:public	signature:(void)
el::base::utils::AbstractRegistry::cbegin	src/easylogging/easylogging++.h	/^  virtual inline const_iterator cbegin(void) const ELPP_FINAL {$/;"	f	line:1320	language:C++	class:el::base::utils::AbstractRegistry	typeref:typename:const_iterator	access:public	signature:(void) const
el::base::utils::AbstractRegistry::cend	src/easylogging/easylogging++.h	/^  virtual inline const_iterator cend(void) const ELPP_FINAL {$/;"	f	line:1325	language:C++	class:el::base::utils::AbstractRegistry	typeref:typename:const_iterator	access:public	signature:(void) const
el::base::utils::AbstractRegistry::const_iterator	src/easylogging/easylogging++.h	/^  typedef typename Container::const_iterator const_iterator;$/;"	t	line:1257	language:C++	class:el::base::utils::AbstractRegistry	typeref:typename:Container::const_iterator	access:public
el::base::utils::AbstractRegistry::deepCopy	src/easylogging/easylogging++.h	/^  virtual void deepCopy(const AbstractRegistry<T_Ptr, Container>&) = 0;$/;"	p	line:1353	language:C++	class:el::base::utils::AbstractRegistry	typeref:typename:void	access:protected	signature:(const AbstractRegistry<T_Ptr,Container> &)
el::base::utils::AbstractRegistry::empty	src/easylogging/easylogging++.h	/^  virtual inline bool empty(void) const ELPP_FINAL {$/;"	f	line:1330	language:C++	class:el::base::utils::AbstractRegistry	typeref:typename:bool	access:public	signature:(void) const
el::base::utils::AbstractRegistry::end	src/easylogging/easylogging++.h	/^  virtual inline iterator end(void) ELPP_FINAL {$/;"	f	line:1314	language:C++	class:el::base::utils::AbstractRegistry	typeref:typename:iterator	access:public	signature:(void)
el::base::utils::AbstractRegistry::iterator	src/easylogging/easylogging++.h	/^  typedef typename Container::iterator iterator;$/;"	t	line:1256	language:C++	class:el::base::utils::AbstractRegistry	typeref:typename:Container::iterator	access:public
el::base::utils::AbstractRegistry::list	src/easylogging/easylogging++.h	/^  virtual inline Container& list(void) ELPP_FINAL {$/;"	f	line:1340	language:C++	class:el::base::utils::AbstractRegistry	typeref:typename:Container &	access:public	signature:(void)
el::base::utils::AbstractRegistry::list	src/easylogging/easylogging++.h	/^  virtual inline const Container& list(void) const ELPP_FINAL {$/;"	f	line:1345	language:C++	class:el::base::utils::AbstractRegistry	typeref:typename:const Container &	access:public	signature:(void) const
el::base::utils::AbstractRegistry::m_list	src/easylogging/easylogging++.h	/^  Container m_list;$/;"	m	line:1360	language:C++	class:el::base::utils::AbstractRegistry	typeref:typename:Container	access:private
el::base::utils::AbstractRegistry::operator !=	src/easylogging/easylogging++.h	/^  bool operator!=(const AbstractRegistry<T_Ptr, Container>& other) {$/;"	f	line:1283	language:C++	class:el::base::utils::AbstractRegistry	typeref:typename:bool	access:public	signature:(const AbstractRegistry<T_Ptr,Container> & other)
el::base::utils::AbstractRegistry::operator =	src/easylogging/easylogging++.h	/^  AbstractRegistry& operator=(AbstractRegistry&& sr) {$/;"	f	line:1296	language:C++	class:el::base::utils::AbstractRegistry	typeref:typename:AbstractRegistry &	access:public	signature:(AbstractRegistry && sr)
el::base::utils::AbstractRegistry::operator ==	src/easylogging/easylogging++.h	/^  bool operator==(const AbstractRegistry<T_Ptr, Container>& other) {$/;"	f	line:1271	language:C++	class:el::base::utils::AbstractRegistry	typeref:typename:bool	access:public	signature:(const AbstractRegistry<T_Ptr,Container> & other)
el::base::utils::AbstractRegistry::reinitDeepCopy	src/easylogging/easylogging++.h	/^  void reinitDeepCopy(const AbstractRegistry<T_Ptr, Container>& sr) {$/;"	f	line:1354	language:C++	class:el::base::utils::AbstractRegistry	typeref:typename:void	access:protected	signature:(const AbstractRegistry<T_Ptr,Container> & sr)
el::base::utils::AbstractRegistry::size	src/easylogging/easylogging++.h	/^  virtual inline std::size_t size(void) const ELPP_FINAL {$/;"	f	line:1335	language:C++	class:el::base::utils::AbstractRegistry	typeref:typename:std::size_t	access:public	signature:(void) const
el::base::utils::AbstractRegistry::unregisterAll	src/easylogging/easylogging++.h	/^  virtual void unregisterAll(void) = 0;$/;"	p	line:1350	language:C++	class:el::base::utils::AbstractRegistry	typeref:typename:void	access:public	signature:(void)
el::base::utils::AbstractRegistry::~AbstractRegistry	src/easylogging/easylogging++.h	/^  virtual ~AbstractRegistry(void) {$/;"	f	line:1305	language:C++	class:el::base::utils::AbstractRegistry	access:public	signature:(void)
el::base::utils::CommandLineArgs	src/easylogging/easylogging++.h	/^class CommandLineArgs {$/;"	c	line:1210	language:C++	namespace:el::base::utils
el::base::utils::CommandLineArgs::CommandLineArgs	src/easylogging/easylogging++.h	/^  CommandLineArgs(int argc, char** argv) {$/;"	f	line:1218	language:C++	class:el::base::utils::CommandLineArgs	access:public	signature:(int argc,char ** argv)
el::base::utils::CommandLineArgs::CommandLineArgs	src/easylogging/easylogging++.h	/^  CommandLineArgs(int argc, const char** argv) {$/;"	f	line:1215	language:C++	class:el::base::utils::CommandLineArgs	access:public	signature:(int argc,const char ** argv)
el::base::utils::CommandLineArgs::CommandLineArgs	src/easylogging/easylogging++.h	/^  CommandLineArgs(void) {$/;"	f	line:1212	language:C++	class:el::base::utils::CommandLineArgs	access:public	signature:(void)
el::base::utils::CommandLineArgs::empty	src/easylogging/easylogging++.cc	/^bool CommandLineArgs::empty(void) const {$/;"	f	line:1364	language:C++	class:el::base::utils::CommandLineArgs	typeref:typename:bool	signature:(void) const
el::base::utils::CommandLineArgs::empty	src/easylogging/easylogging++.h	/^  bool empty(void) const;$/;"	p	line:1236	language:C++	class:el::base::utils::CommandLineArgs	typeref:typename:bool	access:public	signature:(void) const
el::base::utils::CommandLineArgs::getParamValue	src/easylogging/easylogging++.cc	/^const char* CommandLineArgs::getParamValue(const char* paramKey) const {$/;"	f	line:1355	language:C++	class:el::base::utils::CommandLineArgs	typeref:typename:const char *	signature:(const char * paramKey) const
el::base::utils::CommandLineArgs::getParamValue	src/easylogging/easylogging++.h	/^  const char* getParamValue(const char* paramKey) const;$/;"	p	line:1232	language:C++	class:el::base::utils::CommandLineArgs	typeref:typename:const char *	access:public	signature:(const char * paramKey) const
el::base::utils::CommandLineArgs::hasParam	src/easylogging/easylogging++.cc	/^bool CommandLineArgs::hasParam(const char* paramKey) const {$/;"	f	line:1360	language:C++	class:el::base::utils::CommandLineArgs	typeref:typename:bool	signature:(const char * paramKey) const
el::base::utils::CommandLineArgs::hasParam	src/easylogging/easylogging++.h	/^  bool hasParam(const char* paramKey) const;$/;"	p	line:1234	language:C++	class:el::base::utils::CommandLineArgs	typeref:typename:bool	access:public	signature:(const char * paramKey) const
el::base::utils::CommandLineArgs::hasParamWithValue	src/easylogging/easylogging++.cc	/^bool CommandLineArgs::hasParamWithValue(const char* paramKey) const {$/;"	f	line:1351	language:C++	class:el::base::utils::CommandLineArgs	typeref:typename:bool	signature:(const char * paramKey) const
el::base::utils::CommandLineArgs::hasParamWithValue	src/easylogging/easylogging++.h	/^  bool hasParamWithValue(const char* paramKey) const;$/;"	p	line:1229	language:C++	class:el::base::utils::CommandLineArgs	typeref:typename:bool	access:public	signature:(const char * paramKey) const
el::base::utils::CommandLineArgs::m_argc	src/easylogging/easylogging++.h	/^  int m_argc;$/;"	m	line:1242	language:C++	class:el::base::utils::CommandLineArgs	typeref:typename:int	access:private
el::base::utils::CommandLineArgs::m_argv	src/easylogging/easylogging++.h	/^  char** m_argv;$/;"	m	line:1243	language:C++	class:el::base::utils::CommandLineArgs	typeref:typename:char **	access:private
el::base::utils::CommandLineArgs::m_params	src/easylogging/easylogging++.h	/^  std::vector<std::string> m_params;$/;"	m	line:1245	language:C++	class:el::base::utils::CommandLineArgs	typeref:typename:std::vector<std::string>	access:private
el::base::utils::CommandLineArgs::m_paramsWithValue	src/easylogging/easylogging++.h	/^  std::unordered_map<std::string, std::string> m_paramsWithValue;$/;"	m	line:1244	language:C++	class:el::base::utils::CommandLineArgs	typeref:typename:std::unordered_map<std::string,std::string>	access:private
el::base::utils::CommandLineArgs::setArgs	src/easylogging/easylogging++.cc	/^void CommandLineArgs::setArgs(int argc, char** argv) {$/;"	f	line:1321	language:C++	class:el::base::utils::CommandLineArgs	typeref:typename:void	signature:(int argc,char ** argv)
el::base::utils::CommandLineArgs::setArgs	src/easylogging/easylogging++.h	/^  inline void setArgs(int argc, const char** argv) {$/;"	f	line:1223	language:C++	class:el::base::utils::CommandLineArgs	typeref:typename:void	access:public	signature:(int argc,const char ** argv)
el::base::utils::CommandLineArgs::setArgs	src/easylogging/easylogging++.h	/^  void setArgs(int argc, char** argv);$/;"	p	line:1227	language:C++	class:el::base::utils::CommandLineArgs	typeref:typename:void	access:public	signature:(int argc,char ** argv)
el::base::utils::CommandLineArgs::size	src/easylogging/easylogging++.cc	/^std::size_t CommandLineArgs::size(void) const {$/;"	f	line:1368	language:C++	class:el::base::utils::CommandLineArgs	typeref:typename:std::size_t	signature:(void) const
el::base::utils::CommandLineArgs::size	src/easylogging/easylogging++.h	/^  std::size_t size(void) const;$/;"	p	line:1238	language:C++	class:el::base::utils::CommandLineArgs	typeref:typename:std::size_t	access:public	signature:(void) const
el::base::utils::CommandLineArgs::~CommandLineArgs	src/easylogging/easylogging++.h	/^  virtual ~CommandLineArgs(void) {}$/;"	f	line:1221	language:C++	class:el::base::utils::CommandLineArgs	access:public	signature:(void)
el::base::utils::DateTime	src/easylogging/easylogging++.h	/^class DateTime : base::StaticClass {$/;"	c	line:1178	language:C++	namespace:el::base::utils	inherits:base::StaticClass
el::base::utils::DateTime::buildTimeInfo	src/easylogging/easylogging++.cc	/^struct ::tm* DateTime::buildTimeInfo(struct timeval* currTime, struct ::tm* timeInfo) {$/;"	f	line:1229	language:C++	class:el::base::utils::DateTime	typeref:struct:::tm *	signature:(struct timeval * currTime,struct::tm * timeInfo)
el::base::utils::DateTime::buildTimeInfo	src/easylogging/easylogging++.h	/^  static struct ::tm* buildTimeInfo(struct timeval* currTime, struct ::tm* timeInfo);$/;"	p	line:1204	language:C++	class:el::base::utils::DateTime	typeref:struct:::tm *	access:public	signature:(struct timeval * currTime,struct::tm * timeInfo)
el::base::utils::DateTime::formatTime	src/easylogging/easylogging++.cc	/^base::type::string_t DateTime::formatTime(unsigned long long time, base::TimestampUnit timestamp/;"	f	line:1198	language:C++	class:el::base::utils::DateTime	typeref:typename:base::type::string_t	signature:(unsigned long long time,base::TimestampUnit timestampUnit)
el::base::utils::DateTime::formatTime	src/easylogging/easylogging++.h	/^  static base::type::string_t formatTime(unsigned long long time, base::TimestampUnit timestampU/;"	p	line:1197	language:C++	class:el::base::utils::DateTime	typeref:typename:base::type::string_t	access:public	signature:(unsigned long long time,base::TimestampUnit timestampUnit)
el::base::utils::DateTime::getDateTime	src/easylogging/easylogging++.cc	/^std::string DateTime::getDateTime(const char* format, const base::SubsecondPrecision* ssPrec) {$/;"	f	line:1181	language:C++	class:el::base::utils::DateTime	typeref:typename:std::string	signature:(const char * format,const base::SubsecondPrecision * ssPrec)
el::base::utils::DateTime::getDateTime	src/easylogging/easylogging++.h	/^  static std::string getDateTime(const char* format, const base::SubsecondPrecision* ssPrec);$/;"	p	line:1190	language:C++	class:el::base::utils::DateTime	typeref:typename:std::string	access:public	signature:(const char * format,const base::SubsecondPrecision * ssPrec)
el::base::utils::DateTime::getTimeDifference	src/easylogging/easylogging++.cc	/^unsigned long long DateTime::getTimeDifference(const struct timeval& endTime, const struct timev/;"	f	line:1216	language:C++	class:el::base::utils::DateTime	typeref:typename:unsigned long long	signature:(const struct timeval & endTime,const struct timeval & startTime,base::TimestampUnit timestampUnit)
el::base::utils::DateTime::getTimeDifference	src/easylogging/easylogging++.h	/^  static unsigned long long getTimeDifference(const struct timeval& endTime, const struct timeva/;"	p	line:1200	language:C++	class:el::base::utils::DateTime	typeref:typename:unsigned long long	access:public	signature:(const struct timeval & endTime,const struct timeval & startTime,base::TimestampUnit timestampUnit)
el::base::utils::DateTime::gettimeofday	src/easylogging/easylogging++.cc	/^void DateTime::gettimeofday(struct timeval* tv) {$/;"	f	line:1154	language:C++	class:el::base::utils::DateTime	typeref:typename:void	signature:(struct timeval * tv)
el::base::utils::DateTime::gettimeofday	src/easylogging/easylogging++.h	/^  static void gettimeofday(struct timeval* tv);$/;"	p	line:1184	language:C++	class:el::base::utils::DateTime	typeref:typename:void	access:public	signature:(struct timeval * tv)
el::base::utils::DateTime::parseFormat	src/easylogging/easylogging++.cc	/^char* DateTime::parseFormat(char* buf, std::size_t bufSz, const char* format, const struct tm* t/;"	f	line:1255	language:C++	class:el::base::utils::DateTime	typeref:typename:char *	signature:(char * buf,std::size_t bufSz,const char * format,const struct tm * tInfo,std::size_t msec,const base::SubsecondPrecision * ssPrec)
el::base::utils::DateTime::parseFormat	src/easylogging/easylogging++.h	/^  static char* parseFormat(char* buf, std::size_t bufSz, const char* format, const struct tm* tI/;"	p	line:1206	language:C++	class:el::base::utils::DateTime	typeref:typename:char *	access:private	signature:(char * buf,std::size_t bufSz,const char * format,const struct tm * tInfo,std::size_t msec,const base::SubsecondPrecision * ssPrec)
el::base::utils::DateTime::timevalToString	src/easylogging/easylogging++.cc	/^std::string DateTime::timevalToString(struct timeval tval, const char* format,$/;"	f	line:1187	language:C++	class:el::base::utils::DateTime	typeref:typename:std::string	signature:(struct timeval tval,const char * format,const el::base::SubsecondPrecision * ssPrec)
el::base::utils::DateTime::timevalToString	src/easylogging/easylogging++.h	/^  static std::string timevalToString(struct timeval tval, const char* format,$/;"	p	line:1193	language:C++	class:el::base::utils::DateTime	typeref:typename:std::string	access:public	signature:(struct timeval tval,const char * format,const el::base::SubsecondPrecision * ssPrec)
el::base::utils::File	src/easylogging/easylogging++.h	/^class File : base::StaticClass {$/;"	c	line:1038	language:C++	namespace:el::base::utils	inherits:base::StaticClass
el::base::utils::File::buildBaseFilename	src/easylogging/easylogging++.cc	/^void File::buildBaseFilename(const std::string& fullPath, char buff[], std::size_t limit, const /;"	f	line:845	language:C++	class:el::base::utils::File	typeref:typename:void	signature:(const std::string & fullPath,char buff[],std::size_t limit,const char * separator)
el::base::utils::File::buildBaseFilename	src/easylogging/easylogging++.h	/^  static void buildBaseFilename(const std::string& fullPath, char buff[],$/;"	p	line:1060	language:C++	class:el::base::utils::File	typeref:typename:void	access:public	signature:(const std::string & fullPath,char buff[],std::size_t limit=base::consts::kSourceFilenameMaxLength,const char * seperator=base::consts::kFilePathSeperator)
el::base::utils::File::buildStrippedFilename	src/easylogging/easylogging++.cc	/^void File::buildStrippedFilename(const char* filename, char buff[], std::size_t limit) {$/;"	f	line:833	language:C++	class:el::base::utils::File	typeref:typename:void	signature:(const char * filename,char buff[],std::size_t limit)
el::base::utils::File::buildStrippedFilename	src/easylogging/easylogging++.h	/^  static void buildStrippedFilename(const char* filename, char buff[],$/;"	p	line:1057	language:C++	class:el::base::utils::File	typeref:typename:void	access:public	signature:(const char * filename,char buff[],std::size_t limit=base::consts::kSourceFilenameMaxLength)
el::base::utils::File::createPath	src/easylogging/easylogging++.cc	/^bool File::createPath(const std::string& path) {$/;"	f	line:782	language:C++	class:el::base::utils::File	typeref:typename:bool	signature:(const std::string & path)
el::base::utils::File::createPath	src/easylogging/easylogging++.h	/^  static bool createPath(const std::string& path);$/;"	p	line:1052	language:C++	class:el::base::utils::File	typeref:typename:bool	access:public	signature:(const std::string & path)
el::base::utils::File::extractPathFromFilename	src/easylogging/easylogging++.cc	/^std::string File::extractPathFromFilename(const std::string& fullPath, const char* separator) {$/;"	f	line:822	language:C++	class:el::base::utils::File	typeref:typename:std::string	signature:(const std::string & fullPath,const char * separator)
el::base::utils::File::extractPathFromFilename	src/easylogging/easylogging++.h	/^  static std::string extractPathFromFilename(const std::string& fullPath,$/;"	p	line:1054	language:C++	class:el::base::utils::File	typeref:typename:std::string	access:public	signature:(const std::string & fullPath,const char * seperator=base::consts::kFilePathSeperator)
el::base::utils::File::getSizeOfFile	src/easylogging/easylogging++.cc	/^std::size_t File::getSizeOfFile(base::type::fstream_t* fs) {$/;"	f	line:755	language:C++	class:el::base::utils::File	typeref:typename:std::size_t	signature:(base::type::fstream_t * fs)
el::base::utils::File::getSizeOfFile	src/easylogging/easylogging++.h	/^  static std::size_t getSizeOfFile(base::type::fstream_t* fs);$/;"	p	line:1045	language:C++	class:el::base::utils::File	typeref:typename:std::size_t	access:public	signature:(base::type::fstream_t * fs)
el::base::utils::File::newFileStream	src/easylogging/easylogging++.cc	/^base::type::fstream_t* File::newFileStream(const std::string& filename) {$/;"	f	line:731	language:C++	class:el::base::utils::File	typeref:typename:base::type::fstream_t *	signature:(const std::string & filename)
el::base::utils::File::newFileStream	src/easylogging/easylogging++.h	/^  static base::type::fstream_t* newFileStream(const std::string& filename);$/;"	p	line:1042	language:C++	class:el::base::utils::File	typeref:typename:base::type::fstream_t *	access:public	signature:(const std::string & filename)
el::base::utils::File::pathExists	src/easylogging/easylogging++.cc	/^bool File::pathExists(const char* path, bool considerFile) {$/;"	f	line:765	language:C++	class:el::base::utils::File	typeref:typename:bool	signature:(const char * path,bool considerFile)
el::base::utils::File::pathExists	src/easylogging/easylogging++.h	/^  static bool pathExists(const char* path, bool considerFile = false);$/;"	p	line:1048	language:C++	class:el::base::utils::File	typeref:typename:bool	access:public	signature:(const char * path,bool considerFile=false)
el::base::utils::OS	src/easylogging/easylogging++.h	/^class OS : base::StaticClass {$/;"	c	line:1136	language:C++	namespace:el::base::utils	inherits:base::StaticClass
el::base::utils::OS::currentHost	src/easylogging/easylogging++.cc	/^std::string OS::currentHost(void) {$/;"	f	line:1132	language:C++	class:el::base::utils::OS	typeref:typename:std::string	signature:(void)
el::base::utils::OS::currentHost	src/easylogging/easylogging++.h	/^  static std::string currentHost(void);$/;"	p	line:1173	language:C++	class:el::base::utils::OS	typeref:typename:std::string	access:public	signature:(void)
el::base::utils::OS::currentUser	src/easylogging/easylogging++.cc	/^std::string OS::currentUser(void) {$/;"	f	line:1119	language:C++	class:el::base::utils::OS	typeref:typename:std::string	signature:(void)
el::base::utils::OS::currentUser	src/easylogging/easylogging++.h	/^  static std::string currentUser(void);$/;"	p	line:1168	language:C++	class:el::base::utils::OS	typeref:typename:std::string	access:public	signature:(void)
el::base::utils::OS::getBashOutput	src/easylogging/easylogging++.cc	/^const std::string OS::getBashOutput(const char* command) {$/;"	f	line:1067	language:C++	class:el::base::utils::OS	typeref:typename:const std::string	signature:(const char * command)
el::base::utils::OS::getBashOutput	src/easylogging/easylogging++.h	/^  static const std::string getBashOutput(const char* command);$/;"	p	line:1158	language:C++	class:el::base::utils::OS	typeref:typename:const std::string	access:public	signature:(const char * command)
el::base::utils::OS::getDeviceName	src/easylogging/easylogging++.cc	/^std::string OS::getDeviceName(void) {$/;"	f	line:1055	language:C++	class:el::base::utils::OS	typeref:typename:std::string	signature:(void)
el::base::utils::OS::getDeviceName	src/easylogging/easylogging++.h	/^  static std::string getDeviceName(void);$/;"	p	line:1150	language:C++	class:el::base::utils::OS	typeref:typename:std::string	access:public	signature:(void)
el::base::utils::OS::getEnvironmentVariable	src/easylogging/easylogging++.cc	/^std::string OS::getEnvironmentVariable(const char* variableName, const char* defaultVal,$/;"	f	line:1095	language:C++	class:el::base::utils::OS	typeref:typename:std::string	signature:(const char * variableName,const char * defaultVal,const char * alternativeBashCommand)
el::base::utils::OS::getEnvironmentVariable	src/easylogging/easylogging++.h	/^  static std::string getEnvironmentVariable(const char* variableName, const char* defaultVal,$/;"	p	line:1165	language:C++	class:el::base::utils::OS	typeref:typename:std::string	access:public	signature:(const char * variableName,const char * defaultVal,const char * alternativeBashCommand=nullptr)
el::base::utils::OS::getProperty	src/easylogging/easylogging++.cc	/^std::string OS::getProperty(const char* prop) {$/;"	f	line:1049	language:C++	class:el::base::utils::OS	typeref:typename:std::string	signature:(const char * prop)
el::base::utils::OS::getProperty	src/easylogging/easylogging++.h	/^  static std::string getProperty(const char* prop);$/;"	p	line:1147	language:C++	class:el::base::utils::OS	typeref:typename:std::string	access:public	signature:(const char * prop)
el::base::utils::OS::getWindowsEnvironmentVariable	src/easylogging/easylogging++.cc	/^const char* OS::getWindowsEnvironmentVariable(const char* varname) {$/;"	f	line:1039	language:C++	class:el::base::utils::OS	typeref:typename:const char *	signature:(const char * varname)
el::base::utils::OS::getWindowsEnvironmentVariable	src/easylogging/easylogging++.h	/^  static const char* getWindowsEnvironmentVariable(const char* varname);$/;"	p	line:1143	language:C++	class:el::base::utils::OS	typeref:typename:const char *	access:public	signature:(const char * varname)
el::base::utils::OS::termSupportsColor	src/easylogging/easylogging++.cc	/^bool OS::termSupportsColor(void) {$/;"	f	line:1145	language:C++	class:el::base::utils::OS	typeref:typename:bool	signature:(void)
el::base::utils::OS::termSupportsColor	src/easylogging/easylogging++.h	/^  static bool termSupportsColor(void);$/;"	p	line:1175	language:C++	class:el::base::utils::OS	typeref:typename:bool	access:public	signature:(void)
el::base::utils::Registry	src/easylogging/easylogging++.h	/^class Registry : public AbstractRegistry<T_Ptr, std::unordered_map<T_Key, T_Ptr*>> {$/;"	c	line:1369	language:C++	namespace:el::base::utils	inherits:AbstractRegistry<T_Ptr,std::unordered_map<T_Key,T_Ptr*>>
el::base::utils::Registry::Registry	src/easylogging/easylogging++.h	/^  Registry(const Registry& sr) : AbstractRegistry<T_Ptr, std::vector<T_Ptr*>>() {$/;"	f	line:1377	language:C++	class:el::base::utils::Registry	access:public	signature:(const Registry & sr)
el::base::utils::Registry::Registry	src/easylogging/easylogging++.h	/^  Registry(void) {}$/;"	f	line:1374	language:C++	class:el::base::utils::Registry	access:public	signature:(void)
el::base::utils::Registry::const_iterator	src/easylogging/easylogging++.h	/^  typedef typename Registry<T_Ptr, T_Key>::const_iterator const_iterator;$/;"	t	line:1372	language:C++	class:el::base::utils::Registry	typeref:typename:Registry<T_Ptr,T_Key>::const_iterator	access:public
el::base::utils::Registry::deepCopy	src/easylogging/easylogging++.h	/^  virtual void deepCopy(const AbstractRegistry<T_Ptr, std::unordered_map<T_Key, T_Ptr*>>& sr) EL/;"	f	line:1433	language:C++	class:el::base::utils::Registry	typeref:typename:void	access:private	signature:(const AbstractRegistry<T_Ptr,std::unordered_map<T_Key,T_Ptr * >> & sr)
el::base::utils::Registry::get	src/easylogging/easylogging++.h	/^  T_Ptr* get(const T_Key& uniqKey) {$/;"	f	line:1425	language:C++	class:el::base::utils::Registry	typeref:typename:T_Ptr *	access:protected	signature:(const T_Key & uniqKey)
el::base::utils::Registry::iterator	src/easylogging/easylogging++.h	/^  typedef typename Registry<T_Ptr, T_Key>::iterator iterator;$/;"	t	line:1371	language:C++	class:el::base::utils::Registry	typeref:typename:Registry<T_Ptr,T_Key>::iterator	access:public
el::base::utils::Registry::operator =	src/easylogging/easylogging++.h	/^  Registry& operator=(const Registry& sr) {$/;"	f	line:1387	language:C++	class:el::base::utils::Registry	typeref:typename:Registry &	access:public	signature:(const Registry & sr)
el::base::utils::Registry::registerNew	src/easylogging/easylogging++.h	/^  virtual void registerNew(const T_Key& uniqKey, T_Ptr* ptr) ELPP_FINAL {$/;"	f	line:1410	language:C++	class:el::base::utils::Registry	typeref:typename:void	access:protected	signature:(const T_Key & uniqKey,T_Ptr * ptr)
el::base::utils::Registry::unregister	src/easylogging/easylogging++.h	/^  void unregister(const T_Key& uniqKey) {$/;"	f	line:1416	language:C++	class:el::base::utils::Registry	typeref:typename:void	access:protected	signature:(const T_Key & uniqKey)
el::base::utils::Registry::unregisterAll	src/easylogging/easylogging++.h	/^  virtual void unregisterAll(void) ELPP_FINAL {$/;"	f	line:1400	language:C++	class:el::base::utils::Registry	typeref:typename:void	access:protected	signature:(void)
el::base::utils::Registry::~Registry	src/easylogging/easylogging++.h	/^  virtual ~Registry(void) {$/;"	f	line:1395	language:C++	class:el::base::utils::Registry	access:public	signature:(void)
el::base::utils::RegistryWithPred	src/easylogging/easylogging++.h	/^class RegistryWithPred : public AbstractRegistry<T_Ptr, std::vector<T_Ptr*>> {$/;"	c	line:1445	language:C++	namespace:el::base::utils	inherits:AbstractRegistry<T_Ptr,std::vector<T_Ptr*>>
el::base::utils::RegistryWithPred::RegistryWithPred	src/easylogging/easylogging++.h	/^  RegistryWithPred(const RegistryWithPred& sr) : AbstractRegistry<T_Ptr, std::vector<T_Ptr*>>() /;"	f	line:1458	language:C++	class:el::base::utils::RegistryWithPred	access:public	signature:(const RegistryWithPred & sr)
el::base::utils::RegistryWithPred::RegistryWithPred	src/easylogging/easylogging++.h	/^  RegistryWithPred(void) {$/;"	f	line:1450	language:C++	class:el::base::utils::RegistryWithPred	access:public	signature:(void)
el::base::utils::RegistryWithPred::const_iterator	src/easylogging/easylogging++.h	/^  typedef typename RegistryWithPred<T_Ptr, Pred>::const_iterator const_iterator;$/;"	t	line:1448	language:C++	class:el::base::utils::RegistryWithPred	typeref:typename:RegistryWithPred<T_Ptr,Pred>::const_iterator	access:public
el::base::utils::RegistryWithPred::deepCopy	src/easylogging/easylogging++.h	/^  virtual void deepCopy(const AbstractRegistry<T_Ptr, std::vector<T_Ptr*>>& sr) {$/;"	f	line:1524	language:C++	class:el::base::utils::RegistryWithPred	typeref:typename:void	access:private	signature:(const AbstractRegistry<T_Ptr,std::vector<T_Ptr * >> & sr)
el::base::utils::RegistryWithPred::get	src/easylogging/easylogging++.h	/^  T_Ptr* get(const T& arg1, const T2 arg2) {$/;"	f	line:1515	language:C++	class:el::base::utils::RegistryWithPred	typeref:typename:T_Ptr *	access:protected	signature:(const T & arg1,const T2 arg2)
el::base::utils::RegistryWithPred::iterator	src/easylogging/easylogging++.h	/^  typedef typename RegistryWithPred<T_Ptr, Pred>::iterator iterator;$/;"	t	line:1447	language:C++	class:el::base::utils::RegistryWithPred	typeref:typename:RegistryWithPred<T_Ptr,Pred>::iterator	access:public
el::base::utils::RegistryWithPred::operator =	src/easylogging/easylogging++.h	/^  RegistryWithPred& operator=(const RegistryWithPred& sr) {$/;"	f	line:1468	language:C++	class:el::base::utils::RegistryWithPred	typeref:typename:RegistryWithPred &	access:public	signature:(const RegistryWithPred & sr)
el::base::utils::RegistryWithPred::registerNew	src/easylogging/easylogging++.h	/^  virtual inline void registerNew(T_Ptr* ptr) ELPP_FINAL {$/;"	f	line:1508	language:C++	class:el::base::utils::RegistryWithPred	typeref:typename:void	access:protected	signature:(T_Ptr * ptr)
el::base::utils::RegistryWithPred::unregister	src/easylogging/easylogging++.h	/^  virtual void unregister(T_Ptr*& ptr) ELPP_FINAL {$/;"	f	line:1493	language:C++	class:el::base::utils::RegistryWithPred	typeref:typename:void	access:protected	signature:(T_Ptr * & ptr)
el::base::utils::RegistryWithPred::unregisterAll	src/easylogging/easylogging++.h	/^  virtual void unregisterAll(void) ELPP_FINAL {$/;"	f	line:1484	language:C++	class:el::base::utils::RegistryWithPred	typeref:typename:void	access:protected	signature:(void)
el::base::utils::RegistryWithPred::~RegistryWithPred	src/easylogging/easylogging++.h	/^  virtual ~RegistryWithPred(void) {$/;"	f	line:1453	language:C++	class:el::base::utils::RegistryWithPred	access:public	signature:(void)
el::base::utils::Str	src/easylogging/easylogging++.h	/^class Str : base::StaticClass {$/;"	c	line:1065	language:C++	namespace:el::base::utils	inherits:base::StaticClass
el::base::utils::Str::addToBuff	src/easylogging/easylogging++.cc	/^char* Str::addToBuff(const char* str, char* buf, const char* bufLim) {$/;"	f	line:1004	language:C++	class:el::base::utils::Str	typeref:typename:char *	signature:(const char * str,char * buf,const char * bufLim)
el::base::utils::Str::addToBuff	src/easylogging/easylogging++.h	/^  static char* addToBuff(const char* str, char* buf, const char* bufLim);$/;"	p	line:1128	language:C++	class:el::base::utils::Str	typeref:typename:char *	access:public	signature:(const char * str,char * buf,const char * bufLim)
el::base::utils::Str::cStringCaseEq	src/easylogging/easylogging++.cc	/^bool Str::cStringCaseEq(const char* s1, const char* s2) {$/;"	f	line:962	language:C++	class:el::base::utils::Str	typeref:typename:bool	signature:(const char * s1,const char * s2)
el::base::utils::Str::cStringCaseEq	src/easylogging/easylogging++.h	/^  static bool cStringCaseEq(const char* s1, const char* s2);$/;"	p	line:1122	language:C++	class:el::base::utils::Str	typeref:typename:bool	access:public	signature:(const char * s1,const char * s2)
el::base::utils::Str::cStringEq	src/easylogging/easylogging++.cc	/^bool Str::cStringEq(const char* s1, const char* s2) {$/;"	f	line:956	language:C++	class:el::base::utils::Str	typeref:typename:bool	signature:(const char * s1,const char * s2)
el::base::utils::Str::cStringEq	src/easylogging/easylogging++.h	/^  static bool cStringEq(const char* s1, const char* s2);$/;"	p	line:1118	language:C++	class:el::base::utils::Str	typeref:typename:bool	access:public	signature:(const char * s1,const char * s2)
el::base::utils::Str::clearBuff	src/easylogging/easylogging++.cc	/^char* Str::clearBuff(char buff[], std::size_t lim) {$/;"	f	line:1010	language:C++	class:el::base::utils::Str	typeref:typename:char *	signature:(char buff[],std::size_t lim)
el::base::utils::Str::clearBuff	src/easylogging/easylogging++.h	/^  static char* clearBuff(char buff[], std::size_t lim);$/;"	p	line:1129	language:C++	class:el::base::utils::Str	typeref:typename:char *	access:public	signature:(char buff[],std::size_t lim)
el::base::utils::Str::contains	src/easylogging/easylogging++.cc	/^bool Str::contains(const char* str, char c) {$/;"	f	line:981	language:C++	class:el::base::utils::Str	typeref:typename:bool	signature:(const char * str,char c)
el::base::utils::Str::contains	src/easylogging/easylogging++.h	/^  static bool contains(const char* str, char c);$/;"	p	line:1125	language:C++	class:el::base::utils::Str	typeref:typename:bool	access:public	signature:(const char * str,char c)
el::base::utils::Str::convertAndAddToBuff	src/easylogging/easylogging++.cc	/^char* Str::convertAndAddToBuff(std::size_t n, int len, char* buf, const char* bufLim, bool zeroP/;"	f	line:989	language:C++	class:el::base::utils::Str	typeref:typename:char *	signature:(std::size_t n,int len,char * buf,const char * bufLim,bool zeroPadded)
el::base::utils::Str::convertAndAddToBuff	src/easylogging/easylogging++.h	/^  static char* convertAndAddToBuff(std::size_t n, int len, char* buf, const char* bufLim, bool z/;"	p	line:1127	language:C++	class:el::base::utils::Str	typeref:typename:char *	access:public	signature:(std::size_t n,int len,char * buf,const char * bufLim,bool zeroPadded=true)
el::base::utils::Str::endsWith	src/easylogging/easylogging++.cc	/^bool Str::endsWith(const std::string& str, const std::string& end) {$/;"	f	line:908	language:C++	class:el::base::utils::Str	typeref:typename:bool	signature:(const std::string & str,const std::string & end)
el::base::utils::Str::endsWith	src/easylogging/easylogging++.h	/^  static bool endsWith(const std::string& str, const std::string& end);$/;"	p	line:1089	language:C++	class:el::base::utils::Str	typeref:typename:bool	access:public	signature:(const std::string & str,const std::string & end)
el::base::utils::Str::isDigit	src/easylogging/easylogging++.h	/^  static inline bool isDigit(char c) {$/;"	f	line:1068	language:C++	class:el::base::utils::Str	typeref:typename:bool	access:public	signature:(char c)
el::base::utils::Str::ltrim	src/easylogging/easylogging++.cc	/^std::string& Str::ltrim(std::string& str) {$/;"	f	line:886	language:C++	class:el::base::utils::Str	typeref:typename:std::string &	signature:(std::string & str)
el::base::utils::Str::ltrim	src/easylogging/easylogging++.h	/^  static std::string& ltrim(std::string& str);$/;"	p	line:1075	language:C++	class:el::base::utils::Str	typeref:typename:std::string &	access:public	signature:(std::string & str)
el::base::utils::Str::replaceAll	src/easylogging/easylogging++.cc	/^std::string& Str::replaceAll(std::string& str, char replaceWhat, char replaceWith) {$/;"	f	line:912	language:C++	class:el::base::utils::Str	typeref:typename:std::string &	signature:(std::string & str,char replaceWhat,char replaceWith)
el::base::utils::Str::replaceAll	src/easylogging/easylogging++.cc	/^std::string& Str::replaceAll(std::string& str, const std::string& replaceWhat,$/;"	f	line:917	language:C++	class:el::base::utils::Str	typeref:typename:std::string &	signature:(std::string & str,const std::string & replaceWhat,const std::string & replaceWith)
el::base::utils::Str::replaceAll	src/easylogging/easylogging++.h	/^  static std::string& replaceAll(std::string& str, char replaceWhat, char replaceWith);$/;"	p	line:1096	language:C++	class:el::base::utils::Str	typeref:typename:std::string &	access:public	signature:(std::string & str,char replaceWhat,char replaceWith)
el::base::utils::Str::replaceAll	src/easylogging/easylogging++.h	/^  static std::string& replaceAll(std::string& str, const std::string& replaceWhat,$/;"	p	line:1103	language:C++	class:el::base::utils::Str	typeref:typename:std::string &	access:public	signature:(std::string & str,const std::string & replaceWhat,const std::string & replaceWith)
el::base::utils::Str::replaceFirstWithEscape	src/easylogging/easylogging++.cc	/^void Str::replaceFirstWithEscape(base::type::string_t& str, const base::type::string_t& replaceW/;"	f	line:928	language:C++	class:el::base::utils::Str	typeref:typename:void	signature:(base::type::string_t & str,const base::type::string_t & replaceWhat,const base::type::string_t & replaceWith)
el::base::utils::Str::replaceFirstWithEscape	src/easylogging/easylogging++.cc	/^void Str::replaceFirstWithEscape(base::type::string_t& str, const base::type::string_t& replaceW/;"	f	line:942	language:C++	class:el::base::utils::Str	typeref:typename:void	signature:(base::type::string_t & str,const base::type::string_t & replaceWhat,const std::string & replaceWith)
el::base::utils::Str::replaceFirstWithEscape	src/easylogging/easylogging++.h	/^  static void replaceFirstWithEscape(base::type::string_t& str, const base::type::string_t& repl/;"	p	line:1106	language:C++	class:el::base::utils::Str	typeref:typename:void	access:public	signature:(base::type::string_t & str,const base::type::string_t & replaceWhat,const base::type::string_t & replaceWith)
el::base::utils::Str::replaceFirstWithEscape	src/easylogging/easylogging++.h	/^  static void replaceFirstWithEscape(base::type::string_t& str, const base::type::string_t& repl/;"	p	line:1109	language:C++	class:el::base::utils::Str	typeref:typename:void	access:public	signature:(base::type::string_t & str,const base::type::string_t & replaceWhat,const std::string & replaceWith)
el::base::utils::Str::rtrim	src/easylogging/easylogging++.cc	/^std::string& Str::rtrim(std::string& str) {$/;"	f	line:893	language:C++	class:el::base::utils::Str	typeref:typename:std::string &	signature:(std::string & str)
el::base::utils::Str::rtrim	src/easylogging/easylogging++.h	/^  static std::string& rtrim(std::string& str);$/;"	p	line:1076	language:C++	class:el::base::utils::Str	typeref:typename:std::string &	access:public	signature:(std::string & str)
el::base::utils::Str::startsWith	src/easylogging/easylogging++.cc	/^bool Str::startsWith(const std::string& str, const std::string& start) {$/;"	f	line:904	language:C++	class:el::base::utils::Str	typeref:typename:bool	signature:(const std::string & str,const std::string & start)
el::base::utils::Str::startsWith	src/easylogging/easylogging++.h	/^  static bool startsWith(const std::string& str, const std::string& start);$/;"	p	line:1083	language:C++	class:el::base::utils::Str	typeref:typename:bool	access:public	signature:(const std::string & str,const std::string & start)
el::base::utils::Str::toUpper	src/easylogging/easylogging++.cc	/^std::string& Str::toUpper(std::string& str) {$/;"	f	line:948	language:C++	class:el::base::utils::Str	typeref:typename:std::string &	signature:(std::string & str)
el::base::utils::Str::toUpper	src/easylogging/easylogging++.h	/^  static std::string& toUpper(std::string& str);$/;"	p	line:1115	language:C++	class:el::base::utils::Str	typeref:typename:std::string &	access:public	signature:(std::string & str)
el::base::utils::Str::trim	src/easylogging/easylogging++.cc	/^std::string& Str::trim(std::string& str) {$/;"	f	line:900	language:C++	class:el::base::utils::Str	typeref:typename:std::string &	signature:(std::string & str)
el::base::utils::Str::trim	src/easylogging/easylogging++.h	/^  static std::string& trim(std::string& str);$/;"	p	line:1077	language:C++	class:el::base::utils::Str	typeref:typename:std::string &	access:public	signature:(std::string & str)
el::base::utils::Str::wcharPtrToCharPtr	src/easylogging/easylogging++.cc	/^char* Str::wcharPtrToCharPtr(const wchar_t* line) {$/;"	f	line:1018	language:C++	class:el::base::utils::Str	typeref:typename:char *	signature:(const wchar_t * line)
el::base::utils::Str::wcharPtrToCharPtr	src/easylogging/easylogging++.h	/^  static char* wcharPtrToCharPtr(const wchar_t* line);$/;"	p	line:1133	language:C++	class:el::base::utils::Str	typeref:typename:char *	access:public	signature:(const wchar_t * line)
el::base::utils::Str::wildCardMatch	src/easylogging/easylogging++.cc	/^bool Str::wildCardMatch(const char* str, const char* pattern) {$/;"	f	line:862	language:C++	class:el::base::utils::Str	typeref:typename:bool	signature:(const char * str,const char * pattern)
el::base::utils::Str::wildCardMatch	src/easylogging/easylogging++.h	/^  static bool wildCardMatch(const char* str, const char* pattern);$/;"	p	line:1073	language:C++	class:el::base::utils::Str	typeref:typename:bool	access:public	signature:(const char * str,const char * pattern)
el::base::utils::Utils	src/easylogging/easylogging++.h	/^class Utils {$/;"	c	line:1530	language:C++	namespace:el::base::utils
el::base::utils::Utils::callback	src/easylogging/easylogging++.h	/^  static T* callback(const std::string& id, std::unordered_map<std::string, TPtr>* mapT) {$/;"	f	line:1549	language:C++	class:el::base::utils::Utils	typeref:typename:T *	access:public	signature:(const std::string & id,std::unordered_map<std::string,TPtr> * mapT)
el::base::utils::Utils::installCallback	src/easylogging/easylogging++.h	/^  static bool installCallback(const std::string& id, std::unordered_map<std::string, TPtr>* mapT/;"	f	line:1533	language:C++	class:el::base::utils::Utils	typeref:typename:bool	access:public	signature:(const std::string & id,std::unordered_map<std::string,TPtr> * mapT)
el::base::utils::Utils::uninstallCallback	src/easylogging/easylogging++.h	/^  static void uninstallCallback(const std::string& id, std::unordered_map<std::string, TPtr>* ma/;"	f	line:1542	language:C++	class:el::base::utils::Utils	typeref:typename:void	access:public	signature:(const std::string & id,std::unordered_map<std::string,TPtr> * mapT)
el::base::utils::abort	src/easylogging/easylogging++.cc	/^static void abort(int status, const std::string& reason) {$/;"	f	line:117	language:C++	namespace:el::base::utils	typeref:typename:void	file:	signature:(int status,const std::string & reason)
el::base::utils::addFlag	src/easylogging/easylogging++.h	/^static inline void addFlag(Enum e, base::type::EnumType* flag) {$/;"	f	line:880	language:C++	namespace:el::base::utils	typeref:typename:void	signature:(Enum e,base::type::EnumType * flag)
el::base::utils::bitwise	src/easylogging/easylogging++.h	/^namespace bitwise {$/;"	n	line:865	language:C++	namespace:el::base::utils
el::base::utils::bitwise::And	src/easylogging/easylogging++.h	/^static inline base::type::EnumType And(Enum e, base::type::EnumType flag) {$/;"	f	line:867	language:C++	namespace:el::base::utils::bitwise	typeref:typename:base::type::EnumType	signature:(Enum e,base::type::EnumType flag)
el::base::utils::bitwise::Not	src/easylogging/easylogging++.h	/^static inline base::type::EnumType Not(Enum e, base::type::EnumType flag) {$/;"	f	line:871	language:C++	namespace:el::base::utils::bitwise	typeref:typename:base::type::EnumType	signature:(Enum e,base::type::EnumType flag)
el::base::utils::bitwise::Or	src/easylogging/easylogging++.h	/^static inline base::type::EnumType Or(Enum e, base::type::EnumType flag) {$/;"	f	line:875	language:C++	namespace:el::base::utils::bitwise	typeref:typename:base::type::EnumType	signature:(Enum e,base::type::EnumType flag)
el::base::utils::hasFlag	src/easylogging/easylogging++.h	/^static inline bool hasFlag(Enum e, base::type::EnumType flag) {$/;"	f	line:888	language:C++	namespace:el::base::utils	typeref:typename:bool	signature:(Enum e,base::type::EnumType flag)
el::base::utils::operator <<	src/easylogging/easylogging++.cc	/^base::type::ostream_t& operator<<(base::type::ostream_t& os, const CommandLineArgs& c) {$/;"	f	line:1372	language:C++	namespace:el::base::utils	typeref:typename:base::type::ostream_t &	signature:(base::type::ostream_t & os,const CommandLineArgs & c)
el::base::utils::operator <<	src/easylogging/easylogging++.h	/^  friend base::type::ostream_t& operator<<(base::type::ostream_t& os, const RegistryWithPred& sr/;"	f	line:1476	language:C++	namespace:el::base::utils	typeref:typename:base::type::ostream_t &	signature:(base::type::ostream_t & os,const RegistryWithPred & sr)
el::base::utils::removeFlag	src/easylogging/easylogging++.h	/^static inline void removeFlag(Enum e, base::type::EnumType* flag) {$/;"	f	line:884	language:C++	namespace:el::base::utils	typeref:typename:void	signature:(Enum e,base::type::EnumType * flag)
el::base::utils::safeDelete	src/easylogging/easylogging++.h	/^safeDelete(T*& pointer) {$/;"	f	line:857	language:C++	namespace:el::base::utils	typeref:typename:std::enable_if<std::is_pointer<T * >::value,void>::type	signature:(T * & pointer)
el::base::workarounds	src/easylogging/easylogging++.h	/^namespace workarounds {$/;"	n	line:2790	language:C++	namespace:el::base
el::base::workarounds::IterableContainer	src/easylogging/easylogging++.h	/^class IterableContainer {$/;"	c	line:2793	language:C++	namespace:el::base::workarounds
el::base::workarounds::IterableContainer::IterableContainer	src/easylogging/easylogging++.h	/^  IterableContainer(void) {}$/;"	f	line:2797	language:C++	class:el::base::workarounds::IterableContainer	access:public	signature:(void)
el::base::workarounds::IterableContainer::begin	src/easylogging/easylogging++.h	/^  iterator begin(void) {$/;"	f	line:2799	language:C++	class:el::base::workarounds::IterableContainer	typeref:typename:iterator	access:public	signature:(void)
el::base::workarounds::IterableContainer::const_iterator	src/easylogging/easylogging++.h	/^  typedef typename Container::const_iterator const_iterator;$/;"	t	line:2796	language:C++	class:el::base::workarounds::IterableContainer	typeref:typename:Container::const_iterator	access:public
el::base::workarounds::IterableContainer::end	src/easylogging/easylogging++.h	/^  iterator end(void) {$/;"	f	line:2802	language:C++	class:el::base::workarounds::IterableContainer	typeref:typename:iterator	access:public	signature:(void)
el::base::workarounds::IterableContainer::getContainer	src/easylogging/easylogging++.h	/^  virtual Container& getContainer(void) = 0;$/;"	p	line:2806	language:C++	class:el::base::workarounds::IterableContainer	typeref:typename:Container &	access:private	signature:(void)
el::base::workarounds::IterableContainer::iterator	src/easylogging/easylogging++.h	/^  typedef typename Container::iterator iterator;$/;"	t	line:2795	language:C++	class:el::base::workarounds::IterableContainer	typeref:typename:Container::iterator	access:public
el::base::workarounds::IterableContainer::~IterableContainer	src/easylogging/easylogging++.h	/^  virtual ~IterableContainer(void) {}$/;"	f	line:2798	language:C++	class:el::base::workarounds::IterableContainer	access:public	signature:(void)
el::base::workarounds::IterablePriorityQueue	src/easylogging/easylogging++.h	/^class IterablePriorityQueue : public IterableContainer<T, Container>,$/;"	c	line:2810	language:C++	namespace:el::base::workarounds	inherits:IterableContainer<T,Container>,std::priority_queue<T,Container,Comparator>
el::base::workarounds::IterablePriorityQueue::IterablePriorityQueue	src/easylogging/easylogging++.h	/^  IterablePriorityQueue(std::priority_queue<T, Container, Comparator> queue_) {$/;"	f	line:2813	language:C++	class:el::base::workarounds::IterablePriorityQueue	access:public	signature:(std::priority_queue<T,Container,Comparator> queue_)
el::base::workarounds::IterablePriorityQueue::getContainer	src/easylogging/easylogging++.h	/^  inline Container& getContainer(void) {$/;"	f	line:2821	language:C++	class:el::base::workarounds::IterablePriorityQueue	typeref:typename:Container &	access:private	signature:(void)
el::base::workarounds::IterableQueue	src/easylogging/easylogging++.h	/^class IterableQueue : public IterableContainer<T, Container>, public std::queue<T, Container> {$/;"	c	line:2827	language:C++	namespace:el::base::workarounds	inherits:IterableContainer<T,Container>,std::queue<T,Container>
el::base::workarounds::IterableQueue::IterableQueue	src/easylogging/easylogging++.h	/^  IterableQueue(std::queue<T, Container> queue_) {$/;"	f	line:2829	language:C++	class:el::base::workarounds::IterableQueue	access:public	signature:(std::queue<T,Container> queue_)
el::base::workarounds::IterableQueue::getContainer	src/easylogging/easylogging++.h	/^  inline Container& getContainer(void) {$/;"	f	line:2837	language:C++	class:el::base::workarounds::IterableQueue	typeref:typename:Container &	access:private	signature:(void)
el::base::workarounds::IterableStack	src/easylogging/easylogging++.h	/^class IterableStack : public IterableContainer<T, Container>, public std::stack<T, Container> {$/;"	c	line:2843	language:C++	namespace:el::base::workarounds	inherits:IterableContainer<T,Container>,std::stack<T,Container>
el::base::workarounds::IterableStack::IterableStack	src/easylogging/easylogging++.h	/^  IterableStack(std::stack<T, Container> stack_) {$/;"	f	line:2845	language:C++	class:el::base::workarounds::IterableStack	access:public	signature:(std::stack<T,Container> stack_)
el::base::workarounds::IterableStack::getContainer	src/easylogging/easylogging++.h	/^  inline Container& getContainer(void) {$/;"	f	line:2853	language:C++	class:el::base::workarounds::IterableStack	typeref:typename:Container &	access:private	signature:(void)
el::configStringToTypeMap	src/easylogging/easylogging++.cc	/^static struct ConfigurationStringToTypeItem configStringToTypeMap[] = {$/;"	v	line:205	language:C++	namespace:el	typeref:struct:ConfigurationStringToTypeItem[]	file:
el::operator <<	src/easylogging/easylogging++.h	/^  friend inline el::base::type::ostream_t& operator<<(el::base::type::ostream_t& os, const Logga/;"	f	line:1567	language:C++	namespace:el	typeref:typename:el::base::type::ostream_t &	signature:(el::base::type::ostream_t & os,const Loggable & loggable)
el::stringToLevelMap	src/easylogging/easylogging++.cc	/^static struct StringToLevelItem stringToLevelMap[] = {$/;"	v	line:154	language:C++	namespace:el	typeref:struct:StringToLevelItem[]	file:
el_getVALength	src/easylogging/easylogging++.h	/^#  define el_getVALength(/;"	d	line:3383	language:C++	signature:(...)
el_resolveVALength	src/easylogging/easylogging++.h	/^#define el_resolveVALength(/;"	d	line:3392	language:C++	signature:(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,N,...)
elements	src/design_patterns/builder/builder.h	/^    std::vector<HtmlElement> elements;$/;"	m	line:17	language:C++	struct:design_patterns::HtmlElement	typeref:typename:std::vector<HtmlElement>	access:public
elpptime	src/easylogging/easylogging++.h	/^#   define elpptime /;"	d	line:462	language:C++
elpptime	src/easylogging/easylogging++.h	/^#   define elpptime /;"	d	line:466	language:C++
elpptime_r	src/easylogging/easylogging++.h	/^#   define elpptime_r /;"	d	line:460	language:C++
elpptime_r	src/easylogging/easylogging++.h	/^#   define elpptime_r /;"	d	line:464	language:C++
elpptime_s	src/easylogging/easylogging++.h	/^#   define elpptime_s /;"	d	line:461	language:C++
elpptime_s	src/easylogging/easylogging++.h	/^#   define elpptime_s /;"	d	line:465	language:C++
emplace	src/al/MinHeap.h	/^    void emplace(Args&&... args)$/;"	f	line:35	language:C++	class:al::MinHeap	typeref:typename:void	access:public	signature:(Args &&...args)
empty	src/al/MinHeap.h	/^    bool empty() const {return container_.empty();}$/;"	f	line:28	language:C++	class:al::MinHeap	typeref:typename:bool	access:public	signature:() const
empty	src/easylogging/easylogging++.cc	/^bool CommandLineArgs::empty(void) const {$/;"	f	line:1364	language:C++	class:el::base::utils::CommandLineArgs	typeref:typename:bool	signature:(void) const
empty	src/easylogging/easylogging++.h	/^  bool empty(void) const;$/;"	p	line:1236	language:C++	class:el::base::utils::CommandLineArgs	typeref:typename:bool	access:public	signature:(void) const
empty	src/easylogging/easylogging++.h	/^  inline bool empty(void) {$/;"	f	line:2535	language:C++	class:el::base::AsyncLogQueue	typeref:typename:bool	access:public	signature:(void)
empty	src/easylogging/easylogging++.h	/^  virtual inline bool empty(void) const ELPP_FINAL {$/;"	f	line:1330	language:C++	class:el::base::utils::AbstractRegistry	typeref:typename:bool	access:public	signature:(void) const
emptyQueue	src/easylogging/easylogging++.cc	/^void AsyncDispatchWorker::emptyQueue(void) {$/;"	f	line:2314	language:C++	class:el::base::AsyncDispatchWorker	typeref:typename:void	signature:(void)
emptyQueue	src/easylogging/easylogging++.h	/^  void emptyQueue(void);$/;"	p	line:2742	language:C++	class:el::base::AsyncDispatchWorker	typeref:typename:void	access:public	signature:(void)
enable_if	src/tests/type_traits.h	/^    struct enable_if $/;"	s	line:2055	language:C++	namespace:std
enable_if	src/tests/type_traits.h	/^    struct enable_if<true, _Tp>$/;"	s	line:2060	language:C++	namespace:std
enable_if_t	src/tests/type_traits.h	/^    using enable_if_t = typename enable_if<_Cond, _Tp>::type;$/;"	t	line:2342	language:C++	namespace:std	typeref:typename:enable_if<_Cond,_Tp>::type
enabled	src/easylogging/easylogging++.cc	/^bool TypedConfigurations::enabled(Level level) {$/;"	f	line:1630	language:C++	class:el::base::TypedConfigurations	typeref:typename:bool	signature:(Level level)
enabled	src/easylogging/easylogging++.h	/^  bool enabled(Level level);$/;"	p	line:1918	language:C++	class:el::base::TypedConfigurations	typeref:typename:bool	access:public	signature:(Level level)
enabled	src/easylogging/easylogging++.h	/^  inline bool enabled(Level level) const {$/;"	f	line:2271	language:C++	class:el::Logger	typeref:typename:bool	access:public	signature:(Level level) const
enabled	src/easylogging/easylogging++.h	/^  inline bool enabled(void) const {$/;"	f	line:2145	language:C++	class:el::Callback	typeref:typename:bool	access:public	signature:(void) const
end	src/buffer/buffer.cpp	/^buffer::Iter buffer::end()$/;"	f	line:418	language:C++	class:buffer	typeref:typename:buffer::Iter	signature:()
end	src/buffer/buffer.cpp	/^buffer_chain::Iter buffer_chain::end() const$/;"	f	line:235	language:C++	class:buffer_chain	typeref:typename:buffer_chain::Iter	signature:() const
end	src/buffer/buffer.h	/^    Iter end() const ;$/;"	p	line:124	language:C++	class:buffer_chain	typeref:typename:Iter	access:public	signature:() const
end	src/buffer/buffer.h	/^    Iter end();$/;"	p	line:182	language:C++	class:buffer	typeref:typename:Iter	access:public	signature:()
end	src/easylogging/easylogging++.h	/^  iterator end(void) {$/;"	f	line:2802	language:C++	class:el::base::workarounds::IterableContainer	typeref:typename:iterator	access:public	signature:(void)
end	src/easylogging/easylogging++.h	/^  virtual inline iterator end(void) ELPP_FINAL {$/;"	f	line:1314	language:C++	class:el::base::utils::AbstractRegistry	typeref:typename:iterator	access:public	signature:(void)
end	src/mysql_gtid/mysql_gtid.h	/^    MySQLGno end;$/;"	m	line:71	language:C++	struct:MySQLGtidSet::Interval	typeref:typename:MySQLGno	access:public
end	src/string_piece/string_piece.h	/^    iterator end() {return end_;}$/;"	f	line:75	language:C++	class:string_piece::Range	typeref:typename:iterator	access:public	signature:()
endTime	src/easylogging/easylogging++.h	/^  inline const struct timeval* endTime(void) const;$/;"	p	line:3417	language:C++	class:el::PerformanceTrackingData	typeref:typename:const struct timeval *	access:public	signature:(void) const
endTime	src/easylogging/easylogging++.h	/^inline const struct timeval* PerformanceTrackingData::endTime() const {$/;"	f	line:3550	language:C++	class:el::PerformanceTrackingData	typeref:typename:const struct timeval *	signature:() const
end_	src/string_piece/string_piece.h	/^    iterator end_;$/;"	m	line:128	language:C++	class:string_piece::Range	typeref:typename:iterator	access:private
endsWith	src/easylogging/easylogging++.cc	/^bool Str::endsWith(const std::string& str, const std::string& end) {$/;"	f	line:908	language:C++	class:el::base::utils::Str	typeref:typename:bool	signature:(const std::string & str,const std::string & end)
endsWith	src/easylogging/easylogging++.h	/^  static bool endsWith(const std::string& str, const std::string& end);$/;"	p	line:1089	language:C++	class:el::base::utils::Str	typeref:typename:bool	access:public	signature:(const std::string & str,const std::string & end)
execute	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    void execute()$/;"	f	line:81	language:C++	struct:design_patterns::NewCreatureModifier	typeref:typename:void	access:public	signature:()
execute	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^    virtual void execute()$/;"	f	line:42	language:C++	class:design_patterns::CreatureModifier	typeref:typename:void	access:public	signature:()
execute	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^    void execute() override$/;"	f	line:56	language:C++	class:design_patterns::DoubleAttackModifier	typeref:typename:void	access:public	signature:()
execute	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^    void execute() override$/;"	f	line:67	language:C++	class:design_patterns::DoubleDefenceModifier	typeref:typename:void	access:public	signature:()
expand_if_needed	src/buffer/buffer.cpp	/^buffer_chain* buffer::expand_if_needed(uint32_t data_len)$/;"	f	line:940	language:C++	class:buffer	typeref:typename:buffer_chain *	signature:(uint32_t data_len)
expand_if_needed	src/buffer/buffer.h	/^    buffer_chain* expand_if_needed(uint32_t data_len);$/;"	p	line:259	language:C++	class:buffer	typeref:typename:buffer_chain *	access:private	signature:(uint32_t data_len)
extent	src/tests/type_traits.h	/^    struct extent : public integral_constant<std::size_t, 0> { };$/;"	s	line:1385	language:C++	namespace:std	inherits:integral_constant<std::size_t,0>
extent	src/tests/type_traits.h	/^    struct extent<_Tp[], _Uint>$/;"	s	line:1395	language:C++	namespace:std	inherits:integral_constant<std::size_t,_Uint==0?0:extent<_Tp,_Uint-1>::value>
extent	src/tests/type_traits.h	/^    struct extent<_Tp[_Size], _Uint>$/;"	s	line:1388	language:C++	namespace:std	inherits:integral_constant<std::size_t,_Uint==0?_Size:extent<_Tp,_Uint-1>::value>
extractPathFromFilename	src/easylogging/easylogging++.cc	/^std::string File::extractPathFromFilename(const std::string& fullPath, const char* separator) {$/;"	f	line:822	language:C++	class:el::base::utils::File	typeref:typename:std::string	signature:(const std::string & fullPath,const char * separator)
extractPathFromFilename	src/easylogging/easylogging++.h	/^  static std::string extractPathFromFilename(const std::string& fullPath,$/;"	p	line:1054	language:C++	class:el::base::utils::File	typeref:typename:std::string	access:public	signature:(const std::string & fullPath,const char * seperator=base::consts::kFilePathSeperator)
false_type	src/tests/type_traits.h	/^  typedef integral_constant<bool, false>    false_type;$/;"	t	line:83	language:C++	namespace:std	typeref:typename:integral_constant<bool,false>
features	build/CMakeFiles/feature_tests.cxx	/^  const char features[] = {"\\n"$/;"	v	line:2	language:C++	typeref:typename:const char[]
field_data	src/http_parser/http_parser.h	/^  } field_data[UF_MAX];$/;"	m	line:369	language:C++	struct:http_parser_url	typeref:struct:http_parser_url::__anoneba9f9790108[]	access:public
field_set	src/http_parser/http_parser.h	/^  uint16_t field_set;           \/* Bitmask of (1 << UF_*) values *\/$/;"	m	line:363	language:C++	struct:http_parser_url	typeref:typename:uint16_t	access:public
file	src/easylogging/easylogging++.h	/^  inline const char* file(void) const {$/;"	f	line:3431	language:C++	class:el::PerformanceTrackingData	typeref:typename:const char *	access:public	signature:(void) const
file	src/easylogging/easylogging++.h	/^  inline const std::string& file(void) const {$/;"	f	line:2462	language:C++	class:el::LogMessage	typeref:typename:const std::string &	access:public	signature:(void) const
fileHandle	src/easylogging/easylogging++.cc	/^base::threading::Mutex& LogDispatchCallback::fileHandle(const LogDispatchData* data) {$/;"	f	line:2198	language:C++	class:el::LogDispatchCallback	typeref:typename:base::threading::Mutex &	signature:(const LogDispatchData * data)
fileHandle	src/easylogging/easylogging++.h	/^  base::threading::Mutex& fileHandle(const LogDispatchData* data);$/;"	p	line:2181	language:C++	class:el::LogDispatchCallback	typeref:typename:base::threading::Mutex &	access:protected	signature:(const LogDispatchData * data)
fileStream	src/easylogging/easylogging++.cc	/^base::type::fstream_t* TypedConfigurations::fileStream(Level level) {$/;"	f	line:1662	language:C++	class:el::base::TypedConfigurations	typeref:typename:base::type::fstream_t *	signature:(Level level)
fileStream	src/easylogging/easylogging++.h	/^  base::type::fstream_t* fileStream(Level level);$/;"	p	line:1926	language:C++	class:el::base::TypedConfigurations	typeref:typename:base::type::fstream_t *	access:public	signature:(Level level)
filename	src/easylogging/easylogging++.cc	/^const std::string& TypedConfigurations::filename(Level level) {$/;"	f	line:1638	language:C++	class:el::base::TypedConfigurations	typeref:typename:const std::string &	signature:(Level level)
filename	src/easylogging/easylogging++.h	/^  const std::string& filename(Level level);$/;"	p	line:1920	language:C++	class:el::base::TypedConfigurations	typeref:typename:const std::string &	access:public	signature:(Level level)
filename	src/easylogging/easylogging++.h	/^  inline const char* filename(void) const {$/;"	f	line:2077	language:C++	class:el::base::HitCounter	typeref:typename:const char *	access:public	signature:(void) const
filter	src/design_patterns/basic/SOLID_Open_Close.h	/^    Products_t filter(Products_t products, ISpecification<Product>& spec) override$/;"	f	line:67	language:C++	class:design_patterns::Filter	typeref:typename:Products_t	access:public	signature:(Products_t products,ISpecification<Product> & spec)
filter	src/design_patterns/basic/SOLID_Open_Close.h	/^    virtual std::vector<T*> filter(std::vector<T*> products, ISpecification<T>& spec) = 0;$/;"	p	line:60	language:C++	class:design_patterns::IFilter	typeref:typename:std::vector<T * >	access:public	signature:(std::vector<T * > products,ISpecification<T> & spec)
filter_by_Color	src/design_patterns/basic/SOLID_Open_Close.h	/^    static  Products_t filter_by_Color(Products_t products, Color color)$/;"	f	line:29	language:C++	class:design_patterns::ProductFilter	typeref:typename:Products_t	access:public	signature:(Products_t products,Color color)
filter_by_Size	src/design_patterns/basic/SOLID_Open_Close.h	/^    static Products_t filter_by_Size(Products_t products, Size size)$/;"	f	line:39	language:C++	class:design_patterns::ProductFilter	typeref:typename:Products_t	access:public	signature:(Products_t products,Size size)
find	src/bytebuf/bytebuf.h	/^    int find(const T& target);$/;"	p	line:40	language:C++	class:bytebuf	typeref:typename:int	access:public	signature:(const T & target)
find	src/bytebuf/bytebuf.h	/^int bytebuf::find(const T& target)$/;"	f	line:71	language:C++	class:bytebuf	typeref:typename:int	signature:(const T & target)
find	src/string_piece/string_piece.h	/^    int find(const Range<T>& str)$/;"	f	line:85	language:C++	class:string_piece::Range	typeref:typename:int	access:public	signature:(const Range<T> & str)
find	src/string_piece/string_piece.h	/^    size_type find(value_type value)$/;"	f	line:78	language:C++	class:string_piece::Range	typeref:typename:size_type	access:public	signature:(value_type value)
first	src/buffer/buffer.h	/^    buffer_chain& first() { return chains_.front(); }$/;"	f	line:248	language:C++	class:buffer	typeref:typename:buffer_chain &	access:private	signature:()
first	src/buffer/buffer.h	/^    const buffer_chain& first() const { return chains_.front();}$/;"	f	line:249	language:C++	class:buffer	typeref:typename:const buffer_chain &	access:private	signature:() const
firstCheckpoint	src/easylogging/easylogging++.h	/^  inline bool firstCheckpoint(void) const {$/;"	f	line:3425	language:C++	class:el::PerformanceTrackingData	typeref:typename:bool	access:public	signature:(void) const
first_chain_length	src/buffer/buffer.cpp	/^uint32_t buffer::first_chain_length()$/;"	f	line:455	language:C++	class:buffer	typeref:typename:uint32_t	signature:()
first_chain_length	src/buffer/buffer.h	/^    uint32_t first_chain_length();$/;"	p	line:177	language:C++	class:buffer	typeref:typename:uint32_t	access:public	signature:()
flags	src/easylogging/easylogging++.h	/^  inline base::type::EnumType flags(void) const {$/;"	f	line:1604	language:C++	class:el::base::LogFormat	typeref:typename:base::type::EnumType	access:public	signature:(void) const
flags	src/easylogging/easylogging++.h	/^  inline base::type::EnumType flags(void) const {$/;"	f	line:2605	language:C++	class:el::base::Storage	typeref:typename:base::type::EnumType	access:public	signature:(void) const
flags	src/http_parser/http_parser.h	/^  unsigned int flags : 8;        \/* F_* values from 'flags' enum; semi-public *\/$/;"	m	line:298	language:C++	struct:http_parser	typeref:typename:unsigned int:8	access:public
flags	src/http_parser/http_parser.h	/^enum flags$/;"	g	line:221	language:C++
flush	src/easylogging/easylogging++.cc	/^void Logger::flush(Level level, base::type::fstream_t* fs) {$/;"	f	line:690	language:C++	class:el::Logger	typeref:typename:void	signature:(Level level,base::type::fstream_t * fs)
flush	src/easylogging/easylogging++.cc	/^void Logger::flush(void) {$/;"	f	line:680	language:C++	class:el::Logger	typeref:typename:void	signature:(void)
flush	src/easylogging/easylogging++.h	/^  void flush(Level level, base::type::fstream_t* fs);$/;"	p	line:2257	language:C++	class:el::Logger	typeref:typename:void	access:public	signature:(Level level,base::type::fstream_t * fs)
flush	src/easylogging/easylogging++.h	/^  void flush(void);$/;"	p	line:2255	language:C++	class:el::Logger	typeref:typename:void	access:public	signature:(void)
flushAll	src/easylogging/easylogging++.cc	/^void Loggers::flushAll(void) {$/;"	f	line:3080	language:C++	class:el::Loggers	typeref:typename:void	signature:(void)
flushAll	src/easylogging/easylogging++.h	/^  inline void flushAll(void) {$/;"	f	line:2395	language:C++	class:el::base::RegisteredLoggers	typeref:typename:void	access:public	signature:(void)
flushAll	src/easylogging/easylogging++.h	/^  static void flushAll(void);$/;"	p	line:3841	language:C++	class:el::Loggers	typeref:typename:void	access:public	signature:(void)
forEachConfigType	src/easylogging/easylogging++.cc	/^void ConfigurationTypeHelper::forEachConfigType(base::type::EnumType* startIndex, const std::fun/;"	f	line:227	language:C++	class:el::ConfigurationTypeHelper	typeref:typename:void	signature:(base::type::EnumType * startIndex,const std::function<bool (void)> & fn)
forEachConfigType	src/easylogging/easylogging++.h	/^  static inline void forEachConfigType(base::type::EnumType* startIndex, const std::function<boo/;"	p	line:690	language:C++	class:el::ConfigurationTypeHelper	typeref:typename:void	access:public	signature:(base::type::EnumType * startIndex,const std::function<bool (void)> & fn)
forEachLevel	src/easylogging/easylogging++.cc	/^void LevelHelper::forEachLevel(base::type::EnumType* startIndex, const std::function<bool(void)>/;"	f	line:174	language:C++	class:el::LevelHelper	typeref:typename:void	signature:(base::type::EnumType * startIndex,const std::function<bool (void)> & fn)
forEachLevel	src/easylogging/easylogging++.h	/^  static void forEachLevel(base::type::EnumType* startIndex, const std::function<bool(void)>& fn/;"	p	line:628	language:C++	class:el::LevelHelper	typeref:typename:void	access:public	signature:(base::type::EnumType * startIndex,const std::function<bool (void)> & fn)
format	src/easylogging/easylogging++.h	/^  inline const base::type::string_t& format(void) const {$/;"	f	line:1596	language:C++	class:el::base::LogFormat	typeref:typename:const base::type::string_t &	access:public	signature:(void) const
formatSpecifier	src/easylogging/easylogging++.h	/^  inline const char* formatSpecifier(void) const {$/;"	f	line:1649	language:C++	class:el::CustomFormatSpecifier	typeref:typename:const char *	access:public	signature:(void) const
formatTime	src/easylogging/easylogging++.cc	/^base::type::string_t DateTime::formatTime(unsigned long long time, base::TimestampUnit timestamp/;"	f	line:1198	language:C++	class:el::base::utils::DateTime	typeref:typename:base::type::string_t	signature:(unsigned long long time,base::TimestampUnit timestampUnit)
formatTime	src/easylogging/easylogging++.h	/^  static base::type::string_t formatTime(unsigned long long time, base::TimestampUnit timestampU/;"	p	line:1197	language:C++	class:el::base::utils::DateTime	typeref:typename:base::type::string_t	access:public	signature:(unsigned long long time,base::TimestampUnit timestampUnit)
formattedTimeTaken	src/easylogging/easylogging++.h	/^  inline const base::type::string_t* formattedTimeTaken() const {$/;"	f	line:3440	language:C++	class:el::PerformanceTrackingData	typeref:typename:const base::type::string_t *	access:public	signature:() const
free_trailing_empty_chains	src/buffer/buffer.cpp	/^buffer_chain* buffer::free_trailing_empty_chains()$/;"	f	line:992	language:C++	class:buffer	typeref:typename:buffer_chain *	signature:()
free_trailing_empty_chains	src/buffer/buffer.h	/^    buffer_chain* free_trailing_empty_chains();$/;"	p	line:260	language:C++	class:buffer	typeref:typename:buffer_chain *	access:private	signature:()
front	src/easylogging/easylogging++.h	/^  inline AsyncLogItem front(void) {$/;"	f	line:2531	language:C++	class:el::base::AsyncLogQueue	typeref:typename:AsyncLogItem	access:public	signature:(void)
fstream_t	src/easylogging/easylogging++.h	/^typedef std::wfstream fstream_t;$/;"	t	line:517	language:C++	namespace:el::base::type	typeref:typename:std::wfstream
func	src/easylogging/easylogging++.h	/^  inline const char* func(void) const {$/;"	f	line:3437	language:C++	class:el::PerformanceTrackingData	typeref:typename:const char *	access:public	signature:(void) const
func	src/easylogging/easylogging++.h	/^  inline const std::string& func(void) const {$/;"	f	line:2468	language:C++	class:el::LogMessage	typeref:typename:const std::string &	access:public	signature:(void) const
function1	src/tests/tests.h	/^int function1(int i, string &&s, int j)$/;"	f	line:25	language:C++	typeref:typename:int	signature:(int i,string && s,int j)
function2	src/tests/tests.h	/^int function2(int &i, string &s, int &j)$/;"	f	line:32	language:C++	typeref:typename:int	signature:(int & i,string & s,int & j)
function3	src/tests/tests.h	/^int function3(string &s, int i)$/;"	f	line:42	language:C++	typeref:typename:int	signature:(string & s,int i)
game	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    Game& game;$/;"	m	line:62	language:C++	struct:design_patterns::NewCreature	typeref:typename:Game &	access:private
game_	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    Game& game_;$/;"	m	line:88	language:C++	struct:design_patterns::NewCreatureModifier	typeref:typename:Game &	access:private
gen	src/easylogging/test_easylogging.h	/^static std::mt19937 gen(rd());$/;"	p	line:39	language:C++	namespace:easylogging	typeref:typename:std::mt19937	signature:(rd ())
gen	test/buffer/buffer_test.cpp	/^static std::mt19937 gen(rd());$/;"	p	line:49	language:C++	namespace:buffer_test	typeref:typename:std::mt19937	file:	signature:(rd ())
gen	test/substring_search/kmp_test.cpp	/^static std::mt19937 gen(rd());$/;"	p	line:68	language:C++	namespace:kmp_test	typeref:typename:std::mt19937	file:	signature:(rd ())
generateNew	src/easylogging/easylogging++.cc	/^void StackTrace::generateNew(void) {$/;"	f	line:2788	language:C++	class:el::base::debug::StackTrace	typeref:typename:void	signature:(void)
generateNew	src/easylogging/easylogging++.h	/^  void generateNew(void);$/;"	p	line:3603	language:C++	class:el::base::debug::StackTrace	typeref:typename:void	access:private	signature:(void)
get	src/easylogging/easylogging++.cc	/^Logger* RegisteredLoggers::get(const std::string& id, bool forceCreation) {$/;"	f	line:1890	language:C++	class:el::base::RegisteredLoggers	typeref:typename:Logger *	signature:(const std::string & id,bool forceCreation)
get	src/easylogging/easylogging++.h	/^  Logger* get(const std::string& id, bool forceCreation = true);$/;"	p	line:2362	language:C++	class:el::base::RegisteredLoggers	typeref:typename:Logger *	access:public	signature:(const std::string & id,bool forceCreation=true)
get	src/easylogging/easylogging++.h	/^  T_Ptr* get(const T& arg1, const T2 arg2) {$/;"	f	line:1515	language:C++	class:el::base::utils::RegistryWithPred	typeref:typename:T_Ptr *	access:protected	signature:(const T & arg1,const T2 arg2)
get	src/easylogging/easylogging++.h	/^  T_Ptr* get(const T_Key& uniqKey) {$/;"	f	line:1425	language:C++	class:el::base::utils::Registry	typeref:typename:T_Ptr *	access:protected	signature:(const T_Key & uniqKey)
get	src/easylogging/easylogging++.h	/^  inline Configuration* get(Level level, ConfigurationType configurationType) {$/;"	f	line:1796	language:C++	class:el::Configurations	typeref:typename:Configuration *	access:public	signature:(Level level,ConfigurationType configurationType)
getAttack	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    int getAttack()$/;"	f	line:42	language:C++	struct:design_patterns::NewCreature	typeref:typename:int	access:public	signature:()
getBashOutput	src/easylogging/easylogging++.cc	/^const std::string OS::getBashOutput(const char* command) {$/;"	f	line:1067	language:C++	class:el::base::utils::OS	typeref:typename:const std::string	signature:(const char * command)
getBashOutput	src/easylogging/easylogging++.h	/^  static const std::string getBashOutput(const char* command);$/;"	p	line:1158	language:C++	class:el::base::utils::OS	typeref:typename:const std::string	access:public	signature:(const char * command)
getCodes	src/http/HttpHeaders.h	/^    const vector_t<HttpHeaderCode>& getCodes() const {return codes_;}$/;"	f	line:103	language:C++	class:http::HttpHeaders	typeref:typename:const vector_t<HttpHeaderCode> &	access:public	signature:() const
getCodesDeleted	src/http/HttpHeaders.h	/^    size_t getCodesDeleted() const {return codes_deleted_;}$/;"	f	line:106	language:C++	class:http::HttpHeaders	typeref:typename:size_t	access:public	signature:() const
getColor	src/design_patterns/basic/SOLID_Open_Close.h	/^    Color getColor() const {return color_;}$/;"	f	line:17	language:C++	class:design_patterns::Product	typeref:typename:Color	access:public	signature:() const
getConfigByRef	src/easylogging/easylogging++.h	/^  inline Conf_T& getConfigByRef(Level level, std::unordered_map<Level, Conf_T>* confMap, const c/;"	f	line:1957	language:C++	class:el::base::TypedConfigurations	typeref:typename:Conf_T &	access:private	signature:(Level level,std::unordered_map<Level,Conf_T> * confMap,const char * confName)
getConfigByVal	src/easylogging/easylogging++.h	/^  inline Conf_T getConfigByVal(Level level, const std::unordered_map<Level, Conf_T>* confMap, co/;"	f	line:1951	language:C++	class:el::base::TypedConfigurations	typeref:typename:Conf_T	access:private	signature:(Level level,const std::unordered_map<Level,Conf_T> * confMap,const char * confName)
getContainer	src/easylogging/easylogging++.h	/^  inline Container& getContainer(void) {$/;"	f	line:2821	language:C++	class:el::base::workarounds::IterablePriorityQueue	typeref:typename:Container &	access:private	signature:(void)
getContainer	src/easylogging/easylogging++.h	/^  inline Container& getContainer(void) {$/;"	f	line:2837	language:C++	class:el::base::workarounds::IterableQueue	typeref:typename:Container &	access:private	signature:(void)
getContainer	src/easylogging/easylogging++.h	/^  inline Container& getContainer(void) {$/;"	f	line:2853	language:C++	class:el::base::workarounds::IterableStack	typeref:typename:Container &	access:private	signature:(void)
getContainer	src/easylogging/easylogging++.h	/^  virtual Container& getContainer(void) = 0;$/;"	p	line:2806	language:C++	class:el::base::workarounds::IterableContainer	typeref:typename:Container &	access:private	signature:(void)
getCounter	src/easylogging/easylogging++.h	/^  inline const base::HitCounter* getCounter(const char* filename, base::type::LineNumber lineNum/;"	f	line:2131	language:C++	class:el::base::RegisteredHitCounters	typeref:typename:const base::HitCounter *	access:public	signature:(const char * filename,base::type::LineNumber lineNumber)
getCurrentThreadId	src/easylogging/easylogging++.h	/^static inline std::string getCurrentThreadId(void) {$/;"	f	line:1032	language:C++	namespace:el::base::threading	typeref:typename:std::string	signature:(void)
getCurrentThreadId	src/easylogging/easylogging++.h	/^static std::string getCurrentThreadId(void) {$/;"	f	line:1016	language:C++	namespace:el::base::threading	typeref:typename:std::string	signature:(void)
getCurrentThreadId	src/easylogging/easylogging++.h	/^static std::string getCurrentThreadId(void) {$/;"	f	line:1025	language:C++	namespace:el::base::threading	typeref:typename:std::string	signature:(void)
getDateTime	src/easylogging/easylogging++.cc	/^std::string DateTime::getDateTime(const char* format, const base::SubsecondPrecision* ssPrec) {$/;"	f	line:1181	language:C++	class:el::base::utils::DateTime	typeref:typename:std::string	signature:(const char * format,const base::SubsecondPrecision * ssPrec)
getDateTime	src/easylogging/easylogging++.h	/^  static std::string getDateTime(const char* format, const base::SubsecondPrecision* ssPrec);$/;"	p	line:1190	language:C++	class:el::base::utils::DateTime	typeref:typename:std::string	access:public	signature:(const char * format,const base::SubsecondPrecision * ssPrec)
getDefence	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    int getDefence()$/;"	f	line:48	language:C++	struct:design_patterns::NewCreature	typeref:typename:int	access:public	signature:()
getDeviceName	src/easylogging/easylogging++.cc	/^std::string OS::getDeviceName(void) {$/;"	f	line:1055	language:C++	class:el::base::utils::OS	typeref:typename:std::string	signature:(void)
getDeviceName	src/easylogging/easylogging++.h	/^  static std::string getDeviceName(void);$/;"	p	line:1150	language:C++	class:el::base::utils::OS	typeref:typename:std::string	access:public	signature:(void)
getEnvironmentVariable	src/easylogging/easylogging++.cc	/^std::string OS::getEnvironmentVariable(const char* variableName, const char* defaultVal,$/;"	f	line:1095	language:C++	class:el::base::utils::OS	typeref:typename:std::string	signature:(const char * variableName,const char * defaultVal,const char * alternativeBashCommand)
getEnvironmentVariable	src/easylogging/easylogging++.h	/^  static std::string getEnvironmentVariable(const char* variableName, const char* defaultVal,$/;"	p	line:1165	language:C++	class:el::base::utils::OS	typeref:typename:std::string	access:public	signature:(const char * variableName,const char * defaultVal,const char * alternativeBashCommand=nullptr)
getFormattedTimeTaken	src/easylogging/easylogging++.cc	/^const base::type::string_t PerformanceTracker::getFormattedTimeTaken(struct timeval startTime) c/;"	f	line:2745	language:C++	class:el::base::PerformanceTracker	typeref:typename:const base::type::string_t	signature:(struct timeval startTime) const
getFormattedTimeTaken	src/easylogging/easylogging++.h	/^  const base::type::string_t getFormattedTimeTaken(struct timeval startTime) const;$/;"	p	line:3503	language:C++	class:el::base::PerformanceTracker	typeref:typename:const base::type::string_t	access:private	signature:(struct timeval startTime) const
getFormattedTimeTaken	src/easylogging/easylogging++.h	/^  const inline base::type::string_t getFormattedTimeTaken() const {$/;"	f	line:3499	language:C++	class:el::base::PerformanceTracker	typeref:typename:const base::type::string_t	access:private	signature:() const
getHeaderCode	src/http/HttpCommomHeaders.cpp	/^HttpHeaderCode HttpCommomHeaders::getHeaderCode(const char* headerName, size_t len)$/;"	f	line:6	language:C++	class:http::HttpCommomHeaders	typeref:typename:HttpHeaderCode	signature:(const char * headerName,size_t len)
getHeaderCode	src/http/HttpCommomHeaders.cpp	/^HttpHeaderCode HttpCommomHeaders::getHeaderCode(const std::string& headerName)$/;"	f	line:12	language:C++	class:http::HttpCommomHeaders	typeref:typename:HttpHeaderCode	signature:(const std::string & headerName)
getHeaderCode	src/http/HttpCommomHeaders.h	/^    static HttpHeaderCode getHeaderCode(const char* headerName, size_t len);$/;"	p	line:14	language:C++	class:http::HttpCommomHeaders	typeref:typename:HttpHeaderCode	access:public	signature:(const char * headerName,size_t len)
getHeaderCode	src/http/HttpCommomHeaders.h	/^    static HttpHeaderCode getHeaderCode(const std::string& headerName);$/;"	p	line:16	language:C++	class:http::HttpCommomHeaders	typeref:typename:HttpHeaderCode	access:public	signature:(const std::string & headerName)
getHeaderNames	src/http/HttpHeaders.h	/^    const vector_t<const char*>& getHeaderNames() const {return headerNames_;}$/;"	f	line:104	language:C++	class:http::HttpHeaders	typeref:typename:const vector_t<const char * > &	access:public	signature:() const
getHeaderTable	src/http/HttpCommomHeaders.cpp	/^const std::vector<std::string*>& HttpCommomHeaders::getHeaderTable()$/;"	f	line:17	language:C++	class:http::HttpCommomHeaders	typeref:typename:const std::vector<std::string * > &	signature:()
getHeaderTable	src/http/HttpCommomHeaders.h	/^    static const std::vector<std::string*>& getHeaderTable();$/;"	p	line:25	language:C++	class:http::HttpCommomHeaders	typeref:typename:const std::vector<std::string * > &	access:private	signature:()
getHeaderValues	src/http/HttpHeaders.h	/^    const vector_t<std::string>& getHeaderValues() const {return headerValues_;}$/;"	f	line:105	language:C++	class:http::HttpHeaders	typeref:typename:const vector_t<std::string> &	access:public	signature:() const
getHttpMethodString	src/http/HttpMethod.cpp	/^const std::vector<std::string> getHttpMethodString()$/;"	f	line:10	language:C++	namespace:http	typeref:typename:const std::vector<std::string>	signature:()
getInitVectorReserveSize	src/http/HttpHeaders.h	/^    static size_t getInitVectorReserveSize() {return INIT_VECTOR_RESERVE_SIZE;}$/;"	f	line:108	language:C++	class:http::HttpHeaders	typeref:typename:size_t	access:public	signature:()
getInstance	src/design_patterns/basic/thread_safe_singleton.h	/^    static T* getInstance()$/;"	f	line:114	language:C++	class:design_patterns::SingletonUsingVolatile	typeref:typename:T *	access:public	signature:()
getInstance	src/design_patterns/basic/thread_safe_singleton.h	/^    static std::shared_ptr<T> getInstance()$/;"	f	line:18	language:C++	class:design_patterns::thread_safe_singleton	typeref:typename:std::shared_ptr<T>	access:public	signature:()
getInstance	src/design_patterns/basic/thread_safe_singleton.h	/^    static std::shared_ptr<T> getInstance()$/;"	f	line:48	language:C++	class:design_patterns::ThreadSafe_Singleton_WithoutLock	typeref:typename:std::shared_ptr<T>	access:public	signature:()
getInstance	src/design_patterns/basic/thread_safe_singleton.h	/^    static std::shared_ptr<T> getInstance()$/;"	f	line:80	language:C++	class:design_patterns::SingletonWithCallOnce	typeref:typename:std::shared_ptr<T>	access:public	signature:()
getLatestStack	src/easylogging/easylogging++.h	/^  inline std::vector<StackTraceEntry>& getLatestStack(void) {$/;"	f	line:3594	language:C++	class:el::base::debug::StackTrace	typeref:typename:std::vector<StackTraceEntry> &	access:public	signature:(void)
getLogger	src/easylogging/easylogging++.cc	/^Logger* Loggers::getLogger(const std::string& identity, bool registerIfNotAvailable) {$/;"	f	line:2943	language:C++	class:el::Loggers	typeref:typename:Logger *	signature:(const std::string & identity,bool registerIfNotAvailable)
getLogger	src/easylogging/easylogging++.h	/^  static Logger* getLogger(const std::string& identity, bool registerIfNotAvailable = true);$/;"	p	line:3783	language:C++	class:el::Loggers	typeref:typename:Logger *	access:public	signature:(const std::string & identity,bool registerIfNotAvailable=true)
getName	src/design_patterns/basic/SOLID_Open_Close.h	/^    std::string getName() const {return name_;}$/;"	f	line:18	language:C++	class:design_patterns::Product	typeref:typename:std::string	access:public	signature:() const
getParamValue	src/easylogging/easylogging++.cc	/^const char* CommandLineArgs::getParamValue(const char* paramKey) const {$/;"	f	line:1355	language:C++	class:el::base::utils::CommandLineArgs	typeref:typename:const char *	signature:(const char * paramKey) const
getParamValue	src/easylogging/easylogging++.h	/^  const char* getParamValue(const char* paramKey) const;$/;"	p	line:1232	language:C++	class:el::base::utils::CommandLineArgs	typeref:typename:const char *	access:public	signature:(const char * paramKey) const
getPointerWithHeaderCode	src/http/HttpCommomHeaders.cpp	/^const char* HttpCommomHeaders::getPointerWithHeaderCode(HttpHeaderCode code)$/;"	f	line:41	language:C++	class:http::HttpCommomHeaders	typeref:typename:const char *	signature:(HttpHeaderCode code)
getPointerWithHeaderCode	src/http/HttpCommomHeaders.h	/^    static const char* getPointerWithHeaderCode(HttpHeaderCode code);$/;"	p	line:18	language:C++	class:http::HttpCommomHeaders	typeref:typename:const char *	access:public	signature:(HttpHeaderCode code)
getProperty	src/easylogging/easylogging++.cc	/^std::string OS::getProperty(const char* prop) {$/;"	f	line:1049	language:C++	class:el::base::utils::OS	typeref:typename:std::string	signature:(const char * prop)
getProperty	src/easylogging/easylogging++.h	/^  static std::string getProperty(const char* prop);$/;"	p	line:1147	language:C++	class:el::base::utils::OS	typeref:typename:std::string	access:public	signature:(const char * prop)
getSize	src/design_patterns/basic/SOLID_Open_Close.h	/^    Size getSize() const {return size_;}$/;"	f	line:19	language:C++	class:design_patterns::Product	typeref:typename:Size	access:public	signature:() const
getSizeOfFile	src/easylogging/easylogging++.cc	/^std::size_t File::getSizeOfFile(base::type::fstream_t* fs) {$/;"	f	line:755	language:C++	class:el::base::utils::File	typeref:typename:std::size_t	signature:(base::type::fstream_t * fs)
getSizeOfFile	src/easylogging/easylogging++.h	/^  static std::size_t getSizeOfFile(base::type::fstream_t* fs);$/;"	p	line:1045	language:C++	class:el::base::utils::File	typeref:typename:std::size_t	access:public	signature:(base::type::fstream_t * fs)
getThreadName	src/easylogging/easylogging++.h	/^  inline std::string getThreadName(const std::string& threadId) {$/;"	f	line:2681	language:C++	class:el::base::Storage	typeref:typename:std::string	access:public	signature:(const std::string & threadId)
getThreadName	src/easylogging/easylogging++.h	/^  static inline std::string getThreadName() {$/;"	f	line:3672	language:C++	class:el::Helpers	typeref:typename:std::string	access:public	signature:()
getTimeDifference	src/easylogging/easylogging++.cc	/^unsigned long long DateTime::getTimeDifference(const struct timeval& endTime, const struct timev/;"	f	line:1216	language:C++	class:el::base::utils::DateTime	typeref:typename:unsigned long long	signature:(const struct timeval & endTime,const struct timeval & startTime,base::TimestampUnit timestampUnit)
getTimeDifference	src/easylogging/easylogging++.h	/^  static unsigned long long getTimeDifference(const struct timeval& endTime, const struct timeva/;"	p	line:1200	language:C++	class:el::base::utils::DateTime	typeref:typename:unsigned long long	access:public	signature:(const struct timeval & endTime,const struct timeval & startTime,base::TimestampUnit timestampUnit)
getULong	src/easylogging/easylogging++.cc	/^unsigned long TypedConfigurations::getULong(std::string confVal) {$/;"	f	line:1728	language:C++	class:el::base::TypedConfigurations	typeref:typename:unsigned long	signature:(std::string confVal)
getULong	src/easylogging/easylogging++.h	/^  unsigned long getULong(std::string confVal);$/;"	p	line:2020	language:C++	class:el::base::TypedConfigurations	typeref:typename:unsigned long	access:private	signature:(std::string confVal)
getWindowsEnvironmentVariable	src/easylogging/easylogging++.cc	/^const char* OS::getWindowsEnvironmentVariable(const char* varname) {$/;"	f	line:1039	language:C++	class:el::base::utils::OS	typeref:typename:const char *	signature:(const char * varname)
getWindowsEnvironmentVariable	src/easylogging/easylogging++.h	/^  static const char* getWindowsEnvironmentVariable(const char* varname);$/;"	p	line:1143	language:C++	class:el::base::utils::OS	typeref:typename:const char *	access:public	signature:(const char * varname)
get_buffer	src/buffer/buffer.h	/^    const buffer* get_buffer() const {return buffer_;}$/;"	f	line:46	language:C++	class:buffer_iter	typeref:typename:const buffer *	access:public	signature:() const
get_buffer	src/buffer/buffer.h	/^    const void* get_buffer() const  { return buffer_; }$/;"	f	line:116	language:C++	class:buffer_chain	typeref:typename:const void *	access:public	signature:() const
get_buffer	src/buffer/buffer.h	/^    void* get_buffer() { return buffer_; }$/;"	f	line:115	language:C++	class:buffer_chain	typeref:typename:void *	access:public	signature:()
get_chains	src/buffer/buffer.h	/^  const std::list<buffer_chain> &get_chains() const { return this->chains_; }$/;"	f	line:271	language:C++	class:buffer	typeref:typename:const std::list<buffer_chain> &	access:public	signature:() const
get_intervals	src/mysql_gtid/mysql_gtid.h	/^  const IntervalList &get_intervals(MySQLSidno sidno) const {$/;"	f	line:79	language:C++	class:MySQLGtidSet	typeref:typename:const IntervalList &	access:public	signature:(MySQLSidno sidno) const
get_max_sidno	src/mysql_gtid/mysql_gtid.h	/^  MySQLSidno get_max_sidno() const { return _sid_sidno_map.size();}$/;"	f	line:58	language:C++	class:MySQLSidMap	typeref:typename:MySQLSidno	access:public	signature:() const
get_misalign	src/buffer/buffer.h	/^    uint32_t get_misalign()const {return misalign_;}$/;"	f	line:105	language:C++	class:buffer_chain	typeref:typename:uint32_t	access:public	signature:() const
get_offset	src/buffer/buffer.h	/^    uint32_t get_offset() const {return off_;}$/;"	f	line:91	language:C++	class:buffer_chain	typeref:typename:uint32_t	access:public	signature:() const
get_start_buffer	src/buffer/buffer.h	/^    const void* get_start_buffer() const {return static_cast<char*>(buffer_) + misalign_;}$/;"	f	line:118	language:C++	class:buffer_chain	typeref:typename:const void *	access:public	signature:() const
get_start_buffer	src/buffer/buffer.h	/^    void* get_start_buffer() {return static_cast<char*>(buffer_) + misalign_;}$/;"	f	line:117	language:C++	class:buffer_chain	typeref:typename:void *	access:public	signature:()
gettimeofday	src/easylogging/easylogging++.cc	/^void DateTime::gettimeofday(struct timeval* tv) {$/;"	f	line:1154	language:C++	class:el::base::utils::DateTime	typeref:typename:void	signature:(struct timeval * tv)
gettimeofday	src/easylogging/easylogging++.h	/^  static void gettimeofday(struct timeval* tv);$/;"	p	line:1184	language:C++	class:el::base::utils::DateTime	typeref:typename:void	access:public	signature:(struct timeval * tv)
gno	src/mysql_gtid/mysql_gtid.h	/^  MySQLGno gno;$/;"	m	line:42	language:C++	struct:MySQLGtid	typeref:typename:MySQLGno	access:public
guid_hash_map	src/guid_map/guid_hash_map.h	/^using guid_hash_map =  std::unordered_map<guid_t, guid_node>;$/;"	t	line:24	language:C++	typeref:typename:std::unordered_map<guid_t,guid_node>
guid_map_t	src/guid_map/guid_hash_map.h	/^    guid_map_t(guid_t key, guid_t referenced) : key_guid(key), referenced_guid(referenced){}$/;"	f	line:28	language:C++	struct:guid_map_t	access:public	signature:(guid_t key,guid_t referenced)
guid_map_t	src/guid_map/guid_hash_map.h	/^struct guid_map_t$/;"	s	line:26	language:C++
guid_map_t::guid_map_t	src/guid_map/guid_hash_map.h	/^    guid_map_t(guid_t key, guid_t referenced) : key_guid(key), referenced_guid(referenced){}$/;"	f	line:28	language:C++	struct:guid_map_t	access:public	signature:(guid_t key,guid_t referenced)
guid_map_t::key_guid	src/guid_map/guid_hash_map.h	/^    guid_t key_guid;$/;"	m	line:29	language:C++	struct:guid_map_t	typeref:typename:guid_t	access:public
guid_map_t::referenced_guid	src/guid_map/guid_hash_map.h	/^    guid_t referenced_guid;$/;"	m	line:30	language:C++	struct:guid_map_t	typeref:typename:guid_t	access:public
guid_map_test	src/guid_map/test.h	/^namespace guid_map_test$/;"	n	line:8	language:C++
guid_map_test::run_tests	src/guid_map/test.h	/^void run_tests()$/;"	f	line:11	language:C++	namespace:guid_map_test	typeref:typename:void	signature:()
guid_node	src/guid_map/guid_hash_map.h	/^    guid_node()$/;"	f	line:12	language:C++	struct:guid_node	access:public	signature:()
guid_node	src/guid_map/guid_hash_map.h	/^    guid_node(guid_t referenced_guid)$/;"	f	line:16	language:C++	struct:guid_node	access:public	signature:(guid_t referenced_guid)
guid_node	src/guid_map/guid_hash_map.h	/^struct guid_node{$/;"	s	line:11	language:C++
guid_node::guid_node	src/guid_map/guid_hash_map.h	/^    guid_node()$/;"	f	line:12	language:C++	struct:guid_node	access:public	signature:()
guid_node::guid_node	src/guid_map/guid_hash_map.h	/^    guid_node(guid_t referenced_guid)$/;"	f	line:16	language:C++	struct:guid_node	access:public	signature:(guid_t referenced_guid)
guid_node::referenced_guid	src/guid_map/guid_hash_map.h	/^    guid_t 	referenced_guid;$/;"	m	line:20	language:C++	struct:guid_node	typeref:typename:guid_t	access:public
guid_node::removed	src/guid_map/guid_hash_map.h	/^    bool 	removed;$/;"	m	line:21	language:C++	struct:guid_node	typeref:typename:bool	access:public
guid_t	src/guid_map/guid_hash_map.h	/^using guid_t = std::string;$/;"	t	line:9	language:C++	typeref:typename:std::string
h_C	src/http_parser/http_parser.cpp	/^  , h_C$/;"	e	line:369	language:C++	enum:header_states	file:	access:public
h_CO	src/http_parser/http_parser.cpp	/^  , h_CO$/;"	e	line:370	language:C++	enum:header_states	file:	access:public
h_CON	src/http_parser/http_parser.cpp	/^  , h_CON$/;"	e	line:371	language:C++	enum:header_states	file:	access:public
h_connection	src/http_parser/http_parser.cpp	/^  , h_connection$/;"	e	line:379	language:C++	enum:header_states	file:	access:public
h_connection_close	src/http_parser/http_parser.cpp	/^  , h_connection_close$/;"	e	line:395	language:C++	enum:header_states	file:	access:public
h_connection_keep_alive	src/http_parser/http_parser.cpp	/^  , h_connection_keep_alive$/;"	e	line:394	language:C++	enum:header_states	file:	access:public
h_connection_upgrade	src/http_parser/http_parser.cpp	/^  , h_connection_upgrade$/;"	e	line:396	language:C++	enum:header_states	file:	access:public
h_content_length	src/http_parser/http_parser.cpp	/^  , h_content_length$/;"	e	line:380	language:C++	enum:header_states	file:	access:public
h_content_length_num	src/http_parser/http_parser.cpp	/^  , h_content_length_num$/;"	e	line:381	language:C++	enum:header_states	file:	access:public
h_content_length_ws	src/http_parser/http_parser.cpp	/^  , h_content_length_ws$/;"	e	line:382	language:C++	enum:header_states	file:	access:public
h_general	src/http_parser/http_parser.cpp	/^  { h_general = 0$/;"	e	line:368	language:C++	enum:header_states	file:	access:public
h_matching_connection	src/http_parser/http_parser.cpp	/^  , h_matching_connection$/;"	e	line:373	language:C++	enum:header_states	file:	access:public
h_matching_connection_close	src/http_parser/http_parser.cpp	/^  , h_matching_connection_close$/;"	e	line:389	language:C++	enum:header_states	file:	access:public
h_matching_connection_keep_alive	src/http_parser/http_parser.cpp	/^  , h_matching_connection_keep_alive$/;"	e	line:388	language:C++	enum:header_states	file:	access:public
h_matching_connection_token	src/http_parser/http_parser.cpp	/^  , h_matching_connection_token$/;"	e	line:391	language:C++	enum:header_states	file:	access:public
h_matching_connection_token_start	src/http_parser/http_parser.cpp	/^  , h_matching_connection_token_start$/;"	e	line:387	language:C++	enum:header_states	file:	access:public
h_matching_connection_upgrade	src/http_parser/http_parser.cpp	/^  , h_matching_connection_upgrade$/;"	e	line:390	language:C++	enum:header_states	file:	access:public
h_matching_content_length	src/http_parser/http_parser.cpp	/^  , h_matching_content_length$/;"	e	line:375	language:C++	enum:header_states	file:	access:public
h_matching_proxy_connection	src/http_parser/http_parser.cpp	/^  , h_matching_proxy_connection$/;"	e	line:374	language:C++	enum:header_states	file:	access:public
h_matching_transfer_encoding	src/http_parser/http_parser.cpp	/^  , h_matching_transfer_encoding$/;"	e	line:376	language:C++	enum:header_states	file:	access:public
h_matching_transfer_encoding_chunked	src/http_parser/http_parser.cpp	/^  , h_matching_transfer_encoding_chunked$/;"	e	line:386	language:C++	enum:header_states	file:	access:public
h_matching_upgrade	src/http_parser/http_parser.cpp	/^  , h_matching_upgrade$/;"	e	line:377	language:C++	enum:header_states	file:	access:public
h_transfer_encoding	src/http_parser/http_parser.cpp	/^  , h_transfer_encoding$/;"	e	line:383	language:C++	enum:header_states	file:	access:public
h_transfer_encoding_chunked	src/http_parser/http_parser.cpp	/^  , h_transfer_encoding_chunked$/;"	e	line:393	language:C++	enum:header_states	file:	access:public
h_upgrade	src/http_parser/http_parser.cpp	/^  , h_upgrade$/;"	e	line:384	language:C++	enum:header_states	file:	access:public
handle	src/easylogging/easylogging++.cc	/^void AsyncDispatchWorker::handle(AsyncLogItem* logItem) {$/;"	f	line:2329	language:C++	class:el::base::AsyncDispatchWorker	typeref:typename:void	signature:(AsyncLogItem * logItem)
handle	src/easylogging/easylogging++.cc	/^void AsyncLogDispatchCallback::handle(const LogDispatchData* data) {$/;"	f	line:2277	language:C++	class:el::base::AsyncLogDispatchCallback	typeref:typename:void	signature:(const LogDispatchData * data)
handle	src/easylogging/easylogging++.cc	/^void DefaultLogDispatchCallback::handle(const LogDispatchData* data) {$/;"	f	line:2206	language:C++	class:el::base::DefaultLogDispatchCallback	typeref:typename:void	signature:(const LogDispatchData * data)
handle	src/easylogging/easylogging++.cc	/^void LogDispatchCallback::handle(const LogDispatchData* data) {$/;"	f	line:2187	language:C++	class:el::LogDispatchCallback	typeref:typename:void	signature:(const LogDispatchData * data)
handle	src/easylogging/easylogging++.h	/^  virtual void handle(const LogDispatchData* data);$/;"	p	line:2180	language:C++	class:el::LogDispatchCallback	typeref:typename:void	access:protected	signature:(const LogDispatchData * data)
handle	src/easylogging/easylogging++.h	/^  virtual void handle(const T* handlePtr) = 0;$/;"	p	line:2153	language:C++	class:el::Callback	typeref:typename:void	access:protected	signature:(const T * handlePtr)
handle	src/easylogging/easylogging++.h	/^  void handle(AsyncLogItem* logItem);$/;"	p	line:2744	language:C++	class:el::base::AsyncDispatchWorker	typeref:typename:void	access:public	signature:(AsyncLogItem * logItem)
handle	src/easylogging/easylogging++.h	/^  void handle(const LogDispatchData* data);$/;"	p	line:2726	language:C++	class:el::base::DefaultLogDispatchCallback	typeref:typename:void	access:protected	signature:(const LogDispatchData * data)
handle	src/easylogging/easylogging++.h	/^  void handle(const LogDispatchData* data);$/;"	p	line:2734	language:C++	class:el::base::AsyncLogDispatchCallback	typeref:typename:void	access:protected	signature:(const LogDispatchData * data)
handle	src/easylogging/easylogging++.h	/^  void handle(const PerformanceTrackingData* data) {$/;"	f	line:3511	language:C++	class:el::base::DefaultPerformanceTrackingCallback	typeref:typename:void	access:protected	signature:(const PerformanceTrackingData * data)
handle_	src/design_patterns/factory/factory_method.h	/^    int handle_;$/;"	m	line:28	language:C++	class:design_patterns::ReactorImpl	typeref:typename:int	access:private
has	src/easylogging/easylogging++.h	/^  inline bool has(const std::string& id) {$/;"	f	line:2382	language:C++	class:el::base::RegisteredLoggers	typeref:typename:bool	access:public	signature:(const std::string & id)
hasConfiguration	src/easylogging/easylogging++.cc	/^bool Configurations::hasConfiguration(ConfigurationType configurationType) {$/;"	f	line:326	language:C++	class:el::Configurations	typeref:typename:bool	signature:(ConfigurationType configurationType)
hasConfiguration	src/easylogging/easylogging++.cc	/^bool Configurations::hasConfiguration(Level level, ConfigurationType configurationType) {$/;"	f	line:338	language:C++	class:el::Configurations	typeref:typename:bool	signature:(Level level,ConfigurationType configurationType)
hasConfiguration	src/easylogging/easylogging++.h	/^  bool hasConfiguration(ConfigurationType configurationType);$/;"	p	line:1771	language:C++	class:el::Configurations	typeref:typename:bool	access:public	signature:(ConfigurationType configurationType)
hasConfiguration	src/easylogging/easylogging++.h	/^  bool hasConfiguration(Level level, ConfigurationType configurationType);$/;"	p	line:1776	language:C++	class:el::Configurations	typeref:typename:bool	access:public	signature:(Level level,ConfigurationType configurationType)
hasCustomFormatSpecifier	src/easylogging/easylogging++.cc	/^bool Storage::hasCustomFormatSpecifier(const char* formatSpecifier) {$/;"	f	line:2131	language:C++	class:el::base::Storage	typeref:typename:bool	signature:(const char * formatSpecifier)
hasCustomFormatSpecifier	src/easylogging/easylogging++.h	/^  bool hasCustomFormatSpecifier(const char* formatSpecifier);$/;"	p	line:2625	language:C++	class:el::base::Storage	typeref:typename:bool	access:public	signature:(const char * formatSpecifier)
hasCustomFormatSpecifier	src/easylogging/easylogging++.h	/^  static inline bool hasCustomFormatSpecifier(const char* formatSpecifier) {$/;"	f	line:3771	language:C++	class:el::Helpers	typeref:typename:bool	access:public	signature:(const char * formatSpecifier)
hasFlag	src/easylogging/easylogging++.h	/^  inline bool hasFlag(LoggingFlag flag) const {$/;"	f	line:2601	language:C++	class:el::base::Storage	typeref:typename:bool	access:public	signature:(LoggingFlag flag) const
hasFlag	src/easylogging/easylogging++.h	/^  inline bool hasFlag(base::FormatFlags flag) const {$/;"	f	line:1608	language:C++	class:el::base::LogFormat	typeref:typename:bool	access:public	signature:(base::FormatFlags flag) const
hasFlag	src/easylogging/easylogging++.h	/^  static inline bool hasFlag(LoggingFlag flag) {$/;"	f	line:3851	language:C++	class:el::Loggers	typeref:typename:bool	access:public	signature:(LoggingFlag flag)
hasFlag	src/easylogging/easylogging++.h	/^static inline bool hasFlag(Enum e, base::type::EnumType flag) {$/;"	f	line:888	language:C++	namespace:el::base::utils	typeref:typename:bool	signature:(Enum e,base::type::EnumType flag)
hasLogger	src/easylogging/easylogging++.cc	/^bool Loggers::hasLogger(const std::string& identity) {$/;"	f	line:2955	language:C++	class:el::Loggers	typeref:typename:bool	signature:(const std::string & identity)
hasLogger	src/easylogging/easylogging++.h	/^  static bool hasLogger(const std::string& identity);$/;"	p	line:3804	language:C++	class:el::Loggers	typeref:typename:bool	access:public	signature:(const std::string & identity)
hasParam	src/easylogging/easylogging++.cc	/^bool CommandLineArgs::hasParam(const char* paramKey) const {$/;"	f	line:1360	language:C++	class:el::base::utils::CommandLineArgs	typeref:typename:bool	signature:(const char * paramKey) const
hasParam	src/easylogging/easylogging++.h	/^  bool hasParam(const char* paramKey) const;$/;"	p	line:1234	language:C++	class:el::base::utils::CommandLineArgs	typeref:typename:bool	access:public	signature:(const char * paramKey) const
hasParamWithValue	src/easylogging/easylogging++.cc	/^bool CommandLineArgs::hasParamWithValue(const char* paramKey) const {$/;"	f	line:1351	language:C++	class:el::base::utils::CommandLineArgs	typeref:typename:bool	signature:(const char * paramKey) const
hasParamWithValue	src/easylogging/easylogging++.h	/^  bool hasParamWithValue(const char* paramKey) const;$/;"	p	line:1229	language:C++	class:el::base::utils::CommandLineArgs	typeref:typename:bool	access:public	signature:(const char * paramKey) const
has_trivial_copy_assign	src/tests/type_traits.h	/^    struct has_trivial_copy_assign$/;"	s	line:1346	language:C++	namespace:std	inherits:integral_constant<bool,__has_trivial_assign(_Tp)>
has_trivial_copy_constructor	src/tests/type_traits.h	/^    struct has_trivial_copy_constructor$/;"	s	line:1340	language:C++	namespace:std	inherits:integral_constant<bool,__has_trivial_copy(_Tp)>
has_trivial_default_constructor	src/tests/type_traits.h	/^    struct has_trivial_default_constructor$/;"	s	line:1334	language:C++	namespace:std	inherits:integral_constant<bool,__has_trivial_constructor(_Tp)>
has_virtual_destructor	src/tests/type_traits.h	/^    struct has_virtual_destructor$/;"	s	line:1352	language:C++	namespace:std	inherits:integral_constant<bool,__has_virtual_destructor(_Tp)>
hash	src/easylogging/easylogging++.h	/^template<> struct hash<el::Level> {$/;"	s	line:594	language:C++	namespace:std
hash	src/gperf/HttpCommomHeadersHash.cpp	/^HttpCommomHeaderInternal::hash (const char *str, size_t len)$/;"	f	line:41	language:C++	class:http::HttpCommomHeaderInternal	typeref:typename:unsigned int	signature:(const char * str,size_t len)
hash	src/gperf/HttpCommomHeadersHash.h	/^  static inline unsigned int hash (const char *str, size_t len);$/;"	p	line:25	language:C++	class:http::HttpCommomHeaderInternal	typeref:typename:unsigned int	access:private	signature:(const char * str,size_t len)
headerCode	src/gperf/HttpCommomHeadersHash.h	/^    HttpHeaderCode headerCode;$/;"	m	line:12	language:C++	struct:http::HttpHeader	typeref:typename:HttpHeaderCode	access:public
headerName	src/gperf/HttpCommomHeadersHash.h	/^    const char* headerName;$/;"	m	line:11	language:C++	struct:http::HttpHeader	typeref:typename:const char *	access:public
headerNames_	src/http/HttpHeaders.h	/^    vector_t<const char*>               headerNames_;$/;"	m	line:97	language:C++	class:http::HttpHeaders	typeref:typename:vector_t<const char * >	access:private
headerValues_	src/http/HttpHeaders.h	/^    vector_t<std::string>               headerValues_;$/;"	m	line:98	language:C++	class:http::HttpHeaders	typeref:typename:vector_t<std::string>	access:private
header_state	src/http_parser/http_parser.h	/^  unsigned int header_state : 7; \/* enum header_state from http_parser.c *\/$/;"	m	line:300	language:C++	struct:http_parser	typeref:typename:unsigned int:7	access:public
header_states	src/http_parser/http_parser.cpp	/^enum header_states$/;"	g	line:367	language:C++	file:
hitCounters	src/easylogging/easylogging++.h	/^  inline base::RegisteredHitCounters* hitCounters(void) const {$/;"	f	line:2571	language:C++	class:el::base::Storage	typeref:typename:base::RegisteredHitCounters *	access:public	signature:(void) const
hitCounts	src/easylogging/easylogging++.h	/^  inline std::size_t hitCounts(void) const {$/;"	f	line:2085	language:C++	class:el::base::HitCounter	typeref:typename:std::size_t	access:public	signature:(void) const
host	src/http_parser/URLParser.h	/^    const const_string_piece_t& host() const {return host_;}$/;"	f	line:29	language:C++	class:http::URLParser	typeref:typename:const const_string_piece_t &	access:public	signature:() const
host_	src/http_parser/URLParser.h	/^    const_string_piece_t        host_;$/;"	m	line:41	language:C++	class:http::URLParser	typeref:typename:const_string_piece_t	access:private
http	src/gperf/HttpCommomHeadersHash.cpp	/^namespace http{$/;"	n	line:36	language:C++	file:
http	src/gperf/HttpCommomHeadersHash.h	/^namespace http$/;"	n	line:7	language:C++
http	src/gperf/HttpHeaderCode.h	/^namespace http$/;"	n	line:6	language:C++
http	src/http/HttpCommomHeaders.cpp	/^namespace http{$/;"	n	line:4	language:C++	file:
http	src/http/HttpCommomHeaders.h	/^namespace http$/;"	n	line:8	language:C++
http	src/http/HttpHeaders.cpp	/^namespace http{$/;"	n	line:4	language:C++	file:
http	src/http/HttpHeaders.h	/^namespace http$/;"	n	line:25	language:C++
http	src/http/HttpMessage.cpp	/^namespace http{$/;"	n	line:3	language:C++	file:
http	src/http/HttpMessage.h	/^namespace http$/;"	n	line:3	language:C++
http	src/http/HttpMethod.cpp	/^namespace http$/;"	n	line:5	language:C++	file:
http	src/http/HttpMethod.h	/^namespace http$/;"	n	line:6	language:C++
http	src/http_parser/HttpParser.cpp	/^namespace http$/;"	n	line:3	language:C++	file:
http	src/http_parser/HttpParser.h	/^namespace http$/;"	n	line:4	language:C++
http	src/http_parser/URLParser.cpp	/^namespace http$/;"	n	line:3	language:C++	file:
http	src/http_parser/URLParser.h	/^namespace http$/;"	n	line:8	language:C++
http::HTTPMethod	src/http/HttpMethod.h	/^enum class HTTPMethod$/;"	g	line:24	language:C++	namespace:http
http::HTTP_HEADER_ACCEPT	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_ACCEPT = 8,$/;"	e	line:21	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_ACCEPT_CHARSET	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_ACCEPT_CHARSET = 9,$/;"	e	line:22	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_ACCEPT_DATETIME	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_ACCEPT_DATETIME = 10,$/;"	e	line:23	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_ACCEPT_ENCODING	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_ACCEPT_ENCODING = 11,$/;"	e	line:24	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_ACCEPT_LANGUAGE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_ACCEPT_LANGUAGE = 12,$/;"	e	line:25	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_ACCEPT_RANGES	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_ACCEPT_RANGES = 13,$/;"	e	line:26	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_ACCESS_CONTROL_ALLOW_CREDENTIALS	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_ACCESS_CONTROL_ALLOW_CREDENTIALS = 14,$/;"	e	line:28	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_ACCESS_CONTROL_ALLOW_HEADERS	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_ACCESS_CONTROL_ALLOW_HEADERS = 15,$/;"	e	line:30	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_ACCESS_CONTROL_ALLOW_METHODS	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_ACCESS_CONTROL_ALLOW_METHODS = 16,$/;"	e	line:32	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN = 17,$/;"	e	line:35	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_ACCESS_CONTROL_EXPOSE_HEADERS	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_ACCESS_CONTROL_EXPOSE_HEADERS = 18,$/;"	e	line:38	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_ACCESS_CONTROL_MAX_AGE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_ACCESS_CONTROL_MAX_AGE = 19,$/;"	e	line:41	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_ACCESS_CONTROL_REQUEST_HEADERS	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_ACCESS_CONTROL_REQUEST_HEADERS = 20,$/;"	e	line:45	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_ACCESS_CONTROL_REQUEST_METHOD	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_ACCESS_CONTROL_REQUEST_METHOD = 21,$/;"	e	line:27	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_AGE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_AGE = 22,$/;"	e	line:29	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_ALLOW	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_ALLOW = 23,$/;"	e	line:31	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_ALT_SVC	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_ALT_SVC = 24,$/;"	e	line:34	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_AUTHORIZATION	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_AUTHORIZATION = 25,$/;"	e	line:37	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_CACHE_CONTROL	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_CACHE_CONTROL = 26,$/;"	e	line:40	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_COLON_AUTHORITY	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_COLON_AUTHORITY = 2,$/;"	e	line:15	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_COLON_METHOD	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_COLON_METHOD = 3,$/;"	e	line:16	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_COLON_PATH	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_COLON_PATH = 4,$/;"	e	line:17	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_COLON_PROTOCOL	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_COLON_PROTOCOL = 5,$/;"	e	line:18	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_COLON_SCHEME	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_COLON_SCHEME = 6,$/;"	e	line:19	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_COLON_STATUS	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_COLON_STATUS = 7,$/;"	e	line:20	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_CONNECTION	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_CONNECTION = 27,$/;"	e	line:44	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_CONTENT_DISPOSITION	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_CONTENT_DISPOSITION = 28,$/;"	e	line:48	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_CONTENT_ENCODING	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_CONTENT_ENCODING = 29,$/;"	e	line:51	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_CONTENT_LANGUAGE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_CONTENT_LANGUAGE = 30,$/;"	e	line:55	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_CONTENT_LENGTH	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_CONTENT_LENGTH = 31,$/;"	e	line:33	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_CONTENT_LOCATION	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_CONTENT_LOCATION = 32,$/;"	e	line:36	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_CONTENT_MD5	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_CONTENT_MD5 = 33,$/;"	e	line:39	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_CONTENT_RANGE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_CONTENT_RANGE = 34,$/;"	e	line:43	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_CONTENT_TYPE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_CONTENT_TYPE = 35,$/;"	e	line:47	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_COOKIE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_COOKIE = 36,$/;"	e	line:50	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_DATE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_DATE = 38,$/;"	e	line:58	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_DNT	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_DNT = 37,$/;"	e	line:54	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_ETAG	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_ETAG = 39,$/;"	e	line:61	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_EXPECT	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_EXPECT = 40,$/;"	e	line:65	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_EXPIRES	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_EXPIRES = 41,$/;"	e	line:42	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_FROM	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_FROM = 42,$/;"	e	line:46	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_FRONT_END_HTTPS	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_FRONT_END_HTTPS = 43,$/;"	e	line:49	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_HOST	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_HOST = 44,$/;"	e	line:53	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_IF_MATCH	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_IF_MATCH = 45,$/;"	e	line:57	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_IF_MODIFIED_SINCE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_IF_MODIFIED_SINCE = 46,$/;"	e	line:60	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_IF_NONE_MATCH	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_IF_NONE_MATCH = 47,$/;"	e	line:64	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_IF_RANGE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_IF_RANGE = 48,$/;"	e	line:68	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_IF_UNMODIFIED_SINCE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_IF_UNMODIFIED_SINCE = 49,$/;"	e	line:71	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_KEEP_ALIVE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_KEEP_ALIVE = 50,$/;"	e	line:74	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_LAST_MODIFIED	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_LAST_MODIFIED = 51,$/;"	e	line:52	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_LINK	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_LINK = 52,$/;"	e	line:56	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_LOCATION	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_LOCATION = 53,$/;"	e	line:59	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_MAX_FORWARDS	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_MAX_FORWARDS = 54,$/;"	e	line:63	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_NONE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_NONE = 0,$/;"	e	line:11	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_ORIGIN	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_ORIGIN = 55,$/;"	e	line:67	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_OTHER	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_OTHER = 1,$/;"	e	line:13	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_P3P	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_P3P = 56,$/;"	e	line:70	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_PRAGMA	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_PRAGMA = 57,$/;"	e	line:73	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_PROXY_AUTHENTICATE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_PROXY_AUTHENTICATE = 58,$/;"	e	line:76	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_PROXY_AUTHORIZATION	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_PROXY_AUTHORIZATION = 59,$/;"	e	line:79	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_PROXY_CONNECTION	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_PROXY_CONNECTION = 60,$/;"	e	line:82	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_RANGE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_RANGE = 61,$/;"	e	line:62	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_REFERER	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_REFERER = 62,$/;"	e	line:66	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_REFRESH	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_REFRESH = 63,$/;"	e	line:69	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_RETRY_AFTER	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_RETRY_AFTER = 64,$/;"	e	line:72	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_SEC_TOKEN_BINDING	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_SEC_TOKEN_BINDING = 65,$/;"	e	line:78	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_SEC_WEBSOCKET_ACCEPT	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_SEC_WEBSOCKET_ACCEPT = 66,$/;"	e	line:81	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_SEC_WEBSOCKET_KEY	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_SEC_WEBSOCKET_KEY = 67,$/;"	e	line:85	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_SERVER	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_SERVER = 68,$/;"	e	line:88	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_SET_COOKIE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_SET_COOKIE = 69,$/;"	e	line:91	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_STRICT_TRANSPORT_SECURITY	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_STRICT_TRANSPORT_SECURITY = 70,$/;"	e	line:95	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_TE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_TE = 71,$/;"	e	line:75	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_TIMESTAMP	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_TIMESTAMP = 72,$/;"	e	line:77	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_TRAILER	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_TRAILER = 73,$/;"	e	line:80	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_TRANSFER_ENCODING	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_TRANSFER_ENCODING = 74,$/;"	e	line:84	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_UPGRADE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_UPGRADE = 75,$/;"	e	line:87	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_USER_AGENT	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_USER_AGENT = 76,$/;"	e	line:90	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_VARY	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_VARY = 78,$/;"	e	line:98	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_VIA	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_VIA = 79,$/;"	e	line:101	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_VIP	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_VIP = 77,$/;"	e	line:94	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_WARNING	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_WARNING = 81,$/;"	e	line:83	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_WWW_AUTHENTICATE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_WWW_AUTHENTICATE = 80,$/;"	e	line:104	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_X_ACCEL_REDIRECT	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_X_ACCEL_REDIRECT = 82,$/;"	e	line:86	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_X_CONTENT_SECURITY_POLICY_REPORT_ONLY	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_X_CONTENT_SECURITY_POLICY_REPORT_ONLY = 83,$/;"	e	line:89	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_X_CONTENT_TYPE_OPTIONS	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_X_CONTENT_TYPE_OPTIONS = 84,$/;"	e	line:93	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_X_FORWARDED_FOR	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_X_FORWARDED_FOR = 85,$/;"	e	line:97	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_X_FORWARDED_PROTO	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_X_FORWARDED_PROTO = 86,$/;"	e	line:100	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_X_FRAME_OPTIONS	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_X_FRAME_OPTIONS = 87,$/;"	e	line:103	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_X_POWERED_BY	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_X_POWERED_BY = 88,$/;"	e	line:105	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_X_REAL_IP	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_X_REAL_IP = 89,$/;"	e	line:106	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_X_REQUESTED_WITH	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_X_REQUESTED_WITH = 90,$/;"	e	line:107	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_X_THRIFT_PROTOCOL	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_X_THRIFT_PROTOCOL = 91,$/;"	e	line:92	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_X_UA_COMPATIBLE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_X_UA_COMPATIBLE = 92,$/;"	e	line:96	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_X_WAP_PROFILE	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_X_WAP_PROFILE = 93,$/;"	e	line:99	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_HEADER_X_XSS_PROTECTION	src/gperf/HttpHeaderCode.h	/^  HTTP_HEADER_X_XSS_PROTECTION = 94,$/;"	e	line:102	language:C++	enum:http::HttpHeaderCode	access:public
http::HTTP_METHOD_GEN	src/http/HttpMethod.h	/^    HTTP_METHOD_GEN(HTTP_METHOD_ENUM)$/;"	e	line:26	language:C++	enum:http::HTTPMethod	access:public
http::HttpCommomHeaderInternal	src/gperf/HttpCommomHeadersHash.h	/^class HttpCommomHeaderInternal$/;"	c	line:22	language:C++	namespace:http
http::HttpCommomHeaderInternal::hash	src/gperf/HttpCommomHeadersHash.cpp	/^HttpCommomHeaderInternal::hash (const char *str, size_t len)$/;"	f	line:41	language:C++	class:http::HttpCommomHeaderInternal	typeref:typename:unsigned int	signature:(const char * str,size_t len)
http::HttpCommomHeaderInternal::hash	src/gperf/HttpCommomHeadersHash.h	/^  static inline unsigned int hash (const char *str, size_t len);$/;"	p	line:25	language:C++	class:http::HttpCommomHeaderInternal	typeref:typename:unsigned int	access:private	signature:(const char * str,size_t len)
http::HttpCommomHeaderInternal::isValidHttpHeader	src/gperf/HttpCommomHeadersHash.cpp	/^HttpCommomHeaderInternal::isValidHttpHeader (const char *str, size_t len)$/;"	f	line:124	language:C++	class:http::HttpCommomHeaderInternal	typeref:struct:HttpHeader *	signature:(const char * str,size_t len)
http::HttpCommomHeaderInternal::isValidHttpHeader	src/gperf/HttpCommomHeadersHash.h	/^  static struct HttpHeader *isValidHttpHeader (const char *str, size_t len);$/;"	p	line:27	language:C++	class:http::HttpCommomHeaderInternal	typeref:struct:HttpHeader *	access:public	signature:(const char * str,size_t len)
http::HttpCommomHeaders	src/http/HttpCommomHeaders.h	/^class HttpCommomHeaders$/;"	c	line:10	language:C++	namespace:http
http::HttpCommomHeaders::MAX_HEADER_LENGTH	src/http/HttpCommomHeaders.h	/^    static const size_t MAX_HEADER_LENGTH = MAX_WORD_LENGTH;$/;"	m	line:21	language:C++	class:http::HttpCommomHeaders	typeref:typename:const size_t	access:public
http::HttpCommomHeaders::MIN_HEADER_LENGTH	src/http/HttpCommomHeaders.h	/^    static const size_t MIN_HEADER_LENGTH = MIN_WORD_LENGTH;$/;"	m	line:22	language:C++	class:http::HttpCommomHeaders	typeref:typename:const size_t	access:public
http::HttpCommomHeaders::getHeaderCode	src/http/HttpCommomHeaders.cpp	/^HttpHeaderCode HttpCommomHeaders::getHeaderCode(const char* headerName, size_t len)$/;"	f	line:6	language:C++	class:http::HttpCommomHeaders	typeref:typename:HttpHeaderCode	signature:(const char * headerName,size_t len)
http::HttpCommomHeaders::getHeaderCode	src/http/HttpCommomHeaders.cpp	/^HttpHeaderCode HttpCommomHeaders::getHeaderCode(const std::string& headerName)$/;"	f	line:12	language:C++	class:http::HttpCommomHeaders	typeref:typename:HttpHeaderCode	signature:(const std::string & headerName)
http::HttpCommomHeaders::getHeaderCode	src/http/HttpCommomHeaders.h	/^    static HttpHeaderCode getHeaderCode(const char* headerName, size_t len);$/;"	p	line:14	language:C++	class:http::HttpCommomHeaders	typeref:typename:HttpHeaderCode	access:public	signature:(const char * headerName,size_t len)
http::HttpCommomHeaders::getHeaderCode	src/http/HttpCommomHeaders.h	/^    static HttpHeaderCode getHeaderCode(const std::string& headerName);$/;"	p	line:16	language:C++	class:http::HttpCommomHeaders	typeref:typename:HttpHeaderCode	access:public	signature:(const std::string & headerName)
http::HttpCommomHeaders::getHeaderTable	src/http/HttpCommomHeaders.cpp	/^const std::vector<std::string*>& HttpCommomHeaders::getHeaderTable()$/;"	f	line:17	language:C++	class:http::HttpCommomHeaders	typeref:typename:const std::vector<std::string * > &	signature:()
http::HttpCommomHeaders::getHeaderTable	src/http/HttpCommomHeaders.h	/^    static const std::vector<std::string*>& getHeaderTable();$/;"	p	line:25	language:C++	class:http::HttpCommomHeaders	typeref:typename:const std::vector<std::string * > &	access:private	signature:()
http::HttpCommomHeaders::getPointerWithHeaderCode	src/http/HttpCommomHeaders.cpp	/^const char* HttpCommomHeaders::getPointerWithHeaderCode(HttpHeaderCode code)$/;"	f	line:41	language:C++	class:http::HttpCommomHeaders	typeref:typename:const char *	signature:(HttpHeaderCode code)
http::HttpCommomHeaders::getPointerWithHeaderCode	src/http/HttpCommomHeaders.h	/^    static const char* getPointerWithHeaderCode(HttpHeaderCode code);$/;"	p	line:18	language:C++	class:http::HttpCommomHeaders	typeref:typename:const char *	access:public	signature:(HttpHeaderCode code)
http::HttpCommomHeaders::initHeaderTable	src/http/HttpCommomHeaders.cpp	/^const std::vector<std::string*>& HttpCommomHeaders::initHeaderTable()$/;"	f	line:23	language:C++	class:http::HttpCommomHeaders	typeref:typename:const std::vector<std::string * > &	signature:()
http::HttpCommomHeaders::initHeaderTable	src/http/HttpCommomHeaders.h	/^    static const std::vector<std::string*>& initHeaderTable();$/;"	p	line:26	language:C++	class:http::HttpCommomHeaders	typeref:typename:const std::vector<std::string * > &	access:private	signature:()
http::HttpHeader	src/gperf/HttpCommomHeadersHash.h	/^struct HttpHeader$/;"	s	line:9	language:C++	namespace:http
http::HttpHeader::headerCode	src/gperf/HttpCommomHeadersHash.h	/^    HttpHeaderCode headerCode;$/;"	m	line:12	language:C++	struct:http::HttpHeader	typeref:typename:HttpHeaderCode	access:public
http::HttpHeader::headerName	src/gperf/HttpCommomHeadersHash.h	/^    const char* headerName;$/;"	m	line:11	language:C++	struct:http::HttpHeader	typeref:typename:const char *	access:public
http::HttpHeaderCode	src/gperf/HttpHeaderCode.h	/^enum class HttpHeaderCode : uint8_t$/;"	g	line:8	language:C++	namespace:http	typeref:typename:uint8_t
http::HttpHeaders	src/http/HttpHeaders.h	/^class HttpHeaders$/;"	c	line:27	language:C++	namespace:http
http::HttpHeaders::HttpHeaders	src/http/HttpHeaders.cpp	/^HttpHeaders::HttpHeaders()$/;"	f	line:6	language:C++	class:http::HttpHeaders	signature:()
http::HttpHeaders::HttpHeaders	src/http/HttpHeaders.cpp	/^HttpHeaders::HttpHeaders(HttpHeaders&& other)$/;"	f	line:33	language:C++	class:http::HttpHeaders	signature:(HttpHeaders && other)
http::HttpHeaders::HttpHeaders	src/http/HttpHeaders.cpp	/^HttpHeaders::HttpHeaders(const HttpHeaders& other)$/;"	f	line:17	language:C++	class:http::HttpHeaders	signature:(const HttpHeaders & other)
http::HttpHeaders::HttpHeaders	src/http/HttpHeaders.h	/^    HttpHeaders();$/;"	p	line:36	language:C++	class:http::HttpHeaders	access:public	signature:()
http::HttpHeaders::HttpHeaders	src/http/HttpHeaders.h	/^    HttpHeaders(HttpHeaders&& other);$/;"	p	line:38	language:C++	class:http::HttpHeaders	access:public	signature:(HttpHeaders && other)
http::HttpHeaders::HttpHeaders	src/http/HttpHeaders.h	/^    HttpHeaders(const HttpHeaders& other);$/;"	p	line:37	language:C++	class:http::HttpHeaders	access:public	signature:(const HttpHeaders & other)
http::HttpHeaders::INIT_VECTOR_RESERVE_SIZE	src/http/HttpHeaders.cpp	/^const size_t HttpHeaders::INIT_VECTOR_RESERVE_SIZE = 16;$/;"	m	line:180	language:C++	class:http::HttpHeaders	typeref:typename:const size_t
http::HttpHeaders::INIT_VECTOR_RESERVE_SIZE	src/http/HttpHeaders.h	/^    static const size_t INIT_VECTOR_RESERVE_SIZE; $/;"	m	line:93	language:C++	class:http::HttpHeaders	typeref:typename:const size_t	access:private
http::HttpHeaders::add	src/http/HttpHeaders.cpp	/^void HttpHeaders::add(HttpHeaderCode code, std::string&& headerValue)$/;"	f	line:99	language:C++	class:http::HttpHeaders	typeref:typename:void	signature:(HttpHeaderCode code,std::string && headerValue)
http::HttpHeaders::add	src/http/HttpHeaders.cpp	/^void HttpHeaders::add(const std::string& headerName, const std::string& headerValue)$/;"	f	line:73	language:C++	class:http::HttpHeaders	typeref:typename:void	signature:(const std::string & headerName,const std::string & headerValue)
http::HttpHeaders::add	src/http/HttpHeaders.cpp	/^void HttpHeaders::add(const std::string& headerName, std::string&& headerValue)$/;"	f	line:86	language:C++	class:http::HttpHeaders	typeref:typename:void	signature:(const std::string & headerName,std::string && headerValue)
http::HttpHeaders::add	src/http/HttpHeaders.cpp	/^void HttpHeaders::add(const_string_piece headerName, const_string_piece headerValue)$/;"	f	line:59	language:C++	class:http::HttpHeaders	typeref:typename:void	signature:(const_string_piece headerName,const_string_piece headerValue)
http::HttpHeaders::add	src/http/HttpHeaders.h	/^    void add(HttpHeaderCode code, std::string&& headerValue);$/;"	p	line:48	language:C++	class:http::HttpHeaders	typeref:typename:void	access:public	signature:(HttpHeaderCode code,std::string && headerValue)
http::HttpHeaders::add	src/http/HttpHeaders.h	/^    void add(const std::string& headerName, const std::string& headerValue);$/;"	p	line:46	language:C++	class:http::HttpHeaders	typeref:typename:void	access:public	signature:(const std::string & headerName,const std::string & headerValue)
http::HttpHeaders::add	src/http/HttpHeaders.h	/^    void add(const std::string& headerName, std::string&& headerValue);$/;"	p	line:47	language:C++	class:http::HttpHeaders	typeref:typename:void	access:public	signature:(const std::string & headerName,std::string && headerValue)
http::HttpHeaders::add	src/http/HttpHeaders.h	/^    void add(const_string_piece headerName, const_string_piece headerValue);$/;"	p	line:45	language:C++	class:http::HttpHeaders	typeref:typename:void	access:public	signature:(const_string_piece headerName,const_string_piece headerValue)
http::HttpHeaders::clearAll	src/http/HttpHeaders.cpp	/^void HttpHeaders::clearAll()$/;"	f	line:161	language:C++	class:http::HttpHeaders	typeref:typename:void	signature:()
http::HttpHeaders::clearAll	src/http/HttpHeaders.h	/^    void clearAll();$/;"	p	line:57	language:C++	class:http::HttpHeaders	typeref:typename:void	access:private	signature:()
http::HttpHeaders::code_t	src/http/HttpHeaders.h	/^    using code_t = HttpHeaderCode;$/;"	t	line:31	language:C++	class:http::HttpHeaders	typeref:typename:HttpHeaderCode	access:private
http::HttpHeaders::codes_	src/http/HttpHeaders.h	/^    vector_t<HttpHeaderCode>            codes_;$/;"	m	line:96	language:C++	class:http::HttpHeaders	typeref:typename:vector_t<HttpHeaderCode>	access:private
http::HttpHeaders::codes_deleted_	src/http/HttpHeaders.h	/^    size_t                              codes_deleted_;$/;"	m	line:99	language:C++	class:http::HttpHeaders	typeref:typename:size_t	access:private
http::HttpHeaders::const_string_piece	src/http/HttpHeaders.h	/^    using const_string_piece = string_piece::const_string_piece;$/;"	t	line:33	language:C++	class:http::HttpHeaders	typeref:typename:string_piece::const_string_piece	access:private
http::HttpHeaders::disposeHeaderNames	src/http/HttpHeaders.cpp	/^void HttpHeaders::disposeHeaderNames()$/;"	f	line:171	language:C++	class:http::HttpHeaders	typeref:typename:void	signature:()
http::HttpHeaders::disposeHeaderNames	src/http/HttpHeaders.h	/^    void disposeHeaderNames();$/;"	p	line:56	language:C++	class:http::HttpHeaders	typeref:typename:void	access:private	signature:()
http::HttpHeaders::getCodes	src/http/HttpHeaders.h	/^    const vector_t<HttpHeaderCode>& getCodes() const {return codes_;}$/;"	f	line:103	language:C++	class:http::HttpHeaders	typeref:typename:const vector_t<HttpHeaderCode> &	access:public	signature:() const
http::HttpHeaders::getCodesDeleted	src/http/HttpHeaders.h	/^    size_t getCodesDeleted() const {return codes_deleted_;}$/;"	f	line:106	language:C++	class:http::HttpHeaders	typeref:typename:size_t	access:public	signature:() const
http::HttpHeaders::getHeaderNames	src/http/HttpHeaders.h	/^    const vector_t<const char*>& getHeaderNames() const {return headerNames_;}$/;"	f	line:104	language:C++	class:http::HttpHeaders	typeref:typename:const vector_t<const char * > &	access:public	signature:() const
http::HttpHeaders::getHeaderValues	src/http/HttpHeaders.h	/^    const vector_t<std::string>& getHeaderValues() const {return headerValues_;}$/;"	f	line:105	language:C++	class:http::HttpHeaders	typeref:typename:const vector_t<std::string> &	access:public	signature:() const
http::HttpHeaders::getInitVectorReserveSize	src/http/HttpHeaders.h	/^    static size_t getInitVectorReserveSize() {return INIT_VECTOR_RESERVE_SIZE;}$/;"	f	line:108	language:C++	class:http::HttpHeaders	typeref:typename:size_t	access:public	signature:()
http::HttpHeaders::headerNames_	src/http/HttpHeaders.h	/^    vector_t<const char*>               headerNames_;$/;"	m	line:97	language:C++	class:http::HttpHeaders	typeref:typename:vector_t<const char * >	access:private
http::HttpHeaders::headerValues_	src/http/HttpHeaders.h	/^    vector_t<std::string>               headerValues_;$/;"	m	line:98	language:C++	class:http::HttpHeaders	typeref:typename:vector_t<std::string>	access:private
http::HttpHeaders::iterateOverCodes	src/http/HttpHeaders.h	/^    void iterateOverCodes(HttpHeaderCode code, Func&& func)$/;"	f	line:60	language:C++	class:http::HttpHeaders	typeref:typename:void	access:private	signature:(HttpHeaderCode code,Func && func)
http::HttpHeaders::iterateOverOtherHeaderNames	src/http/HttpHeaders.h	/^    void iterateOverOtherHeaderNames(const_string_piece headerName, Func&& func)$/;"	f	line:74	language:C++	class:http::HttpHeaders	typeref:typename:void	access:private	signature:(const_string_piece headerName,Func && func)
http::HttpHeaders::mutable_string_piece	src/http/HttpHeaders.h	/^    using mutable_string_piece = string_piece::mutable_string_piece;$/;"	t	line:32	language:C++	class:http::HttpHeaders	typeref:typename:string_piece::mutable_string_piece	access:private
http::HttpHeaders::operator =	src/http/HttpHeaders.cpp	/^HttpHeaders& HttpHeaders::operator=(HttpHeaders&& other)$/;"	f	line:48	language:C++	class:http::HttpHeaders	typeref:typename:HttpHeaders &	signature:(HttpHeaders && other)
http::HttpHeaders::operator =	src/http/HttpHeaders.cpp	/^HttpHeaders& HttpHeaders::operator=(const HttpHeaders& other)$/;"	f	line:42	language:C++	class:http::HttpHeaders	typeref:typename:HttpHeaders &	signature:(const HttpHeaders & other)
http::HttpHeaders::operator =	src/http/HttpHeaders.h	/^    HttpHeaders& operator=(HttpHeaders&& other);$/;"	p	line:41	language:C++	class:http::HttpHeaders	typeref:typename:HttpHeaders &	access:public	signature:(HttpHeaders && other)
http::HttpHeaders::operator =	src/http/HttpHeaders.h	/^    HttpHeaders& operator=(const HttpHeaders& other);$/;"	p	line:40	language:C++	class:http::HttpHeaders	typeref:typename:HttpHeaders &	access:public	signature:(const HttpHeaders & other)
http::HttpHeaders::remove	src/http/HttpHeaders.cpp	/^bool HttpHeaders::remove(HttpHeaderCode code)$/;"	f	line:142	language:C++	class:http::HttpHeaders	typeref:typename:bool	signature:(HttpHeaderCode code)
http::HttpHeaders::remove	src/http/HttpHeaders.cpp	/^bool HttpHeaders::remove(const_string_piece headerName)$/;"	f	line:114	language:C++	class:http::HttpHeaders	typeref:typename:bool	signature:(const_string_piece headerName)
http::HttpHeaders::remove	src/http/HttpHeaders.h	/^    bool remove(HttpHeaderCode code);$/;"	p	line:52	language:C++	class:http::HttpHeaders	typeref:typename:bool	access:public	signature:(HttpHeaderCode code)
http::HttpHeaders::remove	src/http/HttpHeaders.h	/^    bool remove(const_string_piece headerName);$/;"	p	line:51	language:C++	class:http::HttpHeaders	typeref:typename:bool	access:public	signature:(const_string_piece headerName)
http::HttpHeaders::removeWithStdString	src/http/HttpHeaders.cpp	/^bool HttpHeaders::removeWithStdString(const std::string& headerName)$/;"	f	line:109	language:C++	class:http::HttpHeaders	typeref:typename:bool	signature:(const std::string & headerName)
http::HttpHeaders::removeWithStdString	src/http/HttpHeaders.h	/^    bool removeWithStdString(const std::string& headerName);$/;"	p	line:50	language:C++	class:http::HttpHeaders	typeref:typename:bool	access:public	signature:(const std::string & headerName)
http::HttpHeaders::size	src/http/HttpHeaders.h	/^    size_t size() const {return codes_.size() - codes_deleted_;}$/;"	f	line:44	language:C++	class:http::HttpHeaders	typeref:typename:size_t	access:public	signature:() const
http::HttpHeaders::vector_t	src/http/HttpHeaders.h	/^    using vector_t = std::vector<T>;$/;"	t	line:30	language:C++	class:http::HttpHeaders	typeref:typename:std::vector<T>	access:private
http::HttpHeaders::~HttpHeaders	src/http/HttpHeaders.cpp	/^HttpHeaders::~HttpHeaders()$/;"	f	line:54	language:C++	class:http::HttpHeaders	signature:()
http::HttpHeaders::~HttpHeaders	src/http/HttpHeaders.h	/^    ~HttpHeaders();$/;"	p	line:39	language:C++	class:http::HttpHeaders	access:public	signature:()
http::HttpMessage	src/http/HttpMessage.h	/^class HttpMessage$/;"	c	line:5	language:C++	namespace:http
http::HttpMessage::HttpMessage	src/http/HttpMessage.cpp	/^HttpMessage::HttpMessage(\/* args *\/)$/;"	f	line:6	language:C++	class:http::HttpMessage	signature:()
http::HttpMessage::HttpMessage	src/http/HttpMessage.h	/^    HttpMessage(\/* args *\/);$/;"	p	line:10	language:C++	class:http::HttpMessage	access:public	signature:()
http::HttpMessage::~HttpMessage	src/http/HttpMessage.cpp	/^HttpMessage::~HttpMessage()$/;"	f	line:10	language:C++	class:http::HttpMessage	signature:()
http::HttpMessage::~HttpMessage	src/http/HttpMessage.h	/^    ~HttpMessage();$/;"	p	line:11	language:C++	class:http::HttpMessage	access:public	signature:()
http::HttpPaser	src/http_parser/HttpParser.h	/^class HttpPaser$/;"	c	line:7	language:C++	namespace:http
http::HttpPaser::HttpPaser	src/http_parser/HttpParser.cpp	/^HttpPaser::HttpPaser(\/* args *\/)$/;"	f	line:7	language:C++	class:http::HttpPaser	signature:()
http::HttpPaser::HttpPaser	src/http_parser/HttpParser.h	/^    HttpPaser(\/* args *\/);$/;"	p	line:10	language:C++	class:http::HttpPaser	access:public	signature:()
http::HttpPaser::~HttpPaser	src/http_parser/HttpParser.cpp	/^HttpPaser::~HttpPaser()$/;"	f	line:11	language:C++	class:http::HttpPaser	signature:()
http::HttpPaser::~HttpPaser	src/http_parser/HttpParser.h	/^    ~HttpPaser();$/;"	p	line:11	language:C++	class:http::HttpPaser	access:public	signature:()
http::URLParser	src/http_parser/URLParser.h	/^class URLParser$/;"	c	line:11	language:C++	namespace:http
http::URLParser::URLParser	src/http_parser/URLParser.h	/^    URLParser(){}$/;"	f	line:18	language:C++	class:http::URLParser	access:public	signature:()
http::URLParser::URLParser	src/http_parser/URLParser.h	/^    explicit URLParser(const_string_piece_t urlVal) noexcept$/;"	f	line:19	language:C++	class:http::URLParser	access:public	signature:(const_string_piece_t urlVal)
http::URLParser::const_string_piece_t	src/http_parser/URLParser.h	/^    using const_string_piece_t = string_piece::const_string_piece;$/;"	t	line:14	language:C++	class:http::URLParser	typeref:typename:string_piece::const_string_piece	access:public
http::URLParser::host	src/http_parser/URLParser.h	/^    const const_string_piece_t& host() const {return host_;}$/;"	f	line:29	language:C++	class:http::URLParser	typeref:typename:const const_string_piece_t &	access:public	signature:() const
http::URLParser::host_	src/http_parser/URLParser.h	/^    const_string_piece_t        host_;$/;"	m	line:41	language:C++	class:http::URLParser	typeref:typename:const_string_piece_t	access:private
http::URLParser::init	src/http_parser/URLParser.cpp	/^void URLParser::init(const_string_piece_t urlVal)$/;"	f	line:24	language:C++	class:http::URLParser	typeref:typename:void	signature:(const_string_piece_t urlVal)
http::URLParser::init	src/http_parser/URLParser.h	/^    void init(const_string_piece_t urlVal);$/;"	p	line:25	language:C++	class:http::URLParser	typeref:typename:void	access:public	signature:(const_string_piece_t urlVal)
http::URLParser::initilized_	src/http_parser/URLParser.h	/^    bool                        initilized_{false};$/;"	m	line:46	language:C++	class:http::URLParser	typeref:typename:bool	access:private
http::URLParser::parse	src/http_parser/URLParser.cpp	/^void URLParser::parse()$/;"	f	line:33	language:C++	class:http::URLParser	typeref:typename:void	signature:()
http::URLParser::parse	src/http_parser/URLParser.h	/^    void parse();$/;"	p	line:36	language:C++	class:http::URLParser	typeref:typename:void	access:private	signature:()
http::URLParser::path	src/http_parser/URLParser.h	/^    const const_string_piece_t& path() const {return path_;}$/;"	f	line:31	language:C++	class:http::URLParser	typeref:typename:const const_string_piece_t &	access:public	signature:() const
http::URLParser::path_	src/http_parser/URLParser.h	/^    const_string_piece_t        path_;$/;"	m	line:42	language:C++	class:http::URLParser	typeref:typename:const_string_piece_t	access:private
http::URLParser::port	src/http_parser/URLParser.h	/^    uint16_t port() const {return port_;}$/;"	f	line:30	language:C++	class:http::URLParser	typeref:typename:uint16_t	access:public	signature:() const
http::URLParser::port_	src/http_parser/URLParser.h	/^    uint16_t                    port_{0};$/;"	m	line:44	language:C++	class:http::URLParser	typeref:typename:uint16_t	access:private
http::URLParser::query	src/http_parser/URLParser.h	/^    const const_string_piece_t& query() const {return query_;}$/;"	f	line:32	language:C++	class:http::URLParser	typeref:typename:const const_string_piece_t &	access:public	signature:() const
http::URLParser::query_	src/http_parser/URLParser.h	/^    const_string_piece_t        query_;$/;"	m	line:43	language:C++	class:http::URLParser	typeref:typename:const_string_piece_t	access:private
http::URLParser::scheme	src/http_parser/URLParser.h	/^    const const_string_piece_t& scheme() const { return scheme_; }$/;"	f	line:28	language:C++	class:http::URLParser	typeref:typename:const const_string_piece_t &	access:public	signature:() const
http::URLParser::scheme_	src/http_parser/URLParser.h	/^    const_string_piece_t        scheme_;$/;"	m	line:40	language:C++	class:http::URLParser	typeref:typename:const_string_piece_t	access:private
http::URLParser::string_piece_t	src/http_parser/URLParser.h	/^    using string_piece_t = string_piece::mutable_string_piece;$/;"	t	line:15	language:C++	class:http::URLParser	typeref:typename:string_piece::mutable_string_piece	access:public
http::URLParser::url	src/http_parser/URLParser.h	/^    const const_string_piece_t& url() const { return url_; }$/;"	f	line:27	language:C++	class:http::URLParser	typeref:typename:const const_string_piece_t &	access:public	signature:() const
http::URLParser::url_	src/http_parser/URLParser.h	/^    const_string_piece_t        url_;$/;"	m	line:39	language:C++	class:http::URLParser	typeref:typename:const_string_piece_t	access:private
http::URLParser::valid	src/http_parser/URLParser.h	/^    bool valid() const {return valid_;}$/;"	f	line:33	language:C++	class:http::URLParser	typeref:typename:bool	access:public	signature:() const
http::URLParser::valid_	src/http_parser/URLParser.h	/^    bool                        valid_{false};$/;"	m	line:45	language:C++	class:http::URLParser	typeref:typename:bool	access:private
http::URLParser::~URLParser	src/http_parser/URLParser.cpp	/^URLParser::~URLParser()$/;"	f	line:20	language:C++	class:http::URLParser	signature:()
http::URLParser::~URLParser	src/http_parser/URLParser.h	/^    ~URLParser();$/;"	p	line:23	language:C++	class:http::URLParser	access:public	signature:()
http::__	src/http/HttpHeaders.cpp	/^void __()$/;"	f	line:196	language:C++	namespace:http	typeref:typename:void	signature:()
http::copyFrom	src/http/HttpHeaders.cpp	/^char *copyFrom(const std::string &str)$/;"	f	line:187	language:C++	namespace:http	typeref:typename:char *	signature:(const std::string & str)
http::copyFrom	src/http/HttpHeaders.cpp	/^char *copyFrom(string_piece::const_string_piece str)$/;"	f	line:182	language:C++	namespace:http	typeref:typename:char *	signature:(string_piece::const_string_piece str)
http::copyFrom	src/http/HttpHeaders.h	/^char *copyFrom(const std::string &str);$/;"	p	line:117	language:C++	namespace:http	typeref:typename:char *	signature:(const std::string & str)
http::copyFrom	src/http/HttpHeaders.h	/^char *copyFrom(string_piece::const_string_piece str);$/;"	p	line:116	language:C++	namespace:http	typeref:typename:char *	signature:(string_piece::const_string_piece str)
http::getHttpMethodString	src/http/HttpMethod.cpp	/^const std::vector<std::string> getHttpMethodString()$/;"	f	line:10	language:C++	namespace:http	typeref:typename:const std::vector<std::string>	signature:()
http::lookup	src/gperf/HttpCommomHeadersHash.cpp	/^static signed char lookup[] =$/;"	v	line:108	language:C++	namespace:http	typeref:typename:signed char[]	file:
http::stringToMethod	src/http/HttpMethod.cpp	/^boost::optional<HTTPMethod> stringToMethod(string_piece::const_string_piece methodName)$/;"	f	line:20	language:C++	namespace:http	typeref:typename:boost::optional<HTTPMethod>	signature:(string_piece::const_string_piece methodName)
http::stringToMethod	src/http/HttpMethod.h	/^boost::optional<HTTPMethod> stringToMethod(string_piece::const_string_piece methodName);$/;"	p	line:29	language:C++	namespace:http	typeref:typename:boost::optional<HTTPMethod>	signature:(string_piece::const_string_piece methodName)
http::validateScheme	src/http_parser/URLParser.cpp	/^static bool validateScheme(string_piece::const_string_piece url)$/;"	f	line:6	language:C++	namespace:http	typeref:typename:bool	file:	signature:(string_piece::const_string_piece url)
http::wordlist	src/gperf/HttpCommomHeadersHash.h	/^static struct HttpHeader wordlist[] =$/;"	v	line:31	language:C++	namespace:http	typeref:struct:HttpHeader[]
http_body_is_final	src/http_parser/http_parser.cpp	/^http_body_is_final(const struct http_parser *parser) {$/;"	f	line:2485	language:C++	typeref:typename:int	signature:(const struct http_parser * parser)
http_body_is_final	src/http_parser/http_parser.h	/^int http_body_is_final(const http_parser *parser);$/;"	p	line:433	language:C++	typeref:typename:int	signature:(const http_parser * parser)
http_cb	src/http_parser/http_parser.h	/^typedef int (*http_cb) (http_parser*);$/;"	t	line:91	language:C++	typeref:typename:int (*)(http_parser *)
http_data_cb	src/http_parser/http_parser.h	/^typedef int (*http_data_cb) (http_parser*, const char *at, size_t length);$/;"	t	line:90	language:C++	typeref:typename:int (*)(http_parser *,const char * at,size_t length)
http_errno	src/http_parser/http_parser.h	/^  unsigned int http_errno : 7;$/;"	m	line:312	language:C++	struct:http_parser	typeref:typename:unsigned int:7	access:public
http_errno	src/http_parser/http_parser.h	/^enum http_errno {$/;"	g	line:285	language:C++
http_errno_description	src/http_parser/http_parser.cpp	/^http_errno_description(enum http_errno err) {$/;"	f	line:2173	language:C++	typeref:typename:const char *	signature:(enum http_errno err)
http_errno_description	src/http_parser/http_parser.h	/^const char *http_errno_description(enum http_errno err);$/;"	p	line:419	language:C++	typeref:typename:const char *	signature:(enum http_errno err)
http_errno_name	src/http_parser/http_parser.cpp	/^http_errno_name(enum http_errno err) {$/;"	f	line:2167	language:C++	typeref:typename:const char *	signature:(enum http_errno err)
http_errno_name	src/http_parser/http_parser.h	/^const char *http_errno_name(enum http_errno err);$/;"	p	line:416	language:C++	typeref:typename:const char *	signature:(enum http_errno err)
http_host_state	src/http_parser/http_parser.cpp	/^enum http_host_state$/;"	g	line:399	language:C++	file:
http_major	src/http_parser/http_parser.h	/^  unsigned short http_major;$/;"	m	line:308	language:C++	struct:http_parser	typeref:typename:unsigned short	access:public
http_message_needs_eof	src/http_parser/http_parser.cpp	/^http_message_needs_eof (const http_parser *parser)$/;"	f	line:2091	language:C++	typeref:typename:int	signature:(const http_parser * parser)
http_message_needs_eof	src/http_parser/http_parser.cpp	/^int http_message_needs_eof(const http_parser *parser);$/;"	p	line:479	language:C++	typeref:typename:int	file:	signature:(const http_parser * parser)
http_method	src/http_parser/http_parser.h	/^enum http_method$/;"	g	line:209	language:C++
http_method_str	src/http_parser/http_parser.cpp	/^http_method_str (enum http_method m)$/;"	f	line:2133	language:C++	typeref:typename:const char *	signature:(enum http_method m)
http_method_str	src/http_parser/http_parser.h	/^const char *http_method_str(enum http_method m);$/;"	p	line:410	language:C++	typeref:typename:const char *	signature:(enum http_method m)
http_minor	src/http_parser/http_parser.h	/^  unsigned short http_minor;$/;"	m	line:309	language:C++	struct:http_parser	typeref:typename:unsigned short	access:public
http_parse_host	src/http_parser/http_parser.cpp	/^http_parse_host(const char * buf, struct http_parser_url *u, int found_at) {$/;"	f	line:2261	language:C++	typeref:typename:int	file:	signature:(const char * buf,struct http_parser_url * u,int found_at)
http_parse_host_char	src/http_parser/http_parser.cpp	/^http_parse_host_char(enum http_host_state s, const char ch) {$/;"	f	line:2179	language:C++	typeref:enum:http_host_state	file:	signature:(enum http_host_state s,const char ch)
http_parser	src/http_parser/http_parser.h	/^struct http_parser {$/;"	s	line:295	language:C++
http_parser	src/http_parser/http_parser.h	/^typedef struct http_parser http_parser;$/;"	t	line:68	language:C++	typeref:struct:http_parser
http_parser::content_length	src/http_parser/http_parser.h	/^  uint64_t content_length; \/* # bytes in body (0 if no Content-Length header) *\/$/;"	m	line:305	language:C++	struct:http_parser	typeref:typename:uint64_t	access:public
http_parser::data	src/http_parser/http_parser.h	/^  void *data; \/* A pointer to get hook to the "connection" or "socket" object *\/$/;"	m	line:322	language:C++	struct:http_parser	typeref:typename:void *	access:public
http_parser::flags	src/http_parser/http_parser.h	/^  unsigned int flags : 8;        \/* F_* values from 'flags' enum; semi-public *\/$/;"	m	line:298	language:C++	struct:http_parser	typeref:typename:unsigned int:8	access:public
http_parser::header_state	src/http_parser/http_parser.h	/^  unsigned int header_state : 7; \/* enum header_state from http_parser.c *\/$/;"	m	line:300	language:C++	struct:http_parser	typeref:typename:unsigned int:7	access:public
http_parser::http_errno	src/http_parser/http_parser.h	/^  unsigned int http_errno : 7;$/;"	m	line:312	language:C++	struct:http_parser	typeref:typename:unsigned int:7	access:public
http_parser::http_major	src/http_parser/http_parser.h	/^  unsigned short http_major;$/;"	m	line:308	language:C++	struct:http_parser	typeref:typename:unsigned short	access:public
http_parser::http_minor	src/http_parser/http_parser.h	/^  unsigned short http_minor;$/;"	m	line:309	language:C++	struct:http_parser	typeref:typename:unsigned short	access:public
http_parser::index	src/http_parser/http_parser.h	/^  unsigned int index : 7;        \/* index into current matcher *\/$/;"	m	line:301	language:C++	struct:http_parser	typeref:typename:unsigned int:7	access:public
http_parser::lenient_http_headers	src/http_parser/http_parser.h	/^  unsigned int lenient_http_headers : 1;$/;"	m	line:302	language:C++	struct:http_parser	typeref:typename:unsigned int:1	access:public
http_parser::method	src/http_parser/http_parser.h	/^  unsigned int method : 8;       \/* requests only *\/$/;"	m	line:311	language:C++	struct:http_parser	typeref:typename:unsigned int:8	access:public
http_parser::nread	src/http_parser/http_parser.h	/^  uint32_t nread;          \/* # bytes read in various scenarios *\/$/;"	m	line:304	language:C++	struct:http_parser	typeref:typename:uint32_t	access:public
http_parser::state	src/http_parser/http_parser.h	/^  unsigned int state : 7;        \/* enum state from http_parser.c *\/$/;"	m	line:299	language:C++	struct:http_parser	typeref:typename:unsigned int:7	access:public
http_parser::status_code	src/http_parser/http_parser.h	/^  unsigned int status_code : 16; \/* responses only *\/$/;"	m	line:310	language:C++	struct:http_parser	typeref:typename:unsigned int:16	access:public
http_parser::type	src/http_parser/http_parser.h	/^  unsigned int type : 2;         \/* enum http_parser_type *\/$/;"	m	line:297	language:C++	struct:http_parser	typeref:typename:unsigned int:2	access:public
http_parser::upgrade	src/http_parser/http_parser.h	/^  unsigned int upgrade : 1;$/;"	m	line:319	language:C++	struct:http_parser	typeref:typename:unsigned int:1	access:public
http_parser_execute	src/http_parser/http_parser.cpp	/^size_t http_parser_execute (http_parser *parser,$/;"	f	line:640	language:C++	typeref:typename:size_t	signature:(http_parser * parser,const http_parser_settings * settings,const char * data,size_t len)
http_parser_execute	src/http_parser/http_parser.h	/^size_t http_parser_execute(http_parser *parser,$/;"	p	line:395	language:C++	typeref:typename:size_t	signature:(http_parser * parser,const http_parser_settings * settings,const char * data,size_t len)
http_parser_h	src/http_parser/http_parser.h	/^#define http_parser_h$/;"	d	line:22	language:C++
http_parser_init	src/http_parser/http_parser.cpp	/^http_parser_init (http_parser *parser, enum http_parser_type t)$/;"	f	line:2150	language:C++	typeref:typename:void	signature:(http_parser * parser,enum http_parser_type t)
http_parser_init	src/http_parser/http_parser.h	/^void http_parser_init(http_parser *parser, enum http_parser_type type);$/;"	p	line:385	language:C++	typeref:typename:void	signature:(http_parser * parser,enum http_parser_type type)
http_parser_parse_url	src/http_parser/http_parser.cpp	/^int http_parser_parse_url(const char *buf, size_t buflen, int is_connect,$/;"	f	line:2347	language:C++	typeref:typename:int	signature:(const char * buf,size_t buflen,int is_connect,struct http_parser_url * u)
http_parser_parse_url	src/http_parser/http_parser.h	/^int http_parser_parse_url(const char *buf, size_t buflen,$/;"	p	line:425	language:C++	typeref:typename:int	signature:(const char * buf,size_t buflen,int is_connect,struct http_parser_url * u)
http_parser_pause	src/http_parser/http_parser.cpp	/^http_parser_pause(http_parser *parser, int paused) {$/;"	f	line:2470	language:C++	typeref:typename:void	signature:(http_parser * parser,int paused)
http_parser_pause	src/http_parser/http_parser.h	/^void http_parser_pause(http_parser *parser, int paused);$/;"	p	line:430	language:C++	typeref:typename:void	signature:(http_parser * parser,int paused)
http_parser_set_max_header_size	src/http_parser/http_parser.cpp	/^http_parser_set_max_header_size(uint32_t size) {$/;"	f	line:2497	language:C++	typeref:typename:void	signature:(uint32_t size)
http_parser_set_max_header_size	src/http_parser/http_parser.h	/^void http_parser_set_max_header_size(uint32_t size);$/;"	p	line:436	language:C++	typeref:typename:void	signature:(uint32_t size)
http_parser_settings	src/http_parser/http_parser.h	/^struct http_parser_settings {$/;"	s	line:326	language:C++
http_parser_settings	src/http_parser/http_parser.h	/^typedef struct http_parser_settings http_parser_settings;$/;"	t	line:69	language:C++	typeref:struct:http_parser_settings
http_parser_settings::on_body	src/http_parser/http_parser.h	/^  http_data_cb on_body;$/;"	m	line:333	language:C++	struct:http_parser_settings	typeref:typename:http_data_cb	access:public
http_parser_settings::on_chunk_complete	src/http_parser/http_parser.h	/^  http_cb      on_chunk_complete;$/;"	m	line:339	language:C++	struct:http_parser_settings	typeref:typename:http_cb	access:public
http_parser_settings::on_chunk_header	src/http_parser/http_parser.h	/^  http_cb      on_chunk_header;$/;"	m	line:338	language:C++	struct:http_parser_settings	typeref:typename:http_cb	access:public
http_parser_settings::on_header_field	src/http_parser/http_parser.h	/^  http_data_cb on_header_field;$/;"	m	line:330	language:C++	struct:http_parser_settings	typeref:typename:http_data_cb	access:public
http_parser_settings::on_header_value	src/http_parser/http_parser.h	/^  http_data_cb on_header_value;$/;"	m	line:331	language:C++	struct:http_parser_settings	typeref:typename:http_data_cb	access:public
http_parser_settings::on_headers_complete	src/http_parser/http_parser.h	/^  http_cb      on_headers_complete;$/;"	m	line:332	language:C++	struct:http_parser_settings	typeref:typename:http_cb	access:public
http_parser_settings::on_message_begin	src/http_parser/http_parser.h	/^  http_cb      on_message_begin;$/;"	m	line:327	language:C++	struct:http_parser_settings	typeref:typename:http_cb	access:public
http_parser_settings::on_message_complete	src/http_parser/http_parser.h	/^  http_cb      on_message_complete;$/;"	m	line:334	language:C++	struct:http_parser_settings	typeref:typename:http_cb	access:public
http_parser_settings::on_status	src/http_parser/http_parser.h	/^  http_data_cb on_status;$/;"	m	line:329	language:C++	struct:http_parser_settings	typeref:typename:http_data_cb	access:public
http_parser_settings::on_url	src/http_parser/http_parser.h	/^  http_data_cb on_url;$/;"	m	line:328	language:C++	struct:http_parser_settings	typeref:typename:http_data_cb	access:public
http_parser_settings_init	src/http_parser/http_parser.cpp	/^http_parser_settings_init(http_parser_settings *settings)$/;"	f	line:2161	language:C++	typeref:typename:void	signature:(http_parser_settings * settings)
http_parser_settings_init	src/http_parser/http_parser.h	/^void http_parser_settings_init(http_parser_settings *settings);$/;"	p	line:390	language:C++	typeref:typename:void	signature:(http_parser_settings * settings)
http_parser_test	test/http_parser/http_parser_test.cpp	/^namespace http_parser_test$/;"	n	line:10	language:C++	file:
http_parser_test::NOTDestructable	test/http_parser/http_parser_test.cpp	/^class NOTDestructable$/;"	c	line:19	language:C++	namespace:http_parser_test	file:
http_parser_test::NOTDestructable::~NOTDestructable	test/http_parser/http_parser_test.cpp	/^    ~NOTDestructable() = delete;$/;"	p	line:22	language:C++	class:http_parser_test::NOTDestructable	file:	access:public	signature:()
http_parser_test::NotDefaultConstructableClass	test/http_parser/http_parser_test.cpp	/^class NotDefaultConstructableClass$/;"	c	line:13	language:C++	namespace:http_parser_test	file:
http_parser_test::NotDefaultConstructableClass::NotDefaultConstructableClass	test/http_parser/http_parser_test.cpp	/^    NotDefaultConstructableClass(int){}$/;"	f	line:16	language:C++	class:http_parser_test::NotDefaultConstructableClass	file:	access:public	signature:(int)
http_parser_test::TEST	test/http_parser/http_parser_test.cpp	/^TEST(http_parser, test_URLParser)$/;"	f	line:104	language:C++	namespace:http_parser_test	signature:(http_parser,test_URLParser)
http_parser_test::test	test/http_parser/http_parser_test.cpp	/^void test()$/;"	f	line:68	language:C++	namespace:http_parser_test	typeref:typename:void	signature:()
http_parser_test::test_traits	test/http_parser/http_parser_test.cpp	/^void test_traits()$/;"	f	line:26	language:C++	namespace:http_parser_test	typeref:typename:void	signature:()
http_parser_type	src/http_parser/http_parser.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	g	line:217	language:C++
http_parser_url	src/http_parser/http_parser.h	/^struct http_parser_url {$/;"	s	line:362	language:C++
http_parser_url::__anoneba9f9790108	src/http_parser/http_parser.h	/^  struct {$/;"	s	line:366	language:C++	struct:http_parser_url	access:public
http_parser_url::__anoneba9f9790108::len	src/http_parser/http_parser.h	/^    uint16_t len;               \/* Length of run in buffer *\/$/;"	m	line:368	language:C++	struct:http_parser_url::__anoneba9f9790108	typeref:typename:uint16_t	access:public
http_parser_url::__anoneba9f9790108::off	src/http_parser/http_parser.h	/^    uint16_t off;               \/* Offset into buffer in which field starts *\/$/;"	m	line:367	language:C++	struct:http_parser_url::__anoneba9f9790108	typeref:typename:uint16_t	access:public
http_parser_url::field_data	src/http_parser/http_parser.h	/^  } field_data[UF_MAX];$/;"	m	line:369	language:C++	struct:http_parser_url	typeref:struct:http_parser_url::__anoneba9f9790108[]	access:public
http_parser_url::field_set	src/http_parser/http_parser.h	/^  uint16_t field_set;           \/* Bitmask of (1 << UF_*) values *\/$/;"	m	line:363	language:C++	struct:http_parser_url	typeref:typename:uint16_t	access:public
http_parser_url::port	src/http_parser/http_parser.h	/^  uint16_t port;                \/* Converted UF_PORT string *\/$/;"	m	line:364	language:C++	struct:http_parser_url	typeref:typename:uint16_t	access:public
http_parser_url_fields	src/http_parser/http_parser.h	/^enum http_parser_url_fields$/;"	g	line:343	language:C++
http_parser_url_init	src/http_parser/http_parser.cpp	/^http_parser_url_init(struct http_parser_url *u) {$/;"	f	line:2343	language:C++	typeref:typename:void	signature:(struct http_parser_url * u)
http_parser_url_init	src/http_parser/http_parser.h	/^void http_parser_url_init(struct http_parser_url *u);$/;"	p	line:422	language:C++	typeref:typename:void	signature:(struct http_parser_url * u)
http_parser_version	src/http_parser/http_parser.cpp	/^http_parser_version(void) {$/;"	f	line:2490	language:C++	typeref:typename:unsigned long	signature:(void)
http_parser_version	src/http_parser/http_parser.h	/^unsigned long http_parser_version(void);$/;"	p	line:383	language:C++	typeref:typename:unsigned long	signature:(void)
http_should_keep_alive	src/http_parser/http_parser.cpp	/^http_should_keep_alive (const http_parser *parser)$/;"	f	line:2114	language:C++	typeref:typename:int	signature:(const http_parser * parser)
http_should_keep_alive	src/http_parser/http_parser.h	/^int http_should_keep_alive(const http_parser *parser);$/;"	p	line:407	language:C++	typeref:typename:int	signature:(const http_parser * parser)
http_status	src/http_parser/http_parser.h	/^enum http_status$/;"	g	line:156	language:C++
http_status_str	src/http_parser/http_parser.cpp	/^http_status_str (enum http_status s)$/;"	f	line:2139	language:C++	typeref:typename:const char *	signature:(enum http_status s)
http_status_str	src/http_parser/http_parser.h	/^const char *http_status_str(enum http_status s);$/;"	p	line:413	language:C++	typeref:typename:const char *	signature:(enum http_status s)
http_strerror_tab	src/http_parser/http_parser.cpp	/^} http_strerror_tab[] = {$/;"	v	line:474	language:C++	typeref:struct:__anon7e0e35540108[]
http_test	test/http/http_commom_headers_test.cpp	/^namespace http_test$/;"	n	line:6	language:C++	file:
http_test	test/http/http_headers_test.cpp	/^namespace http_test$/;"	n	line:6	language:C++	file:
http_test::TEST	test/http/http_commom_headers_test.cpp	/^TEST(http_commom_headers, test_getHeaderCode_char_pointer){$/;"	f	line:14	language:C++	namespace:http_test	signature:(http_commom_headers,test_getHeaderCode_char_pointer)
http_test::TEST	test/http/http_commom_headers_test.cpp	/^TEST(http_commom_headers, test_getHeaderCode_string){$/;"	f	line:32	language:C++	namespace:http_test	signature:(http_commom_headers,test_getHeaderCode_string)
http_test::TEST	test/http/http_commom_headers_test.cpp	/^TEST(http_commom_headers, test_getPointerWithHeaderCode)$/;"	f	line:42	language:C++	namespace:http_test	signature:(http_commom_headers,test_getPointerWithHeaderCode)
http_test::TEST	test/http/http_headers_test.cpp	/^TEST(http_headers, add_using_string_piece)$/;"	f	line:95	language:C++	namespace:http_test	signature:(http_headers,add_using_string_piece)
http_test::TEST	test/http/http_headers_test.cpp	/^TEST(http_headers, constructor)$/;"	f	line:46	language:C++	namespace:http_test	signature:(http_headers,constructor)
http_test::TEST	test/http/http_headers_test.cpp	/^TEST(http_headers, copy_constructor_with_headers)$/;"	f	line:75	language:C++	namespace:http_test	signature:(http_headers,copy_constructor_with_headers)
http_test::TEST	test/http/http_headers_test.cpp	/^TEST(http_headers, copy_constructor_without_headers)$/;"	f	line:57	language:C++	namespace:http_test	signature:(http_headers,copy_constructor_without_headers)
http_test::TEST	test/http/http_headers_test.cpp	/^TEST(http_headers, remove)$/;"	f	line:161	language:C++	namespace:http_test	signature:(http_headers,remove)
http_test::_	test/http/http_headers_test.cpp	/^void _()$/;"	f	line:9	language:C++	namespace:http_test	typeref:typename:void	signature:()
http_test::_1	test/http/http_commom_headers_test.cpp	/^void _1()$/;"	f	line:9	language:C++	namespace:http_test	typeref:typename:void	signature:()
http_test::assertCodesSize	test/http/http_headers_test.cpp	/^void assertCodesSize(const HttpHeaders& headers, size_t size, int64_t capacity)$/;"	f	line:19	language:C++	namespace:http_test	typeref:typename:void	signature:(const HttpHeaders & headers,size_t size,int64_t capacity)
http_test::assertHeaderNameSize	test/http/http_headers_test.cpp	/^void assertHeaderNameSize(const HttpHeaders& headers, size_t size, int64_t capacity)$/;"	f	line:28	language:C++	namespace:http_test	typeref:typename:void	signature:(const HttpHeaders & headers,size_t size,int64_t capacity)
http_test::assertHeaderValueSize	test/http/http_headers_test.cpp	/^void assertHeaderValueSize(const HttpHeaders& headers, size_t size, int64_t capacity)$/;"	f	line:37	language:C++	namespace:http_test	typeref:typename:void	signature:(const HttpHeaders & headers,size_t size,int64_t capacity)
http_test::assertHeadersSize	test/http/http_headers_test.cpp	/^void assertHeadersSize(const HttpHeaders& headers, size_t size)$/;"	f	line:14	language:C++	namespace:http_test	typeref:typename:void	signature:(const HttpHeaders & headers,size_t size)
id	src/easylogging/easylogging++.h	/^  inline const std::string& id(void) const {$/;"	f	line:2232	language:C++	class:el::Logger	typeref:typename:const std::string &	access:public	signature:(void) const
ignoreComments	src/easylogging/easylogging++.cc	/^void Configurations::Parser::ignoreComments(std::string* line) {$/;"	f	line:445	language:C++	class:el::Configurations::Parser	typeref:typename:void	signature:(std::string * line)
ignoreComments	src/easylogging/easylogging++.h	/^    static void ignoreComments(std::string* line);$/;"	p	line:1865	language:C++	class:el::Configurations::Parser	typeref:typename:void	access:private	signature:(std::string * line)
increment	src/easylogging/easylogging++.h	/^  inline void increment(void) {$/;"	f	line:2089	language:C++	class:el::base::HitCounter	typeref:typename:void	access:public	signature:(void)
indent_size	src/design_patterns/builder/builder.h	/^    const size_t indent_size = 2;$/;"	m	line:18	language:C++	struct:design_patterns::HtmlElement	typeref:typename:const size_t	access:public
index	src/http_parser/http_parser.h	/^  unsigned int index : 7;        \/* index into current matcher *\/$/;"	m	line:301	language:C++	struct:http_parser	typeref:typename:unsigned int:7	access:public
indexInArray	src/al/merge.h	/^    int indexInArray;$/;"	m	line:36	language:C++	struct:al::MergeNode	typeref:typename:int	access:public
info_arch	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v	line:496	language:C++	typeref:typename:char const *
info_compiler	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v	line:270	language:C++	typeref:typename:char const *
info_cray	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v	line:280	language:C++	typeref:typename:char const *
info_language_dialect_default	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v	line:501	language:C++	typeref:typename:const char *
info_platform	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v	line:495	language:C++	typeref:typename:char const *
info_simulate	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v	line:272	language:C++	typeref:typename:char const *
info_simulate_version	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v	line:475	language:C++	typeref:typename:char const[]
info_version	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v	line:457	language:C++	typeref:typename:char const[]
init	src/design_patterns/basic/thread_safe_singleton.h	/^    static void init()$/;"	f	line:90	language:C++	class:design_patterns::SingletonWithCallOnce	typeref:typename:void	access:private	signature:()
init	src/easylogging/easylogging++.cc	/^void SubsecondPrecision::init(int width) {$/;"	f	line:1408	language:C++	class:el::base::SubsecondPrecision	typeref:typename:void	signature:(int width)
init	src/easylogging/easylogging++.h	/^  inline void init(base::PerformanceTracker* performanceTracker, bool firstCheckpoint = false) {$/;"	f	line:3453	language:C++	class:el::PerformanceTrackingData	typeref:typename:void	access:private	signature:(base::PerformanceTracker * performanceTracker,bool firstCheckpoint=false)
init	src/easylogging/easylogging++.h	/^  void init(int width);$/;"	p	line:847	language:C++	class:el::base::SubsecondPrecision	typeref:typename:void	access:private	signature:(int width)
init	src/http_parser/URLParser.cpp	/^void URLParser::init(const_string_piece_t urlVal)$/;"	f	line:24	language:C++	class:http::URLParser	typeref:typename:void	signature:(const_string_piece_t urlVal)
init	src/http_parser/URLParser.h	/^    void init(const_string_piece_t urlVal);$/;"	p	line:25	language:C++	class:http::URLParser	typeref:typename:void	access:public	signature:(const_string_piece_t urlVal)
initHeaderTable	src/http/HttpCommomHeaders.cpp	/^const std::vector<std::string*>& HttpCommomHeaders::initHeaderTable()$/;"	f	line:23	language:C++	class:http::HttpCommomHeaders	typeref:typename:const std::vector<std::string * > &	signature:()
initHeaderTable	src/http/HttpCommomHeaders.h	/^    static const std::vector<std::string*>& initHeaderTable();$/;"	p	line:26	language:C++	class:http::HttpCommomHeaders	typeref:typename:const std::vector<std::string * > &	access:private	signature:()
initUnflushedCount	src/easylogging/easylogging++.cc	/^void Logger::initUnflushedCount(void) {$/;"	f	line:704	language:C++	class:el::Logger	typeref:typename:void	signature:(void)
initUnflushedCount	src/easylogging/easylogging++.h	/^  void initUnflushedCount(void);$/;"	p	line:2335	language:C++	class:el::Logger	typeref:typename:void	access:private	signature:(void)
initialize	src/easylogging/easylogging++.cc	/^void MessageBuilder::initialize(Logger* logger) {$/;"	f	line:2506	language:C++	class:el::base::MessageBuilder	typeref:typename:void	signature:(Logger * logger)
initialize	src/easylogging/easylogging++.h	/^  void initialize(Logger* logger);$/;"	p	line:2863	language:C++	class:el::base::MessageBuilder	typeref:typename:void	access:public	signature:(Logger * logger)
initializeLogger	src/easylogging/easylogging++.cc	/^void Writer::initializeLogger(const std::string& loggerId, bool lookup, bool needLock) {$/;"	f	line:2558	language:C++	class:el::base::Writer	typeref:typename:void	signature:(const std::string & loggerId,bool lookup,bool needLock)
initializeLogger	src/easylogging/easylogging++.h	/^  void initializeLogger(const std::string& loggerId, bool lookup = true, bool needLock = true);$/;"	p	line:3245	language:C++	class:el::base::Writer	typeref:typename:void	access:protected	signature:(const std::string & loggerId,bool lookup=true,bool needLock=true)
initialize_Points	src/tests/tests.h	/^std::unique_ptr<std::vector<T>> initialize_Points(size_t size)$/;"	f	line:217	language:C++	typeref:typename:std::unique_ptr<std::vector<T>>	signature:(size_t size)
initilized_	src/http_parser/URLParser.h	/^    bool                        initilized_{false};$/;"	m	line:46	language:C++	class:http::URLParser	typeref:typename:bool	access:private
insertFile	src/easylogging/easylogging++.cc	/^void TypedConfigurations::insertFile(Level level, const std::string& fullFilename) {$/;"	f	line:1782	language:C++	class:el::base::TypedConfigurations	typeref:typename:void	signature:(Level level,const std::string & fullFilename)
insertFile	src/easylogging/easylogging++.h	/^  void insertFile(Level level, const std::string& fullFilename);$/;"	p	line:2022	language:C++	class:el::base::TypedConfigurations	typeref:typename:void	access:private	signature:(Level level,const std::string & fullFilename)
installCallback	src/easylogging/easylogging++.h	/^  static bool installCallback(const std::string& id, std::unordered_map<std::string, TPtr>* mapT/;"	f	line:1533	language:C++	class:el::base::utils::Utils	typeref:typename:bool	access:public	signature:(const std::string & id,std::unordered_map<std::string,TPtr> * mapT)
installCustomFormatSpecifier	src/easylogging/easylogging++.cc	/^void Storage::installCustomFormatSpecifier(const CustomFormatSpecifier& customFormatSpecifier) {$/;"	f	line:2137	language:C++	class:el::base::Storage	typeref:typename:void	signature:(const CustomFormatSpecifier & customFormatSpecifier)
installCustomFormatSpecifier	src/easylogging/easylogging++.h	/^  static inline void installCustomFormatSpecifier(const CustomFormatSpecifier& customFormatSpeci/;"	f	line:3763	language:C++	class:el::Helpers	typeref:typename:void	access:public	signature:(const CustomFormatSpecifier & customFormatSpecifier)
installCustomFormatSpecifier	src/easylogging/easylogging++.h	/^  void installCustomFormatSpecifier(const CustomFormatSpecifier& customFormatSpecifier);$/;"	p	line:2626	language:C++	class:el::base::Storage	typeref:typename:void	access:public	signature:(const CustomFormatSpecifier & customFormatSpecifier)
installLogDispatchCallback	src/easylogging/easylogging++.h	/^  inline bool installLogDispatchCallback(const std::string& id) {$/;"	f	line:2642	language:C++	class:el::base::Storage	typeref:typename:bool	access:public	signature:(const std::string & id)
installLogDispatchCallback	src/easylogging/easylogging++.h	/^  static inline bool installLogDispatchCallback(const std::string& id) {$/;"	f	line:3704	language:C++	class:el::Helpers	typeref:typename:bool	access:public	signature:(const std::string & id)
installLoggerRegistrationCallback	src/easylogging/easylogging++.h	/^  inline bool installLoggerRegistrationCallback(const std::string& id) {$/;"	f	line:2365	language:C++	class:el::base::RegisteredLoggers	typeref:typename:bool	access:public	signature:(const std::string & id)
installLoggerRegistrationCallback	src/easylogging/easylogging++.h	/^  static inline bool installLoggerRegistrationCallback(const std::string& id) {$/;"	f	line:3788	language:C++	class:el::Loggers	typeref:typename:bool	access:public	signature:(const std::string & id)
installPerformanceTrackingCallback	src/easylogging/easylogging++.h	/^  inline bool installPerformanceTrackingCallback(const std::string& id) {$/;"	f	line:2657	language:C++	class:el::base::Storage	typeref:typename:bool	access:public	signature:(const std::string & id)
installPerformanceTrackingCallback	src/easylogging/easylogging++.h	/^  static inline bool installPerformanceTrackingCallback(const std::string& id) {$/;"	f	line:3719	language:C++	class:el::Helpers	typeref:typename:bool	access:public	signature:(const std::string & id)
installPreRollOutCallback	src/easylogging/easylogging++.h	/^  static inline void installPreRollOutCallback(const PreRollOutCallback& callback) {$/;"	f	line:3695	language:C++	class:el::Helpers	typeref:typename:void	access:public	signature:(const PreRollOutCallback & callback)
instance_	src/design_patterns/basic/thread_safe_singleton.h	/^    static T* instance_;$/;"	m	line:138	language:C++	class:design_patterns::SingletonUsingVolatile	typeref:typename:T *	access:private
instance_	src/design_patterns/basic/thread_safe_singleton.h	/^    static std::shared_ptr<T>      instance_;$/;"	m	line:38	language:C++	class:design_patterns::thread_safe_singleton	typeref:typename:std::shared_ptr<T>	access:private
instance_	src/design_patterns/basic/thread_safe_singleton.h	/^    static std::shared_ptr<T> instance_;$/;"	m	line:96	language:C++	class:design_patterns::SingletonWithCallOnce	typeref:typename:std::shared_ptr<T>	access:private
instance_	src/design_patterns/basic/thread_safe_singleton.h	/^std::shared_ptr<T> SingletonWithCallOnce<T>::instance_;$/;"	m	line:102	language:C++	class:design_patterns::SingletonWithCallOnce<T>	typeref:typename:std::shared_ptr<T>
instance_	src/design_patterns/basic/thread_safe_singleton.h	/^template <typename T> T* SingletonUsingVolatile<T>::instance_ = nullptr;$/;"	m	line:143	language:C++	class:design_patterns::SingletonUsingVolatile<T>	typeref:typename:T *
instance_	src/design_patterns/basic/thread_safe_singleton.h	/^template<typename T> std::shared_ptr<T> thread_safe_singleton<T>::instance_;$/;"	m	line:42	language:C++	class:design_patterns::thread_safe_singleton<T>	typeref:typename:std::shared_ptr<T>
instance_init_flag_	src/design_patterns/basic/thread_safe_singleton.h	/^    static std::once_flag instance_init_flag_;$/;"	m	line:95	language:C++	class:design_patterns::SingletonWithCallOnce	typeref:typename:std::once_flag	access:private
instance_init_flag_	src/design_patterns/basic/thread_safe_singleton.h	/^std::once_flag SingletonWithCallOnce<T>::instance_init_flag_;$/;"	m	line:100	language:C++	class:design_patterns::SingletonWithCallOnce<T>	typeref:typename:std::once_flag
int16_t	src/http_parser/http_parser.h	/^typedef __int16 int16_t;$/;"	t	line:40	language:C++	typeref:typename:__int16
int32_t	src/http_parser/http_parser.h	/^typedef __int32 int32_t;$/;"	t	line:42	language:C++	typeref:typename:__int32
int64_t	src/http_parser/http_parser.h	/^typedef __int64 int64_t;$/;"	t	line:44	language:C++	typeref:typename:__int64
int8_t	src/http_parser/http_parser.h	/^typedef __int8 int8_t;$/;"	t	line:38	language:C++	typeref:typename:__int8
integral_constant	src/tests/type_traits.h	/^    struct integral_constant$/;"	s	line:62	language:C++	namespace:std
internal	src/easylogging/easylogging++.h	/^namespace internal {$/;"	n	line:895	language:C++	namespace:el::base::threading
intrusive_benchmark	src/tests/tests.h	/^void intrusive_benchmark()$/;"	f	line:233	language:C++	typeref:typename:void	signature:()
intrusive_benchmark2	src/tests/tests.h	/^void intrusive_benchmark2()$/;"	f	line:260	language:C++	typeref:typename:void	signature:()
intrusive_list	src/tests/tests.h	/^void intrusive_list()$/;"	f	line:291	language:C++	typeref:typename:void	signature:()
intrusive_using_base_hook_test	src/tests/tests.h	/^void intrusive_using_base_hook_test()$/;"	f	line:299	language:C++	typeref:typename:void	signature:()
intrusive_using_base_hook_test::MyNode::MyNode	src/tests/tests.h	/^        MyNode(int size) : size_(size) {}$/;"	f	line:310	language:C++	struct:intrusive_using_base_hook_test::MyNode	access:public	signature:(int size)
intrusive_using_base_hook_test::MyNode::size_	src/tests/tests.h	/^        size_t size_;$/;"	m	line:311	language:C++	struct:intrusive_using_base_hook_test::MyNode	typeref:typename:size_t	access:public
intrusive_using_member_hook_test	src/tests/tests.h	/^void intrusive_using_member_hook_test()$/;"	f	line:341	language:C++	typeref:typename:void	signature:()
iob_len	src/buffer/buffer.h	/^    uint32_t      iob_len;$/;"	m	line:74	language:C++	struct:buffer_iovec	typeref:typename:uint32_t	access:public
iov_base	src/buffer/buffer.h	/^    void*         iov_base;$/;"	m	line:73	language:C++	struct:buffer_iovec	typeref:typename:void *	access:public
isComment	src/easylogging/easylogging++.cc	/^bool Configurations::Parser::isComment(const std::string& line) {$/;"	f	line:468	language:C++	class:el::Configurations::Parser	typeref:typename:bool	signature:(const std::string & line)
isComment	src/easylogging/easylogging++.h	/^    static bool isComment(const std::string& line);$/;"	p	line:1867	language:C++	class:el::Configurations::Parser	typeref:typename:bool	access:private	signature:(const std::string & line)
isConfig	src/easylogging/easylogging++.cc	/^bool Configurations::Parser::isConfig(const std::string& line) {$/;"	f	line:472	language:C++	class:el::Configurations::Parser	typeref:typename:bool	signature:(const std::string & line)
isConfig	src/easylogging/easylogging++.h	/^    static inline bool isConfig(const std::string& line);$/;"	p	line:1868	language:C++	class:el::Configurations::Parser	typeref:typename:bool	access:private	signature:(const std::string & line)
isDigit	src/easylogging/easylogging++.h	/^  static inline bool isDigit(char c) {$/;"	f	line:1068	language:C++	class:el::base::utils::Str	typeref:typename:bool	access:public	signature:(char c)
isFlushNeeded	src/easylogging/easylogging++.h	/^  inline bool isFlushNeeded(Level level) {$/;"	f	line:2259	language:C++	class:el::Logger	typeref:typename:bool	access:public	signature:(Level level)
isInitialized_	src/design_patterns/basic/thread_safe_singleton.h	/^    static volatile bool isInitialized_;$/;"	m	line:140	language:C++	class:design_patterns::SingletonUsingVolatile	typeref:typename:volatile bool	access:private
isInitialized_	src/design_patterns/basic/thread_safe_singleton.h	/^template <typename T> volatile bool SingletonUsingVolatile<T>::isInitialized_ = false;$/;"	m	line:145	language:C++	class:design_patterns::SingletonUsingVolatile<T>	typeref:typename:volatile bool
isLevel	src/easylogging/easylogging++.cc	/^bool Configurations::Parser::isLevel(const std::string& line) {$/;"	f	line:464	language:C++	class:el::Configurations::Parser	typeref:typename:bool	signature:(const std::string & line)
isLevel	src/easylogging/easylogging++.h	/^    static bool isLevel(const std::string& line);$/;"	p	line:1866	language:C++	class:el::Configurations::Parser	typeref:typename:bool	access:private	signature:(const std::string & line)
isReadable	src/bytebuf/bytebuf.h	/^    bool isReadable() const {return readIndex_ > 0;}$/;"	f	line:27	language:C++	class:bytebuf	typeref:typename:bool	access:public	signature:() const
isValidHttpHeader	src/gperf/HttpCommomHeadersHash.cpp	/^HttpCommomHeaderInternal::isValidHttpHeader (const char *str, size_t len)$/;"	f	line:124	language:C++	class:http::HttpCommomHeaderInternal	typeref:struct:HttpHeader *	signature:(const char * str,size_t len)
isValidHttpHeader	src/gperf/HttpCommomHeadersHash.h	/^  static struct HttpHeader *isValidHttpHeader (const char *str, size_t len);$/;"	p	line:27	language:C++	class:http::HttpCommomHeaderInternal	typeref:struct:HttpHeader *	access:public	signature:(const char * str,size_t len)
isValidId	src/easylogging/easylogging++.cc	/^bool Logger::isValidId(const std::string& id) {$/;"	f	line:671	language:C++	class:el::Logger	typeref:typename:bool	signature:(const std::string & id)
isValidId	src/easylogging/easylogging++.h	/^  static bool isValidId(const std::string& id);$/;"	p	line:2252	language:C++	class:el::Logger	typeref:typename:bool	access:public	signature:(const std::string & id)
isWritable	src/bytebuf/bytebuf.h	/^    bool isWritable() const {return writableBytes() > 0;}$/;"	f	line:28	language:C++	class:bytebuf	typeref:typename:bool	access:public	signature:() const
is_abstract	src/tests/type_traits.h	/^    struct is_abstract : public integral_constant<bool, __is_abstract(_Tp)> { };$/;"	s	line:643	language:C++	namespace:std	inherits:integral_constant<bool,__is_abstract(_Tp)>
is_assignable	src/tests/type_traits.h	/^    struct is_assignable$/;"	s	line:1184	language:C++	namespace:std	inherits:__is_assignable_helper<_Tp,_Up>::type
is_base_of	src/tests/type_traits.h	/^    struct is_base_of$/;"	s	line:1415	language:C++	namespace:std	inherits:integral_constant<bool,__is_base_of(_Base, _Derived)>
is_class	src/tests/type_traits.h	/^    struct is_class$/;"	s	line:395	language:C++	namespace:std	inherits:integral_constant<bool,__is_class(_Tp)>
is_constructible	src/tests/type_traits.h	/^    struct is_constructible$/;"	s	line:1042	language:C++	namespace:std	inherits:__is_constructible_impl<_Tp,_Args...>::type
is_convertible	src/tests/type_traits.h	/^    struct is_convertible$/;"	s	line:1447	language:C++	namespace:std	inherits:__is_convertible_helper<_From,_To>::type
is_copy_assignable	src/tests/type_traits.h	/^    struct is_copy_assignable$/;"	s	line:1202	language:C++	namespace:std	inherits:__is_copy_assignable_impl<_Tp>
is_copy_constructible	src/tests/type_traits.h	/^    struct is_copy_constructible$/;"	s	line:1060	language:C++	namespace:std	inherits:__is_copy_constructible_impl<_Tp>
is_default_constructible	src/tests/type_traits.h	/^    struct is_default_constructible$/;"	s	line:837	language:C++	namespace:std	inherits:__is_default_constructible_safe<_Tp>::type
is_destructible	src/tests/type_traits.h	/^    struct is_destructible$/;"	s	line:741	language:C++	namespace:std	inherits:__is_destructible_safe<_Tp>::type
is_empty	src/tests/type_traits.h	/^    struct is_empty : public integral_constant<bool, __is_empty(_Tp)> { };$/;"	s	line:628	language:C++	namespace:std	inherits:integral_constant<bool,__is_empty(_Tp)>
is_enum	src/tests/type_traits.h	/^    struct is_enum$/;"	s	line:383	language:C++	namespace:std	inherits:integral_constant<bool,__is_enum(_Tp)>
is_final	src/tests/type_traits.h	/^    struct is_final : public integral_constant<bool, __is_final(_Tp)> { };$/;"	s	line:638	language:C++	namespace:std	inherits:integral_constant<bool,__is_final(_Tp)>
is_function	src/tests/type_traits.h	/^    struct is_function$/;"	s	line:401	language:C++	namespace:std	inherits:false_type
is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes...) &&>$/;"	s	line:413	language:C++	namespace:std	inherits:true_type
is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes...) &>$/;"	s	line:409	language:C++	namespace:std	inherits:true_type
is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes...) const &&>$/;"	s	line:437	language:C++	namespace:std	inherits:true_type
is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes...) const &>$/;"	s	line:433	language:C++	namespace:std	inherits:true_type
is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes...) const volatile &&>$/;"	s	line:485	language:C++	namespace:std	inherits:true_type
is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes...) const volatile &>$/;"	s	line:481	language:C++	namespace:std	inherits:true_type
is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes...) const volatile>$/;"	s	line:477	language:C++	namespace:std	inherits:true_type
is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes...) const>$/;"	s	line:429	language:C++	namespace:std	inherits:true_type
is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes...) volatile &&>$/;"	s	line:461	language:C++	namespace:std	inherits:true_type
is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes...) volatile &>$/;"	s	line:457	language:C++	namespace:std	inherits:true_type
is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes...) volatile>$/;"	s	line:453	language:C++	namespace:std	inherits:true_type
is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes...)>$/;"	s	line:405	language:C++	namespace:std	inherits:true_type
is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes......) &&>$/;"	s	line:425	language:C++	namespace:std	inherits:true_type
is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes......) &>$/;"	s	line:421	language:C++	namespace:std	inherits:true_type
is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes......) const &&>$/;"	s	line:449	language:C++	namespace:std	inherits:true_type
is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes......) const &>$/;"	s	line:445	language:C++	namespace:std	inherits:true_type
is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes......) const volatile &&>$/;"	s	line:497	language:C++	namespace:std	inherits:true_type
is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes......) const volatile &>$/;"	s	line:493	language:C++	namespace:std	inherits:true_type
is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes......) const volatile>$/;"	s	line:489	language:C++	namespace:std	inherits:true_type
is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes......) const>$/;"	s	line:441	language:C++	namespace:std	inherits:true_type
is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes......) volatile &&>$/;"	s	line:473	language:C++	namespace:std	inherits:true_type
is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes......) volatile &>$/;"	s	line:469	language:C++	namespace:std	inherits:true_type
is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes......) volatile>$/;"	s	line:465	language:C++	namespace:std	inherits:true_type
is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes......)>$/;"	s	line:417	language:C++	namespace:std	inherits:true_type
is_last_chain_with_data	src/buffer/buffer.cpp	/^inline bool buffer::is_last_chain_with_data(const buffer_chain* current_chain) const$/;"	f	line:906	language:C++	class:buffer	typeref:typename:bool	signature:(const buffer_chain * current_chain) const
is_last_chain_with_data	src/buffer/buffer.h	/^    bool is_last_chain_with_data(const buffer_chain* current_chain) const;$/;"	p	line:237	language:C++	class:buffer	typeref:typename:bool	access:public	signature:(const buffer_chain * current_chain) const
is_literal_type	src/tests/type_traits.h	/^    struct is_literal_type : public integral_constant<bool, __is_literal_type(_Tp)> { };$/;"	s	line:624	language:C++	namespace:std	inherits:integral_constant<bool,__is_literal_type(_Tp)>
is_member_function_pointer	src/tests/type_traits.h	/^    struct is_member_function_pointer$/;"	s	line:378	language:C++	namespace:std	inherits:__is_member_function_pointer_helper<typenameremove_cv<_Tp>::type>::type
is_member_object_pointer	src/tests/type_traits.h	/^    struct is_member_object_pointer$/;"	s	line:365	language:C++	namespace:std	inherits:__is_member_object_pointer_helper<typenameremove_cv<_Tp>::type>::type
is_member_pointer	src/tests/type_traits.h	/^    struct is_member_pointer$/;"	s	line:567	language:C++	namespace:std	inherits:__is_member_pointer_helper<typenameremove_cv<_Tp>::type>::type
is_move_assignable	src/tests/type_traits.h	/^    struct is_move_assignable$/;"	s	line:1220	language:C++	namespace:std	inherits:__is_move_assignable_impl<_Tp>
is_move_constructible	src/tests/type_traits.h	/^    struct is_move_constructible$/;"	s	line:1078	language:C++	namespace:std	inherits:__is_move_constructible_impl<_Tp>
is_nothrow_assignable	src/tests/type_traits.h	/^    struct is_nothrow_assignable$/;"	s	line:1231	language:C++	namespace:std	inherits:__and_<is_assignable<_Tp,_Up>,__is_nt_assignable_impl<_Tp,_Up>>::type
is_nothrow_constructible	src/tests/type_traits.h	/^    struct is_nothrow_constructible$/;"	s	line:1127	language:C++	namespace:std	inherits:__and_<is_constructible<_Tp,_Args...>,__is_nt_constructible_impl<_Tp,_Args...>>::type
is_nothrow_copy_assignable	src/tests/type_traits.h	/^    struct is_nothrow_copy_assignable$/;"	s	line:1250	language:C++	namespace:std	inherits:__is_nt_copy_assignable_impl<_Tp>
is_nothrow_copy_constructible	src/tests/type_traits.h	/^    struct is_nothrow_copy_constructible$/;"	s	line:1144	language:C++	namespace:std	inherits:__is_nothrow_copy_constructible_impl<_Tp>
is_nothrow_default_constructible	src/tests/type_traits.h	/^    struct is_nothrow_default_constructible$/;"	s	line:1104	language:C++	namespace:std	inherits:__and_<is_default_constructible<_Tp>,__is_nt_default_constructible_impl<_Tp>>::type
is_nothrow_destructible	src/tests/type_traits.h	/^    struct is_nothrow_destructible$/;"	s	line:789	language:C++	namespace:std	inherits:__is_nt_destructible_safe<_Tp>::type
is_nothrow_move_assignable	src/tests/type_traits.h	/^    struct is_nothrow_move_assignable$/;"	s	line:1268	language:C++	namespace:std	inherits:__is_nt_move_assignable_impl<_Tp>
is_nothrow_move_constructible	src/tests/type_traits.h	/^    struct is_nothrow_move_constructible$/;"	s	line:1162	language:C++	namespace:std	inherits:__is_nothrow_move_constructible_impl<_Tp>
is_pod	src/tests/type_traits.h	/^    struct is_pod : public integral_constant<bool, __is_pod(_Tp)> { };$/;"	s	line:620	language:C++	namespace:std	inherits:integral_constant<bool,__is_pod(_Tp)>
is_polymorphic	src/tests/type_traits.h	/^    struct is_polymorphic : public integral_constant<bool, __is_polymorphic(_Tp)> { };$/;"	s	line:632	language:C++	namespace:std	inherits:integral_constant<bool,__is_polymorphic(_Tp)>
is_satisfied	src/design_patterns/basic/SOLID_Open_Close.h	/^    bool is_satisfied(Product* p) override $/;"	f	line:82	language:C++	class:design_patterns::ColorSpec	typeref:typename:bool	access:public	signature:(Product * p)
is_satisfied	src/design_patterns/basic/SOLID_Open_Close.h	/^    bool is_satisfied(Product* p) override $/;"	f	line:93	language:C++	class:design_patterns::SizeSpec	typeref:typename:bool	access:public	signature:(Product * p)
is_satisfied	src/design_patterns/basic/SOLID_Open_Close.h	/^    virtual bool is_satisfied(T* item) = 0;$/;"	p	line:54	language:C++	class:design_patterns::ISpecification	typeref:typename:bool	access:public	signature:(T * item)
is_standard_layout	src/tests/type_traits.h	/^    struct is_standard_layout : public integral_constant<bool, __is_standard_layout(_Tp)> { };$/;"	s	line:615	language:C++	namespace:std	inherits:integral_constant<bool,__is_standard_layout(_Tp)>
is_trivial	src/tests/type_traits.h	/^    struct is_trivial : public integral_constant<bool, __is_trivial(_Tp)> { };$/;"	s	line:607	language:C++	namespace:std	inherits:integral_constant<bool,__is_trivial(_Tp)>
is_trivially_assignable	src/tests/type_traits.h	/^    struct is_trivially_assignable$/;"	s	line:1303	language:C++	namespace:std	inherits:__and_<is_assignable<_Tp,_Up>,integral_constant<bool,__is_trivially_assignable(_Tp, _Up)>>::type
is_trivially_constructible	src/tests/type_traits.h	/^    struct is_trivially_constructible$/;"	s	line:1274	language:C++	namespace:std	inherits:__and_<is_constructible<_Tp,_Args...>,integral_constant<bool,__is_trivially_constructible(_Tp, _Args...)>>::type
is_trivially_copy_assignable	src/tests/type_traits.h	/^    struct is_trivially_copy_assignable$/;"	s	line:1311	language:C++	namespace:std	inherits:__and_<is_copy_assignable<_Tp>,integral_constant<bool,__is_trivially_assignable(_Tp&, const _Tp&)>>::type
is_trivially_copy_constructible	src/tests/type_traits.h	/^    struct is_trivially_copy_constructible$/;"	s	line:1287	language:C++	namespace:std	inherits:__and_<is_copy_constructible<_Tp>,integral_constant<bool,__is_trivially_constructible(_Tp, const _Tp&)>>::type
is_trivially_copyable	src/tests/type_traits.h	/^    struct is_trivially_copyable : public integral_constant<bool, __is_trivially_copyable(_Tp)> /;"	s	line:611	language:C++	namespace:std	inherits:integral_constant<bool,__is_trivially_copyable(_Tp)>
is_trivially_default_constructible	src/tests/type_traits.h	/^    struct is_trivially_default_constructible$/;"	s	line:1281	language:C++	namespace:std	inherits:is_trivially_constructible<_Tp>::type
is_trivially_destructible	src/tests/type_traits.h	/^    struct is_trivially_destructible$/;"	s	line:1327	language:C++	namespace:std	inherits:__and_<is_destructible<_Tp>,integral_constant<bool,__has_trivial_destructor(_Tp)>>::type
is_trivially_move_assignable	src/tests/type_traits.h	/^    struct is_trivially_move_assignable$/;"	s	line:1319	language:C++	namespace:std	inherits:__and_<is_move_assignable<_Tp>,integral_constant<bool,__is_trivially_assignable(_Tp&, _Tp&&)>>::type
is_trivially_move_constructible	src/tests/type_traits.h	/^    struct is_trivially_move_constructible$/;"	s	line:1295	language:C++	namespace:std	inherits:__and_<is_move_constructible<_Tp>,integral_constant<bool,__is_trivially_constructible(_Tp, _Tp&&)>>::type
is_union	src/tests/type_traits.h	/^    struct is_union$/;"	s	line:389	language:C++	namespace:std	inherits:integral_constant<bool,__is_union(_Tp)>
is_valid	src/buffer/buffer.h	/^    bool is_valid() const{return buffer_ != nullptr && chain_ != nullptr;}$/;"	f	line:60	language:C++	class:buffer_iter	typeref:typename:bool	access:public	signature:() const
it_t	test/http_parser/http_parser_test.cpp	/^    using it_t = const char*;$/;"	t	line:86	language:C++	function:http_parser_test::test	typeref:typename:const char *	file:
it_t	test/http_parser/http_parser_test.cpp	/^    using it_t = std::vector<string>::iterator;$/;"	t	line:29	language:C++	function:http_parser_test::test_traits	typeref:typename:std::vector<string>::iterator	file:
it_traits	src/string_piece/string_piece.h	/^    using it_traits = std::iterator_traits<Iter>;$/;"	t	line:43	language:C++	class:string_piece::Range	typeref:typename:std::iterator_traits<Iter>	access:public
it_traits	test/http_parser/http_parser_test.cpp	/^    using it_traits = std::iterator_traits<const char*>;$/;"	t	line:76	language:C++	function:http_parser_test::test	typeref:typename:std::iterator_traits<const char * >	file:
iter_of_chain	src/buffer/buffer.cpp	/^buffer::Iter buffer::iter_of_chain(const buffer_chain& chain)$/;"	f	line:423	language:C++	class:buffer	typeref:typename:buffer::Iter	signature:(const buffer_chain & chain)
iter_of_chain	src/buffer/buffer.h	/^    Iter iter_of_chain(const buffer_chain& chain);$/;"	p	line:183	language:C++	class:buffer	typeref:typename:Iter	access:public	signature:(const buffer_chain & chain)
iterableQueue_	src/easylogging/easylogging++.h	/^    base::workarounds::IterableQueue<T, Container> iterableQueue_ =$/;"	m	line:2936	language:C++	class:el::base::MessageBuilder	typeref:typename:base::workarounds::IterableQueue<T,Container>	access:public
iterateOverCodes	src/http/HttpHeaders.h	/^    void iterateOverCodes(HttpHeaderCode code, Func&& func)$/;"	f	line:60	language:C++	class:http::HttpHeaders	typeref:typename:void	access:private	signature:(HttpHeaderCode code,Func && func)
iterateOverOtherHeaderNames	src/http/HttpHeaders.h	/^    void iterateOverOtherHeaderNames(const_string_piece headerName, Func&& func)$/;"	f	line:74	language:C++	class:http::HttpHeaders	typeref:typename:void	access:private	signature:(const_string_piece headerName,Func && func)
iterator	src/easylogging/easylogging++.h	/^  typedef typename Container::iterator iterator;$/;"	t	line:1256	language:C++	class:el::base::utils::AbstractRegistry	typeref:typename:Container::iterator	access:public
iterator	src/easylogging/easylogging++.h	/^  typedef typename Container::iterator iterator;$/;"	t	line:2795	language:C++	class:el::base::workarounds::IterableContainer	typeref:typename:Container::iterator	access:public
iterator	src/easylogging/easylogging++.h	/^  typedef typename Registry<T_Ptr, T_Key>::iterator iterator;$/;"	t	line:1371	language:C++	class:el::base::utils::Registry	typeref:typename:Registry<T_Ptr,T_Key>::iterator	access:public
iterator	src/easylogging/easylogging++.h	/^  typedef typename RegistryWithPred<T_Ptr, Pred>::iterator iterator;$/;"	t	line:1447	language:C++	class:el::base::utils::RegistryWithPred	typeref:typename:RegistryWithPred<T_Ptr,Pred>::iterator	access:public
iterator	src/string_piece/string_piece.h	/^    using iterator = Iter;$/;"	t	line:49	language:C++	class:string_piece::Range	typeref:typename:Iter	access:public
kAm	src/easylogging/easylogging++.cc	/^static const char* kAm                              =      "AM";$/;"	v	line:74	language:C++	namespace:el::base::consts	typeref:typename:const char *	file:
kAppNameFormatSpecifier	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kAppNameFormatSpecifier          =      ELPP_LITERAL("%app");$/;"	v	line:48	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kConfigurationComment	src/easylogging/easylogging++.cc	/^static const char* kConfigurationComment                   =      "##";$/;"	v	line:109	language:C++	namespace:el::base::consts	typeref:typename:const char *	file:
kConfigurationLevel	src/easylogging/easylogging++.cc	/^static const char* kConfigurationLevel                     =      "*";$/;"	v	line:110	language:C++	namespace:el::base::consts	typeref:typename:const char *	file:
kConfigurationLoggerId	src/easylogging/easylogging++.cc	/^static const char* kConfigurationLoggerId                  =      "--";$/;"	v	line:111	language:C++	namespace:el::base::consts	typeref:typename:const char *	file:
kCrashSignals	src/easylogging/easylogging++.h	/^} kCrashSignals[] = {$/;"	v	line:781	language:C++	namespace:el::base::consts	typeref:typename:const struct el::base::consts::__anondf7eda890208[]
kCrashSignalsCount	src/easylogging/easylogging++.h	/^static const int kCrashSignalsCount                          =      sizeof(kCrashSignals) \/ siz/;"	v	line:804	language:C++	namespace:el::base::consts	typeref:typename:const int
kCurrentHostFormatSpecifier	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kCurrentHostFormatSpecifier      =      ELPP_LITERAL("%host");$/;"	v	line:60	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kCurrentUserFormatSpecifier	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kCurrentUserFormatSpecifier      =      ELPP_LITERAL("%user");$/;"	v	line:59	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kDateTimeFormatSpecifier	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kDateTimeFormatSpecifier         =      ELPP_LITERAL("%datetime/;"	v	line:53	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kDateTimeFormatSpecifierForFilename	src/easylogging/easylogging++.cc	/^static const char* kDateTimeFormatSpecifierForFilename            =      "%datetime";$/;"	v	line:63	language:C++	namespace:el::base::consts	typeref:typename:const char *	file:
kDays	src/easylogging/easylogging++.cc	/^static const char* kDays[7]                         =      { "Sunday", "Monday", "Tuesday", "Wed/;"	v	line:65	language:C++	namespace:el::base::consts	typeref:typename:const char * [7]	file:
kDaysAbbrev	src/easylogging/easylogging++.cc	/^static const char* kDaysAbbrev[7]                   =      { "Sun", "Mon", "Tue", "Wed", "Thu", /;"	v	line:66	language:C++	namespace:el::base::consts	typeref:typename:const char * [7]	file:
kDebugLevelLogValue	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kDebugLevelLogValue    =   ELPP_LITERAL("DEBUG");$/;"	v	line:33	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kDebugLevelShortLogValue	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kDebugLevelShortLogValue    =   ELPP_LITERAL("D");$/;"	v	line:41	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kDefaultDateTimeFormat	src/easylogging/easylogging++.cc	/^static const char* kDefaultDateTimeFormat           =      "%Y-%M-%d %H:%m:%s,%g";$/;"	v	line:71	language:C++	namespace:el::base::consts	typeref:typename:const char *	file:
kDefaultDateTimeFormatInFilename	src/easylogging/easylogging++.cc	/^static const char* kDefaultDateTimeFormatInFilename =      "%Y-%M-%d_%H-%m";$/;"	v	line:72	language:C++	namespace:el::base::consts	typeref:typename:const char *	file:
kDefaultLogFile	src/easylogging/easylogging++.cc	/^static const char* kDefaultLogFile                         =      "\/dev\/null";$/;"	v	line:90	language:C++	namespace:el::base::consts	typeref:typename:const char *	file:
kDefaultLogFile	src/easylogging/easylogging++.cc	/^static const char* kDefaultLogFile                         =      "myeasylog.log";$/;"	v	line:97	language:C++	namespace:el::base::consts	typeref:typename:const char *	file:
kDefaultLogFile	src/easylogging/easylogging++.cc	/^static const char* kDefaultLogFile                         =      "nul";$/;"	v	line:92	language:C++	namespace:el::base::consts	typeref:typename:const char *	file:
kDefaultLogFile	src/easylogging/easylogging++.cc	/^static const char* kDefaultLogFile                         =      ELPP_DEFAULT_LOG_FILE;$/;"	v	line:95	language:C++	namespace:el::base::consts	typeref:typename:const char *	file:
kDefaultLogFileParam	src/easylogging/easylogging++.cc	/^static const char* kDefaultLogFileParam                    =      "--default-log-file";$/;"	v	line:102	language:C++	namespace:el::base::consts	typeref:typename:const char *	file:
kDefaultLoggerId	src/easylogging/easylogging++.h	/^static const char* kDefaultLoggerId                        =      "default";$/;"	v	line:740	language:C++	namespace:el::base::consts	typeref:typename:const char *
kDefaultLoggerId	src/easylogging/easylogging++.h	/^static const char* kDefaultLoggerId                        =      ELPP_DEFAULT_LOGGER;$/;"	v	line:738	language:C++	namespace:el::base::consts	typeref:typename:const char *
kDefaultSubsecondPrecision	src/easylogging/easylogging++.h	/^static const unsigned int kDefaultSubsecondPrecision       =      3;$/;"	v	line:735	language:C++	namespace:el::base::consts	typeref:typename:const unsigned int
kErrorLevelLogValue	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kErrorLevelLogValue    =   ELPP_LITERAL("ERROR");$/;"	v	line:35	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kErrorLevelShortLogValue	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kErrorLevelShortLogValue    =   ELPP_LITERAL("E");$/;"	v	line:43	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kFatalLevelLogValue	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kFatalLevelLogValue    =   ELPP_LITERAL("FATAL");$/;"	v	line:36	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kFatalLevelShortLogValue	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kFatalLevelShortLogValue    =   ELPP_LITERAL("F");$/;"	v	line:44	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kFilePathSeperator	src/easylogging/easylogging++.h	/^static const char* kFilePathSeperator                      =      "\/";$/;"	v	line:758	language:C++	namespace:el::base::consts	typeref:typename:const char *
kFilePathSeperator	src/easylogging/easylogging++.h	/^static const char* kFilePathSeperator                      =      "\\\\";$/;"	v	line:756	language:C++	namespace:el::base::consts	typeref:typename:const char *
kFormatSpecifierChar	src/easylogging/easylogging++.h	/^static const char  kFormatSpecifierChar                    =      '%';$/;"	v	line:732	language:C++	namespace:el::base::consts	typeref:typename:const char
kFormatSpecifierCharValue	src/easylogging/easylogging++.h	/^static const char  kFormatSpecifierCharValue               =      'v';$/;"	v	line:731	language:C++	namespace:el::base::consts	typeref:typename:const char
kInfoLevelLogValue	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kInfoLevelLogValue     =   ELPP_LITERAL("INFO");$/;"	v	line:32	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kInfoLevelShortLogValue	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kInfoLevelShortLogValue     =   ELPP_LITERAL("I");$/;"	v	line:40	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kLogFileBaseFormatSpecifier	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kLogFileBaseFormatSpecifier      =      ELPP_LITERAL("%fbase");$/;"	v	line:55	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kLogFileFormatSpecifier	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kLogFileFormatSpecifier          =      ELPP_LITERAL("%file");$/;"	v	line:54	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kLogFunctionFormatSpecifier	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kLogFunctionFormatSpecifier      =      ELPP_LITERAL("%func");$/;"	v	line:58	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kLogLineFormatSpecifier	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kLogLineFormatSpecifier          =      ELPP_LITERAL("%line");$/;"	v	line:56	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kLogLocationFormatSpecifier	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kLogLocationFormatSpecifier      =      ELPP_LITERAL("%loc");$/;"	v	line:57	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kLoggerIdFormatSpecifier	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kLoggerIdFormatSpecifier         =      ELPP_LITERAL("%logger")/;"	v	line:49	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kLoggingFlagsParam	src/easylogging/easylogging++.cc	/^static const char* kLoggingFlagsParam                      =      "--logging-flags";$/;"	v	line:105	language:C++	namespace:el::base::consts	typeref:typename:const char *	file:
kMaxLogPerContainer	src/easylogging/easylogging++.h	/^static const unsigned int kMaxLogPerContainer              =      100;$/;"	v	line:734	language:C++	namespace:el::base::consts	typeref:typename:const unsigned int
kMaxLogPerCounter	src/easylogging/easylogging++.h	/^static const unsigned int kMaxLogPerCounter                =      100000;$/;"	v	line:733	language:C++	namespace:el::base::consts	typeref:typename:const unsigned int
kMaxStack	src/easylogging/easylogging++.h	/^  static const unsigned int kMaxStack = 64;$/;"	m	line:3566	language:C++	class:el::base::debug::StackTrace	typeref:typename:const unsigned int	access:public
kMaxValid	src/easylogging/easylogging++.h	/^  static const base::type::EnumType kMaxValid = static_cast<base::type::EnumType>(ConfigurationT/;"	m	line:669	language:C++	class:el::ConfigurationTypeHelper	typeref:typename:const base::type::EnumType	access:public
kMaxValid	src/easylogging/easylogging++.h	/^  static const base::type::EnumType kMaxValid = static_cast<base::type::EnumType>(Level::Info);$/;"	m	line:608	language:C++	class:el::LevelHelper	typeref:typename:const base::type::EnumType	access:public
kMaxVerboseLevel	src/easylogging/easylogging++.cc	/^static const base::type::VerboseLevel kMaxVerboseLevel     =      9;$/;"	v	line:81	language:C++	namespace:el::base::consts	typeref:typename:const base::type::VerboseLevel	file:
kMessageFormatSpecifier	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kMessageFormatSpecifier          =      ELPP_LITERAL("%msg");$/;"	v	line:61	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kMinValid	src/easylogging/easylogging++.h	/^  static const base::type::EnumType kMinValid = static_cast<base::type::EnumType>(ConfigurationT/;"	m	line:667	language:C++	class:el::ConfigurationTypeHelper	typeref:typename:const base::type::EnumType	access:public
kMinValid	src/easylogging/easylogging++.h	/^  static const base::type::EnumType kMinValid = static_cast<base::type::EnumType>(Level::Trace);$/;"	m	line:606	language:C++	class:el::LevelHelper	typeref:typename:const base::type::EnumType	access:public
kMonths	src/easylogging/easylogging++.cc	/^static const char* kMonths[12]                      =      { "January", "February", "March", "Ap/;"	v	line:67	language:C++	namespace:el::base::consts	typeref:typename:const char * [12]	file:
kMonthsAbbrev	src/easylogging/easylogging++.cc	/^static const char* kMonthsAbbrev[12]                =      { "Jan", "Feb", "Mar", "Apr", "May", /;"	v	line:70	language:C++	namespace:el::base::consts	typeref:typename:const char * [12]	file:
kNullPointer	src/easylogging/easylogging++.cc	/^static const char* kNullPointer                            =      "nullptr";$/;"	v	line:78	language:C++	namespace:el::base::consts	typeref:typename:const char *	file:
kPerformanceLoggerId	src/easylogging/easylogging++.h	/^static const char* kPerformanceLoggerId                    =      "performance";$/;"	v	line:747	language:C++	namespace:el::base::consts	typeref:typename:const char *
kPerformanceLoggerId	src/easylogging/easylogging++.h	/^static const char* kPerformanceLoggerId                    =      ELPP_DEFAULT_PERFORMANCE_LOGGE/;"	v	line:745	language:C++	namespace:el::base::consts	typeref:typename:const char *
kPerformanceTrackerDefaultLevel	src/easylogging/easylogging++.h	/^static const Level kPerformanceTrackerDefaultLevel         =      Level::Info;$/;"	v	line:763	language:C++	namespace:el::base::consts	typeref:typename:const Level
kPm	src/easylogging/easylogging++.cc	/^static const char* kPm                              =      "PM";$/;"	v	line:75	language:C++	namespace:el::base::consts	typeref:typename:const char *	file:
kSeverityLevelFormatSpecifier	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kSeverityLevelFormatSpecifier    =      ELPP_LITERAL("%level");$/;"	v	line:51	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kSeverityLevelShortFormatSpecifier	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kSeverityLevelShortFormatSpecifier    =      ELPP_LITERAL("%lev/;"	v	line:52	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kSourceFilenameMaxLength	src/easylogging/easylogging++.h	/^static const std::size_t kSourceFilenameMaxLength          =      100;$/;"	v	line:761	language:C++	namespace:el::base::consts	typeref:typename:const std::size_t
kSourceLineMaxLength	src/easylogging/easylogging++.h	/^static const std::size_t kSourceLineMaxLength              =      10;$/;"	v	line:762	language:C++	namespace:el::base::consts	typeref:typename:const std::size_t
kStackStart	src/easylogging/easylogging++.h	/^  static const unsigned int kStackStart = 2;  \/\/ We want to skip c'tor and StackTrace::generat/;"	m	line:3567	language:C++	class:el::base::debug::StackTrace	typeref:typename:const unsigned int	access:public
kSysLogLoggerId	src/easylogging/easylogging++.h	/^static const char* kSysLogLoggerId                         =      "syslog";$/;"	v	line:752	language:C++	namespace:el::base::consts	typeref:typename:const char *
kThreadIdFormatSpecifier	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kThreadIdFormatSpecifier         =      ELPP_LITERAL("%thread")/;"	v	line:50	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kTimeFormats	src/easylogging/easylogging++.h	/^} kTimeFormats[] = {$/;"	v	line:767	language:C++	namespace:el::base::consts	typeref:typename:const struct el::base::consts::__anondf7eda890108[]
kTimeFormatsCount	src/easylogging/easylogging++.h	/^static const int kTimeFormatsCount                           =      sizeof(kTimeFormats) \/ size/;"	v	line:775	language:C++	namespace:el::base::consts	typeref:typename:const int
kTraceLevelLogValue	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kTraceLevelLogValue    =   ELPP_LITERAL("TRACE");$/;"	v	line:39	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kTraceLevelShortLogValue	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kTraceLevelShortLogValue    =   ELPP_LITERAL("T");$/;"	v	line:46	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kUnknownHost	src/easylogging/easylogging++.cc	/^static const char* kUnknownHost                            =      "unknown-host";$/;"	v	line:83	language:C++	namespace:el::base::consts	typeref:typename:const char *	file:
kUnknownUser	src/easylogging/easylogging++.cc	/^static const char* kUnknownUser                            =      "user";$/;"	v	line:82	language:C++	namespace:el::base::consts	typeref:typename:const char *	file:
kValidLoggerIdSymbols	src/easylogging/easylogging++.cc	/^static const char* kValidLoggerIdSymbols                   =$/;"	v	line:107	language:C++	namespace:el::base::consts	typeref:typename:const char *	file:
kVerboseLevelFormatSpecifier	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kVerboseLevelFormatSpecifier     =      ELPP_LITERAL("%vlevel")/;"	v	line:62	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kVerboseLevelLogValue	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kVerboseLevelLogValue  =$/;"	v	line:37	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kVerboseLevelShortLogValue	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kVerboseLevelShortLogValue  =   ELPP_LITERAL("V");$/;"	v	line:45	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kWarningLevelLogValue	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kWarningLevelLogValue  =   ELPP_LITERAL("WARNING");$/;"	v	line:34	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kWarningLevelShortLogValue	src/easylogging/easylogging++.cc	/^static const base::type::char_t* kWarningLevelShortLogValue  =   ELPP_LITERAL("W");$/;"	v	line:42	language:C++	namespace:el::base::consts	typeref:typename:const base::type::char_t *	file:
kYearBase	src/easylogging/easylogging++.cc	/^static const int kYearBase                          =      1900;$/;"	v	line:73	language:C++	namespace:el::base::consts	typeref:typename:const int	file:
key_guid	src/guid_map/guid_hash_map.h	/^    guid_t key_guid;$/;"	m	line:29	language:C++	struct:guid_map_t	typeref:typename:guid_t	access:public
kmp_search	src/substring_search/KMP.cpp	/^int kmp_search(const char *text, size_t text_len, const char *pattern, size_t pattern_len)$/;"	f	line:67	language:C++	namespace:substring_search	typeref:typename:int	signature:(const char * text,size_t text_len,const char * pattern,size_t pattern_len)
kmp_search	src/substring_search/KMP.cpp	/^int kmp_search(const char* text, const char* pattern)$/;"	f	line:28	language:C++	namespace:substring_search	typeref:typename:int	signature:(const char * text,const char * pattern)
kmp_search	src/substring_search/KMP.h	/^int kmp_search(const char *text, const char *pattern);$/;"	p	line:15	language:C++	namespace:substring_search	typeref:typename:int	signature:(const char * text,const char * pattern)
kmp_search	src/substring_search/KMP.h	/^int kmp_search(const char *text, size_t text_len, const char *pattern, size_t pattern_len);$/;"	p	line:17	language:C++	namespace:substring_search	typeref:typename:int	signature:(const char * text,size_t text_len,const char * pattern,size_t pattern_len)
kmp_test	test/substring_search/kmp_test.cpp	/^namespace kmp_test$/;"	n	line:6	language:C++	file:
kmp_test::SizableClass_WithChar	test/substring_search/kmp_test.cpp	/^struct SizableClass_WithChar{$/;"	s	line:72	language:C++	namespace:kmp_test	file:
kmp_test::SizableClass_WithChar::SizableClass_WithChar	test/substring_search/kmp_test.cpp	/^    SizableClass_WithChar()$/;"	f	line:73	language:C++	struct:kmp_test::SizableClass_WithChar	file:	access:public	signature:()
kmp_test::SizableClass_WithChar::buffer_	test/substring_search/kmp_test.cpp	/^    char buffer_[N];$/;"	m	line:80	language:C++	struct:kmp_test::SizableClass_WithChar	typeref:typename:char[]	file:	access:public
kmp_test::TEST	test/substring_search/kmp_test.cpp	/^TEST(kmp, test_kmp)$/;"	f	line:83	language:C++	namespace:kmp_test	signature:(kmp,test_kmp)
kmp_test::TEST	test/substring_search/kmp_test.cpp	/^TEST(kmp, test_kmp_search)$/;"	f	line:109	language:C++	namespace:kmp_test	signature:(kmp,test_kmp_search)
kmp_test::TEST	test/substring_search/kmp_test.cpp	/^TEST(kmp, test_kmp_search_without_0_end)$/;"	f	line:137	language:C++	namespace:kmp_test	signature:(kmp,test_kmp_search_without_0_end)
kmp_test::bench_mark_test	test/substring_search/kmp_test.cpp	/^void bench_mark_test(const char* pattern)$/;"	f	line:52	language:C++	namespace:kmp_test	typeref:typename:void	signature:(const char * pattern)
kmp_test::build_search_table_callback	test/substring_search/kmp_test.cpp	/^using build_search_table_callback = std::shared_ptr<std::vector<int>> (*)(const char*, size_t);$/;"	t	line:17	language:C++	namespace:kmp_test	file:
kmp_test::dis	test/substring_search/kmp_test.cpp	/^static std::uniform_int_distribution<> dis(33, 34);$/;"	v	line:69	language:C++	namespace:kmp_test	typeref:typename:std::uniform_int_distribution<>	file:
kmp_test::gen	test/substring_search/kmp_test.cpp	/^static std::mt19937 gen(rd());$/;"	p	line:68	language:C++	namespace:kmp_test	typeref:typename:std::mt19937	file:	signature:(rd ())
kmp_test::print_search_table	test/substring_search/kmp_test.cpp	/^void print_search_table(const std::vector<int>& search_table)$/;"	f	line:8	language:C++	namespace:kmp_test	typeref:typename:void	signature:(const std::vector<int> & search_table)
kmp_test::rd	test/substring_search/kmp_test.cpp	/^static std::random_device rd;$/;"	v	line:67	language:C++	namespace:kmp_test	typeref:typename:std::random_device	file:
kmp_test::test_build_search_table	test/substring_search/kmp_test.cpp	/^void test_build_search_table(build_search_table_callback build_search_table_call)$/;"	f	line:30	language:C++	namespace:kmp_test	typeref:typename:void	signature:(build_search_table_callback build_search_table_call)
kmp_test::validate	test/substring_search/kmp_test.cpp	/^void validate(build_search_table_callback callback, const char* pattern, const std::vector<int>&/;"	f	line:19	language:C++	namespace:kmp_test	typeref:typename:void	signature:(build_search_table_callback callback,const char * pattern,const std::vector<int> & expectedTable)
last	src/buffer/buffer.h	/^    buffer_chain& last() { return chains_.back(); }$/;"	f	line:250	language:C++	class:buffer	typeref:typename:buffer_chain &	access:private	signature:()
last	src/buffer/buffer.h	/^    const buffer_chain& last() const { return chains_.back(); }$/;"	f	line:251	language:C++	class:buffer	typeref:typename:const buffer_chain &	access:private	signature:() const
lastCheckpointTime	src/easylogging/easylogging++.h	/^  inline const struct timeval* lastCheckpointTime(void) const;$/;"	p	line:3418	language:C++	class:el::PerformanceTrackingData	typeref:typename:const struct timeval *	access:public	signature:(void) const
lastCheckpointTime	src/easylogging/easylogging++.h	/^inline const struct timeval* PerformanceTrackingData::lastCheckpointTime() const {$/;"	f	line:3553	language:C++	class:el::PerformanceTrackingData	typeref:typename:const struct timeval *	signature:() const
last_chain_with_data	src/buffer/buffer.h	/^    const buffer_chain* last_chain_with_data() const { return last_chain_with_data_; }$/;"	f	line:236	language:C++	class:buffer	typeref:typename:const buffer_chain *	access:public	signature:() const
last_chain_with_data_	src/buffer/buffer.h	/^    buffer_chain*                     last_chain_with_data_;\/\/最后一个有数据的chain$/;"	m	line:266	language:C++	class:buffer	typeref:typename:buffer_chain *	access:private
len	src/http_parser/http_parser.h	/^    uint16_t len;               \/* Length of run in buffer *\/$/;"	m	line:368	language:C++	struct:http_parser_url::__anoneba9f9790108	typeref:typename:uint16_t	access:public
lenient_http_headers	src/http_parser/http_parser.h	/^  unsigned int lenient_http_headers : 1;$/;"	m	line:302	language:C++	struct:http_parser	typeref:typename:unsigned int:1	access:public
level	src/easylogging/easylogging++.cc	/^  Level level;$/;"	m	line:151	language:C++	struct:el::StringToLevelItem	typeref:typename:Level	file:	access:public
level	src/easylogging/easylogging++.h	/^  inline Level level(void) const {$/;"	f	line:1588	language:C++	class:el::base::LogFormat	typeref:typename:Level	access:public	signature:(void) const
level	src/easylogging/easylogging++.h	/^  inline Level level(void) const {$/;"	f	line:1684	language:C++	class:el::Configuration	typeref:typename:Level	access:public	signature:(void) const
level	src/easylogging/easylogging++.h	/^  inline Level level(void) const {$/;"	f	line:2459	language:C++	class:el::LogMessage	typeref:typename:Level	access:public	signature:(void) const
level	src/easylogging/easylogging++.h	/^  inline Level level(void) const {$/;"	f	line:3480	language:C++	class:el::base::PerformanceTracker	typeref:typename:Level	access:public	signature:(void) const
level	src/easylogging/easylogging++.h	/^  inline base::type::VerboseLevel level(void) const {$/;"	f	line:2422	language:C++	class:el::base::VRegistry	typeref:typename:base::type::VerboseLevel	access:public	signature:(void) const
levelString	src/easylogging/easylogging++.cc	/^  const char* levelString;$/;"	m	line:150	language:C++	struct:el::StringToLevelItem	typeref:typename:const char *	file:	access:public
line	src/easylogging/easylogging++.h	/^  inline base::type::LineNumber line(void) const {$/;"	f	line:2465	language:C++	class:el::LogMessage	typeref:typename:base::type::LineNumber	access:public	signature:(void) const
line	src/easylogging/easylogging++.h	/^  inline base::type::LineNumber line(void) const {$/;"	f	line:3434	language:C++	class:el::PerformanceTrackingData	typeref:typename:base::type::LineNumber	access:public	signature:(void) const
lineNumber	src/easylogging/easylogging++.h	/^  inline base::type::LineNumber lineNumber(void) const {$/;"	f	line:2081	language:C++	class:el::base::HitCounter	typeref:typename:base::type::LineNumber	access:public	signature:(void) const
list	src/easylogging/easylogging++.h	/^  virtual inline Container& list(void) ELPP_FINAL {$/;"	f	line:1340	language:C++	class:el::base::utils::AbstractRegistry	typeref:typename:Container &	access:public	signature:(void)
list	src/easylogging/easylogging++.h	/^  virtual inline const Container& list(void) const ELPP_FINAL {$/;"	f	line:1345	language:C++	class:el::base::utils::AbstractRegistry	typeref:typename:const Container &	access:public	signature:(void) const
list_hook_type	src/tests/tests.h	/^    using list_hook_type = list_base_hook<TagType, link_mode<safe_link>>;$/;"	t	line:307	language:C++	function:intrusive_using_base_hook_test	typeref:typename:list_base_hook<TagType,link_mode<safe_link>>
list_type	src/tests/tests.h	/^    using list_type = boost::intrusive::list<MyNode, base_hook<list_hook_type>, constant_time_si/;"	t	line:318	language:C++	function:intrusive_using_base_hook_test	typeref:typename:boost::intrusive::list<MyNode,base_hook<list_hook_type>,constant_time_size<true>,size_type<std::size_t>>
lock	src/easylogging/easylogging++.h	/^  inline void lock(void) {$/;"	f	line:919	language:C++	class:el::base::threading::internal::Mutex	typeref:typename:void	access:public	signature:(void)
lock	src/easylogging/easylogging++.h	/^  virtual inline base::threading::Mutex& lock(void) ELPP_FINAL { return m_mutex; }$/;"	f	line:1005	language:C++	class:el::base::threading::ThreadSafe	typeref:typename:base::threading::Mutex &	access:public	signature:(void)
log	src/easylogging/easylogging++.cc	/^void Configuration::log(el::base::type::ostream_t& os) const {$/;"	f	line:261	language:C++	class:el::Configuration	typeref:typename:void	signature:(el::base::type::ostream_t & os) const
log	src/easylogging/easylogging++.h	/^  inline void log(Level, const T&);$/;"	p	line:2332	language:C++	class:el::Logger	typeref:typename:void	access:private	signature:(Level,const T &)
log	src/easylogging/easylogging++.h	/^  virtual inline void log(el::base::type::ostream_t& os) const {$/;"	f	line:2222	language:C++	class:el::Logger	typeref:typename:void	access:public	signature:(el::base::type::ostream_t & os) const
log	src/easylogging/easylogging++.h	/^  virtual inline void log(el::base::type::ostream_t& os) const {$/;"	f	line:3505	language:C++	class:el::base::PerformanceTracker	typeref:typename:void	access:private	signature:(el::base::type::ostream_t & os) const
log	src/easylogging/easylogging++.h	/^  virtual void log(el::base::type::ostream_t& os) const {$/;"	f	line:1612	language:C++	class:el::base::LogFormat	typeref:typename:void	access:public	signature:(el::base::type::ostream_t & os) const
log	src/easylogging/easylogging++.h	/^  virtual void log(el::base::type::ostream_t& os) const;$/;"	p	line:1705	language:C++	class:el::Configuration	typeref:typename:void	access:public	signature:(el::base::type::ostream_t & os) const
log	src/easylogging/easylogging++.h	/^  virtual void log(el::base::type::ostream_t&) const = 0;$/;"	p	line:1565	language:C++	class:el::Loggable	typeref:typename:void	access:public	signature:(el::base::type::ostream_t &) const
log	src/easylogging/easylogging++.h	/^  void log(Level, const char*, const T&, const Args&...);$/;"	p	line:2329	language:C++	class:el::Logger	typeref:typename:void	access:private	signature:(Level,const char *,const T &,const Args &...)
log	src/easylogging/easylogging++.h	/^inline void Logger::log(Level level, const T& log) {$/;"	f	line:3303	language:C++	class:el::Logger	typeref:typename:void	signature:(Level level,const T & log)
log	src/easylogging/easylogging++.h	/^inline void Logger::log(Level level, const char* s, const T& value, const Args&... args) {$/;"	f	line:3298	language:C++	class:el::Logger	typeref:typename:void	signature:(Level level,const char * s,const T & value,const Args &...args)
logBuilder	src/easylogging/easylogging++.h	/^  inline LogBuilder* logBuilder(void) const {$/;"	f	line:2263	language:C++	class:el::Logger	typeref:typename:LogBuilder *	access:public	signature:(void) const
logCrashReason	src/easylogging/easylogging++.cc	/^static void logCrashReason(int sig, bool stackTraceIfAvailable, Level level, const char* logger)/;"	f	line:2862	language:C++	namespace:el::base::debug	typeref:typename:void	file:	signature:(int sig,bool stackTraceIfAvailable,Level level,const char * logger)
logCrashReason	src/easylogging/easylogging++.cc	/^void Helpers::logCrashReason(int sig, bool stackTraceIfAvailable, Level level, const char* logge/;"	f	line:2935	language:C++	class:el::Helpers	typeref:typename:void	signature:(int sig,bool stackTraceIfAvailable,Level level,const char * logger)
logCrashReason	src/easylogging/easylogging++.h	/^  static void logCrashReason(int sig, bool stackTraceIfAvailable = false,$/;"	p	line:3690	language:C++	class:el::Helpers	typeref:typename:void	access:public	signature:(int sig,bool stackTraceIfAvailable=false,Level level=Level::Fatal,const char * logger=base::consts::kDefaultLoggerId)
logDispatchCallback	src/easylogging/easylogging++.h	/^  inline T* logDispatchCallback(const std::string& id) {$/;"	f	line:2651	language:C++	class:el::base::Storage	typeref:typename:T *	access:public	signature:(const std::string & id)
logDispatchCallback	src/easylogging/easylogging++.h	/^  static inline T* logDispatchCallback(const std::string& id) {$/;"	f	line:3713	language:C++	class:el::Helpers	typeref:typename:T *	access:public	signature:(const std::string & id)
logFlushThreshold	src/easylogging/easylogging++.cc	/^std::size_t TypedConfigurations::logFlushThreshold(Level level) {$/;"	f	line:1670	language:C++	class:el::base::TypedConfigurations	typeref:typename:std::size_t	signature:(Level level)
logFlushThreshold	src/easylogging/easylogging++.h	/^  std::size_t logFlushThreshold(Level level);$/;"	p	line:1928	language:C++	class:el::base::TypedConfigurations	typeref:typename:std::size_t	access:public	signature:(Level level)
logFormat	src/easylogging/easylogging++.cc	/^const base::LogFormat& TypedConfigurations::logFormat(Level level) {$/;"	f	line:1646	language:C++	class:el::base::TypedConfigurations	typeref:typename:const base::LogFormat &	signature:(Level level)
logFormat	src/easylogging/easylogging++.h	/^  const base::LogFormat& logFormat(Level level);$/;"	p	line:1922	language:C++	class:el::base::TypedConfigurations	typeref:typename:const base::LogFormat &	access:public	signature:(Level level)
logLine	src/easylogging/easylogging++.h	/^  inline base::type::string_t logLine(void) {$/;"	f	line:2502	language:C++	class:el::base::AsyncLogItem	typeref:typename:base::type::string_t	access:public	signature:(void)
logMessage	src/easylogging/easylogging++.h	/^  inline LogMessage* logMessage(void) {$/;"	f	line:2496	language:C++	class:el::base::AsyncLogItem	typeref:typename:LogMessage *	access:public	signature:(void)
logMessage	src/easylogging/easylogging++.h	/^  inline const LogMessage* logMessage(void) const {$/;"	f	line:2160	language:C++	class:el::LogDispatchData	typeref:typename:const LogMessage *	access:public	signature:(void) const
logStreamsReference	src/easylogging/easylogging++.cc	/^const base::LogStreamsReferenceMap* Loggers::logStreamsReference(void) {$/;"	f	line:3008	language:C++	class:el::Loggers	typeref:typename:const base::LogStreamsReferenceMap *	signature:(void)
logStreamsReference	src/easylogging/easylogging++.h	/^  inline base::LogStreamsReferenceMap* logStreamsReference(void) {$/;"	f	line:2391	language:C++	class:el::base::RegisteredLoggers	typeref:typename:base::LogStreamsReferenceMap *	access:public	signature:(void)
logStreamsReference	src/easylogging/easylogging++.h	/^  static const base::LogStreamsReferenceMap* logStreamsReference(void);$/;"	p	line:3827	language:C++	class:el::Loggers	typeref:typename:const base::LogStreamsReferenceMap *	access:public	signature:(void)
log_	src/easylogging/easylogging++.h	/^  inline void log_(Level, int, const T&);$/;"	p	line:2326	language:C++	class:el::Logger	typeref:typename:void	access:private	signature:(Level,int,const T &)
log_	src/easylogging/easylogging++.h	/^  void log_(Level, int, const char*, const T&, const Args&...);$/;"	p	line:2323	language:C++	class:el::Logger	typeref:typename:void	access:private	signature:(Level,int,const char *,const T &,const Args &...)
log_	src/easylogging/easylogging++.h	/^void Logger::log_(Level level, int vlevel, const T& log) {$/;"	f	line:3284	language:C++	class:el::Logger	typeref:typename:void	signature:(Level level,int vlevel,const T & log)
log_	src/easylogging/easylogging++.h	/^void Logger::log_(Level level, int vlevel, const char* s, const T& value, const Args&... args) {$/;"	f	line:3263	language:C++	class:el::Logger	typeref:typename:void	signature:(Level level,int vlevel,const char * s,const T & value,const Args &...args)
logger	src/easylogging/easylogging++.h	/^  inline Logger* logger(void) const {$/;"	f	line:2474	language:C++	class:el::LogMessage	typeref:typename:Logger *	access:public	signature:(void) const
loggerId	src/easylogging/easylogging++.h	/^  inline const std::string& loggerId(void) const;$/;"	p	line:3443	language:C++	class:el::PerformanceTrackingData	typeref:typename:const std::string &	access:public	signature:(void) const
loggerId	src/easylogging/easylogging++.h	/^inline const std::string& PerformanceTrackingData::loggerId(void) const {$/;"	f	line:3556	language:C++	class:el::PerformanceTrackingData	typeref:typename:const std::string &	signature:(void) const
loggerRegistrationCallback	src/easylogging/easylogging++.h	/^  inline T* loggerRegistrationCallback(const std::string& id) {$/;"	f	line:2376	language:C++	class:el::base::RegisteredLoggers	typeref:typename:T *	access:public	signature:(const std::string & id)
loggerRegistrationCallback	src/easylogging/easylogging++.h	/^  static inline T* loggerRegistrationCallback(const std::string& id) {$/;"	f	line:3797	language:C++	class:el::Loggers	typeref:typename:T *	access:public	signature:(const std::string & id)
lookup	src/gperf/HttpCommomHeadersHash.cpp	/^static signed char lookup[] =$/;"	v	line:108	language:C++	namespace:http	typeref:typename:signed char[]	file:
ltrim	src/easylogging/easylogging++.cc	/^std::string& Str::ltrim(std::string& str) {$/;"	f	line:886	language:C++	class:el::base::utils::Str	typeref:typename:std::string &	signature:(std::string & str)
ltrim	src/easylogging/easylogging++.h	/^  static std::string& ltrim(std::string& str);$/;"	p	line:1075	language:C++	class:el::base::utils::Str	typeref:typename:std::string &	access:public	signature:(std::string & str)
m_addr	src/easylogging/easylogging++.h	/^    std::string m_addr;$/;"	m	line:3580	language:C++	class:el::base::debug::StackTrace::StackTraceEntry	typeref:typename:std::string	access:public
m_argc	src/easylogging/easylogging++.h	/^  int m_argc;$/;"	m	line:1242	language:C++	class:el::base::utils::CommandLineArgs	typeref:typename:int	access:private
m_argv	src/easylogging/easylogging++.h	/^  char** m_argv;$/;"	m	line:1243	language:C++	class:el::base::utils::CommandLineArgs	typeref:typename:char **	access:private
m_asyncDispatchWorker	src/easylogging/easylogging++.h	/^  base::IWorker* m_asyncDispatchWorker;$/;"	m	line:2696	language:C++	class:el::base::Storage	typeref:typename:base::IWorker *	access:private
m_asyncLogQueue	src/easylogging/easylogging++.h	/^  base::AsyncLogQueue* m_asyncLogQueue;$/;"	m	line:2695	language:C++	class:el::base::Storage	typeref:typename:base::AsyncLogQueue *	access:private
m_blockName	src/easylogging/easylogging++.h	/^  std::string m_blockName;$/;"	m	line:3484	language:C++	class:el::base::PerformanceTracker	typeref:typename:std::string	access:private
m_checkpointId	src/easylogging/easylogging++.h	/^  std::string m_checkpointId;$/;"	m	line:3449	language:C++	class:el::PerformanceTrackingData	typeref:typename:std::string	access:private
m_commandLineArgs	src/easylogging/easylogging++.h	/^  base::utils::CommandLineArgs m_commandLineArgs;$/;"	m	line:2698	language:C++	class:el::base::Storage	typeref:typename:base::utils::CommandLineArgs	access:private
m_configurationFile	src/easylogging/easylogging++.h	/^  std::string m_configurationFile;$/;"	m	line:1874	language:C++	class:el::Configurations	typeref:typename:std::string	access:private
m_configurationType	src/easylogging/easylogging++.h	/^    ConfigurationType m_configurationType;$/;"	m	line:1716	language:C++	class:el::Configuration::Predicate	typeref:typename:ConfigurationType	access:private
m_configurationType	src/easylogging/easylogging++.h	/^  ConfigurationType m_configurationType;$/;"	m	line:1721	language:C++	class:el::Configuration	typeref:typename:ConfigurationType	access:private
m_configurations	src/easylogging/easylogging++.h	/^  Configurations m_configurations;$/;"	m	line:2302	language:C++	class:el::Logger	typeref:typename:Configurations	access:private
m_configurations	src/easylogging/easylogging++.h	/^  Configurations* m_configurations;$/;"	m	line:1931	language:C++	class:el::base::TypedConfigurations	typeref:typename:Configurations *	access:private
m_containerLogSeperator	src/easylogging/easylogging++.h	/^  const base::type::char_t* m_containerLogSeperator;$/;"	m	line:3149	language:C++	class:el::base::MessageBuilder	typeref:typename:const base::type::char_t *	access:private
m_continueRunning	src/easylogging/easylogging++.h	/^  bool m_continueRunning;$/;"	m	line:2757	language:C++	class:el::base::AsyncDispatchWorker	typeref:typename:bool	access:private
m_continueRunningLock	src/easylogging/easylogging++.h	/^  base::threading::Mutex m_continueRunningLock;$/;"	m	line:2758	language:C++	class:el::base::AsyncDispatchWorker	typeref:typename:base::threading::Mutex	access:private
m_currentHost	src/easylogging/easylogging++.h	/^  std::string m_currentHost;$/;"	m	line:1636	language:C++	class:el::base::LogFormat	typeref:typename:std::string	access:private
m_currentUser	src/easylogging/easylogging++.h	/^  std::string m_currentUser;$/;"	m	line:1635	language:C++	class:el::base::LogFormat	typeref:typename:std::string	access:private
m_customFormatSpecifiers	src/easylogging/easylogging++.h	/^  std::vector<CustomFormatSpecifier> m_customFormatSpecifiers;$/;"	m	line:2703	language:C++	class:el::base::Storage	typeref:typename:std::vector<CustomFormatSpecifier>	access:private
m_customFormatSpecifiersLock	src/easylogging/easylogging++.h	/^  base::threading::Mutex m_customFormatSpecifiersLock;$/;"	m	line:2704	language:C++	class:el::base::Storage	typeref:typename:base::threading::Mutex	access:private
m_data	src/easylogging/easylogging++.h	/^  const LogDispatchData* m_data;$/;"	m	line:2728	language:C++	class:el::base::DefaultLogDispatchCallback	typeref:typename:const LogDispatchData *	access:private
m_data	src/easylogging/easylogging++.h	/^  const PerformanceTrackingData* m_data;$/;"	m	line:3541	language:C++	class:el::base::DefaultPerformanceTrackingCallback	typeref:typename:const PerformanceTrackingData *	access:private
m_dataType	src/easylogging/easylogging++.h	/^  PerformanceTrackingData::DataType m_dataType;$/;"	m	line:3447	language:C++	class:el::PerformanceTrackingData	typeref:typename:PerformanceTrackingData::DataType	access:private
m_dateTimeFormat	src/easylogging/easylogging++.h	/^  std::string m_dateTimeFormat;$/;"	m	line:1633	language:C++	class:el::base::LogFormat	typeref:typename:std::string	access:private
m_defaultConfigurations	src/easylogging/easylogging++.h	/^  Configurations m_defaultConfigurations;$/;"	m	line:2407	language:C++	class:el::base::RegisteredLoggers	typeref:typename:Configurations	access:private
m_defaultLogBuilder	src/easylogging/easylogging++.h	/^  LogBuilderPtr m_defaultLogBuilder;$/;"	m	line:2406	language:C++	class:el::base::RegisteredLoggers	typeref:typename:LogBuilderPtr	access:private
m_demangled	src/easylogging/easylogging++.h	/^    std::string m_demangled;$/;"	m	line:3578	language:C++	class:el::base::debug::StackTrace::StackTraceEntry	typeref:typename:std::string	access:public
m_dispatchAction	src/easylogging/easylogging++.h	/^  base::DispatchAction m_dispatchAction;$/;"	m	line:2174	language:C++	class:el::LogDispatchData	typeref:typename:base::DispatchAction	access:private
m_dispatchAction	src/easylogging/easylogging++.h	/^  base::DispatchAction m_dispatchAction;$/;"	m	line:2781	language:C++	class:el::base::LogDispatcher	typeref:typename:base::DispatchAction	access:private
m_dispatchAction	src/easylogging/easylogging++.h	/^  base::DispatchAction m_dispatchAction;$/;"	m	line:3241	language:C++	class:el::base::Writer	typeref:typename:base::DispatchAction	access:protected
m_dispatchData	src/easylogging/easylogging++.h	/^  LogDispatchData m_dispatchData;$/;"	m	line:2507	language:C++	class:el::base::AsyncLogItem	typeref:typename:LogDispatchData	access:private
m_enabled	src/easylogging/easylogging++.h	/^  bool m_enabled;$/;"	m	line:2155	language:C++	class:el::Callback	typeref:typename:bool	access:private
m_enabled	src/easylogging/easylogging++.h	/^  bool m_enabled;$/;"	m	line:3491	language:C++	class:el::base::PerformanceTracker	typeref:typename:bool	access:private
m_enabledMap	src/easylogging/easylogging++.h	/^  std::unordered_map<Level, bool> m_enabledMap;$/;"	m	line:1932	language:C++	class:el::base::TypedConfigurations	typeref:typename:std::unordered_map<Level,bool>	access:private
m_endTime	src/easylogging/easylogging++.h	/^  struct timeval m_startTime, m_endTime, m_lastCheckpointTime;$/;"	m	line:3492	language:C++	class:el::base::PerformanceTracker	typeref:struct:timeval	access:private
m_file	src/easylogging/easylogging++.h	/^  const char* m_file;$/;"	m	line:3234	language:C++	class:el::base::Writer	typeref:typename:const char *	access:protected
m_file	src/easylogging/easylogging++.h	/^  const char* m_file;$/;"	m	line:3450	language:C++	class:el::PerformanceTrackingData	typeref:typename:const char *	access:private
m_file	src/easylogging/easylogging++.h	/^  std::string m_file;$/;"	m	line:2482	language:C++	class:el::LogMessage	typeref:typename:std::string	access:private
m_fileLocks	src/easylogging/easylogging++.h	/^  std::unordered_map<std::string, std::unique_ptr<base::threading::Mutex>> m_fileLocks;$/;"	m	line:2184	language:C++	class:el::LogDispatchCallback	typeref:typename:std::unordered_map<std::string,std::unique_ptr<base::threading::Mutex>>	access:private
m_fileLocksMapLock	src/easylogging/easylogging++.h	/^  base::threading::Mutex m_fileLocksMapLock;$/;"	m	line:2185	language:C++	class:el::LogDispatchCallback	typeref:typename:base::threading::Mutex	access:private
m_fileStreamMap	src/easylogging/easylogging++.h	/^  std::unordered_map<Level, base::FileStreamPtr> m_fileStreamMap;$/;"	m	line:1939	language:C++	class:el::base::TypedConfigurations	typeref:typename:std::unordered_map<Level,base::FileStreamPtr>	access:private
m_filename	src/easylogging/easylogging++.h	/^    const char* m_filename;$/;"	m	line:2106	language:C++	class:el::base::HitCounter::Predicate	typeref:typename:const char *	access:private
m_filename	src/easylogging/easylogging++.h	/^  const char* m_filename;$/;"	m	line:2111	language:C++	class:el::base::HitCounter	typeref:typename:const char *	access:private
m_filenameMap	src/easylogging/easylogging++.h	/^  std::unordered_map<Level, std::string> m_filenameMap;$/;"	m	line:1934	language:C++	class:el::base::TypedConfigurations	typeref:typename:std::unordered_map<Level,std::string>	access:private
m_firstCheckpoint	src/easylogging/easylogging++.h	/^  bool m_firstCheckpoint;$/;"	m	line:3448	language:C++	class:el::PerformanceTrackingData	typeref:typename:bool	access:private
m_flag	src/easylogging/easylogging++.h	/^    LoggingFlag m_flag;$/;"	m	line:3864	language:C++	class:el::Loggers::ScopedAddFlag	typeref:typename:LoggingFlag	access:private
m_flag	src/easylogging/easylogging++.h	/^    LoggingFlag m_flag;$/;"	m	line:3876	language:C++	class:el::Loggers::ScopedRemoveFlag	typeref:typename:LoggingFlag	access:private
m_flags	src/easylogging/easylogging++.h	/^  base::type::EnumType m_flags;$/;"	m	line:1634	language:C++	class:el::base::LogFormat	typeref:typename:base::type::EnumType	access:private
m_flags	src/easylogging/easylogging++.h	/^  base::type::EnumType m_flags;$/;"	m	line:2692	language:C++	class:el::base::Storage	typeref:typename:base::type::EnumType	access:private
m_format	src/easylogging/easylogging++.h	/^  base::type::string_t m_format;$/;"	m	line:1632	language:C++	class:el::base::LogFormat	typeref:typename:base::type::string_t	access:private
m_formatSpecifier	src/easylogging/easylogging++.h	/^  const char* m_formatSpecifier;$/;"	m	line:1660	language:C++	class:el::CustomFormatSpecifier	typeref:typename:const char *	access:private
m_formattedTimeTaken	src/easylogging/easylogging++.h	/^  base::type::string_t m_formattedTimeTaken;$/;"	m	line:3446	language:C++	class:el::PerformanceTrackingData	typeref:typename:base::type::string_t	access:private
m_func	src/easylogging/easylogging++.h	/^  const char* m_func;$/;"	m	line:3236	language:C++	class:el::base::Writer	typeref:typename:const char *	access:protected
m_func	src/easylogging/easylogging++.h	/^  const char* m_func;$/;"	m	line:3452	language:C++	class:el::PerformanceTrackingData	typeref:typename:const char *	access:private
m_func	src/easylogging/easylogging++.h	/^  std::string m_func;$/;"	m	line:2484	language:C++	class:el::LogMessage	typeref:typename:std::string	access:private
m_handler	src/easylogging/easylogging++.h	/^  Handler m_handler;$/;"	m	line:3617	language:C++	class:el::base::debug::CrashHandler	typeref:typename:Handler	access:private
m_hasChecked	src/easylogging/easylogging++.h	/^  bool m_hasChecked;$/;"	m	line:3489	language:C++	class:el::base::PerformanceTracker	typeref:typename:bool	access:private
m_hex	src/easylogging/easylogging++.h	/^    std::string m_hex;$/;"	m	line:3579	language:C++	class:el::base::debug::StackTrace::StackTraceEntry	typeref:typename:std::string	access:public
m_hitCounts	src/easylogging/easylogging++.h	/^  std::size_t m_hitCounts;$/;"	m	line:2113	language:C++	class:el::base::HitCounter	typeref:typename:std::size_t	access:private
m_id	src/easylogging/easylogging++.h	/^  std::string m_id;$/;"	m	line:2297	language:C++	class:el::Logger	typeref:typename:std::string	access:private
m_index	src/easylogging/easylogging++.h	/^    std::size_t m_index;$/;"	m	line:3576	language:C++	class:el::base::debug::StackTrace::StackTraceEntry	typeref:typename:std::size_t	access:public
m_isConfigured	src/easylogging/easylogging++.h	/^  bool m_isConfigured;$/;"	m	line:2301	language:C++	class:el::Logger	typeref:typename:bool	access:private
m_isFromFile	src/easylogging/easylogging++.h	/^  bool m_isFromFile;$/;"	m	line:1875	language:C++	class:el::Configurations	typeref:typename:bool	access:private
m_lastCheckpointId	src/easylogging/easylogging++.h	/^  std::string m_lastCheckpointId;$/;"	m	line:3490	language:C++	class:el::base::PerformanceTracker	typeref:typename:std::string	access:private
m_lastCheckpointTime	src/easylogging/easylogging++.h	/^  struct timeval m_startTime, m_endTime, m_lastCheckpointTime;$/;"	m	line:3492	language:C++	class:el::base::PerformanceTracker	typeref:struct:timeval	access:private
m_level	src/easylogging/easylogging++.h	/^    Level m_level;$/;"	m	line:1715	language:C++	class:el::Configuration::Predicate	typeref:typename:Level	access:private
m_level	src/easylogging/easylogging++.h	/^  Level m_level;$/;"	m	line:1630	language:C++	class:el::base::LogFormat	typeref:typename:Level	access:private
m_level	src/easylogging/easylogging++.h	/^  Level m_level;$/;"	m	line:1720	language:C++	class:el::Configuration	typeref:typename:Level	access:private
m_level	src/easylogging/easylogging++.h	/^  Level m_level;$/;"	m	line:2481	language:C++	class:el::LogMessage	typeref:typename:Level	access:private
m_level	src/easylogging/easylogging++.h	/^  Level m_level;$/;"	m	line:3233	language:C++	class:el::base::Writer	typeref:typename:Level	access:protected
m_level	src/easylogging/easylogging++.h	/^  Level m_level;$/;"	m	line:3488	language:C++	class:el::base::PerformanceTracker	typeref:typename:Level	access:private
m_level	src/easylogging/easylogging++.h	/^  base::type::VerboseLevel m_level;$/;"	m	line:2447	language:C++	class:el::base::VRegistry	typeref:typename:base::type::VerboseLevel	access:private
m_line	src/easylogging/easylogging++.h	/^  base::type::LineNumber m_line;$/;"	m	line:2483	language:C++	class:el::LogMessage	typeref:typename:base::type::LineNumber	access:private
m_line	src/easylogging/easylogging++.h	/^  base::type::LineNumber m_line;$/;"	m	line:3451	language:C++	class:el::PerformanceTrackingData	typeref:typename:base::type::LineNumber	access:private
m_line	src/easylogging/easylogging++.h	/^  const base::type::LineNumber m_line;$/;"	m	line:3235	language:C++	class:el::base::Writer	typeref:typename:const base::type::LineNumber	access:protected
m_lineNumber	src/easylogging/easylogging++.h	/^    base::type::LineNumber m_lineNumber;$/;"	m	line:2107	language:C++	class:el::base::HitCounter::Predicate	typeref:typename:base::type::LineNumber	access:private
m_lineNumber	src/easylogging/easylogging++.h	/^  base::type::LineNumber m_lineNumber;$/;"	m	line:2112	language:C++	class:el::base::HitCounter	typeref:typename:base::type::LineNumber	access:private
m_list	src/easylogging/easylogging++.h	/^  Container m_list;$/;"	m	line:1360	language:C++	class:el::base::utils::AbstractRegistry	typeref:typename:Container	access:private
m_location	src/easylogging/easylogging++.h	/^    std::string m_location;$/;"	m	line:3577	language:C++	class:el::base::debug::StackTrace::StackTraceEntry	typeref:typename:std::string	access:public
m_logBuilder	src/easylogging/easylogging++.h	/^  LogBuilderPtr m_logBuilder;$/;"	m	line:2305	language:C++	class:el::Logger	typeref:typename:LogBuilderPtr	access:private
m_logDispatchCallbacks	src/easylogging/easylogging++.h	/^  std::unordered_map<std::string, base::type::LogDispatchCallbackPtr> m_logDispatchCallbacks;$/;"	m	line:2700	language:C++	class:el::base::Storage	typeref:typename:std::unordered_map<std::string,base::type::LogDispatchCallbackPtr>	access:private
m_logFlushThresholdMap	src/easylogging/easylogging++.h	/^  std::unordered_map<Level, std::size_t> m_logFlushThresholdMap;$/;"	m	line:1941	language:C++	class:el::base::TypedConfigurations	typeref:typename:std::unordered_map<Level,std::size_t>	access:private
m_logFormatMap	src/easylogging/easylogging++.h	/^  std::unordered_map<Level, base::LogFormat> m_logFormatMap;$/;"	m	line:1936	language:C++	class:el::base::TypedConfigurations	typeref:typename:std::unordered_map<Level,base::LogFormat>	access:private
m_logLine	src/easylogging/easylogging++.h	/^  base::type::string_t m_logLine;$/;"	m	line:2508	language:C++	class:el::base::AsyncLogItem	typeref:typename:base::type::string_t	access:private
m_logMessage	src/easylogging/easylogging++.h	/^  LogMessage m_logMessage;$/;"	m	line:2506	language:C++	class:el::base::AsyncLogItem	typeref:typename:LogMessage	access:private
m_logMessage	src/easylogging/easylogging++.h	/^  LogMessage* m_logMessage;$/;"	m	line:2173	language:C++	class:el::LogDispatchData	typeref:typename:LogMessage *	access:private
m_logMessage	src/easylogging/easylogging++.h	/^  LogMessage* m_logMessage;$/;"	m	line:2780	language:C++	class:el::base::LogDispatcher	typeref:typename:LogMessage *	access:private
m_logStreamsReference	src/easylogging/easylogging++.h	/^  base::LogStreamsReferenceMap m_logStreamsReference;$/;"	m	line:2408	language:C++	class:el::base::RegisteredLoggers	typeref:typename:base::LogStreamsReferenceMap	access:private
m_logStreamsReference	src/easylogging/easylogging++.h	/^  base::LogStreamsReferenceMap* m_logStreamsReference;$/;"	m	line:1942	language:C++	class:el::base::TypedConfigurations	typeref:typename:base::LogStreamsReferenceMap *	access:private
m_logStreamsReference	src/easylogging/easylogging++.h	/^  base::LogStreamsReferenceMap* m_logStreamsReference;$/;"	m	line:2304	language:C++	class:el::Logger	typeref:typename:base::LogStreamsReferenceMap *	access:private
m_logger	src/easylogging/easylogging++.h	/^  Logger* m_logger;$/;"	m	line:2486	language:C++	class:el::LogMessage	typeref:typename:Logger *	access:private
m_logger	src/easylogging/easylogging++.h	/^  Logger* m_logger;$/;"	m	line:3148	language:C++	class:el::base::MessageBuilder	typeref:typename:Logger *	access:private
m_logger	src/easylogging/easylogging++.h	/^  Logger* m_logger;$/;"	m	line:3238	language:C++	class:el::base::Writer	typeref:typename:Logger *	access:protected
m_loggerId	src/easylogging/easylogging++.h	/^  std::string m_loggerId;$/;"	m	line:3486	language:C++	class:el::base::PerformanceTracker	typeref:typename:std::string	access:private
m_loggerIds	src/easylogging/easylogging++.h	/^  std::vector<std::string> m_loggerIds;$/;"	m	line:3242	language:C++	class:el::base::Writer	typeref:typename:std::vector<std::string>	access:protected
m_loggerRegistrationCallbacks	src/easylogging/easylogging++.h	/^  std::unordered_map<std::string, base::type::LoggerRegistrationCallbackPtr> m_loggerRegistratio/;"	m	line:2409	language:C++	class:el::base::RegisteredLoggers	typeref:typename:std::unordered_map<std::string,base::type::LoggerRegistrationCallbackPtr>	access:private
m_loggingLevel	src/easylogging/easylogging++.h	/^  Level m_loggingLevel;$/;"	m	line:2706	language:C++	class:el::base::Storage	typeref:typename:Level	access:private
m_maxLogFileSizeMap	src/easylogging/easylogging++.h	/^  std::unordered_map<Level, std::size_t> m_maxLogFileSizeMap;$/;"	m	line:1940	language:C++	class:el::base::TypedConfigurations	typeref:typename:std::unordered_map<Level,std::size_t>	access:private
m_message	src/easylogging/easylogging++.h	/^  base::type::string_t m_message;$/;"	m	line:2487	language:C++	class:el::LogMessage	typeref:typename:base::type::string_t	access:private
m_messageBuilder	src/easylogging/easylogging++.h	/^  base::MessageBuilder m_messageBuilder;$/;"	m	line:3240	language:C++	class:el::base::Writer	typeref:typename:base::MessageBuilder	access:protected
m_modules	src/easylogging/easylogging++.h	/^  std::unordered_map<std::string, base::type::VerboseLevel> m_modules;$/;"	m	line:2449	language:C++	class:el::base::VRegistry	typeref:typename:std::unordered_map<std::string,base::type::VerboseLevel>	access:private
m_msg	src/easylogging/easylogging++.h	/^  LogMessage* m_msg;$/;"	m	line:3232	language:C++	class:el::base::Writer	typeref:typename:LogMessage *	access:protected
m_mutex	src/easylogging/easylogging++.h	/^  M* m_mutex;$/;"	m	line:963	language:C++	class:el::base::threading::internal::ScopedLock	typeref:typename:M *	access:private
m_mutex	src/easylogging/easylogging++.h	/^  base::threading::Mutex m_mutex;$/;"	m	line:1010	language:C++	class:el::base::threading::ThreadSafe	typeref:typename:base::threading::Mutex	access:private
m_offset	src/easylogging/easylogging++.h	/^  unsigned int m_offset;$/;"	m	line:845	language:C++	class:el::base::SubsecondPrecision	typeref:typename:unsigned int	access:public
m_pFlags	src/easylogging/easylogging++.h	/^  base::type::EnumType* m_pFlags;$/;"	m	line:2448	language:C++	class:el::base::VRegistry	typeref:typename:base::type::EnumType *	access:private
m_params	src/easylogging/easylogging++.h	/^  std::vector<std::string> m_params;$/;"	m	line:1245	language:C++	class:el::base::utils::CommandLineArgs	typeref:typename:std::vector<std::string>	access:private
m_paramsWithValue	src/easylogging/easylogging++.h	/^  std::unordered_map<std::string, std::string> m_paramsWithValue;$/;"	m	line:1244	language:C++	class:el::base::utils::CommandLineArgs	typeref:typename:std::unordered_map<std::string,std::string>	access:private
m_parentApplicationName	src/easylogging/easylogging++.h	/^  std::string m_parentApplicationName;$/;"	m	line:2300	language:C++	class:el::Logger	typeref:typename:std::string	access:private
m_performanceTracker	src/easylogging/easylogging++.h	/^  base::PerformanceTracker* m_performanceTracker;$/;"	m	line:3445	language:C++	class:el::PerformanceTrackingData	typeref:typename:base::PerformanceTracker *	access:private
m_performanceTrackingCallbacks	src/easylogging/easylogging++.h	/^  std::unordered_map<std::string, base::type::PerformanceTrackingCallbackPtr> m_performanceTrack/;"	m	line:2701	language:C++	class:el::base::Storage	typeref:typename:std::unordered_map<std::string,base::type::PerformanceTrackingCallbackPtr>	access:private
m_performanceTrackingMap	src/easylogging/easylogging++.h	/^  std::unordered_map<Level, bool> m_performanceTrackingMap;$/;"	m	line:1938	language:C++	class:el::base::TypedConfigurations	typeref:typename:std::unordered_map<Level,bool>	access:private
m_preRollOutCallback	src/easylogging/easylogging++.h	/^  PreRollOutCallback m_preRollOutCallback;$/;"	m	line:2699	language:C++	class:el::base::Storage	typeref:typename:PreRollOutCallback	access:private
m_proceed	src/easylogging/easylogging++.h	/^  bool m_proceed;$/;"	m	line:2779	language:C++	class:el::base::LogDispatcher	typeref:typename:bool	access:private
m_proceed	src/easylogging/easylogging++.h	/^  bool m_proceed;$/;"	m	line:3239	language:C++	class:el::base::Writer	typeref:typename:bool	access:protected
m_queue	src/easylogging/easylogging++.h	/^  std::queue<AsyncLogItem> m_queue;$/;"	m	line:2540	language:C++	class:el::base::AsyncLogQueue	typeref:typename:std::queue<AsyncLogItem>	access:private
m_registeredHitCounters	src/easylogging/easylogging++.h	/^  base::RegisteredHitCounters* m_registeredHitCounters;$/;"	m	line:2690	language:C++	class:el::base::Storage	typeref:typename:base::RegisteredHitCounters *	access:private
m_registeredLoggers	src/easylogging/easylogging++.h	/^  base::RegisteredLoggers* m_registeredLoggers;$/;"	m	line:2691	language:C++	class:el::base::Storage	typeref:typename:base::RegisteredLoggers *	access:private
m_resolver	src/easylogging/easylogging++.h	/^  FormatSpecifierValueResolver m_resolver;$/;"	m	line:1661	language:C++	class:el::CustomFormatSpecifier	typeref:typename:FormatSpecifierValueResolver	access:private
m_scopedLog	src/easylogging/easylogging++.h	/^  bool m_scopedLog;$/;"	m	line:3487	language:C++	class:el::base::PerformanceTracker	typeref:typename:bool	access:private
m_stack	src/easylogging/easylogging++.h	/^  std::vector<StackTraceEntry> m_stack;$/;"	m	line:3601	language:C++	class:el::base::debug::StackTrace	typeref:typename:std::vector<StackTraceEntry>	access:private
m_startTime	src/easylogging/easylogging++.h	/^  struct timeval m_startTime, m_endTime, m_lastCheckpointTime;$/;"	m	line:3492	language:C++	class:el::base::PerformanceTracker	typeref:struct:timeval	access:private
m_stream	src/easylogging/easylogging++.h	/^  base::type::stringstream_t m_stream;$/;"	m	line:2299	language:C++	class:el::Logger	typeref:typename:base::type::stringstream_t	access:private
m_subsecondPrecisionMap	src/easylogging/easylogging++.h	/^  std::unordered_map<Level, base::SubsecondPrecision> m_subsecondPrecisionMap;$/;"	m	line:1937	language:C++	class:el::base::TypedConfigurations	typeref:typename:std::unordered_map<Level,base::SubsecondPrecision>	access:private
m_termSupportsColor	src/easylogging/easylogging++.h	/^  bool m_termSupportsColor;$/;"	m	line:2204	language:C++	class:el::LogBuilder	typeref:typename:bool	access:private
m_threadNames	src/easylogging/easylogging++.h	/^  std::unordered_map<std::string, std::string> m_threadNames;$/;"	m	line:2702	language:C++	class:el::base::Storage	typeref:typename:std::unordered_map<std::string,std::string>	access:private
m_threadNamesLock	src/easylogging/easylogging++.h	/^  base::threading::Mutex m_threadNamesLock;$/;"	m	line:2705	language:C++	class:el::base::Storage	typeref:typename:base::threading::Mutex	access:private
m_timestampUnit	src/easylogging/easylogging++.h	/^  base::TimestampUnit m_timestampUnit;$/;"	m	line:3485	language:C++	class:el::base::PerformanceTracker	typeref:typename:base::TimestampUnit	access:private
m_toFileMap	src/easylogging/easylogging++.h	/^  std::unordered_map<Level, bool> m_toFileMap;$/;"	m	line:1933	language:C++	class:el::base::TypedConfigurations	typeref:typename:std::unordered_map<Level,bool>	access:private
m_toStandardOutputMap	src/easylogging/easylogging++.h	/^  std::unordered_map<Level, bool> m_toStandardOutputMap;$/;"	m	line:1935	language:C++	class:el::base::TypedConfigurations	typeref:typename:std::unordered_map<Level,bool>	access:private
m_typedConfigurations	src/easylogging/easylogging++.h	/^  base::TypedConfigurations* m_typedConfigurations;$/;"	m	line:2298	language:C++	class:el::Logger	typeref:typename:base::TypedConfigurations *	access:private
m_underlyingMutex	src/easylogging/easylogging++.h	/^  pthread_mutex_t m_underlyingMutex;$/;"	m	line:945	language:C++	class:el::base::threading::internal::Mutex	typeref:typename:pthread_mutex_t	access:private
m_unflushedCount	src/easylogging/easylogging++.h	/^  std::unordered_map<Level, unsigned int> m_unflushedCount;$/;"	m	line:2303	language:C++	class:el::Logger	typeref:typename:std::unordered_map<Level,unsigned int>	access:private
m_userFormat	src/easylogging/easylogging++.h	/^  base::type::string_t m_userFormat;$/;"	m	line:1631	language:C++	class:el::base::LogFormat	typeref:typename:base::type::string_t	access:private
m_vRegistry	src/easylogging/easylogging++.h	/^  base::VRegistry* m_vRegistry;$/;"	m	line:2693	language:C++	class:el::base::Storage	typeref:typename:base::VRegistry *	access:private
m_value	src/easylogging/easylogging++.h	/^  std::string m_value;$/;"	m	line:1722	language:C++	class:el::Configuration	typeref:typename:std::string	access:private
m_verboseLevel	src/easylogging/easylogging++.h	/^  base::type::VerboseLevel m_verboseLevel;$/;"	m	line:2485	language:C++	class:el::LogMessage	typeref:typename:base::type::VerboseLevel	access:private
m_verboseLevel	src/easylogging/easylogging++.h	/^  base::type::VerboseLevel m_verboseLevel;$/;"	m	line:3237	language:C++	class:el::base::Writer	typeref:typename:base::type::VerboseLevel	access:protected
m_width	src/easylogging/easylogging++.h	/^  int m_width;$/;"	m	line:844	language:C++	class:el::base::SubsecondPrecision	typeref:typename:int	access:public
main	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f	line:513	language:C++	typeref:typename:int	signature:(int argc,char * argv[])
main	build/CMakeFiles/feature_tests.cxx	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f	line:405	language:C++	typeref:typename:int	signature:(int argc,char ** argv)
main	src/main.cpp	/^int main()$/;"	f	line:51	language:C++	typeref:typename:int	signature:()
main	test/main.cpp	/^int main(int argc, char** argv){$/;"	f	line:4	language:C++	typeref:typename:int	signature:(int argc,char ** argv)
main_thread_routine	src/easylogging/test_easylogging.h	/^void main_thread_routine(string* str)$/;"	f	line:42	language:C++	namespace:easylogging	typeref:typename:void	signature:(string * str)
makePollReactor	src/design_patterns/factory/factory_method.h	/^    static ReactorImpl& makePollReactor();$/;"	p	line:22	language:C++	class:design_patterns::ReactorImpl	typeref:typename:ReactorImpl &	access:public	signature:()
makePollReactor	src/design_patterns/factory/factory_method.h	/^ReactorImpl& ReactorImpl::makePollReactor()$/;"	f	line:45	language:C++	class:design_patterns::ReactorImpl	typeref:typename:ReactorImpl &	signature:()
makeSelectReactor	src/design_patterns/factory/factory_method.h	/^    static ReactorImpl& makeSelectReactor();$/;"	p	line:21	language:C++	class:design_patterns::ReactorImpl	typeref:typename:ReactorImpl &	access:public	signature:()
makeSelectReactor	src/design_patterns/factory/factory_method.h	/^ReactorImpl& ReactorImpl::makeSelectReactor()$/;"	f	line:41	language:C++	class:design_patterns::ReactorImpl	typeref:typename:ReactorImpl &	signature:()
make_min_heap	src/al/MinHeap.h	/^    static std::shared_ptr<MinHeap> make_min_heap(const std::vector<T>& c)$/;"	f	line:20	language:C++	class:al::MinHeap	typeref:typename:std::shared_ptr<MinHeap>	access:public	signature:(const std::vector<T> & c)
make_signed	src/tests/type_traits.h	/^    struct make_signed $/;"	s	line:1824	language:C++	namespace:std
make_signed_t	src/tests/type_traits.h	/^    using make_signed_t = typename make_signed<_Tp>::type;$/;"	t	line:1834	language:C++	namespace:std	typeref:typename:make_signed<_Tp>::type
make_unsigned	src/tests/type_traits.h	/^    struct make_unsigned $/;"	s	line:1712	language:C++	namespace:std
make_unsigned_t	src/tests/type_traits.h	/^    using make_unsigned_t = typename make_unsigned<_Tp>::type;$/;"	t	line:1838	language:C++	namespace:std	typeref:typename:make_unsigned<_Tp>::type
maxLogFileSize	src/easylogging/easylogging++.cc	/^std::size_t TypedConfigurations::maxLogFileSize(Level level) {$/;"	f	line:1666	language:C++	class:el::base::TypedConfigurations	typeref:typename:std::size_t	signature:(Level level)
maxLogFileSize	src/easylogging/easylogging++.h	/^  std::size_t maxLogFileSize(Level level);$/;"	p	line:1927	language:C++	class:el::base::TypedConfigurations	typeref:typename:std::size_t	access:public	signature:(Level level)
max_header_size	src/http_parser/http_parser.cpp	/^static uint32_t max_header_size = HTTP_MAX_HEADER_SIZE;$/;"	v	line:30	language:C++	typeref:typename:uint32_t	file:
max_size	src/al/MinHeap.h	/^    SizeType max_size() const {return container_.max_size();}$/;"	f	line:30	language:C++	class:al::MinHeap	typeref:typename:SizeType	access:public	signature:() const
mergeMultiSortedArraySlow	src/al/merge.h	/^std::vector<double> mergeMultiSortedArraySlow(const std::vector<std::vector<double>>& arrays)$/;"	f	line:17	language:C++	namespace:al	typeref:typename:std::vector<double>	signature:(const std::vector<std::vector<double>> & arrays)
mergeMultiSortedArrayWithMinHeap	src/al/merge.h	/^std::vector<double> mergeMultiSortedArrayWithMinHeap(std::vector<std::vector<double>> &arrays)$/;"	f	line:44	language:C++	namespace:al	typeref:typename:std::vector<double>	signature:(std::vector<std::vector<double>> & arrays)
message	src/easylogging/easylogging++.h	/^  inline const base::type::string_t& message(void) const {$/;"	f	line:2477	language:C++	class:el::LogMessage	typeref:typename:const base::type::string_t &	access:public	signature:(void) const
method	src/http_parser/http_parser.h	/^  unsigned int method : 8;       \/* requests only *\/$/;"	m	line:311	language:C++	struct:http_parser	typeref:typename:unsigned int:8	access:public
method_strings	src/http_parser/http_parser.cpp	/^static const char *method_strings[] =$/;"	v	line:176	language:C++	typeref:typename:const char * []	file:
millisecondsWidth	src/easylogging/easylogging++.cc	/^const base::MillisecondsWidth& TypedConfigurations::millisecondsWidth(Level level) {$/;"	f	line:1654	language:C++	class:el::base::TypedConfigurations	typeref:typename:const base::MillisecondsWidth &	signature:(Level level)
millisecondsWidth	src/easylogging/easylogging++.h	/^  const base::MillisecondsWidth& millisecondsWidth(Level level = Level::Global);$/;"	p	line:1924	language:C++	class:el::base::TypedConfigurations	typeref:typename:const base::MillisecondsWidth &	access:public	signature:(Level level=Level::Global)
misalign_	src/buffer/buffer.h	/^    uint32_t            misalign_;$/;"	m	line:152	language:C++	class:buffer_chain	typeref:typename:uint32_t	access:private
modules	src/easylogging/easylogging++.h	/^  inline const std::unordered_map<std::string, base::type::VerboseLevel>& modules(void) const {$/;"	f	line:2435	language:C++	class:el::base::VRegistry	typeref:typename:const std::unordered_map<std::string,base::type::VerboseLevel> &	access:public	signature:(void) const
msleep	src/easylogging/easylogging++.cc	/^static void msleep(int ms) {$/;"	f	line:1390	language:C++	namespace:el::base::threading	typeref:typename:void	file:	signature:(int ms)
mutable_string_piece	src/http/HttpHeaders.h	/^    using mutable_string_piece = string_piece::mutable_string_piece;$/;"	t	line:32	language:C++	class:http::HttpHeaders	typeref:typename:string_piece::mutable_string_piece	access:private
mutable_string_piece	src/string_piece/string_piece.h	/^using mutable_string_piece = Range<char*>;$/;"	t	line:137	language:C++	namespace:string_piece	typeref:typename:Range<char * >
mutex_	src/design_patterns/basic/thread_safe_singleton.h	/^    static std::mutex              mutex_;$/;"	m	line:37	language:C++	class:design_patterns::thread_safe_singleton	typeref:typename:std::mutex	access:private
mutex_	src/design_patterns/basic/thread_safe_singleton.h	/^    static std::mutex mutex_;$/;"	m	line:139	language:C++	class:design_patterns::SingletonUsingVolatile	typeref:typename:std::mutex	access:private
mutex_	src/design_patterns/basic/thread_safe_singleton.h	/^template <typename T> std::mutex SingletonUsingVolatile<T>::mutex_; $/;"	m	line:144	language:C++	class:design_patterns::SingletonUsingVolatile<T>	typeref:typename:std::mutex
mutex_	src/design_patterns/basic/thread_safe_singleton.h	/^template<typename T> std::mutex thread_safe_singleton<T>::mutex_;$/;"	m	line:41	language:C++	class:design_patterns::thread_safe_singleton<T>	typeref:typename:std::mutex
name	src/design_patterns/basic/maybemonad.h	/^    std::string *name;$/;"	m	line:12	language:C++	struct:design_patterns::Address	typeref:typename:std::string *	access:public
name	src/design_patterns/basic/thread_safe_singleton.h	/^    std::string name = "abcd";$/;"	m	line:60	language:C++	struct:design_patterns::A	typeref:typename:std::string	access:public
name	src/design_patterns/builder/builder.h	/^    std::string name;$/;"	m	line:15	language:C++	struct:design_patterns::HtmlElement	typeref:typename:std::string	access:public
name	src/design_patterns/builder/groovy_builder.h	/^    string name;$/;"	m	line:14	language:C++	struct:design_patterns::Tag	typeref:typename:string	access:public
name	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    string name;$/;"	m	line:63	language:C++	struct:design_patterns::NewCreature	typeref:typename:string	access:private
name	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^    string name;$/;"	m	line:17	language:C++	class:design_patterns::Creature	typeref:typename:string	access:public
name	src/design_patterns/prototype/prototype.h	/^    string name;$/;"	m	line:50	language:C++	struct:design_patterns::Contact	typeref:typename:string	access:public
name	src/easylogging/easylogging++.h	/^  const char* name;$/;"	m	line:778	language:C++	struct:el::base::consts::__anondf7eda890208	typeref:typename:const char *	access:public
name	src/http_parser/http_parser.cpp	/^  const char *name;$/;"	m	line:472	language:C++	struct:__anon7e0e35540108	typeref:typename:const char *	file:	access:public
name_	src/design_patterns/basic/SOLID_Open_Close.h	/^    std::string name_;$/;"	m	line:21	language:C++	class:design_patterns::Product	typeref:typename:std::string	access:private
name_	src/tests/tests.h	/^    string name_;$/;"	m	line:360	language:C++	struct:ClassWithNestedClass	typeref:typename:string	access:private
newFileStream	src/easylogging/easylogging++.cc	/^base::type::fstream_t* File::newFileStream(const std::string& filename) {$/;"	f	line:731	language:C++	class:el::base::utils::File	typeref:typename:base::type::fstream_t *	signature:(const std::string & filename)
newFileStream	src/easylogging/easylogging++.h	/^  static base::type::fstream_t* newFileStream(const std::string& filename);$/;"	p	line:1042	language:C++	class:el::base::utils::File	typeref:typename:base::type::fstream_t *	access:public	signature:(const std::string & filename)
next	src/buffer/buffer.h	/^    buffer_chain* next() { return next_; }$/;"	f	line:120	language:C++	class:buffer_chain	typeref:typename:buffer_chain *	access:public	signature:()
next	src/buffer/buffer.h	/^    const buffer_chain* next() const {return next_;}$/;"	f	line:121	language:C++	class:buffer_chain	typeref:typename:const buffer_chain *	access:public	signature:() const
next	src/easylogging/easylogging++.h	/^  inline AsyncLogItem next(void) {$/;"	f	line:2516	language:C++	class:el::base::AsyncLogQueue	typeref:typename:AsyncLogItem	access:public	signature:(void)
next_	src/buffer/buffer.h	/^    buffer_chain*       next_;$/;"	m	line:150	language:C++	class:buffer_chain	typeref:typename:buffer_chain *	access:private
next_	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    NewCreatureModifier* next_;$/;"	m	line:87	language:C++	struct:design_patterns::NewCreatureModifier	typeref:typename:NewCreatureModifier *	access:private
next_	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^    CreatureModifier* next_;$/;"	m	line:49	language:C++	class:design_patterns::CreatureModifier	typeref:typename:CreatureModifier *	access:protected
normal_url_char	src/http_parser/http_parser.cpp	/^static const uint8_t normal_url_char[32] = {$/;"	v	line:245	language:C++	typeref:typename:const uint8_t[32]	file:
nread	src/http_parser/http_parser.h	/^  uint32_t nread;          \/* # bytes read in various scenarios *\/$/;"	m	line:304	language:C++	struct:http_parser	typeref:typename:uint32_t	access:public
numb	src/easylogging/easylogging++.h	/^  int numb;$/;"	m	line:777	language:C++	struct:el::base::consts::__anondf7eda890208	typeref:typename:int	access:public
off	src/http_parser/http_parser.h	/^    uint16_t off;               \/* Offset into buffer in which field starts *\/$/;"	m	line:367	language:C++	struct:http_parser_url::__anoneba9f9790108	typeref:typename:uint16_t	access:public
off_	src/buffer/buffer.h	/^    uint32_t            off_;\/\/offset into chain, the total number of bytes stored in the chai/;"	m	line:149	language:C++	class:buffer_chain	typeref:typename:uint32_t	access:private
offset	src/buffer/buffer.h	/^    uint32_t offset() const {return offset_of_chain_;}$/;"	f	line:45	language:C++	class:buffer_iter	typeref:typename:uint32_t	access:public	signature:() const
offset_of_buffer_	src/buffer/buffer.h	/^    uint32_t                    offset_of_buffer_;$/;"	m	line:67	language:C++	class:buffer_iter	typeref:typename:uint32_t	access:private
offset_of_chain_	src/buffer/buffer.h	/^    uint32_t                    offset_of_chain_;$/;"	m	line:69	language:C++	class:buffer_iter	typeref:typename:uint32_t	access:private
on_body	src/http_parser/http_parser.h	/^  http_data_cb on_body;$/;"	m	line:333	language:C++	struct:http_parser_settings	typeref:typename:http_data_cb	access:public
on_chunk_complete	src/http_parser/http_parser.h	/^  http_cb      on_chunk_complete;$/;"	m	line:339	language:C++	struct:http_parser_settings	typeref:typename:http_cb	access:public
on_chunk_header	src/http_parser/http_parser.h	/^  http_cb      on_chunk_header;$/;"	m	line:338	language:C++	struct:http_parser_settings	typeref:typename:http_cb	access:public
on_header_field	src/http_parser/http_parser.h	/^  http_data_cb on_header_field;$/;"	m	line:330	language:C++	struct:http_parser_settings	typeref:typename:http_data_cb	access:public
on_header_value	src/http_parser/http_parser.h	/^  http_data_cb on_header_value;$/;"	m	line:331	language:C++	struct:http_parser_settings	typeref:typename:http_data_cb	access:public
on_headers_complete	src/http_parser/http_parser.h	/^  http_cb      on_headers_complete;$/;"	m	line:332	language:C++	struct:http_parser_settings	typeref:typename:http_cb	access:public
on_message_begin	src/http_parser/http_parser.h	/^  http_cb      on_message_begin;$/;"	m	line:327	language:C++	struct:http_parser_settings	typeref:typename:http_cb	access:public
on_message_complete	src/http_parser/http_parser.h	/^  http_cb      on_message_complete;$/;"	m	line:334	language:C++	struct:http_parser_settings	typeref:typename:http_cb	access:public
on_status	src/http_parser/http_parser.h	/^  http_data_cb on_status;$/;"	m	line:329	language:C++	struct:http_parser_settings	typeref:typename:http_data_cb	access:public
on_url	src/http_parser/http_parser.h	/^  http_data_cb on_url;$/;"	m	line:328	language:C++	struct:http_parser_settings	typeref:typename:http_data_cb	access:public
operator !=	src/easylogging/easylogging++.h	/^  bool operator!=(const AbstractRegistry<T_Ptr, Container>& other) {$/;"	f	line:1283	language:C++	class:el::base::utils::AbstractRegistry	typeref:typename:bool	access:public	signature:(const AbstractRegistry<T_Ptr,Container> & other)
operator ()	src/easylogging/easylogging++.cc	/^bool Configuration::Predicate::operator()(const Configuration* conf) const {$/;"	f	line:273	language:C++	class:el::Configuration::Predicate	typeref:typename:bool	signature:(const Configuration * conf) const
operator ()	src/easylogging/easylogging++.h	/^    bool operator()(const Configuration* conf) const;$/;"	p	line:1712	language:C++	class:el::Configuration::Predicate	typeref:typename:bool	access:public	signature:(const Configuration * conf) const
operator ()	src/easylogging/easylogging++.h	/^    inline bool operator()(const HitCounter* counter) {$/;"	f	line:2099	language:C++	class:el::base::HitCounter::Predicate	typeref:typename:bool	access:public	signature:(const HitCounter * counter)
operator ()	src/easylogging/easylogging++.h	/^  std::size_t operator()(const el::Level& l) const {$/;"	f	line:596	language:C++	struct:std::hash	typeref:typename:std::size_t	access:public	signature:(const el::Level & l) const
operator ()	src/mysql_gtid/mysql_gtid.h	/^  size_t operator()(const MySQLUuid& uuid) const {$/;"	f	line:35	language:C++	struct:MySQLUuidHash	typeref:typename:size_t	access:public	signature:(const MySQLUuid & uuid) const
operator ()	src/string_piece/string_piece.h	/^    bool operator()(char lhs, char rhs) const$/;"	f	line:17	language:C++	struct:string_piece::AsciiCaseSensitiveEqual	typeref:typename:bool	access:public	signature:(char lhs,char rhs) const
operator ()	src/string_piece/string_piece.h	/^    bool operator()(char lhs, char rhs) const$/;"	f	line:25	language:C++	struct:string_piece::AsciiCaseInsensitiveEqual	typeref:typename:bool	access:public	signature:(char lhs,char rhs) const
operator ()	src/string_piece/string_piece.h	/^    bool operator()(const T& lhs, const T& rhs)$/;"	f	line:158	language:C++	struct:string_piece::CaseInSensitiveEqual	typeref:typename:bool	access:public	signature:(const T & lhs,const T & rhs)
operator ()	src/string_piece/string_piece.h	/^    bool operator()(const T& lhs, const U& rhs)$/;"	f	line:143	language:C++	struct:string_piece::CaseInSensitiveEqual	typeref:typename:bool	access:public	signature:(const T & lhs,const U & rhs)
operator ()	src/string_piece/string_piece.h	/^    bool operator()(const T& lhs, const char* rhs)$/;"	f	line:169	language:C++	struct:string_piece::CaseInSensitiveEqual	typeref:typename:bool	access:public	signature:(const T & lhs,const char * rhs)
operator ()	src/string_piece/string_piece.h	/^    bool operator()(const T& lhs, const char* rhs)$/;"	f	line:184	language:C++	struct:string_piece::CaseInSensitiveEqual	typeref:typename:bool	access:public	signature:(const T & lhs,const char * rhs)
operator ()	src/string_piece/string_piece.h	/^    bool operator()(const T& lhs, const char* rhs)$/;"	f	line:199	language:C++	struct:string_piece::CaseInSensitiveEqual	typeref:typename:bool	access:public	signature:(const T & lhs,const char * rhs)
operator ()	src/string_piece/string_piece.h	/^    bool operator()(const T& lhs, const char* rhs)$/;"	f	line:214	language:C++	struct:string_piece::CaseInSensitiveEqual	typeref:typename:bool	access:public	signature:(const T & lhs,const char * rhs)
operator ()	src/string_piece/string_piece.h	/^    bool operator()(const U& lhs, const T& rhs)$/;"	f	line:148	language:C++	struct:string_piece::CaseInSensitiveEqual	typeref:typename:bool	access:public	signature:(const U & lhs,const T & rhs)
operator ()	src/string_piece/string_piece.h	/^    bool operator()(const char* lhs, const T& rhs)$/;"	f	line:174	language:C++	struct:string_piece::CaseInSensitiveEqual	typeref:typename:bool	access:public	signature:(const char * lhs,const T & rhs)
operator ()	src/string_piece/string_piece.h	/^    bool operator()(const char* lhs, const T& rhs)$/;"	f	line:189	language:C++	struct:string_piece::CaseInSensitiveEqual	typeref:typename:bool	access:public	signature:(const char * lhs,const T & rhs)
operator ()	src/string_piece/string_piece.h	/^    bool operator()(const char* lhs, const T& rhs)$/;"	f	line:204	language:C++	struct:string_piece::CaseInSensitiveEqual	typeref:typename:bool	access:public	signature:(const char * lhs,const T & rhs)
operator ()	src/string_piece/string_piece.h	/^    bool operator()(const char* lhs, const T& rhs)$/;"	f	line:219	language:C++	struct:string_piece::CaseInSensitiveEqual	typeref:typename:bool	access:public	signature:(const char * lhs,const T & rhs)
operator ()	src/tests/type_traits.h	/^      constexpr value_type operator()() const { return value; }$/;"	f	line:72	language:C++	struct:std::integral_constant	typeref:typename:value_type	access:public	signature:() const
operator +	src/buffer/buffer.cpp	/^buffer_iter& buffer_iter::operator+(uint32_t forward_steps)$/;"	f	line:22	language:C++	class:buffer_iter	typeref:typename:buffer_iter &	signature:(uint32_t forward_steps)
operator +	src/buffer/buffer.h	/^    buffer_iter& operator+(uint32_t forward_steps);$/;"	p	line:53	language:C++	class:buffer_iter	typeref:typename:buffer_iter &	access:public	signature:(uint32_t forward_steps)
operator <	src/al/merge.h	/^    bool operator<(const MergeNode& node) const {return value < node.value;}$/;"	f	line:39	language:C++	struct:al::MergeNode	typeref:typename:bool	access:public	signature:(const MergeNode & node) const
operator <	src/buffer/buffer.cpp	/^bool buffer_iter::operator<(const buffer_iter& other)$/;"	f	line:69	language:C++	class:buffer_iter	typeref:typename:bool	signature:(const buffer_iter & other)
operator <	src/buffer/buffer.h	/^    bool operator<(const buffer_iter& other);$/;"	p	line:58	language:C++	class:buffer_iter	typeref:typename:bool	access:public	signature:(const buffer_iter & other)
operator <<	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    friend ostream& operator<< (ostream& os, const NewCreature& creature)$/;"	f	line:53	language:C++	namespace:design_patterns	typeref:typename:ostream &	signature:(ostream & os,const NewCreature & creature)
operator <<	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^    friend ostream& operator<< (ostream& os, const Creature& creature)$/;"	f	line:21	language:C++	namespace:design_patterns	typeref:typename:ostream &	signature:(ostream & os,const Creature & creature)
operator <<	src/design_patterns/prototype/prototype.h	/^    friend ostream& operator<< (ostream& os, const Contact& obj)$/;"	f	line:57	language:C++	namespace:design_patterns	typeref:typename:ostream &	signature:(ostream & os,const Contact & obj)
operator <<	src/design_patterns/prototype/prototype.h	/^    friend std::ostream& operator<< (std::ostream& os, const WorkAddress& addr)$/;"	f	line:29	language:C++	namespace:design_patterns	typeref:typename:std::ostream &	signature:(std::ostream & os,const WorkAddress & addr)
operator <<	src/easylogging/easylogging++.cc	/^MessageBuilder& MessageBuilder::operator<<(const wchar_t* msg) {$/;"	f	line:2512	language:C++	class:el::base::MessageBuilder	typeref:typename:MessageBuilder &	signature:(const wchar_t * msg)
operator <<	src/easylogging/easylogging++.cc	/^base::type::ostream_t& operator<<(base::type::ostream_t& os, const CommandLineArgs& c) {$/;"	f	line:1372	language:C++	namespace:el::base::utils	typeref:typename:base::type::ostream_t &	signature:(base::type::ostream_t & os,const CommandLineArgs & c)
operator <<	src/easylogging/easylogging++.cc	/^std::ostream& operator<<(std::ostream& os, const StackTrace& st) {$/;"	f	line:2780	language:C++	namespace:el::base::debug	typeref:typename:std::ostream &	signature:(std::ostream & os,const StackTrace & st)
operator <<	src/easylogging/easylogging++.cc	/^std::ostream& operator<<(std::ostream& ss, const StackTrace::StackTraceEntry& si) {$/;"	f	line:2774	language:C++	namespace:el::base::debug	typeref:typename:std::ostream &	signature:(std::ostream & ss,const StackTrace::StackTraceEntry & si)
operator <<	src/easylogging/easylogging++.h	/^  MessageBuilder& operator<<(const QHash<K, V>& hash_) {$/;"	f	line:3064	language:C++	class:el::base::MessageBuilder	typeref:typename:MessageBuilder &	access:public	signature:(const QHash<K,V> & hash_)
operator <<	src/easylogging/easylogging++.h	/^  MessageBuilder& operator<<(const QMap<K, V>& map_) {$/;"	f	line:3038	language:C++	class:el::base::MessageBuilder	typeref:typename:MessageBuilder &	access:public	signature:(const QMap<K,V> & map_)
operator <<	src/easylogging/easylogging++.h	/^  MessageBuilder& operator<<(const std::bitset<Size>& bitset_) {$/;"	f	line:2962	language:C++	class:el::base::MessageBuilder	typeref:typename:MessageBuilder &	access:public	signature:(const std::bitset<Size> & bitset_)
operator <<	src/easylogging/easylogging++.h	/^  MessageBuilder& operator<<(const std::pair<First, Second>& pair_) {$/;"	f	line:2953	language:C++	class:el::base::MessageBuilder	typeref:typename:MessageBuilder &	access:public	signature:(const std::pair<First,Second> & pair_)
operator <<	src/easylogging/easylogging++.h	/^  MessageBuilder& operator<<(const wchar_t* msg);$/;"	p	line:2894	language:C++	class:el::base::MessageBuilder	typeref:typename:MessageBuilder &	access:public	signature:(const wchar_t * msg)
operator <<	src/easylogging/easylogging++.h	/^  friend base::type::ostream_t& operator<<(base::type::ostream_t& os, const RegistryWithPred& sr/;"	f	line:1476	language:C++	namespace:el::base::utils	typeref:typename:base::type::ostream_t &	signature:(base::type::ostream_t & os,const RegistryWithPred & sr)
operator <<	src/easylogging/easylogging++.h	/^  friend inline el::base::type::ostream_t& operator<<(el::base::type::ostream_t& os, const Logga/;"	f	line:1567	language:C++	namespace:el	typeref:typename:el::base::type::ostream_t &	signature:(el::base::type::ostream_t & os,const Loggable & loggable)
operator <<	src/easylogging/easylogging++.h	/^  inline MessageBuilder& operator<<(QChar msg) {$/;"	f	line:3014	language:C++	class:el::base::MessageBuilder	typeref:typename:MessageBuilder &	access:public	signature:(QChar msg)
operator <<	src/easylogging/easylogging++.h	/^  inline MessageBuilder& operator<<(const QByteArray& msg) {$/;"	f	line:2992	language:C++	class:el::base::MessageBuilder	typeref:typename:MessageBuilder &	access:public	signature:(const QByteArray & msg)
operator <<	src/easylogging/easylogging++.h	/^  inline MessageBuilder& operator<<(const QLatin1String& msg) {$/;"	f	line:3018	language:C++	class:el::base::MessageBuilder	typeref:typename:MessageBuilder &	access:public	signature:(const QLatin1String & msg)
operator <<	src/easylogging/easylogging++.h	/^  inline MessageBuilder& operator<<(const QMultiHash<K, V>& multiHash_) {$/;"	f	line:3085	language:C++	class:el::base::MessageBuilder	typeref:typename:MessageBuilder &	access:public	signature:(const QMultiHash<K,V> & multiHash_)
operator <<	src/easylogging/easylogging++.h	/^  inline MessageBuilder& operator<<(const QMultiMap<K, V>& map_) {$/;"	f	line:3059	language:C++	class:el::base::MessageBuilder	typeref:typename:MessageBuilder &	access:public	signature:(const QMultiMap<K,V> & map_)
operator <<	src/easylogging/easylogging++.h	/^  inline MessageBuilder& operator<<(const QStringRef& msg) {$/;"	f	line:2995	language:C++	class:el::base::MessageBuilder	typeref:typename:MessageBuilder &	access:public	signature:(const QStringRef & msg)
operator <<	src/easylogging/easylogging++.h	/^  inline MessageBuilder& operator<<(const std::array<T, Size>& array) {$/;"	f	line:2970	language:C++	class:el::base::MessageBuilder	typeref:typename:MessageBuilder &	access:public	signature:(const std::array<T,Size> & array)
operator <<	src/easylogging/easylogging++.h	/^  inline MessageBuilder& operator<<(const std::priority_queue<T, Container, Comparator>& priorit/;"	f	line:2947	language:C++	class:el::base::MessageBuilder	typeref:typename:MessageBuilder &	access:public	signature:(const std::priority_queue<T,Container,Comparator> & priorityQueue_)
operator <<	src/easylogging/easylogging++.h	/^  inline MessageBuilder& operator<<(const std::stack<T, Container>& stack_) {$/;"	f	line:2941	language:C++	class:el::base::MessageBuilder	typeref:typename:MessageBuilder &	access:public	signature:(const std::stack<T,Container> & stack_)
operator <<	src/easylogging/easylogging++.h	/^  inline MessageBuilder& operator<<(const std::string& msg) {$/;"	f	line:2874	language:C++	class:el::base::MessageBuilder	typeref:typename:MessageBuilder &	access:public	signature:(const std::string & msg)
operator <<	src/easylogging/easylogging++.h	/^  inline MessageBuilder& operator<<(qint64 msg) {$/;"	f	line:2998	language:C++	class:el::base::MessageBuilder	typeref:typename:MessageBuilder &	access:public	signature:(qint64 msg)
operator <<	src/easylogging/easylogging++.h	/^  inline MessageBuilder& operator<<(quint64 msg) {$/;"	f	line:3006	language:C++	class:el::base::MessageBuilder	typeref:typename:MessageBuilder &	access:public	signature:(quint64 msg)
operator <<	src/easylogging/easylogging++.h	/^  inline MessageBuilder& operator<<(std::ostream& (*OStreamMani)(std::ostream&)) {$/;"	f	line:2896	language:C++	class:el::base::MessageBuilder	typeref:typename:MessageBuilder &	access:public	signature:(std::ostream & (* OStreamMani)(std::ostream &))
operator <<	src/easylogging/easylogging++.h	/^  inline NullWriter& operator<<(const T&) {$/;"	f	line:3179	language:C++	class:el::base::NullWriter	typeref:typename:NullWriter &	access:public	signature:(const T &)
operator <<	src/easylogging/easylogging++.h	/^  inline NullWriter& operator<<(std::ostream& (*)(std::ostream&)) {$/;"	f	line:3174	language:C++	class:el::base::NullWriter	typeref:typename:NullWriter &	access:public	signature:(std::ostream & (*)(std::ostream &))
operator <<	src/easylogging/easylogging++.h	/^  inline Writer& operator<<(const T& log) {$/;"	f	line:3207	language:C++	class:el::base::Writer	typeref:typename:Writer &	access:public	signature:(const T & log)
operator <<	src/easylogging/easylogging++.h	/^  inline Writer& operator<<(std::ostream& (*log)(std::ostream&)) {$/;"	f	line:3216	language:C++	class:el::base::Writer	typeref:typename:Writer &	access:public	signature:(std::ostream & (* log)(std::ostream &))
operator <<	src/string_piece/string_piece.h	/^std::ostream& operator<<(std::ostream& os, Range<T> str)$/;"	f	line:132	language:C++	namespace:string_piece	typeref:typename:std::ostream &	signature:(std::ostream & os,Range<T> str)
operator <=	src/al/merge.h	/^    bool operator<=(const MergeNode& node) const {return value <= node.value;}$/;"	f	line:40	language:C++	struct:al::MergeNode	typeref:typename:bool	access:public	signature:(const MergeNode & node) const
operator =	src/buffer/buffer.cpp	/^buffer& buffer::operator=(const buffer& other)$/;"	f	line:444	language:C++	class:buffer	typeref:typename:buffer &	signature:(const buffer & other)
operator =	src/buffer/buffer.cpp	/^buffer_chain& buffer_chain::operator= (const buffer_chain& other)$/;"	f	line:164	language:C++	class:buffer_chain	typeref:typename:buffer_chain &	signature:(const buffer_chain & other)
operator =	src/buffer/buffer.h	/^    buffer& operator=(const buffer& other);$/;"	p	line:171	language:C++	class:buffer	typeref:typename:buffer &	access:public	signature:(const buffer & other)
operator =	src/buffer/buffer.h	/^    buffer_chain& operator= (const buffer_chain& other);$/;"	p	line:89	language:C++	class:buffer_chain	typeref:typename:buffer_chain &	access:public	signature:(const buffer_chain & other)
operator =	src/buffer/buffer.h	/^    buffer_iter& operator=(const buffer_iter& other) = default;$/;"	p	line:43	language:C++	class:buffer_iter	typeref:typename:buffer_iter &	access:public	signature:(const buffer_iter & other)
operator =	src/bytebuf/bytebuf.h	/^    bytebuf& operator=(const bytebuf& other) = default;$/;"	p	line:23	language:C++	class:bytebuf	typeref:typename:bytebuf &	access:public	signature:(const bytebuf & other)
operator =	src/easylogging/easylogging++.cc	/^Configuration& Configuration::operator=(const Configuration& c) {$/;"	f	line:245	language:C++	class:el::Configuration	typeref:typename:Configuration &	signature:(const Configuration & c)
operator =	src/easylogging/easylogging++.cc	/^LogFormat& LogFormat::operator=(const LogFormat& logFormat) {$/;"	f	line:1470	language:C++	class:el::base::LogFormat	typeref:typename:LogFormat &	signature:(const LogFormat & logFormat)
operator =	src/easylogging/easylogging++.cc	/^Logger& Logger::operator=(const Logger& logger) {$/;"	f	line:633	language:C++	class:el::Logger	typeref:typename:Logger &	signature:(const Logger & logger)
operator =	src/easylogging/easylogging++.h	/^  AbstractRegistry& operator=(AbstractRegistry&& sr) {$/;"	f	line:1296	language:C++	class:el::base::utils::AbstractRegistry	typeref:typename:AbstractRegistry &	access:public	signature:(AbstractRegistry && sr)
operator =	src/easylogging/easylogging++.h	/^  Configuration& operator=(const Configuration& c);$/;"	p	line:1675	language:C++	class:el::Configuration	typeref:typename:Configuration &	access:public	signature:(const Configuration & c)
operator =	src/easylogging/easylogging++.h	/^  HitCounter& operator=(const HitCounter& hitCounter) {$/;"	f	line:2051	language:C++	class:el::base::HitCounter	typeref:typename:HitCounter &	access:public	signature:(const HitCounter & hitCounter)
operator =	src/easylogging/easylogging++.h	/^  LogFormat& operator=(const LogFormat& logFormat);$/;"	p	line:1580	language:C++	class:el::base::LogFormat	typeref:typename:LogFormat &	access:public	signature:(const LogFormat & logFormat)
operator =	src/easylogging/easylogging++.h	/^  Logger& operator=(const Logger& logger);$/;"	p	line:2216	language:C++	class:el::Logger	typeref:typename:Logger &	access:public	signature:(const Logger & logger)
operator =	src/easylogging/easylogging++.h	/^  NoCopy& operator=(const NoCopy&);$/;"	p	line:555	language:C++	class:el::base::NoCopy	typeref:typename:NoCopy &	access:private	signature:(const NoCopy &)
operator =	src/easylogging/easylogging++.h	/^  Registry& operator=(const Registry& sr) {$/;"	f	line:1387	language:C++	class:el::base::utils::Registry	typeref:typename:Registry &	access:public	signature:(const Registry & sr)
operator =	src/easylogging/easylogging++.h	/^  RegistryWithPred& operator=(const RegistryWithPred& sr) {$/;"	f	line:1468	language:C++	class:el::base::utils::RegistryWithPred	typeref:typename:RegistryWithPred &	access:public	signature:(const RegistryWithPred & sr)
operator =	src/easylogging/easylogging++.h	/^  StaticClass& operator=(const StaticClass&);$/;"	p	line:565	language:C++	class:el::base::StaticClass	typeref:typename:StaticClass &	access:private	signature:(const StaticClass &)
operator =	src/http/HttpHeaders.cpp	/^HttpHeaders& HttpHeaders::operator=(HttpHeaders&& other)$/;"	f	line:48	language:C++	class:http::HttpHeaders	typeref:typename:HttpHeaders &	signature:(HttpHeaders && other)
operator =	src/http/HttpHeaders.cpp	/^HttpHeaders& HttpHeaders::operator=(const HttpHeaders& other)$/;"	f	line:42	language:C++	class:http::HttpHeaders	typeref:typename:HttpHeaders &	signature:(const HttpHeaders & other)
operator =	src/http/HttpHeaders.h	/^    HttpHeaders& operator=(HttpHeaders&& other);$/;"	p	line:41	language:C++	class:http::HttpHeaders	typeref:typename:HttpHeaders &	access:public	signature:(HttpHeaders && other)
operator =	src/http/HttpHeaders.h	/^    HttpHeaders& operator=(const HttpHeaders& other);$/;"	p	line:40	language:C++	class:http::HttpHeaders	typeref:typename:HttpHeaders &	access:public	signature:(const HttpHeaders & other)
operator =	src/string_piece/string_piece.h	/^    Range &operator=(const Range &range) = default;$/;"	p	line:64	language:C++	class:string_piece::Range	typeref:typename:Range &	access:public	signature:(const Range & range)
operator ==	src/al/merge.h	/^    bool operator==(const MergeNode& node) const {return value == node.value;}$/;"	f	line:41	language:C++	struct:al::MergeNode	typeref:typename:bool	access:public	signature:(const MergeNode & node) const
operator ==	src/buffer/buffer.cpp	/^bool buffer_iter::operator==(const buffer_iter& other)$/;"	f	line:74	language:C++	class:buffer_iter	typeref:typename:bool	signature:(const buffer_iter & other)
operator ==	src/buffer/buffer.h	/^    bool operator==(const buffer_chain& other) const$/;"	f	line:126	language:C++	class:buffer_chain	typeref:typename:bool	access:public	signature:(const buffer_chain & other) const
operator ==	src/buffer/buffer.h	/^    bool operator==(const buffer_iter& other);$/;"	p	line:59	language:C++	class:buffer_iter	typeref:typename:bool	access:public	signature:(const buffer_iter & other)
operator ==	src/easylogging/easylogging++.cc	/^bool LogFormat::operator==(const LogFormat& other) {$/;"	f	line:1482	language:C++	class:el::base::LogFormat	typeref:typename:bool	signature:(const LogFormat & other)
operator ==	src/easylogging/easylogging++.h	/^  bool operator==(const AbstractRegistry<T_Ptr, Container>& other) {$/;"	f	line:1271	language:C++	class:el::base::utils::AbstractRegistry	typeref:typename:bool	access:public	signature:(const AbstractRegistry<T_Ptr,Container> & other)
operator ==	src/easylogging/easylogging++.h	/^  bool operator==(const LogFormat& other);$/;"	p	line:1582	language:C++	class:el::base::LogFormat	typeref:typename:bool	access:public	signature:(const LogFormat & other)
operator ==	src/easylogging/easylogging++.h	/^  bool operator==(const SubsecondPrecision& ssPrec) {$/;"	f	line:841	language:C++	class:el::base::SubsecondPrecision	typeref:typename:bool	access:public	signature:(const SubsecondPrecision & ssPrec)
operator ==	src/easylogging/easylogging++.h	/^  inline bool operator==(const char* formatSpecifier) {$/;"	f	line:1655	language:C++	class:el::CustomFormatSpecifier	typeref:typename:bool	access:public	signature:(const char * formatSpecifier)
operator ==	src/mysql_gtid/mysql_gtid.h	/^inline bool operator==(const MySQLUuid& left, const MySQLUuid& right) {$/;"	f	line:30	language:C++	typeref:typename:bool	signature:(const MySQLUuid & left,const MySQLUuid & right)
operator ==	src/string_piece/string_piece.h	/^    bool operator==(const Range& range) const$/;"	f	line:66	language:C++	class:string_piece::Range	typeref:typename:bool	access:public	signature:(const Range & range) const
operator >	src/al/merge.h	/^    bool operator>(const MergeNode& node) const {return value > node.value;}\/\/have to be const/;"	f	line:37	language:C++	struct:al::MergeNode	typeref:typename:bool	access:public	signature:(const MergeNode & node) const
operator >	src/buffer/buffer.cpp	/^bool buffer_iter::operator>(const buffer_iter& other)$/;"	f	line:57	language:C++	class:buffer_iter	typeref:typename:bool	signature:(const buffer_iter & other)
operator >	src/buffer/buffer.h	/^    bool operator>(const buffer_iter& other);$/;"	p	line:57	language:C++	class:buffer_iter	typeref:typename:bool	access:public	signature:(const buffer_iter & other)
operator >=	src/al/merge.h	/^    bool operator>=(const MergeNode& node) const {return value >= node.value;}$/;"	f	line:38	language:C++	struct:al::MergeNode	typeref:typename:bool	access:public	signature:(const MergeNode & node) const
operator HtmlElement	src/design_patterns/builder/builder.h	/^    operator HtmlElement() { return root; }$/;"	f	line:70	language:C++	struct:design_patterns::HtmlBuilder	access:public	signature:()
operator value_type	src/tests/type_traits.h	/^      constexpr operator value_type() const { return value; }$/;"	f	line:67	language:C++	struct:std::integral_constant	access:public	signature:() const
ostream_t	src/easylogging/easylogging++.h	/^typedef std::wostream ostream_t;$/;"	t	line:518	language:C++	namespace:el::base::type	typeref:typename:std::wostream
parentApplicationName	src/easylogging/easylogging++.h	/^  inline const std::string& parentApplicationName(void) const {$/;"	f	line:2236	language:C++	class:el::Logger	typeref:typename:const std::string &	access:public	signature:(void) const
parent_	src/buffer/buffer.h	/^    buffer*             parent_;$/;"	m	line:151	language:C++	class:buffer_chain	typeref:typename:buffer *	access:private
parse	src/http_parser/URLParser.cpp	/^void URLParser::parse()$/;"	f	line:33	language:C++	class:http::URLParser	typeref:typename:void	signature:()
parse	src/http_parser/URLParser.h	/^    void parse();$/;"	p	line:36	language:C++	class:http::URLParser	typeref:typename:void	access:private	signature:()
parse	src/mysql_gtid/mysql_gtid.cpp	/^int MySQLUuid::parse(const char *text, unsigned int len) {$/;"	f	line:21	language:C++	class:MySQLUuid	typeref:typename:int	signature:(const char * text,unsigned int len)
parse	src/mysql_gtid/mysql_gtid.h	/^  int parse(const char* text, unsigned int len);$/;"	p	line:26	language:C++	struct:MySQLUuid	typeref:typename:int	access:public	signature:(const char * text,unsigned int len)
parseFormat	src/easylogging/easylogging++.cc	/^char* DateTime::parseFormat(char* buf, std::size_t bufSz, const char* format, const struct tm* t/;"	f	line:1255	language:C++	class:el::base::utils::DateTime	typeref:typename:char *	signature:(char * buf,std::size_t bufSz,const char * format,const struct tm * tInfo,std::size_t msec,const base::SubsecondPrecision * ssPrec)
parseFormat	src/easylogging/easylogging++.h	/^  static char* parseFormat(char* buf, std::size_t bufSz, const char* format, const struct tm* tI/;"	p	line:1206	language:C++	class:el::base::utils::DateTime	typeref:typename:char *	access:private	signature:(char * buf,std::size_t bufSz,const char * format,const struct tm * tInfo,std::size_t msec,const base::SubsecondPrecision * ssPrec)
parseFromFile	src/easylogging/easylogging++.cc	/^bool Configurations::Parser::parseFromFile(const std::string& configurationFile, Configurations*/;"	f	line:411	language:C++	class:el::Configurations::Parser	typeref:typename:bool	signature:(const std::string & configurationFile,Configurations * sender,Configurations * base)
parseFromFile	src/easylogging/easylogging++.cc	/^bool Configurations::parseFromFile(const std::string& configurationFile, Configurations* base) {$/;"	f	line:294	language:C++	class:el::Configurations	typeref:typename:bool	signature:(const std::string & configurationFile,Configurations * base)
parseFromFile	src/easylogging/easylogging++.h	/^    static bool parseFromFile(const std::string& configurationFile, Configurations* sender,$/;"	p	line:1847	language:C++	class:el::Configurations::Parser	typeref:typename:bool	access:public	signature:(const std::string & configurationFile,Configurations * sender,Configurations * base=nullptr)
parseFromFile	src/easylogging/easylogging++.h	/^  bool parseFromFile(const std::string& configurationFile, Configurations* base = nullptr);$/;"	p	line:1751	language:C++	class:el::Configurations	typeref:typename:bool	access:public	signature:(const std::string & configurationFile,Configurations * base=nullptr)
parseFromFormat	src/easylogging/easylogging++.cc	/^void LogFormat::parseFromFormat(const base::type::string_t& userFormat) {$/;"	f	line:1489	language:C++	class:el::base::LogFormat	typeref:typename:void	signature:(const base::type::string_t & userFormat)
parseFromFormat	src/easylogging/easylogging++.h	/^  void parseFromFormat(const base::type::string_t& userFormat);$/;"	p	line:1586	language:C++	class:el::base::LogFormat	typeref:typename:void	access:public	signature:(const base::type::string_t & userFormat)
parseFromText	src/easylogging/easylogging++.cc	/^bool Configurations::Parser::parseFromText(const std::string& configurationsString, Configuratio/;"	f	line:429	language:C++	class:el::Configurations::Parser	typeref:typename:bool	signature:(const std::string & configurationsString,Configurations * sender,Configurations * base)
parseFromText	src/easylogging/easylogging++.cc	/^bool Configurations::parseFromText(const std::string& configurationsString, Configurations* base/;"	f	line:308	language:C++	class:el::Configurations	typeref:typename:bool	signature:(const std::string & configurationsString,Configurations * base)
parseFromText	src/easylogging/easylogging++.h	/^    static bool parseFromText(const std::string& configurationsString, Configurations* sender,$/;"	p	line:1860	language:C++	class:el::Configurations::Parser	typeref:typename:bool	access:public	signature:(const std::string & configurationsString,Configurations * sender,Configurations * base=nullptr)
parseFromText	src/easylogging/easylogging++.h	/^  bool parseFromText(const std::string& configurationsString, Configurations* base = nullptr);$/;"	p	line:1761	language:C++	class:el::Configurations	typeref:typename:bool	access:public	signature:(const std::string & configurationsString,Configurations * base=nullptr)
parseLine	src/easylogging/easylogging++.cc	/^bool Configurations::Parser::parseLine(std::string* line, std::string* currConfigStr, std::strin/;"	f	line:480	language:C++	class:el::Configurations::Parser	typeref:typename:bool	signature:(std::string * line,std::string * currConfigStr,std::string * currLevelStr,Level * currLevel,Configurations * conf)
parseLine	src/easylogging/easylogging++.h	/^    static bool parseLine(std::string* line, std::string* currConfigStr, std::string* currLevelS/;"	p	line:1869	language:C++	class:el::Configurations::Parser	typeref:typename:bool	access:private	signature:(std::string * line,std::string * currConfigStr,std::string * currLevelStr,Level * currLevel,Configurations * conf)
parse_gno	src/mysql_gtid/mysql_gtid.cpp	/^MySQLGno parse_gno(const char**s)$/;"	f	line:10	language:C++	typeref:typename:MySQLGno	signature:(const char ** s)
parse_gno	src/mysql_gtid/mysql_gtid.h	/^MySQLGno parse_gno(const char**s);$/;"	p	line:16	language:C++	typeref:typename:MySQLGno	signature:(const char ** s)
parse_url_char	src/http_parser/http_parser.cpp	/^parse_url_char(enum state s, const char ch)$/;"	f	line:493	language:C++	typeref:enum:state	file:	signature:(enum state s,const char ch)
path	src/http_parser/URLParser.h	/^    const const_string_piece_t& path() const {return path_;}$/;"	f	line:31	language:C++	class:http::URLParser	typeref:typename:const const_string_piece_t &	access:public	signature:() const
pathExists	src/easylogging/easylogging++.cc	/^bool File::pathExists(const char* path, bool considerFile) {$/;"	f	line:765	language:C++	class:el::base::utils::File	typeref:typename:bool	signature:(const char * path,bool considerFile)
pathExists	src/easylogging/easylogging++.h	/^  static bool pathExists(const char* path, bool considerFile = false);$/;"	p	line:1048	language:C++	class:el::base::utils::File	typeref:typename:bool	access:public	signature:(const char * path,bool considerFile=false)
path_	src/http_parser/URLParser.h	/^    const_string_piece_t        path_;$/;"	m	line:42	language:C++	class:http::URLParser	typeref:typename:const_string_piece_t	access:private
peek	src/buffer/buffer.cpp	/^int buffer::peek(std::vector<const buffer_iovec*> vec_out, uint32_t len, Iter start)$/;"	f	line:898	language:C++	class:buffer	typeref:typename:int	signature:(std::vector<const buffer_iovec * > vec_out,uint32_t len,Iter start)
peek	src/buffer/buffer.h	/^    int peek(std::vector<const buffer_iovec*> vec_out, uint32_t len, Iter start);$/;"	p	line:234	language:C++	class:buffer	typeref:typename:int	access:public	signature:(std::vector<const buffer_iovec * > vec_out,uint32_t len,Iter start)
peek	src/bytebuf/bytebuf.h	/^    template <typename T> void peek(T* dest);$/;"	p	line:34	language:C++	class:bytebuf	typeref:typename:void	access:public	signature:(T * dest)
peek	src/bytebuf/bytebuf.h	/^void bytebuf::peek(T* dest)$/;"	f	line:54	language:C++	class:bytebuf	typeref:typename:void	signature:(T * dest)
peekN	src/bytebuf/bytebuf.cpp	/^void bytebuf::peekN(void* dest, unsigned int n)$/;"	f	line:36	language:C++	class:bytebuf	typeref:typename:void	signature:(void * dest,unsigned int n)
peekN	src/bytebuf/bytebuf.h	/^    void peekN(void* dest, unsigned int n);$/;"	p	line:37	language:C++	class:bytebuf	typeref:typename:void	access:public	signature:(void * dest,unsigned int n)
performanceTracker	src/easylogging/easylogging++.h	/^  inline const base::PerformanceTracker* performanceTracker(void) const {$/;"	f	line:3419	language:C++	class:el::PerformanceTrackingData	typeref:typename:const base::PerformanceTracker *	access:public	signature:(void) const
performanceTracking	src/easylogging/easylogging++.cc	/^bool TypedConfigurations::performanceTracking(Level level) {$/;"	f	line:1658	language:C++	class:el::base::TypedConfigurations	typeref:typename:bool	signature:(Level level)
performanceTracking	src/easylogging/easylogging++.h	/^  bool performanceTracking(Level level = Level::Global);$/;"	p	line:1925	language:C++	class:el::base::TypedConfigurations	typeref:typename:bool	access:public	signature:(Level level=Level::Global)
performanceTrackingCallback	src/easylogging/easylogging++.h	/^  inline T* performanceTrackingCallback(const std::string& id) {$/;"	f	line:2669	language:C++	class:el::base::Storage	typeref:typename:T *	access:public	signature:(const std::string & id)
performanceTrackingCallback	src/easylogging/easylogging++.h	/^  static inline T* performanceTrackingCallback(const std::string& id) {$/;"	f	line:3728	language:C++	class:el::Helpers	typeref:typename:T *	access:public	signature:(const std::string & id)
pointer	src/string_piece/string_piece.h	/^    using pointer = typename it_traits::pointer;$/;"	t	line:45	language:C++	class:string_piece::Range	typeref:typename:it_traits::pointer	access:public
pop	src/al/MinHeap.h	/^    void pop(){container_.pop();}$/;"	f	line:40	language:C++	class:al::MinHeap	typeref:typename:void	access:public	signature:()
pop	src/easylogging/easylogging++.h	/^  inline void pop(void) {$/;"	f	line:2527	language:C++	class:el::base::AsyncLogQueue	typeref:typename:void	access:public	signature:(void)
populateAllLoggerIds	src/easylogging/easylogging++.cc	/^std::vector<std::string>* Loggers::populateAllLoggerIds(std::vector<std::string>* targetList) {$/;"	f	line:3018	language:C++	class:el::Loggers	typeref:typename:std::vector<std::string> *	signature:(std::vector<std::string> * targetList)
populateAllLoggerIds	src/easylogging/easylogging++.h	/^  static std::vector<std::string>* populateAllLoggerIds(std::vector<std::string>* targetList);$/;"	p	line:3832	language:C++	class:el::Loggers	typeref:typename:std::vector<std::string> *	access:public	signature:(std::vector<std::string> * targetList)
port	src/http_parser/URLParser.h	/^    uint16_t port() const {return port_;}$/;"	f	line:30	language:C++	class:http::URLParser	typeref:typename:uint16_t	access:public	signature:() const
port	src/http_parser/http_parser.h	/^  uint16_t port;                \/* Converted UF_PORT string *\/$/;"	m	line:364	language:C++	struct:http_parser_url	typeref:typename:uint16_t	access:public
port_	src/http_parser/URLParser.h	/^    uint16_t                    port_{0};$/;"	m	line:44	language:C++	class:http::URLParser	typeref:typename:uint16_t	access:private
preRollOutCallback	src/easylogging/easylogging++.h	/^  inline PreRollOutCallback& preRollOutCallback(void) {$/;"	f	line:2621	language:C++	class:el::base::Storage	typeref:typename:PreRollOutCallback &	access:public	signature:(void)
prepend	src/buffer/buffer.cpp	/^int buffer::prepend(const buffer& other, uint32_t data_len, Iter start)$/;"	f	line:620	language:C++	class:buffer	typeref:typename:int	signature:(const buffer & other,uint32_t data_len,Iter start)
prepend	src/buffer/buffer.h	/^    int prepend(const T& data);$/;"	p	line:202	language:C++	class:buffer	typeref:typename:int	access:public	signature:(const T & data)
prepend	src/buffer/buffer.h	/^    int prepend(const buffer& other, uint32_t data_len, Iter start);$/;"	p	line:205	language:C++	class:buffer	typeref:typename:int	access:public	signature:(const buffer & other,uint32_t data_len,Iter start)
prepend	src/buffer/buffer.h	/^int buffer::prepend(const T& data)$/;"	f	line:297	language:C++	class:buffer	typeref:typename:int	signature:(const T & data)
print	src/tests/tests.h	/^        void print(const ClassWithNestedClass &c) \/\/nested class can access the private fields/;"	f	line:352	language:C++	struct:ClassWithNestedClass::NestedClass	typeref:typename:void	access:public	signature:(const ClassWithNestedClass & c)
print_search_table	test/substring_search/kmp_test.cpp	/^void print_search_table(const std::vector<int>& search_table)$/;"	f	line:8	language:C++	namespace:kmp_test	typeref:typename:void	signature:(const std::vector<int> & search_table)
processDispatch	src/easylogging/easylogging++.cc	/^void Writer::processDispatch() {$/;"	f	line:2586	language:C++	class:el::base::Writer	typeref:typename:void	signature:()
processDispatch	src/easylogging/easylogging++.h	/^  void processDispatch();$/;"	p	line:3246	language:C++	class:el::base::Writer	typeref:typename:void	access:protected	signature:()
pullup	src/buffer/buffer.cpp	/^unsigned char* buffer::pullup(int64_t size)$/;"	f	line:628	language:C++	class:buffer	typeref:typename:unsigned char *	signature:(int64_t size)
pullup	src/buffer/buffer.h	/^    unsigned char* pullup(int64_t size);$/;"	p	line:213	language:C++	class:buffer	typeref:typename:unsigned char *	access:public	signature:(int64_t size)
push	src/al/MinHeap.h	/^    void push(const T& t) { container_.push(t);}$/;"	f	line:33	language:C++	class:al::MinHeap	typeref:typename:void	access:public	signature:(const T & t)
push	src/easylogging/easylogging++.h	/^  inline void push(const AsyncLogItem& item) {$/;"	f	line:2523	language:C++	class:el::base::AsyncLogQueue	typeref:typename:void	access:public	signature:(const AsyncLogItem & item)
push_back	src/buffer/buffer.cpp	/^buffer_chain* buffer::push_back(buffer_chain&& chain)$/;"	f	line:359	language:C++	class:buffer	typeref:typename:buffer_chain *	signature:(buffer_chain && chain)
push_back	src/buffer/buffer.cpp	/^buffer_chain* buffer::push_back(const buffer_chain& chain)$/;"	f	line:378	language:C++	class:buffer	typeref:typename:buffer_chain *	signature:(const buffer_chain & chain)
push_back	src/buffer/buffer.h	/^    buffer_chain* push_back(buffer_chain&& chain);$/;"	p	line:243	language:C++	class:buffer	typeref:typename:buffer_chain *	access:private	signature:(buffer_chain && chain)
push_back	src/buffer/buffer.h	/^    buffer_chain* push_back(const buffer_chain& chain);$/;"	p	line:244	language:C++	class:buffer	typeref:typename:buffer_chain *	access:private	signature:(const buffer_chain & chain)
push_front	src/buffer/buffer.cpp	/^buffer_chain* buffer::push_front(buffer_chain& chain)$/;"	f	line:405	language:C++	class:buffer	typeref:typename:buffer_chain *	signature:(buffer_chain & chain)
push_front	src/buffer/buffer.cpp	/^buffer_chain* buffer::push_front(buffer_chain&& chain)$/;"	f	line:396	language:C++	class:buffer	typeref:typename:buffer_chain *	signature:(buffer_chain && chain)
push_front	src/buffer/buffer.h	/^    buffer_chain* push_front(buffer_chain& chain);$/;"	p	line:246	language:C++	class:buffer	typeref:typename:buffer_chain *	access:private	signature:(buffer_chain & chain)
push_front	src/buffer/buffer.h	/^    buffer_chain* push_front(buffer_chain&& chain);$/;"	p	line:245	language:C++	class:buffer	typeref:typename:buffer_chain *	access:private	signature:(buffer_chain && chain)
qnxnto	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v	line:276	language:C++	typeref:typename:char const *
queries	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    signal<void(Query&)> queries;$/;"	m	line:31	language:C++	class:design_patterns::Game	typeref:typename:signal<void (Query &)>	access:public
query	src/http_parser/URLParser.h	/^    const const_string_piece_t& query() const {return query_;}$/;"	f	line:32	language:C++	class:http::URLParser	typeref:typename:const const_string_piece_t &	access:public	signature:() const
query_	src/http_parser/URLParser.h	/^    const_string_piece_t        query_;$/;"	m	line:43	language:C++	class:http::URLParser	typeref:typename:const_string_piece_t	access:private
rank	src/tests/type_traits.h	/^    struct rank$/;"	s	line:1366	language:C++	namespace:std	inherits:integral_constant<std::size_t,0>
rank	src/tests/type_traits.h	/^    struct rank<_Tp[]>$/;"	s	line:1374	language:C++	namespace:std	inherits:integral_constant<std::size_t,1+rank<_Tp>::value>
rank	src/tests/type_traits.h	/^    struct rank<_Tp[_Size]>$/;"	s	line:1370	language:C++	namespace:std	inherits:integral_constant<std::size_t,1+rank<_Tp>::value>
rd	src/easylogging/test_easylogging.h	/^static std::random_device rd;$/;"	v	line:38	language:C++	namespace:easylogging	typeref:typename:std::random_device
rd	test/buffer/buffer_test.cpp	/^static std::random_device rd;$/;"	v	line:48	language:C++	namespace:buffer_test	typeref:typename:std::random_device	file:
rd	test/substring_search/kmp_test.cpp	/^static std::random_device rd;$/;"	v	line:67	language:C++	namespace:kmp_test	typeref:typename:std::random_device	file:
read	src/bytebuf/bytebuf.h	/^    template <typename T> void read(T* dest);$/;"	p	line:33	language:C++	class:bytebuf	typeref:typename:void	access:public	signature:(T * dest)
read	src/bytebuf/bytebuf.h	/^void bytebuf::read(T* dest)$/;"	f	line:47	language:C++	class:bytebuf	typeref:typename:void	signature:(T * dest)
readIndex	src/bytebuf/bytebuf.h	/^    unsigned int readIndex() const {return readIndex_;}$/;"	f	line:30	language:C++	class:bytebuf	typeref:typename:unsigned int	access:public	signature:() const
readIndex_	src/bytebuf/bytebuf.h	/^    unsigned int        readIndex_;$/;"	m	line:14	language:C++	class:bytebuf	typeref:typename:unsigned int	access:private
readN	src/bytebuf/bytebuf.cpp	/^void bytebuf::readN(void* dest, unsigned int n)$/;"	f	line:30	language:C++	class:bytebuf	typeref:typename:void	signature:(void * dest,unsigned int n)
readN	src/bytebuf/bytebuf.h	/^    void readN(void* dest, unsigned int n);$/;"	p	line:36	language:C++	class:bytebuf	typeref:typename:void	access:public	signature:(void * dest,unsigned int n)
read_line	src/buffer/buffer.cpp	/^int64_t buffer::read_line(char * read_out, uint32_t n, buffer_eol_style eol_style)$/;"	f	line:747	language:C++	class:buffer	typeref:typename:int64_t	signature:(char * read_out,uint32_t n,buffer_eol_style eol_style)
read_line	src/buffer/buffer.h	/^    int64_t read_line(char * read_out, uint32_t n, buffer_eol_style eol_style);$/;"	p	line:222	language:C++	class:buffer	typeref:typename:int64_t	access:public	signature:(char * read_out,uint32_t n,buffer_eol_style eol_style)
read_section	src/mysql_gtid/mysql_gtid.cpp	/^int MySQLUuid::read_section(unsigned char **start, unsigned int section_len,$/;"	f	line:40	language:C++	class:MySQLUuid	typeref:typename:int	signature:(unsigned char ** start,unsigned int section_len,const char ** text)
read_section	src/mysql_gtid/mysql_gtid.h	/^  int read_section(unsigned char** start, unsigned int section_len, const char** text);$/;"	p	line:27	language:C++	struct:MySQLUuid	typeref:typename:int	access:public	signature:(unsigned char ** start,unsigned int section_len,const char ** text)
readableBytes	src/bytebuf/bytebuf.h	/^    unsigned int readableBytes() const {return writeIndex_ - readIndex_;}$/;"	f	line:26	language:C++	class:bytebuf	typeref:typename:unsigned int	access:public	signature:() const
recipes	src/utils/type_traits.h	/^namespace recipes$/;"	n	line:4	language:C++
recipes::AddLowConst	src/utils/type_traits.h	/^struct AddLowConst { };$/;"	s	line:39	language:C++	namespace:recipes
recipes::AddLowConst	src/utils/type_traits.h	/^struct AddLowConst<T*>$/;"	s	line:42	language:C++	namespace:recipes
recipes::AddLowConst	src/utils/type_traits.h	/^struct AddLowConst<const T*>$/;"	s	line:48	language:C++	namespace:recipes
recipes::AddLowConst::type	src/utils/type_traits.h	/^    using type = const T*;$/;"	t	line:44	language:C++	struct:recipes::AddLowConst	typeref:typename:const T *	access:public
recipes::AddLowConst::type	src/utils/type_traits.h	/^    using type = const T*;$/;"	t	line:50	language:C++	struct:recipes::AddLowConst	typeref:typename:const T *	access:public
recipes::AddLowConst_t	src/utils/type_traits.h	/^using AddLowConst_t = typename AddLowConst<T>::type;$/;"	t	line:54	language:C++	namespace:recipes	typeref:typename:AddLowConst<T>::type
recipes::IsCharPointer	src/utils/type_traits.h	/^struct IsCharPointer {};$/;"	s	line:7	language:C++	namespace:recipes
recipes::IsCharPointer	src/utils/type_traits.h	/^struct IsCharPointer<char*> {$/;"	s	line:10	language:C++	namespace:recipes
recipes::IsCharPointer	src/utils/type_traits.h	/^struct IsCharPointer<const char*> {$/;"	s	line:15	language:C++	namespace:recipes
recipes::IsCharPointer::const_type	src/utils/type_traits.h	/^  typedef int const_type;$/;"	t	line:16	language:C++	struct:recipes::IsCharPointer	typeref:typename:int	access:public
recipes::IsCharPointer::type	src/utils/type_traits.h	/^  typedef int type;$/;"	t	line:11	language:C++	struct:recipes::IsCharPointer	typeref:typename:int	access:public
recipes::IsCharPointer::type	src/utils/type_traits.h	/^  typedef int type;$/;"	t	line:17	language:C++	struct:recipes::IsCharPointer	typeref:typename:int	access:public
recipes::RemoveLowConst	src/utils/type_traits.h	/^struct RemoveLowConst { };$/;"	s	line:21	language:C++	namespace:recipes
recipes::RemoveLowConst	src/utils/type_traits.h	/^struct RemoveLowConst<T*>$/;"	s	line:24	language:C++	namespace:recipes
recipes::RemoveLowConst	src/utils/type_traits.h	/^struct RemoveLowConst<const T*>$/;"	s	line:30	language:C++	namespace:recipes
recipes::RemoveLowConst::type	src/utils/type_traits.h	/^    using type = T *;$/;"	t	line:32	language:C++	struct:recipes::RemoveLowConst	typeref:typename:T *	access:public
recipes::RemoveLowConst::type	src/utils/type_traits.h	/^    using type = T*;$/;"	t	line:26	language:C++	struct:recipes::RemoveLowConst	typeref:typename:T *	access:public
recipes::RemoveLowConst_t	src/utils/type_traits.h	/^using RemoveLowConst_t = typename RemoveLowConst<T>::type;$/;"	t	line:36	language:C++	namespace:recipes	typeref:typename:RemoveLowConst<T>::type
reconfigure	src/easylogging/easylogging++.cc	/^void Logger::reconfigure(void) {$/;"	f	line:666	language:C++	class:el::Logger	typeref:typename:void	signature:(void)
reconfigure	src/easylogging/easylogging++.h	/^  void reconfigure(void);$/;"	p	line:2230	language:C++	class:el::Logger	typeref:typename:void	access:public	signature:(void)
reconfigureAllLoggers	src/easylogging/easylogging++.cc	/^void Loggers::reconfigureAllLoggers(Level level, ConfigurationType configurationType,$/;"	f	line:2987	language:C++	class:el::Loggers	typeref:typename:void	signature:(Level level,ConfigurationType configurationType,const std::string & value)
reconfigureAllLoggers	src/easylogging/easylogging++.cc	/^void Loggers::reconfigureAllLoggers(const Configurations& configurations) {$/;"	f	line:2980	language:C++	class:el::Loggers	typeref:typename:void	signature:(const Configurations & configurations)
reconfigureAllLoggers	src/easylogging/easylogging++.h	/^  static inline void reconfigureAllLoggers(ConfigurationType configurationType, const std::strin/;"	f	line:3815	language:C++	class:el::Loggers	typeref:typename:void	access:public	signature:(ConfigurationType configurationType,const std::string & value)
reconfigureAllLoggers	src/easylogging/easylogging++.h	/^  static void reconfigureAllLoggers(Level level, ConfigurationType configurationType,$/;"	p	line:3819	language:C++	class:el::Loggers	typeref:typename:void	access:public	signature:(Level level,ConfigurationType configurationType,const std::string & value)
reconfigureAllLoggers	src/easylogging/easylogging++.h	/^  static void reconfigureAllLoggers(const Configurations& configurations);$/;"	p	line:3813	language:C++	class:el::Loggers	typeref:typename:void	access:public	signature:(const Configurations & configurations)
reconfigureLogger	src/easylogging/easylogging++.cc	/^Logger* Loggers::reconfigureLogger(Logger* logger, const Configurations& configurations) {$/;"	f	line:2959	language:C++	class:el::Loggers	typeref:typename:Logger *	signature:(Logger * logger,const Configurations & configurations)
reconfigureLogger	src/easylogging/easylogging++.cc	/^Logger* Loggers::reconfigureLogger(const std::string& identity, ConfigurationType configurationT/;"	f	line:2969	language:C++	class:el::Loggers	typeref:typename:Logger *	signature:(const std::string & identity,ConfigurationType configurationType,const std::string & value)
reconfigureLogger	src/easylogging/easylogging++.cc	/^Logger* Loggers::reconfigureLogger(const std::string& identity, const Configurations& configurat/;"	f	line:2965	language:C++	class:el::Loggers	typeref:typename:Logger *	signature:(const std::string & identity,const Configurations & configurations)
reconfigureLogger	src/easylogging/easylogging++.h	/^  static Logger* reconfigureLogger(Logger* logger, const Configurations& configurations);$/;"	p	line:3806	language:C++	class:el::Loggers	typeref:typename:Logger *	access:public	signature:(Logger * logger,const Configurations & configurations)
reconfigureLogger	src/easylogging/easylogging++.h	/^  static Logger* reconfigureLogger(const std::string& identity, ConfigurationType configurationT/;"	p	line:3810	language:C++	class:el::Loggers	typeref:typename:Logger *	access:public	signature:(const std::string & identity,ConfigurationType configurationType,const std::string & value)
reconfigureLogger	src/easylogging/easylogging++.h	/^  static Logger* reconfigureLogger(const std::string& identity, const Configurations& configurat/;"	p	line:3808	language:C++	class:el::Loggers	typeref:typename:Logger *	access:public	signature:(const std::string & identity,const Configurations & configurations)
reference	src/string_piece/string_piece.h	/^    using reference = typename it_traits::reference;$/;"	t	line:47	language:C++	class:string_piece::Range	typeref:typename:it_traits::reference	access:public
referenced_guid	src/guid_map/guid_hash_map.h	/^    guid_t 	referenced_guid;$/;"	m	line:20	language:C++	struct:guid_node	typeref:typename:guid_t	access:public
referenced_guid	src/guid_map/guid_hash_map.h	/^    guid_t referenced_guid;$/;"	m	line:30	language:C++	struct:guid_map_t	typeref:typename:guid_t	access:public
registerNew	src/easylogging/easylogging++.h	/^  virtual inline void registerNew(T_Ptr* ptr) ELPP_FINAL {$/;"	f	line:1508	language:C++	class:el::base::utils::RegistryWithPred	typeref:typename:void	access:protected	signature:(T_Ptr * ptr)
registerNew	src/easylogging/easylogging++.h	/^  virtual void registerNew(const T_Key& uniqKey, T_Ptr* ptr) ELPP_FINAL {$/;"	f	line:1410	language:C++	class:el::base::utils::Registry	typeref:typename:void	access:protected	signature:(const T_Key & uniqKey,T_Ptr * ptr)
registeredLoggers	src/easylogging/easylogging++.h	/^  inline base::RegisteredLoggers* registeredLoggers(void) const {$/;"	f	line:2575	language:C++	class:el::base::Storage	typeref:typename:base::RegisteredLoggers *	access:public	signature:(void) const
reinitDeepCopy	src/easylogging/easylogging++.h	/^  void reinitDeepCopy(const AbstractRegistry<T_Ptr, Container>& sr) {$/;"	f	line:1354	language:C++	class:el::base::utils::AbstractRegistry	typeref:typename:void	access:protected	signature:(const AbstractRegistry<T_Ptr,Container> & sr)
releaseDate	src/easylogging/easylogging++.cc	/^const std::string VersionInfo::releaseDate(void) {$/;"	f	line:3108	language:C++	class:el::VersionInfo	typeref:typename:const std::string	signature:(void)
releaseDate	src/easylogging/easylogging++.h	/^  static const std::string releaseDate(void);$/;"	p	line:3897	language:C++	class:el::VersionInfo	typeref:typename:const std::string	access:public	signature:(void)
releaseLock	src/easylogging/easylogging++.h	/^  virtual inline void releaseLock(void) ELPP_FINAL { m_mutex.unlock(); }$/;"	f	line:1004	language:C++	class:el::base::threading::ThreadSafe	typeref:typename:void	access:public	signature:(void)
remove	src/buffer/buffer.cpp	/^int64_t buffer::remove(\/*out*\/void* data, uint32_t data_len)$/;"	f	line:686	language:C++	class:buffer	typeref:typename:int64_t	signature:(void * data,uint32_t data_len)
remove	src/buffer/buffer.h	/^    int64_t remove(\/*out*\/void* data, uint32_t data_len);$/;"	p	line:218	language:C++	class:buffer	typeref:typename:int64_t	access:public	signature:(void * data,uint32_t data_len)
remove	src/easylogging/easylogging++.cc	/^bool RegisteredLoggers::remove(const std::string& id) {$/;"	f	line:1914	language:C++	class:el::base::RegisteredLoggers	typeref:typename:bool	signature:(const std::string & id)
remove	src/easylogging/easylogging++.h	/^  bool remove(const std::string& id);$/;"	p	line:2380	language:C++	class:el::base::RegisteredLoggers	typeref:typename:bool	access:public	signature:(const std::string & id)
remove	src/http/HttpHeaders.cpp	/^bool HttpHeaders::remove(HttpHeaderCode code)$/;"	f	line:142	language:C++	class:http::HttpHeaders	typeref:typename:bool	signature:(HttpHeaderCode code)
remove	src/http/HttpHeaders.cpp	/^bool HttpHeaders::remove(const_string_piece headerName)$/;"	f	line:114	language:C++	class:http::HttpHeaders	typeref:typename:bool	signature:(const_string_piece headerName)
remove	src/http/HttpHeaders.h	/^    bool remove(HttpHeaderCode code);$/;"	p	line:52	language:C++	class:http::HttpHeaders	typeref:typename:bool	access:public	signature:(HttpHeaderCode code)
remove	src/http/HttpHeaders.h	/^    bool remove(const_string_piece headerName);$/;"	p	line:51	language:C++	class:http::HttpHeaders	typeref:typename:bool	access:public	signature:(const_string_piece headerName)
removeFlag	src/easylogging/easylogging++.h	/^  inline void removeFlag(LoggingFlag flag) {$/;"	f	line:2597	language:C++	class:el::base::Storage	typeref:typename:void	access:public	signature:(LoggingFlag flag)
removeFlag	src/easylogging/easylogging++.h	/^  static inline void removeFlag(LoggingFlag flag) {$/;"	f	line:3847	language:C++	class:el::Loggers	typeref:typename:void	access:public	signature:(LoggingFlag flag)
removeFlag	src/easylogging/easylogging++.h	/^static inline void removeFlag(Enum e, base::type::EnumType* flag) {$/;"	f	line:884	language:C++	namespace:el::base::utils	typeref:typename:void	signature:(Enum e,base::type::EnumType * flag)
removeWithStdString	src/http/HttpHeaders.cpp	/^bool HttpHeaders::removeWithStdString(const std::string& headerName)$/;"	f	line:109	language:C++	class:http::HttpHeaders	typeref:typename:bool	signature:(const std::string & headerName)
removeWithStdString	src/http/HttpHeaders.h	/^    bool removeWithStdString(const std::string& headerName);$/;"	p	line:50	language:C++	class:http::HttpHeaders	typeref:typename:bool	access:public	signature:(const std::string & headerName)
remove_all_extents	src/tests/type_traits.h	/^    struct remove_all_extents$/;"	s	line:1858	language:C++	namespace:std
remove_all_extents	src/tests/type_traits.h	/^    struct remove_all_extents<_Tp[]>$/;"	s	line:1866	language:C++	namespace:std
remove_all_extents	src/tests/type_traits.h	/^    struct remove_all_extents<_Tp[_Size]>$/;"	s	line:1862	language:C++	namespace:std
remove_all_extents_t	src/tests/type_traits.h	/^    using remove_all_extents_t = typename remove_all_extents<_Tp>::type;$/;"	t	line:1876	language:C++	namespace:std	typeref:typename:remove_all_extents<_Tp>::type
remove_extent	src/tests/type_traits.h	/^    struct remove_extent$/;"	s	line:1845	language:C++	namespace:std
remove_extent	src/tests/type_traits.h	/^    struct remove_extent<_Tp[]>$/;"	s	line:1853	language:C++	namespace:std
remove_extent	src/tests/type_traits.h	/^    struct remove_extent<_Tp[_Size]>$/;"	s	line:1849	language:C++	namespace:std
remove_extent_t	src/tests/type_traits.h	/^    using remove_extent_t = typename remove_extent<_Tp>::type;$/;"	t	line:1872	language:C++	namespace:std	typeref:typename:remove_extent<_Tp>::type
remove_gno_interval	src/mysql_gtid/mysql_gtid.cpp	/^void MySQLGtidSet::remove_gno_interval(IntervalList::iterator it,$/;"	f	line:251	language:C++	class:MySQLGtidSet	typeref:typename:void	signature:(IntervalList::iterator it,MySQLGno begin,MySQLGno end)
remove_gno_interval	src/mysql_gtid/mysql_gtid.h	/^  void remove_gno_interval(IntervalList::iterator it, MySQLGno begin,$/;"	p	line:85	language:C++	class:MySQLGtidSet	typeref:typename:void	access:public	signature:(IntervalList::iterator it,MySQLGno begin,MySQLGno end)
remove_gno_intervals	src/mysql_gtid/mysql_gtid.cpp	/^void MySQLGtidSet::remove_gno_intervals(MySQLSidno sidno, const MySQLGtidSet& other)$/;"	f	line:240	language:C++	class:MySQLGtidSet	typeref:typename:void	signature:(MySQLSidno sidno,const MySQLGtidSet & other)
remove_gno_intervals	src/mysql_gtid/mysql_gtid.h	/^  void remove_gno_intervals(MySQLSidno sidno, const MySQLGtidSet& other);$/;"	p	line:83	language:C++	class:MySQLGtidSet	typeref:typename:void	access:public	signature:(MySQLSidno sidno,const MySQLGtidSet & other)
remove_gtid_set	src/mysql_gtid/mysql_gtid.cpp	/^void MySQLGtidSet::remove_gtid_set(const MySQLGtidSet& other)$/;"	f	line:227	language:C++	class:MySQLGtidSet	typeref:typename:void	signature:(const MySQLGtidSet & other)
remove_gtid_set	src/mysql_gtid/mysql_gtid.h	/^  void remove_gtid_set(const MySQLGtidSet &gtid_set);$/;"	p	line:82	language:C++	class:MySQLGtidSet	typeref:typename:void	access:public	signature:(const MySQLGtidSet & gtid_set)
remove_pointer	src/tests/type_traits.h	/^    struct remove_pointer$/;"	s	line:1891	language:C++	namespace:std	inherits:__remove_pointer_helper<_Tp,typenameremove_cv<_Tp>::type>
remove_pointer_t	src/tests/type_traits.h	/^    using remove_pointer_t = typename remove_pointer<_Tp>::type;$/;"	t	line:1913	language:C++	namespace:std	typeref:typename:remove_pointer<_Tp>::type
remove_reference_t	src/tests/type_traits.h	/^    using remove_reference_t = typename remove_reference<_Tp>::type;$/;"	t	line:1573	language:C++	namespace:std	typeref:typename:remove_reference<_Tp>::type
removed	src/guid_map/guid_hash_map.h	/^    bool 	removed;$/;"	m	line:21	language:C++	struct:guid_node	typeref:typename:bool	access:public
replaceAll	src/easylogging/easylogging++.cc	/^std::string& Str::replaceAll(std::string& str, char replaceWhat, char replaceWith) {$/;"	f	line:912	language:C++	class:el::base::utils::Str	typeref:typename:std::string &	signature:(std::string & str,char replaceWhat,char replaceWith)
replaceAll	src/easylogging/easylogging++.cc	/^std::string& Str::replaceAll(std::string& str, const std::string& replaceWhat,$/;"	f	line:917	language:C++	class:el::base::utils::Str	typeref:typename:std::string &	signature:(std::string & str,const std::string & replaceWhat,const std::string & replaceWith)
replaceAll	src/easylogging/easylogging++.h	/^  static std::string& replaceAll(std::string& str, char replaceWhat, char replaceWith);$/;"	p	line:1096	language:C++	class:el::base::utils::Str	typeref:typename:std::string &	access:public	signature:(std::string & str,char replaceWhat,char replaceWith)
replaceAll	src/easylogging/easylogging++.h	/^  static std::string& replaceAll(std::string& str, const std::string& replaceWhat,$/;"	p	line:1103	language:C++	class:el::base::utils::Str	typeref:typename:std::string &	access:public	signature:(std::string & str,const std::string & replaceWhat,const std::string & replaceWith)
replaceFirstWithEscape	src/easylogging/easylogging++.cc	/^void Str::replaceFirstWithEscape(base::type::string_t& str, const base::type::string_t& replaceW/;"	f	line:928	language:C++	class:el::base::utils::Str	typeref:typename:void	signature:(base::type::string_t & str,const base::type::string_t & replaceWhat,const base::type::string_t & replaceWith)
replaceFirstWithEscape	src/easylogging/easylogging++.cc	/^void Str::replaceFirstWithEscape(base::type::string_t& str, const base::type::string_t& replaceW/;"	f	line:942	language:C++	class:el::base::utils::Str	typeref:typename:void	signature:(base::type::string_t & str,const base::type::string_t & replaceWhat,const std::string & replaceWith)
replaceFirstWithEscape	src/easylogging/easylogging++.h	/^  static void replaceFirstWithEscape(base::type::string_t& str, const base::type::string_t& repl/;"	p	line:1106	language:C++	class:el::base::utils::Str	typeref:typename:void	access:public	signature:(base::type::string_t & str,const base::type::string_t & replaceWhat,const base::type::string_t & replaceWith)
replaceFirstWithEscape	src/easylogging/easylogging++.h	/^  static void replaceFirstWithEscape(base::type::string_t& str, const base::type::string_t& repl/;"	p	line:1109	language:C++	class:el::base::utils::Str	typeref:typename:void	access:public	signature:(base::type::string_t & str,const base::type::string_t & replaceWhat,const std::string & replaceWith)
reserveCustomFormatSpecifiers	src/easylogging/easylogging++.h	/^  static inline void reserveCustomFormatSpecifiers(std::size_t size) {$/;"	f	line:3759	language:C++	class:el::Helpers	typeref:typename:void	access:public	signature:(std::size_t size)
resetLocation	src/easylogging/easylogging++.h	/^  inline void resetLocation(const char* filename, base::type::LineNumber lineNumber) {$/;"	f	line:2064	language:C++	class:el::base::HitCounter	typeref:typename:void	access:public	signature:(const char * filename,base::type::LineNumber lineNumber)
resolveFilename	src/easylogging/easylogging++.cc	/^std::string TypedConfigurations::resolveFilename(const std::string& filename) {$/;"	f	line:1743	language:C++	class:el::base::TypedConfigurations	typeref:typename:std::string	signature:(const std::string & filename)
resolveFilename	src/easylogging/easylogging++.h	/^  std::string resolveFilename(const std::string& filename);$/;"	p	line:2021	language:C++	class:el::base::TypedConfigurations	typeref:typename:std::string	access:private	signature:(const std::string & filename)
resolveLoggerFormatSpec	src/easylogging/easylogging++.cc	/^void Logger::resolveLoggerFormatSpec(void) const {$/;"	f	line:713	language:C++	class:el::Logger	typeref:typename:void	signature:(void) const
resolveLoggerFormatSpec	src/easylogging/easylogging++.h	/^  void resolveLoggerFormatSpec(void) const;$/;"	p	line:2341	language:C++	class:el::Logger	typeref:typename:void	access:private	signature:(void) const
resolver	src/easylogging/easylogging++.h	/^  inline const FormatSpecifierValueResolver& resolver(void) const {$/;"	f	line:1652	language:C++	class:el::CustomFormatSpecifier	typeref:typename:const FormatSpecifierValueResolver &	access:public	signature:(void) const
result	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    int result;$/;"	m	line:20	language:C++	class:design_patterns::Query	typeref:typename:int	access:public
result_of	src/tests/type_traits.h	/^    struct result_of<_Functor(_ArgTypes...)>$/;"	s	line:2315	language:C++	namespace:std	inherits:__result_of_impl<is_member_object_pointer<typenameremove_reference<_Functor>::type>::value,is_member_function_pointer<typenameremove_reference<_Functor>::type>::value,_Functor,_ArgTypes...>::type
result_of_t	src/tests/type_traits.h	/^    using result_of_t = typename result_of<_Tp>::type;$/;"	t	line:2358	language:C++	namespace:std	typeref:typename:result_of<_Tp>::type
ret_type	src/design_patterns/basic/maybemonad.h	/^        using ret_type = typename std::remove_pointer<decltype (std::forward<Func>(f)(context_))/;"	t	line:28	language:C++	function:design_patterns::Maybe::With
reverse	src/al/MinHeap.h	/^    void reverse() {container_.reverse(container_.size());}$/;"	f	line:41	language:C++	class:al::MinHeap	typeref:typename:void	access:public	signature:()
root	src/design_patterns/builder/builder.h	/^    HtmlElement root;$/;"	m	line:72	language:C++	struct:design_patterns::HtmlBuilder	typeref:typename:HtmlElement	access:public
rtrim	src/easylogging/easylogging++.cc	/^std::string& Str::rtrim(std::string& str) {$/;"	f	line:893	language:C++	class:el::base::utils::Str	typeref:typename:std::string &	signature:(std::string & str)
rtrim	src/easylogging/easylogging++.h	/^  static std::string& rtrim(std::string& str);$/;"	p	line:1076	language:C++	class:el::base::utils::Str	typeref:typename:std::string &	access:public	signature:(std::string & str)
run	src/easylogging/easylogging++.cc	/^void AsyncDispatchWorker::run(void) {$/;"	f	line:2383	language:C++	class:el::base::AsyncDispatchWorker	typeref:typename:void	signature:(void)
run	src/easylogging/easylogging++.h	/^  void run(void);$/;"	p	line:2745	language:C++	class:el::base::AsyncDispatchWorker	typeref:typename:void	access:public	signature:(void)
run_tests	src/bytebuf/test.h	/^void run_tests(){$/;"	f	line:77	language:C++	namespace:bytebuf_test	typeref:typename:void	signature:()
run_tests	src/guid_map/test.h	/^void run_tests()$/;"	f	line:11	language:C++	namespace:guid_map_test	typeref:typename:void	signature:()
run_threads	src/design_patterns/basic/thread_safe_singleton.h	/^void run_threads(Func f)$/;"	f	line:162	language:C++	namespace:design_patterns	typeref:typename:void	signature:(Func f)
s_	src/utils/timer.h	/^    string s_;$/;"	m	line:24	language:C++	class:utils::timer	typeref:typename:string	access:private
s_body_identity	src/http_parser/http_parser.cpp	/^  , s_body_identity$/;"	e	line:357	language:C++	enum:state	file:	access:public
s_body_identity_eof	src/http_parser/http_parser.cpp	/^  , s_body_identity_eof$/;"	e	line:358	language:C++	enum:state	file:	access:public
s_chunk_data	src/http_parser/http_parser.cpp	/^  , s_chunk_data$/;"	e	line:353	language:C++	enum:state	file:	access:public
s_chunk_data_almost_done	src/http_parser/http_parser.cpp	/^  , s_chunk_data_almost_done$/;"	e	line:354	language:C++	enum:state	file:	access:public
s_chunk_data_done	src/http_parser/http_parser.cpp	/^  , s_chunk_data_done$/;"	e	line:355	language:C++	enum:state	file:	access:public
s_chunk_parameters	src/http_parser/http_parser.cpp	/^  , s_chunk_parameters$/;"	e	line:342	language:C++	enum:state	file:	access:public
s_chunk_size	src/http_parser/http_parser.cpp	/^  , s_chunk_size$/;"	e	line:341	language:C++	enum:state	file:	access:public
s_chunk_size_almost_done	src/http_parser/http_parser.cpp	/^  , s_chunk_size_almost_done$/;"	e	line:343	language:C++	enum:state	file:	access:public
s_chunk_size_start	src/http_parser/http_parser.cpp	/^  , s_chunk_size_start$/;"	e	line:340	language:C++	enum:state	file:	access:public
s_dead	src/http_parser/http_parser.cpp	/^  { s_dead = 1 \/* important that this is > 0 *\/$/;"	e	line:282	language:C++	enum:state	file:	access:public
s_header_almost_done	src/http_parser/http_parser.cpp	/^  , s_header_almost_done$/;"	e	line:338	language:C++	enum:state	file:	access:public
s_header_field	src/http_parser/http_parser.cpp	/^  , s_header_field$/;"	e	line:330	language:C++	enum:state	file:	access:public
s_header_field_start	src/http_parser/http_parser.cpp	/^  , s_header_field_start$/;"	e	line:329	language:C++	enum:state	file:	access:public
s_header_value	src/http_parser/http_parser.cpp	/^  , s_header_value$/;"	e	line:335	language:C++	enum:state	file:	access:public
s_header_value_discard_lws	src/http_parser/http_parser.cpp	/^  , s_header_value_discard_lws$/;"	e	line:333	language:C++	enum:state	file:	access:public
s_header_value_discard_ws	src/http_parser/http_parser.cpp	/^  , s_header_value_discard_ws$/;"	e	line:331	language:C++	enum:state	file:	access:public
s_header_value_discard_ws_almost_done	src/http_parser/http_parser.cpp	/^  , s_header_value_discard_ws_almost_done$/;"	e	line:332	language:C++	enum:state	file:	access:public
s_header_value_lws	src/http_parser/http_parser.cpp	/^  , s_header_value_lws$/;"	e	line:336	language:C++	enum:state	file:	access:public
s_header_value_start	src/http_parser/http_parser.cpp	/^  , s_header_value_start$/;"	e	line:334	language:C++	enum:state	file:	access:public
s_headers_almost_done	src/http_parser/http_parser.cpp	/^  , s_headers_almost_done$/;"	e	line:345	language:C++	enum:state	file:	access:public
s_headers_done	src/http_parser/http_parser.cpp	/^  , s_headers_done$/;"	e	line:346	language:C++	enum:state	file:	access:public
s_http_host	src/http_parser/http_parser.cpp	/^  , s_http_host$/;"	e	line:406	language:C++	enum:http_host_state	file:	access:public
s_http_host_dead	src/http_parser/http_parser.cpp	/^    s_http_host_dead = 1$/;"	e	line:401	language:C++	enum:http_host_state	file:	access:public
s_http_host_port	src/http_parser/http_parser.cpp	/^  , s_http_host_port$/;"	e	line:412	language:C++	enum:http_host_state	file:	access:public
s_http_host_port_start	src/http_parser/http_parser.cpp	/^  , s_http_host_port_start$/;"	e	line:411	language:C++	enum:http_host_state	file:	access:public
s_http_host_start	src/http_parser/http_parser.cpp	/^  , s_http_host_start$/;"	e	line:404	language:C++	enum:http_host_state	file:	access:public
s_http_host_v6	src/http_parser/http_parser.cpp	/^  , s_http_host_v6$/;"	e	line:407	language:C++	enum:http_host_state	file:	access:public
s_http_host_v6_end	src/http_parser/http_parser.cpp	/^  , s_http_host_v6_end$/;"	e	line:408	language:C++	enum:http_host_state	file:	access:public
s_http_host_v6_start	src/http_parser/http_parser.cpp	/^  , s_http_host_v6_start$/;"	e	line:405	language:C++	enum:http_host_state	file:	access:public
s_http_host_v6_zone	src/http_parser/http_parser.cpp	/^  , s_http_host_v6_zone$/;"	e	line:410	language:C++	enum:http_host_state	file:	access:public
s_http_host_v6_zone_start	src/http_parser/http_parser.cpp	/^  , s_http_host_v6_zone_start$/;"	e	line:409	language:C++	enum:http_host_state	file:	access:public
s_http_userinfo	src/http_parser/http_parser.cpp	/^  , s_http_userinfo$/;"	e	line:403	language:C++	enum:http_host_state	file:	access:public
s_http_userinfo_start	src/http_parser/http_parser.cpp	/^  , s_http_userinfo_start$/;"	e	line:402	language:C++	enum:http_host_state	file:	access:public
s_message_done	src/http_parser/http_parser.cpp	/^  , s_message_done$/;"	e	line:360	language:C++	enum:state	file:	access:public
s_req_fragment	src/http_parser/http_parser.cpp	/^  , s_req_fragment$/;"	e	line:315	language:C++	enum:state	file:	access:public
s_req_fragment_start	src/http_parser/http_parser.cpp	/^  , s_req_fragment_start$/;"	e	line:314	language:C++	enum:state	file:	access:public
s_req_http_H	src/http_parser/http_parser.cpp	/^  , s_req_http_H$/;"	e	line:317	language:C++	enum:state	file:	access:public
s_req_http_HT	src/http_parser/http_parser.cpp	/^  , s_req_http_HT$/;"	e	line:318	language:C++	enum:state	file:	access:public
s_req_http_HTT	src/http_parser/http_parser.cpp	/^  , s_req_http_HTT$/;"	e	line:319	language:C++	enum:state	file:	access:public
s_req_http_HTTP	src/http_parser/http_parser.cpp	/^  , s_req_http_HTTP$/;"	e	line:320	language:C++	enum:state	file:	access:public
s_req_http_I	src/http_parser/http_parser.cpp	/^  , s_req_http_I$/;"	e	line:321	language:C++	enum:state	file:	access:public
s_req_http_IC	src/http_parser/http_parser.cpp	/^  , s_req_http_IC$/;"	e	line:322	language:C++	enum:state	file:	access:public
s_req_http_dot	src/http_parser/http_parser.cpp	/^  , s_req_http_dot$/;"	e	line:324	language:C++	enum:state	file:	access:public
s_req_http_end	src/http_parser/http_parser.cpp	/^  , s_req_http_end$/;"	e	line:326	language:C++	enum:state	file:	access:public
s_req_http_major	src/http_parser/http_parser.cpp	/^  , s_req_http_major$/;"	e	line:323	language:C++	enum:state	file:	access:public
s_req_http_minor	src/http_parser/http_parser.cpp	/^  , s_req_http_minor$/;"	e	line:325	language:C++	enum:state	file:	access:public
s_req_http_start	src/http_parser/http_parser.cpp	/^  , s_req_http_start$/;"	e	line:316	language:C++	enum:state	file:	access:public
s_req_line_almost_done	src/http_parser/http_parser.cpp	/^  , s_req_line_almost_done$/;"	e	line:327	language:C++	enum:state	file:	access:public
s_req_method	src/http_parser/http_parser.cpp	/^  , s_req_method$/;"	e	line:303	language:C++	enum:state	file:	access:public
s_req_path	src/http_parser/http_parser.cpp	/^  , s_req_path$/;"	e	line:311	language:C++	enum:state	file:	access:public
s_req_query_string	src/http_parser/http_parser.cpp	/^  , s_req_query_string$/;"	e	line:313	language:C++	enum:state	file:	access:public
s_req_query_string_start	src/http_parser/http_parser.cpp	/^  , s_req_query_string_start$/;"	e	line:312	language:C++	enum:state	file:	access:public
s_req_schema	src/http_parser/http_parser.cpp	/^  , s_req_schema$/;"	e	line:305	language:C++	enum:state	file:	access:public
s_req_schema_slash	src/http_parser/http_parser.cpp	/^  , s_req_schema_slash$/;"	e	line:306	language:C++	enum:state	file:	access:public
s_req_schema_slash_slash	src/http_parser/http_parser.cpp	/^  , s_req_schema_slash_slash$/;"	e	line:307	language:C++	enum:state	file:	access:public
s_req_server	src/http_parser/http_parser.cpp	/^  , s_req_server$/;"	e	line:309	language:C++	enum:state	file:	access:public
s_req_server_start	src/http_parser/http_parser.cpp	/^  , s_req_server_start$/;"	e	line:308	language:C++	enum:state	file:	access:public
s_req_server_with_at	src/http_parser/http_parser.cpp	/^  , s_req_server_with_at$/;"	e	line:310	language:C++	enum:state	file:	access:public
s_req_spaces_before_url	src/http_parser/http_parser.cpp	/^  , s_req_spaces_before_url$/;"	e	line:304	language:C++	enum:state	file:	access:public
s_res_H	src/http_parser/http_parser.cpp	/^  , s_res_H$/;"	e	line:287	language:C++	enum:state	file:	access:public
s_res_HT	src/http_parser/http_parser.cpp	/^  , s_res_HT$/;"	e	line:288	language:C++	enum:state	file:	access:public
s_res_HTT	src/http_parser/http_parser.cpp	/^  , s_res_HTT$/;"	e	line:289	language:C++	enum:state	file:	access:public
s_res_HTTP	src/http_parser/http_parser.cpp	/^  , s_res_HTTP$/;"	e	line:290	language:C++	enum:state	file:	access:public
s_res_first_status_code	src/http_parser/http_parser.cpp	/^  , s_res_first_status_code$/;"	e	line:295	language:C++	enum:state	file:	access:public
s_res_http_dot	src/http_parser/http_parser.cpp	/^  , s_res_http_dot$/;"	e	line:292	language:C++	enum:state	file:	access:public
s_res_http_end	src/http_parser/http_parser.cpp	/^  , s_res_http_end$/;"	e	line:294	language:C++	enum:state	file:	access:public
s_res_http_major	src/http_parser/http_parser.cpp	/^  , s_res_http_major$/;"	e	line:291	language:C++	enum:state	file:	access:public
s_res_http_minor	src/http_parser/http_parser.cpp	/^  , s_res_http_minor$/;"	e	line:293	language:C++	enum:state	file:	access:public
s_res_line_almost_done	src/http_parser/http_parser.cpp	/^  , s_res_line_almost_done$/;"	e	line:299	language:C++	enum:state	file:	access:public
s_res_or_resp_H	src/http_parser/http_parser.cpp	/^  , s_res_or_resp_H$/;"	e	line:285	language:C++	enum:state	file:	access:public
s_res_status	src/http_parser/http_parser.cpp	/^  , s_res_status$/;"	e	line:298	language:C++	enum:state	file:	access:public
s_res_status_code	src/http_parser/http_parser.cpp	/^  , s_res_status_code$/;"	e	line:296	language:C++	enum:state	file:	access:public
s_res_status_start	src/http_parser/http_parser.cpp	/^  , s_res_status_start$/;"	e	line:297	language:C++	enum:state	file:	access:public
s_start_req	src/http_parser/http_parser.cpp	/^  , s_start_req$/;"	e	line:301	language:C++	enum:state	file:	access:public
s_start_req_or_res	src/http_parser/http_parser.cpp	/^  , s_start_req_or_res$/;"	e	line:284	language:C++	enum:state	file:	access:public
s_start_res	src/http_parser/http_parser.cpp	/^  , s_start_res$/;"	e	line:286	language:C++	enum:state	file:	access:public
safeDelete	src/easylogging/easylogging++.h	/^safeDelete(T*& pointer) {$/;"	f	line:857	language:C++	namespace:el::base::utils	typeref:typename:std::enable_if<std::is_pointer<T * >::value,void>::type	signature:(T * & pointer)
scheme	src/http_parser/URLParser.h	/^    const const_string_piece_t& scheme() const { return scheme_; }$/;"	f	line:28	language:C++	class:http::URLParser	typeref:typename:const const_string_piece_t &	access:public	signature:() const
scheme_	src/http_parser/URLParser.h	/^    const_string_piece_t        scheme_;$/;"	m	line:40	language:C++	class:http::URLParser	typeref:typename:const_string_piece_t	access:private
search	src/buffer/buffer.cpp	/^buffer_iter buffer::search(const char* what, uint32_t len, Iter start)$/;"	f	line:762	language:C++	class:buffer	typeref:typename:buffer_iter	signature:(const char * what,uint32_t len,Iter start)
search	src/buffer/buffer.h	/^    buffer_iter search(const char* what, uint32_t len, Iter start);$/;"	p	line:225	language:C++	class:buffer	typeref:typename:buffer_iter	access:public	signature:(const char * what,uint32_t len,Iter start)
search_eol	src/buffer/buffer.cpp	/^buffer_iter buffer::search_eol(uint32_t* eol_len_out, buffer_eol_style eol_style, Iter start)$/;"	f	line:846	language:C++	class:buffer	typeref:typename:buffer_iter	signature:(uint32_t * eol_len_out,buffer_eol_style eol_style,Iter start)
search_eol	src/buffer/buffer.h	/^    buffer_iter search_eol(uint32_t* eol_len_out, buffer_eol_style eol_style, Iter start);$/;"	p	line:229	language:C++	class:buffer	typeref:typename:buffer_iter	access:public	signature:(uint32_t * eol_len_out,buffer_eol_style eol_style,Iter start)
search_range	src/buffer/buffer.cpp	/^buffer_iter buffer::search_range(const char* what, uint32_t len, Iter start, Iter end)$/;"	f	line:767	language:C++	class:buffer	typeref:typename:buffer_iter	signature:(const char * what,uint32_t len,Iter start,Iter end)
search_range	src/buffer/buffer.h	/^    buffer_iter search_range(const char* what, uint32_t len, Iter start, Iter end);$/;"	p	line:226	language:C++	class:buffer	typeref:typename:buffer_iter	access:public	signature:(const char * what,uint32_t len,Iter start,Iter end)
set	src/easylogging/easylogging++.cc	/^void Configurations::set(Configuration* conf) {$/;"	f	line:357	language:C++	class:el::Configurations	typeref:typename:void	signature:(Configuration * conf)
set	src/easylogging/easylogging++.cc	/^void Configurations::set(Level level, ConfigurationType configurationType, const std::string& va/;"	f	line:349	language:C++	class:el::Configurations	typeref:typename:void	signature:(Level level,ConfigurationType configurationType,const std::string & value)
set	src/easylogging/easylogging++.h	/^  void set(Configuration* conf);$/;"	p	line:1794	language:C++	class:el::Configurations	typeref:typename:void	access:public	signature:(Configuration * conf)
set	src/easylogging/easylogging++.h	/^  void set(Level level, ConfigurationType configurationType, const std::string& value);$/;"	p	line:1790	language:C++	class:el::Configurations	typeref:typename:void	access:public	signature:(Level level,ConfigurationType configurationType,const std::string & value)
setApplicationArguments	src/easylogging/easylogging++.cc	/^void Storage::setApplicationArguments(int argc, char** argv) {$/;"	f	line:2156	language:C++	class:el::base::Storage	typeref:typename:void	signature:(int argc,char ** argv)
setApplicationArguments	src/easylogging/easylogging++.h	/^  inline void setApplicationArguments(int argc, const char** argv) {$/;"	f	line:2718	language:C++	class:el::base::Storage	typeref:typename:void	access:private	signature:(int argc,const char ** argv)
setApplicationArguments	src/easylogging/easylogging++.h	/^  void setApplicationArguments(int argc, char** argv);$/;"	p	line:2716	language:C++	class:el::base::Storage	typeref:typename:void	access:private	signature:(int argc,char ** argv)
setArgs	src/easylogging/easylogging++.cc	/^void CommandLineArgs::setArgs(int argc, char** argv) {$/;"	f	line:1321	language:C++	class:el::base::utils::CommandLineArgs	typeref:typename:void	signature:(int argc,char ** argv)
setArgs	src/easylogging/easylogging++.h	/^  inline void setArgs(int argc, const char** argv) {$/;"	f	line:1223	language:C++	class:el::base::utils::CommandLineArgs	typeref:typename:void	access:public	signature:(int argc,const char ** argv)
setArgs	src/easylogging/easylogging++.h	/^  static inline void setArgs(int argc, char** argv) {$/;"	f	line:3661	language:C++	class:el::Helpers	typeref:typename:void	access:public	signature:(int argc,char ** argv)
setArgs	src/easylogging/easylogging++.h	/^  static inline void setArgs(int argc, const char** argv) {$/;"	f	line:3665	language:C++	class:el::Helpers	typeref:typename:void	access:public	signature:(int argc,const char ** argv)
setArgs	src/easylogging/easylogging++.h	/^  void setArgs(int argc, char** argv);$/;"	p	line:1227	language:C++	class:el::base::utils::CommandLineArgs	typeref:typename:void	access:public	signature:(int argc,char ** argv)
setContinueRunning	src/easylogging/easylogging++.h	/^  void setContinueRunning(bool value) {$/;"	f	line:2747	language:C++	class:el::base::AsyncDispatchWorker	typeref:typename:void	access:public	signature:(bool value)
setCrashHandler	src/easylogging/easylogging++.h	/^  static inline void setCrashHandler(const el::base::debug::CrashHandler::Handler& crashHandler)/;"	f	line:3679	language:C++	class:el::Helpers	typeref:typename:void	access:public	signature:(const el::base::debug::CrashHandler::Handler & crashHandler)
setDefaultConfigurations	src/easylogging/easylogging++.cc	/^void Loggers::setDefaultConfigurations(const Configurations& configurations, bool reconfigureExi/;"	f	line:2997	language:C++	class:el::Loggers	typeref:typename:void	signature:(const Configurations & configurations,bool reconfigureExistingLoggers)
setDefaultConfigurations	src/easylogging/easylogging++.h	/^  inline void setDefaultConfigurations(const Configurations& configurations) {$/;"	f	line:2353	language:C++	class:el::base::RegisteredLoggers	typeref:typename:void	access:public	signature:(const Configurations & configurations)
setDefaultConfigurations	src/easylogging/easylogging++.h	/^  static void setDefaultConfigurations(const Configurations& configurations,$/;"	p	line:3822	language:C++	class:el::Loggers	typeref:typename:void	access:public	signature:(const Configurations & configurations,bool reconfigureExistingLoggers=false)
setDefaultLogBuilder	src/easylogging/easylogging++.cc	/^void Loggers::setDefaultLogBuilder(el::LogBuilderPtr& logBuilderPtr) {$/;"	f	line:2947	language:C++	class:el::Loggers	typeref:typename:void	signature:(el::LogBuilderPtr & logBuilderPtr)
setDefaultLogBuilder	src/easylogging/easylogging++.h	/^  inline void setDefaultLogBuilder(LogBuilderPtr& logBuilderPtr) {$/;"	f	line:2400	language:C++	class:el::base::RegisteredLoggers	typeref:typename:void	access:public	signature:(LogBuilderPtr & logBuilderPtr)
setDefaultLogBuilder	src/easylogging/easylogging++.h	/^  static void setDefaultLogBuilder(el::LogBuilderPtr& logBuilderPtr);$/;"	p	line:3785	language:C++	class:el::Loggers	typeref:typename:void	access:public	signature:(el::LogBuilderPtr & logBuilderPtr)
setDispatchAction	src/easylogging/easylogging++.h	/^  inline void setDispatchAction(base::DispatchAction dispatchAction) {$/;"	f	line:2169	language:C++	class:el::LogDispatchData	typeref:typename:void	access:public	signature:(base::DispatchAction dispatchAction)
setEnabled	src/easylogging/easylogging++.h	/^  inline void setEnabled(bool enabled) {$/;"	f	line:2148	language:C++	class:el::Callback	typeref:typename:void	access:public	signature:(bool enabled)
setFlags	src/easylogging/easylogging++.h	/^  inline void setFlags(base::type::EnumType flags) {$/;"	f	line:2609	language:C++	class:el::base::Storage	typeref:typename:void	access:public	signature:(base::type::EnumType flags)
setFromArgs	src/easylogging/easylogging++.cc	/^void VRegistry::setFromArgs(const base::utils::CommandLineArgs* commandLineArgs) {$/;"	f	line:2042	language:C++	class:el::base::VRegistry	typeref:typename:void	signature:(const base::utils::CommandLineArgs * commandLineArgs)
setFromArgs	src/easylogging/easylogging++.h	/^  void setFromArgs(const base::utils::CommandLineArgs* commandLineArgs);$/;"	p	line:2439	language:C++	class:el::base::VRegistry	typeref:typename:void	access:public	signature:(const base::utils::CommandLineArgs * commandLineArgs)
setFromBase	src/easylogging/easylogging++.cc	/^void Configurations::setFromBase(Configurations* base) {$/;"	f	line:316	language:C++	class:el::Configurations	typeref:typename:void	signature:(Configurations * base)
setFromBase	src/easylogging/easylogging++.h	/^  void setFromBase(Configurations* base);$/;"	p	line:1765	language:C++	class:el::Configurations	typeref:typename:void	access:public	signature:(Configurations * base)
setGlobally	src/easylogging/easylogging++.cc	/^void Configurations::setGlobally(ConfigurationType configurationType, const std::string& value,$/;"	f	line:559	language:C++	class:el::Configurations	typeref:typename:void	signature:(ConfigurationType configurationType,const std::string & value,bool includeGlobalLevel)
setGlobally	src/easylogging/easylogging++.h	/^  inline void setGlobally(ConfigurationType configurationType, const std::string& value) {$/;"	f	line:1805	language:C++	class:el::Configurations	typeref:typename:void	access:public	signature:(ConfigurationType configurationType,const std::string & value)
setGlobally	src/easylogging/easylogging++.h	/^  void setGlobally(ConfigurationType configurationType, const std::string& value, bool includeGl/;"	p	line:1886	language:C++	class:el::Configurations	typeref:typename:void	access:private	signature:(ConfigurationType configurationType,const std::string & value,bool includeGlobalLevel)
setHandler	src/easylogging/easylogging++.cc	/^void CrashHandler::setHandler(const Handler& cHandler) {$/;"	f	line:2899	language:C++	class:el::base::debug::CrashHandler	typeref:typename:void	signature:(const Handler & cHandler)
setHandler	src/easylogging/easylogging++.h	/^  void setHandler(const Handler& cHandler);$/;"	p	line:3614	language:C++	class:el::base::debug::CrashHandler	typeref:typename:void	access:public	signature:(const Handler & cHandler)
setLevel	src/easylogging/easylogging++.cc	/^void VRegistry::setLevel(base::type::VerboseLevel level) {$/;"	f	line:1942	language:C++	class:el::base::VRegistry	typeref:typename:void	signature:(base::type::VerboseLevel level)
setLevel	src/easylogging/easylogging++.h	/^  void setLevel(base::type::VerboseLevel level);$/;"	p	line:2420	language:C++	class:el::base::VRegistry	typeref:typename:void	access:public	signature:(base::type::VerboseLevel level)
setLogBuilder	src/easylogging/easylogging++.h	/^  inline void setLogBuilder(const LogBuilderPtr& logBuilder) {$/;"	f	line:2267	language:C++	class:el::Logger	typeref:typename:void	access:public	signature:(const LogBuilderPtr & logBuilder)
setLogMessage	src/easylogging/easylogging++.h	/^  inline void setLogMessage(LogMessage* logMessage) {$/;"	f	line:2166	language:C++	class:el::LogDispatchData	typeref:typename:void	access:public	signature:(LogMessage * logMessage)
setLoggingLevel	src/easylogging/easylogging++.h	/^  inline void setLoggingLevel(Level level) {$/;"	f	line:2637	language:C++	class:el::base::Storage	typeref:typename:void	access:public	signature:(Level level)
setLoggingLevel	src/easylogging/easylogging++.h	/^  static void setLoggingLevel(Level level) {$/;"	f	line:3879	language:C++	class:el::Loggers	typeref:typename:void	access:public	signature:(Level level)
setModules	src/easylogging/easylogging++.cc	/^void VRegistry::setModules(const char* modules) {$/;"	f	line:1950	language:C++	class:el::base::VRegistry	typeref:typename:void	signature:(const char * modules)
setModules	src/easylogging/easylogging++.h	/^  void setModules(const char* modules);$/;"	p	line:2431	language:C++	class:el::base::VRegistry	typeref:typename:void	access:public	signature:(const char * modules)
setParentApplicationName	src/easylogging/easylogging++.h	/^  inline void setParentApplicationName(const std::string& parentApplicationName) {$/;"	f	line:2240	language:C++	class:el::Logger	typeref:typename:void	access:public	signature:(const std::string & parentApplicationName)
setPreRollOutCallback	src/easylogging/easylogging++.h	/^  inline void setPreRollOutCallback(const PreRollOutCallback& callback) {$/;"	f	line:2613	language:C++	class:el::base::Storage	typeref:typename:void	access:public	signature:(const PreRollOutCallback & callback)
setRemainingToDefault	src/easylogging/easylogging++.cc	/^void Configurations::setRemainingToDefault(void) {$/;"	f	line:388	language:C++	class:el::Configurations	typeref:typename:void	signature:(void)
setRemainingToDefault	src/easylogging/easylogging++.h	/^  void setRemainingToDefault(void);$/;"	p	line:1832	language:C++	class:el::Configurations	typeref:typename:void	access:public	signature:(void)
setStorage	src/easylogging/easylogging++.h	/^  static inline void setStorage(base::type::StoragePointer storage) {$/;"	f	line:3653	language:C++	class:el::Helpers	typeref:typename:void	access:public	signature:(base::type::StoragePointer storage)
setThreadName	src/easylogging/easylogging++.h	/^  inline void setThreadName(const std::string& name) {$/;"	f	line:2675	language:C++	class:el::base::Storage	typeref:typename:void	access:public	signature:(const std::string & name)
setThreadName	src/easylogging/easylogging++.h	/^  static inline void setThreadName(const std::string& name) {$/;"	f	line:3669	language:C++	class:el::Helpers	typeref:typename:void	access:public	signature:(const std::string & name)
setToDefault	src/easylogging/easylogging++.cc	/^void Configurations::setToDefault(void) {$/;"	f	line:364	language:C++	class:el::Configurations	typeref:typename:void	signature:(void)
setToDefault	src/easylogging/easylogging++.h	/^  void setToDefault(void);$/;"	p	line:1823	language:C++	class:el::Configurations	typeref:typename:void	access:public	signature:(void)
setVModules	src/easylogging/easylogging++.cc	/^void Loggers::setVModules(const char* modules) {$/;"	f	line:3092	language:C++	class:el::Loggers	typeref:typename:void	signature:(const char * modules)
setVModules	src/easylogging/easylogging++.h	/^  static void setVModules(const char* modules);$/;"	p	line:3887	language:C++	class:el::Loggers	typeref:typename:void	access:public	signature:(const char * modules)
setValue	src/easylogging/easylogging++.h	/^  inline void setValue(const std::string& value) {$/;"	f	line:1701	language:C++	class:el::Configuration	typeref:typename:void	access:public	signature:(const std::string & value)
setValue	src/easylogging/easylogging++.h	/^  void setValue(Level level, const Conf_T& value, std::unordered_map<Level, Conf_T>* confMap,$/;"	f	line:1996	language:C++	class:el::base::TypedConfigurations	typeref:typename:void	access:private	signature:(Level level,const Conf_T & value,std::unordered_map<Level,Conf_T> * confMap,bool includeGlobalLevel=true)
setVerboseLevel	src/easylogging/easylogging++.cc	/^void Loggers::setVerboseLevel(base::type::VerboseLevel level) {$/;"	f	line:3084	language:C++	class:el::Loggers	typeref:typename:void	signature:(base::type::VerboseLevel level)
setVerboseLevel	src/easylogging/easylogging++.h	/^  static void setVerboseLevel(base::type::VerboseLevel level);$/;"	p	line:3883	language:C++	class:el::Loggers	typeref:typename:void	access:public	signature:(base::type::VerboseLevel level)
set_misalign	src/buffer/buffer.h	/^    int64_t set_misalign(uint32_t misalign)$/;"	f	line:106	language:C++	class:buffer_chain	typeref:typename:int64_t	access:public	signature:(uint32_t misalign)
set_next_chain	src/buffer/buffer.h	/^    void set_next_chain(buffer_chain* next) {next_ = next;}$/;"	f	line:119	language:C++	class:buffer_chain	typeref:typename:void	access:public	signature:(buffer_chain * next)
set_offset	src/buffer/buffer.cpp	/^int buffer_chain::set_offset(uint32_t offset)$/;"	f	line:224	language:C++	class:buffer_chain	typeref:typename:int	signature:(uint32_t offset)
set_offset	src/buffer/buffer.h	/^    int set_offset(uint32_t offset);$/;"	p	line:90	language:C++	class:buffer_chain	typeref:typename:int	access:public	signature:(uint32_t offset)
setupLogger	src/easylogging/test_easylogging.h	/^void setupLogger()$/;"	f	line:11	language:C++	namespace:easylogging	typeref:typename:void	signature:()
sid	src/mysql_gtid/mysql_gtid.h	/^    MySQLSid sid;$/;"	m	line:50	language:C++	struct:MySQLSidMap::Node	typeref:typename:MySQLSid	access:public
sid_to_sidno	src/mysql_gtid/mysql_gtid.cpp	/^MySQLSidno MySQLSidMap::sid_to_sidno(const MySQLSid& sid) const$/;"	f	line:85	language:C++	class:MySQLSidMap	typeref:typename:MySQLSidno	signature:(const MySQLSid & sid) const
sid_to_sidno	src/mysql_gtid/mysql_gtid.h	/^  MySQLSidno sid_to_sidno(const MySQLSid& sid) const;$/;"	p	line:56	language:C++	class:MySQLSidMap	typeref:typename:MySQLSidno	access:public	signature:(const MySQLSid & sid) const
sidno	src/mysql_gtid/mysql_gtid.h	/^    MySQLSidno sidno;$/;"	m	line:49	language:C++	struct:MySQLSidMap::Node	typeref:typename:MySQLSidno	access:public
sidno	src/mysql_gtid/mysql_gtid.h	/^  MySQLSidno sidno;$/;"	m	line:43	language:C++	struct:MySQLGtid	typeref:typename:MySQLSidno	access:public
sidno_to_sid	src/mysql_gtid/mysql_gtid.cpp	/^const MySQLSid& MySQLSidMap::sidno_to_sid(MySQLSidno sidno) const$/;"	f	line:89	language:C++	class:MySQLSidMap	typeref:typename:const MySQLSid &	signature:(MySQLSidno sidno) const
sidno_to_sid	src/mysql_gtid/mysql_gtid.h	/^  const MySQLSid& sidno_to_sid(MySQLSidno sidno) const;$/;"	p	line:57	language:C++	class:MySQLSidMap	typeref:typename:const MySQLSid &	access:public	signature:(MySQLSidno sidno) const
size	src/al/MinHeap.h	/^    SizeType size() const {return container_.size();}$/;"	f	line:29	language:C++	class:al::MinHeap	typeref:typename:SizeType	access:public	signature:() const
size	src/buffer/buffer.h	/^    uint32_t size() const { return off_ - misalign_; }$/;"	f	line:92	language:C++	class:buffer_chain	typeref:typename:uint32_t	access:public	signature:() const
size	src/easylogging/easylogging++.cc	/^std::size_t CommandLineArgs::size(void) const {$/;"	f	line:1368	language:C++	class:el::base::utils::CommandLineArgs	typeref:typename:std::size_t	signature:(void) const
size	src/easylogging/easylogging++.h	/^  std::size_t size(void) const;$/;"	p	line:1238	language:C++	class:el::base::utils::CommandLineArgs	typeref:typename:std::size_t	access:public	signature:(void) const
size	src/easylogging/easylogging++.h	/^  virtual inline std::size_t size(void) const ELPP_FINAL {$/;"	f	line:1335	language:C++	class:el::base::utils::AbstractRegistry	typeref:typename:std::size_t	access:public	signature:(void) const
size	src/http/HttpHeaders.h	/^    size_t size() const {return codes_.size() - codes_deleted_;}$/;"	f	line:44	language:C++	class:http::HttpHeaders	typeref:typename:size_t	access:public	signature:() const
size	src/string_piece/string_piece.h	/^    constexpr size_type size() const $/;"	f	line:106	language:C++	class:string_piece::Range	typeref:typename:size_type	access:public	signature:() const
size_	src/design_patterns/basic/SOLID_Open_Close.h	/^    Size size_;$/;"	m	line:23	language:C++	class:design_patterns::Product	typeref:typename:Size	access:private
size_	src/design_patterns/basic/SOLID_Open_Close.h	/^    Size size_;$/;"	m	line:98	language:C++	class:design_patterns::SizeSpec	typeref:typename:Size	access:public
size_	src/tests/tests.h	/^        size_t size_;$/;"	m	line:311	language:C++	struct:intrusive_using_base_hook_test::MyNode	typeref:typename:size_t	access:public
size_	src/tests/tests.h	/^    size_t size_;$/;"	m	line:196	language:C++	struct:Point	typeref:typename:size_t	access:public
size_	src/tests/tests.h	/^    size_t size_;$/;"	m	line:230	language:C++	struct:Point2	typeref:typename:size_t	access:public
size_	src/tests/tests.h	/^    size_t size_;$/;"	m	line:288	language:C++	struct:Node	typeref:typename:size_t	access:public
size_type	src/string_piece/string_piece.h	/^    using size_type = std::size_t;$/;"	t	line:51	language:C++	class:string_piece::Range	typeref:typename:std::size_t	access:public
sort_guid_map	src/guid_map/guid_hash_map.h	/^std::vector<guid_map_t> sort_guid_map(guid_hash_map& guid_hash_map)$/;"	f	line:33	language:C++	typeref:typename:std::vector<guid_map_t>	signature:(guid_hash_map & guid_hash_map)
start	src/easylogging/easylogging++.cc	/^void AsyncDispatchWorker::start(void) {$/;"	f	line:2322	language:C++	class:el::base::AsyncDispatchWorker	typeref:typename:void	signature:(void)
start	src/easylogging/easylogging++.h	/^  virtual void start() = 0;$/;"	p	line:2545	language:C++	class:el::base::IWorker	typeref:typename:void	access:public	signature:()
start	src/easylogging/easylogging++.h	/^  virtual void start(void);$/;"	p	line:2743	language:C++	class:el::base::AsyncDispatchWorker	typeref:typename:void	access:public	signature:(void)
startTime	src/easylogging/easylogging++.h	/^  inline const struct timeval* startTime(void) const;$/;"	p	line:3416	language:C++	class:el::PerformanceTrackingData	typeref:typename:const struct timeval *	access:public	signature:(void) const
startTime	src/easylogging/easylogging++.h	/^inline const struct timeval* PerformanceTrackingData::startTime() const {$/;"	f	line:3547	language:C++	class:el::PerformanceTrackingData	typeref:typename:const struct timeval *	signature:() const
start_state	src/http_parser/http_parser.cpp	/^#define start_state /;"	d	line:451	language:C++	file:
startsWith	src/easylogging/easylogging++.cc	/^bool Str::startsWith(const std::string& str, const std::string& start) {$/;"	f	line:904	language:C++	class:el::base::utils::Str	typeref:typename:bool	signature:(const std::string & str,const std::string & start)
startsWith	src/easylogging/easylogging++.h	/^  static bool startsWith(const std::string& str, const std::string& start);$/;"	p	line:1083	language:C++	class:el::base::utils::Str	typeref:typename:bool	access:public	signature:(const std::string & str,const std::string & start)
state	src/http_parser/http_parser.cpp	/^enum state$/;"	g	line:281	language:C++	file:
state	src/http_parser/http_parser.h	/^  unsigned int state : 7;        \/* enum state from http_parser.c *\/$/;"	m	line:299	language:C++	struct:http_parser	typeref:typename:unsigned int:7	access:public
status_code	src/http_parser/http_parser.h	/^  unsigned int status_code : 16; \/* responses only *\/$/;"	m	line:310	language:C++	struct:http_parser	typeref:typename:unsigned int:16	access:public
std	src/easylogging/easylogging++.h	/^namespace std {$/;"	n	line:593	language:C++
std	src/tests/type_traits.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n	line:45	language:C++
std	src/tests/type_traits.h	/^namespace std$/;"	n	line:35	language:C++
std::_GLIBCXX_DEPRECATED	src/tests/type_traits.h	/^    { } _GLIBCXX_DEPRECATED;$/;"	v	line:1336	language:C++	namespace:std	typeref:struct:std::has_trivial_default_constructor
std::_GLIBCXX_DEPRECATED	src/tests/type_traits.h	/^    { } _GLIBCXX_DEPRECATED;$/;"	v	line:1342	language:C++	namespace:std	typeref:struct:std::has_trivial_copy_constructor
std::_GLIBCXX_DEPRECATED	src/tests/type_traits.h	/^    { } _GLIBCXX_DEPRECATED;$/;"	v	line:1348	language:C++	namespace:std	typeref:struct:std::has_trivial_copy_assign
std::_Require	src/tests/type_traits.h	/^    using _Require = typename enable_if<__and_<_Cond...>::value>::type;$/;"	t	line:2064	language:C++	namespace:std	typeref:typename:enable_if<__and_<_Cond...>::value>::type
std::__add_lvalue_reference_helper	src/tests/type_traits.h	/^    struct __add_lvalue_reference_helper$/;"	s	line:1543	language:C++	namespace:std
std::__add_lvalue_reference_helper	src/tests/type_traits.h	/^    struct __add_lvalue_reference_helper<_Tp, true>$/;"	s	line:1547	language:C++	namespace:std
std::__add_lvalue_reference_helper::type	src/tests/type_traits.h	/^    { typedef _Tp   type; };$/;"	t	line:1544	language:C++	struct:std::__add_lvalue_reference_helper	typeref:typename:_Tp	access:public
std::__add_lvalue_reference_helper::type	src/tests/type_traits.h	/^    { typedef _Tp&   type; };$/;"	t	line:1548	language:C++	struct:std::__add_lvalue_reference_helper	typeref:typename:_Tp &	access:public
std::__add_pointer_helper	src/tests/type_traits.h	/^    struct __add_pointer_helper$/;"	s	line:1898	language:C++	namespace:std
std::__add_pointer_helper	src/tests/type_traits.h	/^    struct __add_pointer_helper<_Tp, true>$/;"	s	line:1902	language:C++	namespace:std
std::__add_pointer_helper::type	src/tests/type_traits.h	/^    { typedef _Tp     type; };$/;"	t	line:1899	language:C++	struct:std::__add_pointer_helper	typeref:typename:_Tp	access:public
std::__add_pointer_helper::type	src/tests/type_traits.h	/^    { typedef typename remove_reference<_Tp>::type*     type; };$/;"	t	line:1903	language:C++	struct:std::__add_pointer_helper	typeref:typename:remove_reference<_Tp>::type *	access:public
std::__add_rvalue_reference_helper	src/tests/type_traits.h	/^    struct __add_rvalue_reference_helper$/;"	s	line:1557	language:C++	namespace:std
std::__add_rvalue_reference_helper	src/tests/type_traits.h	/^    struct __add_rvalue_reference_helper<_Tp, true>$/;"	s	line:1561	language:C++	namespace:std
std::__add_rvalue_reference_helper::type	src/tests/type_traits.h	/^    { typedef _Tp   type; };$/;"	t	line:1558	language:C++	struct:std::__add_rvalue_reference_helper	typeref:typename:_Tp	access:public
std::__add_rvalue_reference_helper::type	src/tests/type_traits.h	/^    { typedef _Tp&&   type; };$/;"	t	line:1562	language:C++	struct:std::__add_rvalue_reference_helper	typeref:typename:_Tp &&	access:public
std::__aligned_storage_msa	src/tests/type_traits.h	/^    struct __aligned_storage_msa$/;"	s	line:1921	language:C++	namespace:std
std::__aligned_storage_msa::__type	src/tests/type_traits.h	/^      union __type$/;"	u	line:1923	language:C++	struct:std::__aligned_storage_msa	access:public
std::__aligned_storage_msa::__type::__align	src/tests/type_traits.h	/^	struct __attribute__((__aligned__)) { } __align; $/;"	m	line:1926	language:C++	union:std::__aligned_storage_msa::__type	typeref:struct:std::__aligned_storage_msa::__type::__anon5513870c0108	access:public
std::__aligned_storage_msa::__type::__anon5513870c0108	src/tests/type_traits.h	/^	struct __attribute__((__aligned__)) { } __align; $/;"	s	line:1926	language:C++	union:std::__aligned_storage_msa::__type	access:public
std::__aligned_storage_msa::__type::__data	src/tests/type_traits.h	/^	unsigned char __data[_Len];$/;"	m	line:1925	language:C++	union:std::__aligned_storage_msa::__type	typeref:typename:unsigned char[]	access:public
std::__and_	src/tests/type_traits.h	/^    struct __and_<> : public true_type { };$/;"	s	line:118	language:C++	namespace:std	inherits:true_type
std::__and_	src/tests/type_traits.h	/^    struct __and_<_B1, _B2, _B3, _Bn...>$/;"	s	line:129	language:C++	namespace:std	inherits:conditional<_B1::value,__and_<_B2,_B3,_Bn...>,_B1>::type
std::__and_	src/tests/type_traits.h	/^    struct __and_<_B1, _B2> : public conditional<_B1::value, _B2, _B1>::type { };$/;"	s	line:126	language:C++	namespace:std	inherits:conditional<_B1::value,_B2,_B1>::type
std::__and_	src/tests/type_traits.h	/^    struct __and_<_B1> : public _B1 { }; $/;"	s	line:121	language:C++	namespace:std	inherits:_B1
std::__bool_constant	src/tests/type_traits.h	/^    using __bool_constant = integral_constant<bool, __v>;$/;"	t	line:86	language:C++	namespace:std	typeref:typename:integral_constant<bool,__v>
std::__common_type_impl	src/tests/type_traits.h	/^    struct __common_type_impl$/;"	s	line:2095	language:C++	namespace:std	inherits:__do_common_type_impl
std::__common_type_impl::type	src/tests/type_traits.h	/^      typedef decltype(_S_test<_Tp, _Up>(0)) type;$/;"	t	line:2098	language:C++	struct:std::__common_type_impl	access:public
std::__cv_selector	src/tests/type_traits.h	/^    struct __cv_selector<_Unqualified, false, false>$/;"	s	line:1591	language:C++	namespace:std
std::__cv_selector	src/tests/type_traits.h	/^    struct __cv_selector<_Unqualified, false, true>$/;"	s	line:1595	language:C++	namespace:std
std::__cv_selector	src/tests/type_traits.h	/^    struct __cv_selector<_Unqualified, true, false>$/;"	s	line:1599	language:C++	namespace:std
std::__cv_selector	src/tests/type_traits.h	/^    struct __cv_selector<_Unqualified, true, true>$/;"	s	line:1603	language:C++	namespace:std
std::__cv_selector::__type	src/tests/type_traits.h	/^    { typedef _Unqualified __type; };$/;"	t	line:1592	language:C++	struct:std::__cv_selector	typeref:typename:_Unqualified	access:public
std::__cv_selector::__type	src/tests/type_traits.h	/^    { typedef const _Unqualified __type; };$/;"	t	line:1600	language:C++	struct:std::__cv_selector	typeref:typename:const _Unqualified	access:public
std::__cv_selector::__type	src/tests/type_traits.h	/^    { typedef const volatile _Unqualified __type; };$/;"	t	line:1604	language:C++	struct:std::__cv_selector	typeref:typename:const volatile _Unqualified	access:public
std::__cv_selector::__type	src/tests/type_traits.h	/^    { typedef volatile _Unqualified __type; };$/;"	t	line:1596	language:C++	struct:std::__cv_selector	typeref:typename:volatile _Unqualified	access:public
std::__decay_and_strip	src/tests/type_traits.h	/^    struct __decay_and_strip$/;"	s	line:2045	language:C++	namespace:std
std::__decay_and_strip::__type	src/tests/type_traits.h	/^	typename decay<_Tp>::type>::__type __type;$/;"	t	line:2048	language:C++	struct:std::__decay_and_strip	typeref:typename:__strip_reference_wrapper<typename decay<_Tp>::type>::__type	access:public
std::__decay_selector	src/tests/type_traits.h	/^    struct __decay_selector<_Up, false, false>$/;"	s	line:2007	language:C++	namespace:std
std::__decay_selector	src/tests/type_traits.h	/^    struct __decay_selector<_Up, false, true>$/;"	s	line:2015	language:C++	namespace:std
std::__decay_selector	src/tests/type_traits.h	/^    struct __decay_selector<_Up, true, false>$/;"	s	line:2011	language:C++	namespace:std
std::__decay_selector::__type	src/tests/type_traits.h	/^    { typedef typename add_pointer<_Up>::type __type; };$/;"	t	line:2016	language:C++	struct:std::__decay_selector	typeref:typename:add_pointer<_Up>::type	access:public
std::__decay_selector::__type	src/tests/type_traits.h	/^    { typedef typename remove_cv<_Up>::type __type; };$/;"	t	line:2008	language:C++	struct:std::__decay_selector	typeref:typename:remove_cv<_Up>::type	access:public
std::__decay_selector::__type	src/tests/type_traits.h	/^    { typedef typename remove_extent<_Up>::type* __type; };$/;"	t	line:2012	language:C++	struct:std::__decay_selector	typeref:typename:remove_extent<_Up>::type *	access:public
std::__declval_protector	src/tests/type_traits.h	/^    struct __declval_protector$/;"	s	line:2150	language:C++	namespace:std
std::__declval_protector::__delegate	src/tests/type_traits.h	/^      static typename add_rvalue_reference<_Tp>::type __delegate();$/;"	p	line:2153	language:C++	struct:std::__declval_protector	typeref:typename:add_rvalue_reference<_Tp>::type	access:public	signature:()
std::__declval_protector::__stop	src/tests/type_traits.h	/^      static const bool __stop = false;$/;"	m	line:2152	language:C++	struct:std::__declval_protector	typeref:typename:const bool	access:public
std::__do_common_type_impl	src/tests/type_traits.h	/^  struct __do_common_type_impl$/;"	s	line:2083	language:C++	namespace:std
std::__do_common_type_impl::_S_test	src/tests/type_traits.h	/^			     : std::declval<_Up>())>::type> _S_test(int);$/;"	p	line:2088	language:C++	struct:std::__do_common_type_impl	typeref:typename:__success_type<typename decay<decltype (true?std::declval<_Tp> ():std::declval<_Up> ())>::type>	access:public	signature:(int)
std::__do_common_type_impl::_S_test	src/tests/type_traits.h	/^      static __failure_type _S_test(...);$/;"	p	line:2091	language:C++	struct:std::__do_common_type_impl	typeref:typename:__failure_type	access:public	signature:(...)
std::__do_is_default_constructible_impl	src/tests/type_traits.h	/^  struct __do_is_default_constructible_impl$/;"	s	line:793	language:C++	namespace:std
std::__do_is_default_constructible_impl::__test	src/tests/type_traits.h	/^      static false_type __test(...);$/;"	p	line:799	language:C++	struct:std::__do_is_default_constructible_impl	typeref:typename:false_type	access:public	signature:(...)
std::__do_is_default_constructible_impl::__test	src/tests/type_traits.h	/^      static true_type __test(int);$/;"	p	line:796	language:C++	struct:std::__do_is_default_constructible_impl	typeref:typename:true_type	access:public	signature:(int)
std::__do_is_destructible_impl	src/tests/type_traits.h	/^  struct __do_is_destructible_impl$/;"	s	line:702	language:C++	namespace:std
std::__do_is_destructible_impl::__test	src/tests/type_traits.h	/^      static false_type __test(...);$/;"	p	line:708	language:C++	struct:std::__do_is_destructible_impl	typeref:typename:false_type	access:public	signature:(...)
std::__do_is_destructible_impl::__test	src/tests/type_traits.h	/^      static true_type __test(int);$/;"	p	line:705	language:C++	struct:std::__do_is_destructible_impl	typeref:typename:true_type	access:public	signature:(int)
std::__do_is_direct_constructible_impl	src/tests/type_traits.h	/^  struct __do_is_direct_constructible_impl$/;"	s	line:887	language:C++	namespace:std
std::__do_is_direct_constructible_impl::__test	src/tests/type_traits.h	/^      static false_type __test(...);$/;"	p	line:894	language:C++	struct:std::__do_is_direct_constructible_impl	typeref:typename:false_type	access:public	signature:(...)
std::__do_is_direct_constructible_impl::__test	src/tests/type_traits.h	/^      static true_type __test(int);$/;"	p	line:891	language:C++	struct:std::__do_is_direct_constructible_impl	typeref:typename:true_type	access:public	signature:(int)
std::__do_is_nary_constructible_impl	src/tests/type_traits.h	/^  struct __do_is_nary_constructible_impl$/;"	s	line:1000	language:C++	namespace:std
std::__do_is_nary_constructible_impl::__test	src/tests/type_traits.h	/^      static false_type __test(...);$/;"	p	line:1007	language:C++	struct:std::__do_is_nary_constructible_impl	typeref:typename:false_type	access:public	signature:(...)
std::__do_is_nary_constructible_impl::__test	src/tests/type_traits.h	/^      static true_type __test(int);$/;"	p	line:1004	language:C++	struct:std::__do_is_nary_constructible_impl	typeref:typename:true_type	access:public	signature:(int)
std::__do_is_nt_destructible_impl	src/tests/type_traits.h	/^  struct __do_is_nt_destructible_impl$/;"	s	line:749	language:C++	namespace:std
std::__do_is_nt_destructible_impl::__test	src/tests/type_traits.h	/^        __test(int);$/;"	p	line:753	language:C++	struct:std::__do_is_nt_destructible_impl	typeref:typename:integral_constant<bool,noexcept (declval<_Tp &> ().~_Tp ())>	access:public	signature:(int)
std::__do_is_nt_destructible_impl::__test	src/tests/type_traits.h	/^      static false_type __test(...);$/;"	p	line:756	language:C++	struct:std::__do_is_nt_destructible_impl	typeref:typename:false_type	access:public	signature:(...)
std::__do_is_static_castable_impl	src/tests/type_traits.h	/^  struct __do_is_static_castable_impl$/;"	s	line:853	language:C++	namespace:std
std::__do_is_static_castable_impl::__test	src/tests/type_traits.h	/^      static false_type __test(...);$/;"	p	line:860	language:C++	struct:std::__do_is_static_castable_impl	typeref:typename:false_type	access:public	signature:(...)
std::__do_is_static_castable_impl::__test	src/tests/type_traits.h	/^      static true_type __test(int);$/;"	p	line:857	language:C++	struct:std::__do_is_static_castable_impl	typeref:typename:true_type	access:public	signature:(int)
std::__do_member_type_wrapper	src/tests/type_traits.h	/^  struct __do_member_type_wrapper$/;"	s	line:2101	language:C++	namespace:std
std::__do_member_type_wrapper::_S_test	src/tests/type_traits.h	/^      static __failure_type _S_test(...);$/;"	p	line:2107	language:C++	struct:std::__do_member_type_wrapper	typeref:typename:__failure_type	access:public	signature:(...)
std::__do_member_type_wrapper::_S_test	src/tests/type_traits.h	/^      static __success_type<typename _Tp::type> _S_test(int);$/;"	p	line:2104	language:C++	struct:std::__do_member_type_wrapper	typeref:typename:__success_type<typename _Tp::type>	access:public	signature:(int)
std::__expanded_common_type_wrapper	src/tests/type_traits.h	/^    struct __expanded_common_type_wrapper$/;"	s	line:2118	language:C++	namespace:std
std::__expanded_common_type_wrapper	src/tests/type_traits.h	/^    struct __expanded_common_type_wrapper<__failure_type, _Args...>$/;"	s	line:2124	language:C++	namespace:std
std::__expanded_common_type_wrapper::type	src/tests/type_traits.h	/^      typedef common_type<typename _CTp::type, _Args...> type;$/;"	t	line:2120	language:C++	struct:std::__expanded_common_type_wrapper	typeref:typename:common_type<typename _CTp::type,_Args...>	access:public
std::__expanded_common_type_wrapper::type	src/tests/type_traits.h	/^    { typedef __failure_type type; };$/;"	t	line:2125	language:C++	struct:std::__expanded_common_type_wrapper	typeref:typename:__failure_type	access:public
std::__failure_type	src/tests/type_traits.h	/^  struct __failure_type$/;"	s	line:145	language:C++	namespace:std
std::__is_array_known_bounds	src/tests/type_traits.h	/^    struct __is_array_known_bounds : public integral_constant<bool, (extent<_Tp>::value > 0)> { /;"	s	line:682	language:C++	namespace:std	inherits:integral_constant<bool,(extent<_Tp>::value > 0)>
std::__is_array_unknown_bounds	src/tests/type_traits.h	/^    struct __is_array_unknown_bounds : public __and_<is_array<_Tp>, __not_<extent<_Tp>>>::type {/;"	s	line:695	language:C++	namespace:std	inherits:__and_<is_array<_Tp>,__not_<extent<_Tp>>>::type
std::__is_assignable_helper	src/tests/type_traits.h	/^    class __is_assignable_helper$/;"	c	line:1167	language:C++	namespace:std
std::__is_assignable_helper::__test	src/tests/type_traits.h	/^	__test(...);$/;"	p	line:1176	language:C++	class:std::__is_assignable_helper	typeref:typename:false_type	access:private	signature:(...)
std::__is_assignable_helper::__test	src/tests/type_traits.h	/^	__test(int);$/;"	p	line:1172	language:C++	class:std::__is_assignable_helper	typeref:typename:true_type	access:private	signature:(int)
std::__is_assignable_helper::type	src/tests/type_traits.h	/^      typedef decltype(__test<_Tp, _Up>(0)) type;$/;"	t	line:1179	language:C++	class:std::__is_assignable_helper	access:public
std::__is_base_to_derived_ref	src/tests/type_traits.h	/^    struct __is_base_to_derived_ref<_From, _To, false>$/;"	s	line:939	language:C++	namespace:std	inherits:false_type
std::__is_base_to_derived_ref	src/tests/type_traits.h	/^    struct __is_base_to_derived_ref<_From, _To, true>$/;"	s	line:927	language:C++	namespace:std
std::__is_base_to_derived_ref::__dst_t	src/tests/type_traits.h	/^        >::type>::type __dst_t;$/;"	t	line:932	language:C++	struct:std::__is_base_to_derived_ref	typeref:typename:remove_cv<typename remove_reference<_To>::type>::type	access:public
std::__is_base_to_derived_ref::__src_t	src/tests/type_traits.h	/^        >::type>::type __src_t;$/;"	t	line:930	language:C++	struct:std::__is_base_to_derived_ref	typeref:typename:remove_cv<typename remove_reference<_From>::type>::type	access:public
std::__is_base_to_derived_ref::type	src/tests/type_traits.h	/^		     is_base_of<__src_t, __dst_t>> type;$/;"	t	line:934	language:C++	struct:std::__is_base_to_derived_ref	typeref:typename:__and_<__not_<is_same<__src_t,__dst_t>>,is_base_of<__src_t,__dst_t>>	access:public
std::__is_base_to_derived_ref::value	src/tests/type_traits.h	/^      static constexpr bool value = type::value;$/;"	m	line:935	language:C++	struct:std::__is_base_to_derived_ref	typeref:typename:bool	access:public
std::__is_constructible_impl	src/tests/type_traits.h	/^    struct __is_constructible_impl$/;"	s	line:1026	language:C++	namespace:std	inherits:__is_nary_constructible<_Tp,_Args...>
std::__is_constructible_impl	src/tests/type_traits.h	/^    struct __is_constructible_impl<_Tp, _Arg>$/;"	s	line:1031	language:C++	namespace:std	inherits:__is_direct_constructible<_Tp,_Arg>
std::__is_constructible_impl	src/tests/type_traits.h	/^    struct __is_constructible_impl<_Tp>$/;"	s	line:1036	language:C++	namespace:std	inherits:is_default_constructible<_Tp>
std::__is_convertible_helper	src/tests/type_traits.h	/^    class __is_convertible_helper<_From, _To, false>$/;"	c	line:1426	language:C++	namespace:std
std::__is_convertible_helper	src/tests/type_traits.h	/^    struct __is_convertible_helper$/;"	s	line:1422	language:C++	namespace:std
std::__is_convertible_helper::__test	src/tests/type_traits.h	/^	__test(...);$/;"	p	line:1438	language:C++	class:std::__is_convertible_helper	typeref:typename:false_type	access:private	signature:(...)
std::__is_convertible_helper::__test	src/tests/type_traits.h	/^	__test(int);$/;"	p	line:1434	language:C++	class:std::__is_convertible_helper	typeref:typename:true_type	access:private	signature:(int)
std::__is_convertible_helper::__test_aux	src/tests/type_traits.h	/^	static void __test_aux(_To1);$/;"	p	line:1429	language:C++	class:std::__is_convertible_helper	typeref:typename:void	access:private	signature:(_To1)
std::__is_convertible_helper::type	src/tests/type_traits.h	/^      typedef decltype(__test<_From, _To>(0)) type;$/;"	t	line:1441	language:C++	class:std::__is_convertible_helper	access:public
std::__is_convertible_helper::type	src/tests/type_traits.h	/^    { typedef typename is_void<_To>::type type; };$/;"	t	line:1423	language:C++	struct:std::__is_convertible_helper	typeref:typename:is_void<_To>::type	access:public
std::__is_copy_assignable_impl	src/tests/type_traits.h	/^    struct __is_copy_assignable_impl<_Tp, false>$/;"	s	line:1192	language:C++	namespace:std	inherits:false_type
std::__is_copy_assignable_impl	src/tests/type_traits.h	/^    struct __is_copy_assignable_impl<_Tp, true>$/;"	s	line:1196	language:C++	namespace:std	inherits:is_assignable<_Tp&,const_Tp&>
std::__is_copy_constructible_impl	src/tests/type_traits.h	/^    struct __is_copy_constructible_impl<_Tp, false>$/;"	s	line:1050	language:C++	namespace:std	inherits:false_type
std::__is_copy_constructible_impl	src/tests/type_traits.h	/^    struct __is_copy_constructible_impl<_Tp, true>$/;"	s	line:1054	language:C++	namespace:std	inherits:is_constructible<_Tp,const_Tp&>
std::__is_default_constructible_atom	src/tests/type_traits.h	/^    struct __is_default_constructible_atom$/;"	s	line:810	language:C++	namespace:std	inherits:__and_<__not_<is_void<_Tp>>,__is_default_constructible_impl<_Tp>>::type
std::__is_default_constructible_impl	src/tests/type_traits.h	/^    struct __is_default_constructible_impl$/;"	s	line:803	language:C++	namespace:std	inherits:__do_is_default_constructible_impl
std::__is_default_constructible_impl::type	src/tests/type_traits.h	/^      typedef decltype(__test<_Tp>(0)) type;$/;"	t	line:806	language:C++	struct:std::__is_default_constructible_impl	access:public
std::__is_default_constructible_safe	src/tests/type_traits.h	/^    struct __is_default_constructible_safe<_Tp, false>$/;"	s	line:831	language:C++	namespace:std	inherits:__is_default_constructible_atom<_Tp>::type
std::__is_default_constructible_safe	src/tests/type_traits.h	/^    struct __is_default_constructible_safe<_Tp, true>$/;"	s	line:824	language:C++	namespace:std	inherits:__and_<__is_array_known_bounds<_Tp>,__is_default_constructible_atom<typenameremove_all_extents<_Tp>::type>>::type
std::__is_destructible_impl	src/tests/type_traits.h	/^    struct __is_destructible_impl$/;"	s	line:712	language:C++	namespace:std	inherits:__do_is_destructible_impl
std::__is_destructible_impl::type	src/tests/type_traits.h	/^      typedef decltype(__test<_Tp>(0)) type;$/;"	t	line:715	language:C++	struct:std::__is_destructible_impl	access:public
std::__is_destructible_safe	src/tests/type_traits.h	/^    struct __is_destructible_safe<_Tp, false, false>$/;"	s	line:726	language:C++	namespace:std	inherits:__is_destructible_impl<typenameremove_all_extents<_Tp>::type>::type
std::__is_destructible_safe	src/tests/type_traits.h	/^    struct __is_destructible_safe<_Tp, false, true>$/;"	s	line:736	language:C++	namespace:std	inherits:true_type
std::__is_destructible_safe	src/tests/type_traits.h	/^    struct __is_destructible_safe<_Tp, true, false>$/;"	s	line:732	language:C++	namespace:std	inherits:false_type
std::__is_direct_constructible	src/tests/type_traits.h	/^    struct __is_direct_constructible$/;"	s	line:991	language:C++	namespace:std	inherits:__is_direct_constructible_new<_Tp,_Arg>::type
std::__is_direct_constructible_impl	src/tests/type_traits.h	/^    struct __is_direct_constructible_impl$/;"	s	line:898	language:C++	namespace:std	inherits:__do_is_direct_constructible_impl
std::__is_direct_constructible_impl::type	src/tests/type_traits.h	/^      typedef decltype(__test<_Tp, _Arg>(0)) type;$/;"	t	line:901	language:C++	struct:std::__is_direct_constructible_impl	access:public
std::__is_direct_constructible_new	src/tests/type_traits.h	/^    struct __is_direct_constructible_new$/;"	s	line:983	language:C++	namespace:std	inherits:conditional<is_reference<_Tp>::value,__is_direct_constructible_ref_cast<_Tp,_Arg>,__is_direct_constructible_new_safe<_Tp,_Arg>>::type
std::__is_direct_constructible_new_safe	src/tests/type_traits.h	/^    struct __is_direct_constructible_new_safe$/;"	s	line:905	language:C++	namespace:std	inherits:__and_<is_destructible<_Tp>,__is_direct_constructible_impl<_Tp,_Arg>>::type
std::__is_direct_constructible_ref_cast	src/tests/type_traits.h	/^    struct __is_direct_constructible_ref_cast$/;"	s	line:975	language:C++	namespace:std	inherits:__and_<__is_static_castable<_Arg,_Tp>,__not_<__or_<__is_base_to_derived_ref<_Arg,_Tp>,__is_lvalue_to_rvalue_ref<_Arg,_Tp>>>>::type
std::__is_lvalue_to_rvalue_ref	src/tests/type_traits.h	/^    struct __is_lvalue_to_rvalue_ref<_From, _To, false>$/;"	s	line:964	language:C++	namespace:std	inherits:false_type
std::__is_lvalue_to_rvalue_ref	src/tests/type_traits.h	/^    struct __is_lvalue_to_rvalue_ref<_From, _To, true>$/;"	s	line:951	language:C++	namespace:std
std::__is_lvalue_to_rvalue_ref::__dst_t	src/tests/type_traits.h	/^        _To>::type>::type __dst_t;$/;"	t	line:956	language:C++	struct:std::__is_lvalue_to_rvalue_ref	typeref:typename:remove_cv<typename remove_reference<_To>::type>::type	access:public
std::__is_lvalue_to_rvalue_ref::__src_t	src/tests/type_traits.h	/^        _From>::type>::type __src_t;$/;"	t	line:954	language:C++	struct:std::__is_lvalue_to_rvalue_ref	typeref:typename:remove_cv<typename remove_reference<_From>::type>::type	access:public
std::__is_lvalue_to_rvalue_ref::type	src/tests/type_traits.h	/^		    is_base_of<__dst_t, __src_t>>> type;$/;"	t	line:959	language:C++	struct:std::__is_lvalue_to_rvalue_ref	typeref:typename:__and_<__not_<is_function<__src_t>>,__or_<is_same<__src_t,__dst_t>,is_base_of<__dst_t,__src_t>>>	access:public
std::__is_lvalue_to_rvalue_ref::value	src/tests/type_traits.h	/^      static constexpr bool value = type::value;$/;"	m	line:960	language:C++	struct:std::__is_lvalue_to_rvalue_ref	typeref:typename:bool	access:public
std::__is_member_function_pointer_helper	src/tests/type_traits.h	/^    struct __is_member_function_pointer_helper$/;"	s	line:369	language:C++	namespace:std	inherits:false_type
std::__is_member_function_pointer_helper	src/tests/type_traits.h	/^    struct __is_member_function_pointer_helper<_Tp _Cp::*>$/;"	s	line:373	language:C++	namespace:std	inherits:integral_constant<bool,is_function<_Tp>::value>
std::__is_member_object_pointer_helper	src/tests/type_traits.h	/^    struct __is_member_object_pointer_helper$/;"	s	line:356	language:C++	namespace:std	inherits:false_type
std::__is_member_object_pointer_helper	src/tests/type_traits.h	/^    struct __is_member_object_pointer_helper<_Tp _Cp::*>$/;"	s	line:360	language:C++	namespace:std	inherits:integral_constant<bool,!is_function<_Tp>::value>
std::__is_member_pointer_helper	src/tests/type_traits.h	/^    struct __is_member_pointer_helper : public false_type { };$/;"	s	line:559	language:C++	namespace:std	inherits:false_type
std::__is_member_pointer_helper	src/tests/type_traits.h	/^    struct __is_member_pointer_helper<_Tp _Cp::*> : public true_type { };$/;"	s	line:563	language:C++	namespace:std	inherits:true_type
std::__is_move_assignable_impl	src/tests/type_traits.h	/^    struct __is_move_assignable_impl<_Tp, false>$/;"	s	line:1210	language:C++	namespace:std	inherits:false_type
std::__is_move_assignable_impl	src/tests/type_traits.h	/^    struct __is_move_assignable_impl<_Tp, true>$/;"	s	line:1214	language:C++	namespace:std	inherits:is_assignable<_Tp&,_Tp&&>
std::__is_move_constructible_impl	src/tests/type_traits.h	/^    struct __is_move_constructible_impl<_Tp, false>$/;"	s	line:1068	language:C++	namespace:std	inherits:false_type
std::__is_move_constructible_impl	src/tests/type_traits.h	/^    struct __is_move_constructible_impl<_Tp, true>$/;"	s	line:1072	language:C++	namespace:std	inherits:is_constructible<_Tp,_Tp&&>
std::__is_nary_constructible	src/tests/type_traits.h	/^    struct __is_nary_constructible$/;"	s	line:1018	language:C++	namespace:std	inherits:__is_nary_constructible_impl<_Tp,_Args...>::type
std::__is_nary_constructible_impl	src/tests/type_traits.h	/^    struct __is_nary_constructible_impl$/;"	s	line:1011	language:C++	namespace:std	inherits:__do_is_nary_constructible_impl
std::__is_nary_constructible_impl::type	src/tests/type_traits.h	/^      typedef decltype(__test<_Tp, _Args...>(0)) type;$/;"	t	line:1014	language:C++	struct:std::__is_nary_constructible_impl	access:public
std::__is_nothrow_copy_constructible_impl	src/tests/type_traits.h	/^    struct __is_nothrow_copy_constructible_impl<_Tp, false>$/;"	s	line:1134	language:C++	namespace:std	inherits:false_type
std::__is_nothrow_copy_constructible_impl	src/tests/type_traits.h	/^    struct __is_nothrow_copy_constructible_impl<_Tp, true>$/;"	s	line:1138	language:C++	namespace:std	inherits:is_nothrow_constructible<_Tp,const_Tp&>
std::__is_nothrow_move_constructible_impl	src/tests/type_traits.h	/^    struct __is_nothrow_move_constructible_impl<_Tp, false>$/;"	s	line:1152	language:C++	namespace:std	inherits:false_type
std::__is_nothrow_move_constructible_impl	src/tests/type_traits.h	/^    struct __is_nothrow_move_constructible_impl<_Tp, true>$/;"	s	line:1156	language:C++	namespace:std	inherits:is_nothrow_constructible<_Tp,_Tp&&>
std::__is_nt_assignable_impl	src/tests/type_traits.h	/^    struct __is_nt_assignable_impl$/;"	s	line:1225	language:C++	namespace:std	inherits:integral_constant<bool,noexcept(declval<_Tp>() = declval<_Up>())>
std::__is_nt_constructible_impl	src/tests/type_traits.h	/^    struct __is_nt_constructible_impl$/;"	s	line:1110	language:C++	namespace:std	inherits:integral_constant<bool,noexcept(_Tp(declval<_Args>()...))>
std::__is_nt_constructible_impl	src/tests/type_traits.h	/^    struct __is_nt_constructible_impl<_Tp, _Arg>$/;"	s	line:1115	language:C++	namespace:std	inherits:integral_constant<bool,noexcept(static_cast<_Tp>(declval<_Arg>()))>
std::__is_nt_constructible_impl	src/tests/type_traits.h	/^    struct __is_nt_constructible_impl<_Tp>$/;"	s	line:1121	language:C++	namespace:std	inherits:is_nothrow_default_constructible<_Tp>
std::__is_nt_copy_assignable_impl	src/tests/type_traits.h	/^    struct __is_nt_copy_assignable_impl<_Tp, false>$/;"	s	line:1240	language:C++	namespace:std	inherits:false_type
std::__is_nt_copy_assignable_impl	src/tests/type_traits.h	/^    struct __is_nt_copy_assignable_impl<_Tp, true>$/;"	s	line:1244	language:C++	namespace:std	inherits:is_nothrow_assignable<_Tp&,const_Tp&>
std::__is_nt_default_constructible_atom	src/tests/type_traits.h	/^    struct __is_nt_default_constructible_atom$/;"	s	line:1083	language:C++	namespace:std	inherits:integral_constant<bool,noexcept(_Tp())>
std::__is_nt_default_constructible_impl	src/tests/type_traits.h	/^    struct __is_nt_default_constructible_impl<_Tp, false>$/;"	s	line:1098	language:C++	namespace:std	inherits:__is_nt_default_constructible_atom<_Tp>
std::__is_nt_default_constructible_impl	src/tests/type_traits.h	/^    struct __is_nt_default_constructible_impl<_Tp, true>$/;"	s	line:1091	language:C++	namespace:std	inherits:__and_<__is_array_known_bounds<_Tp>,__is_nt_default_constructible_atom<typenameremove_all_extents<_Tp>::type>>::type
std::__is_nt_destructible_impl	src/tests/type_traits.h	/^    struct __is_nt_destructible_impl$/;"	s	line:760	language:C++	namespace:std	inherits:__do_is_nt_destructible_impl
std::__is_nt_destructible_impl::type	src/tests/type_traits.h	/^      typedef decltype(__test<_Tp>(0)) type;$/;"	t	line:763	language:C++	struct:std::__is_nt_destructible_impl	access:public
std::__is_nt_destructible_safe	src/tests/type_traits.h	/^    struct __is_nt_destructible_safe<_Tp, false, false>$/;"	s	line:774	language:C++	namespace:std	inherits:__is_nt_destructible_impl<typenameremove_all_extents<_Tp>::type>::type
std::__is_nt_destructible_safe	src/tests/type_traits.h	/^    struct __is_nt_destructible_safe<_Tp, false, true>$/;"	s	line:784	language:C++	namespace:std	inherits:true_type
std::__is_nt_destructible_safe	src/tests/type_traits.h	/^    struct __is_nt_destructible_safe<_Tp, true, false>$/;"	s	line:780	language:C++	namespace:std	inherits:false_type
std::__is_nt_move_assignable_impl	src/tests/type_traits.h	/^    struct __is_nt_move_assignable_impl<_Tp, false>$/;"	s	line:1258	language:C++	namespace:std	inherits:false_type
std::__is_nt_move_assignable_impl	src/tests/type_traits.h	/^    struct __is_nt_move_assignable_impl<_Tp, true>$/;"	s	line:1262	language:C++	namespace:std	inherits:is_nothrow_assignable<_Tp&,_Tp&&>
std::__is_referenceable	src/tests/type_traits.h	/^    struct __is_referenceable$/;"	s	line:575	language:C++	namespace:std	inherits:__or_<is_object<_Tp>,is_reference<_Tp>>::type
std::__is_referenceable	src/tests/type_traits.h	/^    struct __is_referenceable<_Res(_Args...)>$/;"	s	line:580	language:C++	namespace:std	inherits:true_type
std::__is_referenceable	src/tests/type_traits.h	/^    struct __is_referenceable<_Res(_Args......)>$/;"	s	line:585	language:C++	namespace:std	inherits:true_type
std::__is_static_castable	src/tests/type_traits.h	/^    struct __is_static_castable$/;"	s	line:877	language:C++	namespace:std	inherits:integral_constant<bool,(__is_static_castable_safe< _From, _To>::value)>
std::__is_static_castable_impl	src/tests/type_traits.h	/^    struct __is_static_castable_impl$/;"	s	line:864	language:C++	namespace:std	inherits:__do_is_static_castable_impl
std::__is_static_castable_impl::type	src/tests/type_traits.h	/^      typedef decltype(__test<_From, _To>(0)) type;$/;"	t	line:867	language:C++	struct:std::__is_static_castable_impl	access:public
std::__is_static_castable_safe	src/tests/type_traits.h	/^    struct __is_static_castable_safe$/;"	s	line:871	language:C++	namespace:std	inherits:__is_static_castable_impl<_From,_To>::type
std::__make_signed	src/tests/type_traits.h	/^    struct __make_signed$/;"	s	line:1722	language:C++	namespace:std
std::__make_signed	src/tests/type_traits.h	/^    struct __make_signed<char16_t> : __make_signed<uint_least16_t>$/;"	s	line:1757	language:C++	namespace:std	inherits:__make_signed<uint_least16_t>
std::__make_signed	src/tests/type_traits.h	/^    struct __make_signed<char32_t> : __make_signed<uint_least32_t>$/;"	s	line:1760	language:C++	namespace:std	inherits:__make_signed<uint_least32_t>
std::__make_signed	src/tests/type_traits.h	/^    struct __make_signed<char>$/;"	s	line:1726	language:C++	namespace:std
std::__make_signed	src/tests/type_traits.h	/^    struct __make_signed<unsigned __GLIBCXX_TYPE_INT_N_0>$/;"	s	line:1766	language:C++	namespace:std
std::__make_signed	src/tests/type_traits.h	/^    struct __make_signed<unsigned __GLIBCXX_TYPE_INT_N_1>$/;"	s	line:1771	language:C++	namespace:std
std::__make_signed	src/tests/type_traits.h	/^    struct __make_signed<unsigned __GLIBCXX_TYPE_INT_N_2>$/;"	s	line:1776	language:C++	namespace:std
std::__make_signed	src/tests/type_traits.h	/^    struct __make_signed<unsigned __GLIBCXX_TYPE_INT_N_3>$/;"	s	line:1781	language:C++	namespace:std
std::__make_signed	src/tests/type_traits.h	/^    struct __make_signed<unsigned char>$/;"	s	line:1730	language:C++	namespace:std
std::__make_signed	src/tests/type_traits.h	/^    struct __make_signed<unsigned int>$/;"	s	line:1738	language:C++	namespace:std
std::__make_signed	src/tests/type_traits.h	/^    struct __make_signed<unsigned long long>$/;"	s	line:1746	language:C++	namespace:std
std::__make_signed	src/tests/type_traits.h	/^    struct __make_signed<unsigned long>$/;"	s	line:1742	language:C++	namespace:std
std::__make_signed	src/tests/type_traits.h	/^    struct __make_signed<unsigned short>$/;"	s	line:1734	language:C++	namespace:std
std::__make_signed	src/tests/type_traits.h	/^    struct __make_signed<wchar_t> : __make_signed<__WCHAR_TYPE__>$/;"	s	line:1751	language:C++	namespace:std	inherits:__make_signed<__WCHAR_TYPE__>
std::__make_signed::__type	src/tests/type_traits.h	/^    { typedef _Tp __type; };$/;"	t	line:1723	language:C++	struct:std::__make_signed	typeref:typename:_Tp	access:public
std::__make_signed::__type	src/tests/type_traits.h	/^    { typedef __GLIBCXX_TYPE_INT_N_0 __type; };$/;"	t	line:1767	language:C++	struct:std::__make_signed	typeref:typename:__GLIBCXX_TYPE_INT_N_0	access:public
std::__make_signed::__type	src/tests/type_traits.h	/^    { typedef __GLIBCXX_TYPE_INT_N_1 __type; };$/;"	t	line:1772	language:C++	struct:std::__make_signed	typeref:typename:__GLIBCXX_TYPE_INT_N_1	access:public
std::__make_signed::__type	src/tests/type_traits.h	/^    { typedef __GLIBCXX_TYPE_INT_N_2 __type; };$/;"	t	line:1777	language:C++	struct:std::__make_signed	typeref:typename:__GLIBCXX_TYPE_INT_N_2	access:public
std::__make_signed::__type	src/tests/type_traits.h	/^    { typedef __GLIBCXX_TYPE_INT_N_3 __type; };$/;"	t	line:1782	language:C++	struct:std::__make_signed	typeref:typename:__GLIBCXX_TYPE_INT_N_3	access:public
std::__make_signed::__type	src/tests/type_traits.h	/^    { typedef signed char __type; };$/;"	t	line:1727	language:C++	struct:std::__make_signed	typeref:typename:signed char	access:public
std::__make_signed::__type	src/tests/type_traits.h	/^    { typedef signed char __type; };$/;"	t	line:1731	language:C++	struct:std::__make_signed	typeref:typename:signed char	access:public
std::__make_signed::__type	src/tests/type_traits.h	/^    { typedef signed int __type; };$/;"	t	line:1739	language:C++	struct:std::__make_signed	typeref:typename:signed int	access:public
std::__make_signed::__type	src/tests/type_traits.h	/^    { typedef signed long __type; };$/;"	t	line:1743	language:C++	struct:std::__make_signed	typeref:typename:signed long	access:public
std::__make_signed::__type	src/tests/type_traits.h	/^    { typedef signed long long __type; };$/;"	t	line:1747	language:C++	struct:std::__make_signed	typeref:typename:signed long long	access:public
std::__make_signed::__type	src/tests/type_traits.h	/^    { typedef signed short __type; };$/;"	t	line:1735	language:C++	struct:std::__make_signed	typeref:typename:signed short	access:public
std::__make_signed_selector	src/tests/type_traits.h	/^    class __make_signed_selector<_Tp, false, true>$/;"	c	line:1803	language:C++	namespace:std
std::__make_signed_selector	src/tests/type_traits.h	/^    class __make_signed_selector<_Tp, true, false>$/;"	c	line:1792	language:C++	namespace:std
std::__make_signed_selector::__b0	src/tests/type_traits.h	/^      static const bool __b0 = sizeof(_Tp) <= sizeof(__smallest);$/;"	m	line:1807	language:C++	class:std::__make_signed_selector	typeref:typename:const bool	access:private
std::__make_signed_selector::__b1	src/tests/type_traits.h	/^      static const bool __b1 = sizeof(_Tp) <= sizeof(signed short);$/;"	m	line:1808	language:C++	class:std::__make_signed_selector	typeref:typename:const bool	access:private
std::__make_signed_selector::__b2	src/tests/type_traits.h	/^      static const bool __b2 = sizeof(_Tp) <= sizeof(signed int);$/;"	m	line:1809	language:C++	class:std::__make_signed_selector	typeref:typename:const bool	access:private
std::__make_signed_selector::__cond1	src/tests/type_traits.h	/^      typedef conditional<__b1, signed short, __cond2_type> __cond1;$/;"	t	line:1812	language:C++	class:std::__make_signed_selector	typeref:typename:conditional<__b1,signed short,__cond2_type>	access:private
std::__make_signed_selector::__cond1_type	src/tests/type_traits.h	/^      typedef typename __cond1::type __cond1_type;$/;"	t	line:1813	language:C++	class:std::__make_signed_selector	typeref:typename:__cond1::type	access:private
std::__make_signed_selector::__cond2	src/tests/type_traits.h	/^      typedef conditional<__b2, signed int, signed long> __cond2;$/;"	t	line:1810	language:C++	class:std::__make_signed_selector	typeref:typename:conditional<__b2,signed int,signed long>	access:private
std::__make_signed_selector::__cond2_type	src/tests/type_traits.h	/^      typedef typename __cond2::type __cond2_type;$/;"	t	line:1811	language:C++	class:std::__make_signed_selector	typeref:typename:__cond2::type	access:private
std::__make_signed_selector::__cv_signed	src/tests/type_traits.h	/^      typedef __match_cv_qualifiers<_Tp, __signed_type> __cv_signed;$/;"	t	line:1796	language:C++	class:std::__make_signed_selector	typeref:typename:__match_cv_qualifiers<_Tp,__signed_type>	access:private
std::__make_signed_selector::__signed_type	src/tests/type_traits.h	/^      typedef typename __signedt::__type __signed_type;$/;"	t	line:1795	language:C++	class:std::__make_signed_selector	typeref:typename:__signedt::__type	access:private
std::__make_signed_selector::__signedt	src/tests/type_traits.h	/^      typedef __make_signed<typename remove_cv<_Tp>::type> __signedt;$/;"	t	line:1794	language:C++	class:std::__make_signed_selector	typeref:typename:__make_signed<typename remove_cv<_Tp>::type>	access:private
std::__make_signed_selector::__smallest	src/tests/type_traits.h	/^      typedef signed char __smallest;$/;"	t	line:1806	language:C++	class:std::__make_signed_selector	typeref:typename:signed char	access:private
std::__make_signed_selector::__type	src/tests/type_traits.h	/^      typedef typename __cv_signed::__type __type;$/;"	t	line:1799	language:C++	class:std::__make_signed_selector	typeref:typename:__cv_signed::__type	access:public
std::__make_signed_selector::__type	src/tests/type_traits.h	/^      typedef typename conditional<__b0, __smallest, __cond1_type>::type __type;$/;"	t	line:1816	language:C++	class:std::__make_signed_selector	typeref:typename:conditional<__b0,__smallest,__cond1_type>::type	access:public
std::__make_unsigned	src/tests/type_traits.h	/^    struct __make_unsigned$/;"	s	line:1619	language:C++	namespace:std
std::__make_unsigned	src/tests/type_traits.h	/^    struct __make_unsigned<__GLIBCXX_TYPE_INT_N_0>$/;"	s	line:1654	language:C++	namespace:std
std::__make_unsigned	src/tests/type_traits.h	/^    struct __make_unsigned<__GLIBCXX_TYPE_INT_N_1>$/;"	s	line:1659	language:C++	namespace:std
std::__make_unsigned	src/tests/type_traits.h	/^    struct __make_unsigned<__GLIBCXX_TYPE_INT_N_2>$/;"	s	line:1664	language:C++	namespace:std
std::__make_unsigned	src/tests/type_traits.h	/^    struct __make_unsigned<__GLIBCXX_TYPE_INT_N_3>$/;"	s	line:1669	language:C++	namespace:std
std::__make_unsigned	src/tests/type_traits.h	/^    struct __make_unsigned<char>$/;"	s	line:1623	language:C++	namespace:std
std::__make_unsigned	src/tests/type_traits.h	/^    struct __make_unsigned<int>$/;"	s	line:1635	language:C++	namespace:std
std::__make_unsigned	src/tests/type_traits.h	/^    struct __make_unsigned<long long>$/;"	s	line:1643	language:C++	namespace:std
std::__make_unsigned	src/tests/type_traits.h	/^    struct __make_unsigned<long>$/;"	s	line:1639	language:C++	namespace:std
std::__make_unsigned	src/tests/type_traits.h	/^    struct __make_unsigned<short>$/;"	s	line:1631	language:C++	namespace:std
std::__make_unsigned	src/tests/type_traits.h	/^    struct __make_unsigned<signed char>$/;"	s	line:1627	language:C++	namespace:std
std::__make_unsigned	src/tests/type_traits.h	/^    struct __make_unsigned<wchar_t> : __make_unsigned<__WCHAR_TYPE__>$/;"	s	line:1648	language:C++	namespace:std	inherits:__make_unsigned<__WCHAR_TYPE__>
std::__make_unsigned::__type	src/tests/type_traits.h	/^    { typedef _Tp __type; };$/;"	t	line:1620	language:C++	struct:std::__make_unsigned	typeref:typename:_Tp	access:public
std::__make_unsigned::__type	src/tests/type_traits.h	/^    { typedef unsigned __GLIBCXX_TYPE_INT_N_0 __type; };$/;"	t	line:1655	language:C++	struct:std::__make_unsigned	typeref:typename:unsigned __GLIBCXX_TYPE_INT_N_0	access:public
std::__make_unsigned::__type	src/tests/type_traits.h	/^    { typedef unsigned __GLIBCXX_TYPE_INT_N_1 __type; };$/;"	t	line:1660	language:C++	struct:std::__make_unsigned	typeref:typename:unsigned __GLIBCXX_TYPE_INT_N_1	access:public
std::__make_unsigned::__type	src/tests/type_traits.h	/^    { typedef unsigned __GLIBCXX_TYPE_INT_N_2 __type; };$/;"	t	line:1665	language:C++	struct:std::__make_unsigned	typeref:typename:unsigned __GLIBCXX_TYPE_INT_N_2	access:public
std::__make_unsigned::__type	src/tests/type_traits.h	/^    { typedef unsigned __GLIBCXX_TYPE_INT_N_3 __type; };$/;"	t	line:1670	language:C++	struct:std::__make_unsigned	typeref:typename:unsigned __GLIBCXX_TYPE_INT_N_3	access:public
std::__make_unsigned::__type	src/tests/type_traits.h	/^    { typedef unsigned char __type; };$/;"	t	line:1624	language:C++	struct:std::__make_unsigned	typeref:typename:unsigned char	access:public
std::__make_unsigned::__type	src/tests/type_traits.h	/^    { typedef unsigned char __type; };$/;"	t	line:1628	language:C++	struct:std::__make_unsigned	typeref:typename:unsigned char	access:public
std::__make_unsigned::__type	src/tests/type_traits.h	/^    { typedef unsigned int __type; };$/;"	t	line:1636	language:C++	struct:std::__make_unsigned	typeref:typename:unsigned int	access:public
std::__make_unsigned::__type	src/tests/type_traits.h	/^    { typedef unsigned long __type; };$/;"	t	line:1640	language:C++	struct:std::__make_unsigned	typeref:typename:unsigned long	access:public
std::__make_unsigned::__type	src/tests/type_traits.h	/^    { typedef unsigned long long __type; };$/;"	t	line:1644	language:C++	struct:std::__make_unsigned	typeref:typename:unsigned long long	access:public
std::__make_unsigned::__type	src/tests/type_traits.h	/^    { typedef unsigned short __type; };$/;"	t	line:1632	language:C++	struct:std::__make_unsigned	typeref:typename:unsigned short	access:public
std::__make_unsigned_selector	src/tests/type_traits.h	/^    class __make_unsigned_selector<_Tp, false, true>$/;"	c	line:1691	language:C++	namespace:std
std::__make_unsigned_selector	src/tests/type_traits.h	/^    class __make_unsigned_selector<_Tp, true, false>$/;"	c	line:1680	language:C++	namespace:std
std::__make_unsigned_selector::__b0	src/tests/type_traits.h	/^      static const bool __b0 = sizeof(_Tp) <= sizeof(__smallest);$/;"	m	line:1695	language:C++	class:std::__make_unsigned_selector	typeref:typename:const bool	access:private
std::__make_unsigned_selector::__b1	src/tests/type_traits.h	/^      static const bool __b1 = sizeof(_Tp) <= sizeof(unsigned short);$/;"	m	line:1696	language:C++	class:std::__make_unsigned_selector	typeref:typename:const bool	access:private
std::__make_unsigned_selector::__b2	src/tests/type_traits.h	/^      static const bool __b2 = sizeof(_Tp) <= sizeof(unsigned int);$/;"	m	line:1697	language:C++	class:std::__make_unsigned_selector	typeref:typename:const bool	access:private
std::__make_unsigned_selector::__cond1	src/tests/type_traits.h	/^      typedef conditional<__b1, unsigned short, __cond2_type> __cond1;$/;"	t	line:1700	language:C++	class:std::__make_unsigned_selector	typeref:typename:conditional<__b1,unsigned short,__cond2_type>	access:private
std::__make_unsigned_selector::__cond1_type	src/tests/type_traits.h	/^      typedef typename __cond1::type __cond1_type;$/;"	t	line:1701	language:C++	class:std::__make_unsigned_selector	typeref:typename:__cond1::type	access:private
std::__make_unsigned_selector::__cond2	src/tests/type_traits.h	/^      typedef conditional<__b2, unsigned int, unsigned long> __cond2;$/;"	t	line:1698	language:C++	class:std::__make_unsigned_selector	typeref:typename:conditional<__b2,unsigned int,unsigned long>	access:private
std::__make_unsigned_selector::__cond2_type	src/tests/type_traits.h	/^      typedef typename __cond2::type __cond2_type;$/;"	t	line:1699	language:C++	class:std::__make_unsigned_selector	typeref:typename:__cond2::type	access:private
std::__make_unsigned_selector::__cv_unsigned	src/tests/type_traits.h	/^      typedef __match_cv_qualifiers<_Tp, __unsigned_type> __cv_unsigned;$/;"	t	line:1684	language:C++	class:std::__make_unsigned_selector	typeref:typename:__match_cv_qualifiers<_Tp,__unsigned_type>	access:private
std::__make_unsigned_selector::__smallest	src/tests/type_traits.h	/^      typedef unsigned char __smallest;$/;"	t	line:1694	language:C++	class:std::__make_unsigned_selector	typeref:typename:unsigned char	access:private
std::__make_unsigned_selector::__type	src/tests/type_traits.h	/^      typedef typename __cv_unsigned::__type __type;$/;"	t	line:1687	language:C++	class:std::__make_unsigned_selector	typeref:typename:__cv_unsigned::__type	access:public
std::__make_unsigned_selector::__type	src/tests/type_traits.h	/^      typedef typename conditional<__b0, __smallest, __cond1_type>::type __type;$/;"	t	line:1704	language:C++	class:std::__make_unsigned_selector	typeref:typename:conditional<__b0,__smallest,__cond1_type>::type	access:public
std::__make_unsigned_selector::__unsigned_type	src/tests/type_traits.h	/^      typedef typename __unsignedt::__type __unsigned_type;$/;"	t	line:1683	language:C++	class:std::__make_unsigned_selector	typeref:typename:__unsignedt::__type	access:private
std::__make_unsigned_selector::__unsignedt	src/tests/type_traits.h	/^      typedef __make_unsigned<typename remove_cv<_Tp>::type> __unsignedt;$/;"	t	line:1682	language:C++	class:std::__make_unsigned_selector	typeref:typename:__make_unsigned<typename remove_cv<_Tp>::type>	access:private
std::__match_cv_qualifiers	src/tests/type_traits.h	/^    class __match_cv_qualifiers$/;"	c	line:1609	language:C++	namespace:std
std::__match_cv_qualifiers::__match	src/tests/type_traits.h	/^      typedef __cv_selector<_Unqualified, _IsConst, _IsVol> __match;$/;"	t	line:1611	language:C++	class:std::__match_cv_qualifiers	typeref:typename:__cv_selector<_Unqualified,_IsConst,_IsVol>	access:private
std::__match_cv_qualifiers::__type	src/tests/type_traits.h	/^      typedef typename __match::__type __type; $/;"	t	line:1614	language:C++	class:std::__match_cv_qualifiers	typeref:typename:__match::__type	access:public
std::__member_type_wrapper	src/tests/type_traits.h	/^    struct __member_type_wrapper$/;"	s	line:2111	language:C++	namespace:std	inherits:__do_member_type_wrapper
std::__member_type_wrapper::type	src/tests/type_traits.h	/^      typedef decltype(_S_test<_Tp>(0)) type;$/;"	t	line:2114	language:C++	struct:std::__member_type_wrapper	access:public
std::__not_	src/tests/type_traits.h	/^    struct __not_ : public integral_constant<bool, !_Pp::value> { };$/;"	s	line:134	language:C++	namespace:std	inherits:integral_constant<bool,!_Pp::value>
std::__or_	src/tests/type_traits.h	/^    struct __or_<> : public false_type { };$/;"	s	line:97	language:C++	namespace:std	inherits:false_type
std::__or_	src/tests/type_traits.h	/^    struct __or_<_B1, _B2, _B3, _Bn...>$/;"	s	line:111	language:C++	namespace:std	inherits:conditional<_B1::value,_B1,__or_<_B2,_B3,_Bn...>>::type
std::__or_	src/tests/type_traits.h	/^    struct __or_<_B1, _B2> : public conditional<_B1::value, _B1, _B2>::type { };$/;"	s	line:107	language:C++	namespace:std	inherits:conditional<_B1::value,_B1,_B2>::type
std::__or_	src/tests/type_traits.h	/^    struct __or_<_B1> : public _B1 { };$/;"	s	line:102	language:C++	namespace:std	inherits:_B1
std::__remove_pointer_helper	src/tests/type_traits.h	/^    struct __remove_pointer_helper$/;"	s	line:1882	language:C++	namespace:std
std::__remove_pointer_helper	src/tests/type_traits.h	/^    struct __remove_pointer_helper<_Tp, _Up*>$/;"	s	line:1886	language:C++	namespace:std
std::__remove_pointer_helper::type	src/tests/type_traits.h	/^    { typedef _Tp     type; };$/;"	t	line:1883	language:C++	struct:std::__remove_pointer_helper	typeref:typename:_Tp	access:public
std::__remove_pointer_helper::type	src/tests/type_traits.h	/^    { typedef _Up     type; };$/;"	t	line:1887	language:C++	struct:std::__remove_pointer_helper	typeref:typename:_Up	access:public
std::__result_of_impl	src/tests/type_traits.h	/^    struct __result_of_impl$/;"	s	line:2280	language:C++	namespace:std
std::__result_of_impl	src/tests/type_traits.h	/^    struct __result_of_impl<false, false, _Functor, _ArgTypes...>$/;"	s	line:2308	language:C++	namespace:std	inherits:__result_of_other_impl
std::__result_of_impl	src/tests/type_traits.h	/^    struct __result_of_impl<false, true, _MemPtr, _Arg, _Args...>$/;"	s	line:2291	language:C++	namespace:std	inherits:__result_of_memfun<typenamedecay<_MemPtr>::type,_Arg,_Args...>
std::__result_of_impl	src/tests/type_traits.h	/^    struct __result_of_impl<true, false, _MemPtr, _Arg>$/;"	s	line:2286	language:C++	namespace:std	inherits:__result_of_memobj<typenamedecay<_MemPtr>::type,_Arg>
std::__result_of_impl::type	src/tests/type_traits.h	/^      typedef __failure_type type;$/;"	t	line:2282	language:C++	struct:std::__result_of_impl	typeref:typename:__failure_type	access:public
std::__result_of_impl::type	src/tests/type_traits.h	/^      typedef decltype(_S_test<_Functor, _ArgTypes...>(0)) type;$/;"	t	line:2311	language:C++	struct:std::__result_of_impl	access:public
std::__result_of_memfun	src/tests/type_traits.h	/^    struct __result_of_memfun<_Res _Class::*, _Arg, _Args...>$/;"	s	line:2267	language:C++	namespace:std
std::__result_of_memfun::_Argval	src/tests/type_traits.h	/^        _Arg>::type>::type _Argval;$/;"	t	line:2270	language:C++	struct:std::__result_of_memfun	typeref:typename:remove_cv<typename remove_reference<_Arg>::type>::type	access:public
std::__result_of_memfun::_MemPtr	src/tests/type_traits.h	/^      typedef _Res _Class::* _MemPtr;$/;"	t	line:2271	language:C++	struct:std::__result_of_memfun	typeref:typename:_Res _Class::*	access:public
std::__result_of_memfun::type	src/tests/type_traits.h	/^      >::type::type type;$/;"	t	line:2276	language:C++	struct:std::__result_of_memfun	access:public
std::__result_of_memfun_deref	src/tests/type_traits.h	/^    struct __result_of_memfun_deref$/;"	s	line:2203	language:C++	namespace:std	inherits:__result_of_memfun_deref_impl
std::__result_of_memfun_deref::type	src/tests/type_traits.h	/^      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;$/;"	t	line:2206	language:C++	struct:std::__result_of_memfun_deref	access:public
std::__result_of_memfun_deref_impl	src/tests/type_traits.h	/^  struct __result_of_memfun_deref_impl$/;"	s	line:2191	language:C++	namespace:std
std::__result_of_memfun_deref_impl::_S_test	src/tests/type_traits.h	/^      )> _S_test(int);$/;"	p	line:2196	language:C++	struct:std::__result_of_memfun_deref_impl	typeref:typename:__success_type<decltype (((* std::declval<_Tp1> ()).* std::declval<_Fp> ())(std::declval<_Args> ()...))>	access:public	signature:(int)
std::__result_of_memfun_deref_impl::_S_test	src/tests/type_traits.h	/^      static __failure_type _S_test(...);$/;"	p	line:2199	language:C++	struct:std::__result_of_memfun_deref_impl	typeref:typename:__failure_type	access:public	signature:(...)
std::__result_of_memfun_ref	src/tests/type_traits.h	/^    struct __result_of_memfun_ref$/;"	s	line:2184	language:C++	namespace:std	inherits:__result_of_memfun_ref_impl
std::__result_of_memfun_ref::type	src/tests/type_traits.h	/^      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;$/;"	t	line:2187	language:C++	struct:std::__result_of_memfun_ref	access:public
std::__result_of_memfun_ref_impl	src/tests/type_traits.h	/^  struct __result_of_memfun_ref_impl$/;"	s	line:2172	language:C++	namespace:std
std::__result_of_memfun_ref_impl::_S_test	src/tests/type_traits.h	/^      )> _S_test(int);$/;"	p	line:2177	language:C++	struct:std::__result_of_memfun_ref_impl	typeref:typename:__success_type<decltype ((std::declval<_Tp1> ().* std::declval<_Fp> ())(std::declval<_Args> ()...))>	access:public	signature:(int)
std::__result_of_memfun_ref_impl::_S_test	src/tests/type_traits.h	/^      static __failure_type _S_test(...);$/;"	p	line:2180	language:C++	struct:std::__result_of_memfun_ref_impl	typeref:typename:__failure_type	access:public	signature:(...)
std::__result_of_memobj	src/tests/type_traits.h	/^    struct __result_of_memobj<_Res _Class::*, _Arg>$/;"	s	line:2251	language:C++	namespace:std
std::__result_of_memobj::_Argval	src/tests/type_traits.h	/^        _Arg>::type>::type _Argval;$/;"	t	line:2254	language:C++	struct:std::__result_of_memobj	typeref:typename:remove_cv<typename remove_reference<_Arg>::type>::type	access:public
std::__result_of_memobj::_MemPtr	src/tests/type_traits.h	/^      typedef _Res _Class::* _MemPtr;$/;"	t	line:2255	language:C++	struct:std::__result_of_memobj	typeref:typename:_Res _Class::*	access:public
std::__result_of_memobj::type	src/tests/type_traits.h	/^      >::type::type type;$/;"	t	line:2260	language:C++	struct:std::__result_of_memobj	access:public
std::__result_of_memobj_deref	src/tests/type_traits.h	/^    struct __result_of_memobj_deref$/;"	s	line:2241	language:C++	namespace:std	inherits:__result_of_memobj_deref_impl
std::__result_of_memobj_deref::type	src/tests/type_traits.h	/^      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;$/;"	t	line:2244	language:C++	struct:std::__result_of_memobj_deref	access:public
std::__result_of_memobj_deref_impl	src/tests/type_traits.h	/^  struct __result_of_memobj_deref_impl$/;"	s	line:2229	language:C++	namespace:std
std::__result_of_memobj_deref_impl::_S_test	src/tests/type_traits.h	/^      )> _S_test(int);$/;"	p	line:2234	language:C++	struct:std::__result_of_memobj_deref_impl	typeref:typename:__success_type<decltype ((* std::declval<_Tp1> ()).* std::declval<_Fp> ())>	access:public	signature:(int)
std::__result_of_memobj_deref_impl::_S_test	src/tests/type_traits.h	/^      static __failure_type _S_test(...);$/;"	p	line:2237	language:C++	struct:std::__result_of_memobj_deref_impl	typeref:typename:__failure_type	access:public	signature:(...)
std::__result_of_memobj_ref	src/tests/type_traits.h	/^    struct __result_of_memobj_ref$/;"	s	line:2222	language:C++	namespace:std	inherits:__result_of_memobj_ref_impl
std::__result_of_memobj_ref::type	src/tests/type_traits.h	/^      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;$/;"	t	line:2225	language:C++	struct:std::__result_of_memobj_ref	access:public
std::__result_of_memobj_ref_impl	src/tests/type_traits.h	/^  struct __result_of_memobj_ref_impl$/;"	s	line:2210	language:C++	namespace:std
std::__result_of_memobj_ref_impl::_S_test	src/tests/type_traits.h	/^      )> _S_test(int);$/;"	p	line:2215	language:C++	struct:std::__result_of_memobj_ref_impl	typeref:typename:__success_type<decltype (std::declval<_Tp1> ().* std::declval<_Fp> ())>	access:public	signature:(int)
std::__result_of_memobj_ref_impl::_S_test	src/tests/type_traits.h	/^      static __failure_type _S_test(...);$/;"	p	line:2218	language:C++	struct:std::__result_of_memobj_ref_impl	typeref:typename:__failure_type	access:public	signature:(...)
std::__result_of_other_impl	src/tests/type_traits.h	/^  struct __result_of_other_impl$/;"	s	line:2296	language:C++	namespace:std
std::__result_of_other_impl::_S_test	src/tests/type_traits.h	/^      )> _S_test(int);$/;"	p	line:2301	language:C++	struct:std::__result_of_other_impl	typeref:typename:__success_type<decltype (std::declval<_Fn> ()(std::declval<_Args> ()...))>	access:public	signature:(int)
std::__result_of_other_impl::_S_test	src/tests/type_traits.h	/^      static __failure_type _S_test(...);$/;"	p	line:2304	language:C++	struct:std::__result_of_other_impl	typeref:typename:__failure_type	access:public	signature:(...)
std::__strictest_alignment	src/tests/type_traits.h	/^    struct __strictest_alignment$/;"	s	line:1952	language:C++	namespace:std
std::__strictest_alignment	src/tests/type_traits.h	/^    struct __strictest_alignment<_Tp, _Types...>$/;"	s	line:1959	language:C++	namespace:std
std::__strictest_alignment::_S_alignment	src/tests/type_traits.h	/^      static const size_t _S_alignment = 0;$/;"	m	line:1954	language:C++	struct:std::__strictest_alignment	typeref:typename:const size_t	access:public
std::__strictest_alignment::_S_alignment	src/tests/type_traits.h	/^      static const size_t _S_alignment =$/;"	m	line:1961	language:C++	struct:std::__strictest_alignment	typeref:typename:const size_t	access:public
std::__strictest_alignment::_S_size	src/tests/type_traits.h	/^      static const size_t _S_size = 0;$/;"	m	line:1955	language:C++	struct:std::__strictest_alignment	typeref:typename:const size_t	access:public
std::__strictest_alignment::_S_size	src/tests/type_traits.h	/^      static const size_t _S_size =$/;"	m	line:1964	language:C++	struct:std::__strictest_alignment	typeref:typename:const size_t	access:public
std::__strip_reference_wrapper	src/tests/type_traits.h	/^    struct __strip_reference_wrapper$/;"	s	line:2033	language:C++	namespace:std
std::__strip_reference_wrapper	src/tests/type_traits.h	/^    struct __strip_reference_wrapper<reference_wrapper<_Tp> >$/;"	s	line:2039	language:C++	namespace:std
std::__strip_reference_wrapper::__type	src/tests/type_traits.h	/^      typedef _Tp __type;$/;"	t	line:2035	language:C++	struct:std::__strip_reference_wrapper	typeref:typename:_Tp	access:public
std::__strip_reference_wrapper::__type	src/tests/type_traits.h	/^      typedef _Tp& __type;$/;"	t	line:2041	language:C++	struct:std::__strip_reference_wrapper	typeref:typename:_Tp &	access:public
std::__success_type	src/tests/type_traits.h	/^    struct __success_type$/;"	s	line:142	language:C++	namespace:std
std::__success_type::type	src/tests/type_traits.h	/^    { typedef _Tp type; };$/;"	t	line:143	language:C++	struct:std::__success_type	typeref:typename:_Tp	access:public
std::__void_t	src/tests/type_traits.h	/^  template<typename...> using __void_t = void;$/;"	t	line:2361	language:C++	namespace:std	typeref:typename:void
std::add_lvalue_reference	src/tests/type_traits.h	/^    struct add_lvalue_reference$/;"	s	line:1552	language:C++	namespace:std	inherits:__add_lvalue_reference_helper<_Tp>
std::add_lvalue_reference_t	src/tests/type_traits.h	/^    using add_lvalue_reference_t = typename add_lvalue_reference<_Tp>::type;$/;"	t	line:1577	language:C++	namespace:std	typeref:typename:add_lvalue_reference<_Tp>::type
std::add_pointer	src/tests/type_traits.h	/^    struct add_pointer $/;"	s	line:1906	language:C++	namespace:std	inherits:__add_pointer_helper<_Tp>
std::add_pointer_t	src/tests/type_traits.h	/^    using add_pointer_t = typename add_pointer<_Tp>::type;$/;"	t	line:1917	language:C++	namespace:std	typeref:typename:add_pointer<_Tp>::type
std::add_rvalue_reference	src/tests/type_traits.h	/^    struct add_rvalue_reference$/;"	s	line:1566	language:C++	namespace:std	inherits:__add_rvalue_reference_helper<_Tp>
std::add_rvalue_reference_t	src/tests/type_traits.h	/^    using add_rvalue_reference_t = typename add_rvalue_reference<_Tp>::type;$/;"	t	line:1581	language:C++	namespace:std	typeref:typename:add_rvalue_reference<_Tp>::type
std::aligned_storage	src/tests/type_traits.h	/^    struct aligned_storage$/;"	s	line:1942	language:C++	namespace:std
std::aligned_storage::type	src/tests/type_traits.h	/^      union type$/;"	u	line:1944	language:C++	struct:std::aligned_storage	access:public
std::aligned_storage::type::__align	src/tests/type_traits.h	/^	struct __attribute__((__aligned__((_Align)))) { } __align; $/;"	m	line:1947	language:C++	union:std::aligned_storage::type	typeref:struct:std::aligned_storage::type::__anon5513870c0208	access:public
std::aligned_storage::type::__anon5513870c0208	src/tests/type_traits.h	/^	struct __attribute__((__aligned__((_Align)))) { } __align; $/;"	s	line:1947	language:C++	union:std::aligned_storage::type	access:public
std::aligned_storage::type::__data	src/tests/type_traits.h	/^	unsigned char __data[_Len];$/;"	m	line:1946	language:C++	union:std::aligned_storage::type	typeref:typename:unsigned char[]	access:public
std::aligned_storage_t	src/tests/type_traits.h	/^    using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;$/;"	t	line:2331	language:C++	namespace:std	typeref:typename:aligned_storage<_Len,_Align>::type
std::aligned_union	src/tests/type_traits.h	/^    struct aligned_union$/;"	s	line:1980	language:C++	namespace:std
std::aligned_union::_S_len	src/tests/type_traits.h	/^      static const size_t _S_len = _Len > __strictest::_S_size$/;"	m	line:1986	language:C++	struct:std::aligned_union	typeref:typename:const size_t	access:private
std::aligned_union::__strictest	src/tests/type_traits.h	/^      using __strictest = __strictest_alignment<_Types...>;$/;"	t	line:1985	language:C++	struct:std::aligned_union	typeref:typename:__strictest_alignment<_Types...>	access:private
std::aligned_union::alignment_value	src/tests/type_traits.h	/^      static const size_t alignment_value = __strictest::_S_alignment;$/;"	m	line:1990	language:C++	struct:std::aligned_union	typeref:typename:const size_t	access:public
std::aligned_union::type	src/tests/type_traits.h	/^      typedef typename aligned_storage<_S_len, alignment_value>::type type;$/;"	t	line:1992	language:C++	struct:std::aligned_union	typeref:typename:aligned_storage<_S_len,alignment_value>::type	access:public
std::aligned_union<_Len, _Types...>::alignment_value	src/tests/type_traits.h	/^    const size_t aligned_union<_Len, _Types...>::alignment_value;$/;"	m	line:1996	language:C++	class:std::aligned_union<_Len, _Types...>	typeref:typename:const size_t
std::aligned_union_t	src/tests/type_traits.h	/^    using aligned_union_t = typename aligned_union<_Len, _Types...>::type;$/;"	t	line:2334	language:C++	namespace:std	typeref:typename:aligned_union<_Len,_Types...>::type
std::alignment_of	src/tests/type_traits.h	/^    struct alignment_of$/;"	s	line:1361	language:C++	namespace:std	inherits:integral_constant<std::size_t,__alignof__(_Tp)>
std::common_type	src/tests/type_traits.h	/^    struct common_type<_Tp, _Up, _Vp...>$/;"	s	line:2137	language:C++	namespace:std	inherits:__expanded_common_type_wrapper<typename__member_type_wrapper<common_type<_Tp,_Up>>::type,_Vp...>::type
std::common_type	src/tests/type_traits.h	/^    struct common_type<_Tp, _Up>$/;"	s	line:2132	language:C++	namespace:std	inherits:__common_type_impl<_Tp,_Up>::type
std::common_type	src/tests/type_traits.h	/^    struct common_type<_Tp>$/;"	s	line:2128	language:C++	namespace:std
std::common_type::type	src/tests/type_traits.h	/^    { typedef typename decay<_Tp>::type type; };$/;"	t	line:2129	language:C++	struct:std::common_type	typeref:typename:decay<_Tp>::type	access:public
std::common_type_t	src/tests/type_traits.h	/^    using common_type_t = typename common_type<_Tp...>::type;$/;"	t	line:2350	language:C++	namespace:std	typeref:typename:common_type<_Tp...>::type
std::conditional	src/tests/type_traits.h	/^    struct conditional$/;"	s	line:2069	language:C++	namespace:std
std::conditional	src/tests/type_traits.h	/^    struct conditional<false, _Iftrue, _Iffalse>$/;"	s	line:2074	language:C++	namespace:std
std::conditional::type	src/tests/type_traits.h	/^    { typedef _Iffalse type; };$/;"	t	line:2075	language:C++	struct:std::conditional	typeref:typename:_Iffalse	access:public
std::conditional::type	src/tests/type_traits.h	/^    { typedef _Iftrue type; };$/;"	t	line:2070	language:C++	struct:std::conditional	typeref:typename:_Iftrue	access:public
std::conditional_t	src/tests/type_traits.h	/^    using conditional_t = typename conditional<_Cond, _Iftrue, _Iffalse>::type;$/;"	t	line:2346	language:C++	namespace:std	typeref:typename:conditional<_Cond,_Iftrue,_Iffalse>::type
std::decay	src/tests/type_traits.h	/^    class decay $/;"	c	line:2020	language:C++	namespace:std
std::decay::__remove_type	src/tests/type_traits.h	/^      typedef typename remove_reference<_Tp>::type __remove_type;$/;"	t	line:2022	language:C++	class:std::decay	typeref:typename:remove_reference<_Tp>::type	access:private
std::decay::type	src/tests/type_traits.h	/^      typedef typename __decay_selector<__remove_type>::__type type;$/;"	t	line:2025	language:C++	class:std::decay	typeref:typename:__decay_selector<__remove_type>::__type	access:public
std::decay_t	src/tests/type_traits.h	/^    using decay_t = typename decay<_Tp>::type;$/;"	t	line:2338	language:C++	namespace:std	typeref:typename:decay<_Tp>::type
std::declval	src/tests/type_traits.h	/^    inline typename add_rvalue_reference<_Tp>::type declval() noexcept$/;"	f	line:2157	language:C++	namespace:std	typeref:typename:add_rvalue_reference<_Tp>::type	signature:()
std::declval	src/tests/type_traits.h	/^    typename add_rvalue_reference<_Tp>::type declval() noexcept;$/;"	p	line:673	language:C++	namespace:std	typeref:typename:add_rvalue_reference<_Tp>::type	signature:()
std::enable_if	src/tests/type_traits.h	/^    struct enable_if $/;"	s	line:2055	language:C++	namespace:std
std::enable_if	src/tests/type_traits.h	/^    struct enable_if<true, _Tp>$/;"	s	line:2060	language:C++	namespace:std
std::enable_if::type	src/tests/type_traits.h	/^    { typedef _Tp type; };$/;"	t	line:2061	language:C++	struct:std::enable_if	typeref:typename:_Tp	access:public
std::enable_if_t	src/tests/type_traits.h	/^    using enable_if_t = typename enable_if<_Cond, _Tp>::type;$/;"	t	line:2342	language:C++	namespace:std	typeref:typename:enable_if<_Cond,_Tp>::type
std::extent	src/tests/type_traits.h	/^    struct extent : public integral_constant<std::size_t, 0> { };$/;"	s	line:1385	language:C++	namespace:std	inherits:integral_constant<std::size_t,0>
std::extent	src/tests/type_traits.h	/^    struct extent<_Tp[], _Uint>$/;"	s	line:1395	language:C++	namespace:std	inherits:integral_constant<std::size_t,_Uint==0?0:extent<_Tp,_Uint-1>::value>
std::extent	src/tests/type_traits.h	/^    struct extent<_Tp[_Size], _Uint>$/;"	s	line:1388	language:C++	namespace:std	inherits:integral_constant<std::size_t,_Uint==0?_Size:extent<_Tp,_Uint-1>::value>
std::false_type	src/tests/type_traits.h	/^  typedef integral_constant<bool, false>    false_type;$/;"	t	line:83	language:C++	namespace:std	typeref:typename:integral_constant<bool,false>
std::has_trivial_copy_assign	src/tests/type_traits.h	/^    struct has_trivial_copy_assign$/;"	s	line:1346	language:C++	namespace:std	inherits:integral_constant<bool,__has_trivial_assign(_Tp)>
std::has_trivial_copy_constructor	src/tests/type_traits.h	/^    struct has_trivial_copy_constructor$/;"	s	line:1340	language:C++	namespace:std	inherits:integral_constant<bool,__has_trivial_copy(_Tp)>
std::has_trivial_default_constructor	src/tests/type_traits.h	/^    struct has_trivial_default_constructor$/;"	s	line:1334	language:C++	namespace:std	inherits:integral_constant<bool,__has_trivial_constructor(_Tp)>
std::has_virtual_destructor	src/tests/type_traits.h	/^    struct has_virtual_destructor$/;"	s	line:1352	language:C++	namespace:std	inherits:integral_constant<bool,__has_virtual_destructor(_Tp)>
std::hash	src/easylogging/easylogging++.h	/^template<> struct hash<el::Level> {$/;"	s	line:594	language:C++	namespace:std
std::hash::operator ()	src/easylogging/easylogging++.h	/^  std::size_t operator()(const el::Level& l) const {$/;"	f	line:596	language:C++	struct:std::hash	typeref:typename:std::size_t	access:public	signature:(const el::Level & l) const
std::integral_constant	src/tests/type_traits.h	/^    struct integral_constant$/;"	s	line:62	language:C++	namespace:std
std::integral_constant::operator ()	src/tests/type_traits.h	/^      constexpr value_type operator()() const { return value; }$/;"	f	line:72	language:C++	struct:std::integral_constant	typeref:typename:value_type	access:public	signature:() const
std::integral_constant::operator value_type	src/tests/type_traits.h	/^      constexpr operator value_type() const { return value; }$/;"	f	line:67	language:C++	struct:std::integral_constant	access:public	signature:() const
std::integral_constant::type	src/tests/type_traits.h	/^      typedef integral_constant<_Tp, __v>   type;$/;"	t	line:66	language:C++	struct:std::integral_constant	typeref:typename:integral_constant<_Tp,__v>	access:public
std::integral_constant::value	src/tests/type_traits.h	/^      static constexpr _Tp                  value = __v;$/;"	m	line:64	language:C++	struct:std::integral_constant	typeref:typename:_Tp	access:public
std::integral_constant::value_type	src/tests/type_traits.h	/^      typedef _Tp                           value_type;$/;"	t	line:65	language:C++	struct:std::integral_constant	typeref:typename:_Tp	access:public
std::integral_constant<_Tp, __v>::value	src/tests/type_traits.h	/^    constexpr _Tp integral_constant<_Tp, __v>::value;$/;"	m	line:77	language:C++	class:std::integral_constant<_Tp, __v>	typeref:typename:_Tp
std::is_abstract	src/tests/type_traits.h	/^    struct is_abstract : public integral_constant<bool, __is_abstract(_Tp)> { };$/;"	s	line:643	language:C++	namespace:std	inherits:integral_constant<bool,__is_abstract(_Tp)>
std::is_assignable	src/tests/type_traits.h	/^    struct is_assignable$/;"	s	line:1184	language:C++	namespace:std	inherits:__is_assignable_helper<_Tp,_Up>::type
std::is_base_of	src/tests/type_traits.h	/^    struct is_base_of$/;"	s	line:1415	language:C++	namespace:std	inherits:integral_constant<bool,__is_base_of(_Base, _Derived)>
std::is_class	src/tests/type_traits.h	/^    struct is_class$/;"	s	line:395	language:C++	namespace:std	inherits:integral_constant<bool,__is_class(_Tp)>
std::is_constructible	src/tests/type_traits.h	/^    struct is_constructible$/;"	s	line:1042	language:C++	namespace:std	inherits:__is_constructible_impl<_Tp,_Args...>::type
std::is_convertible	src/tests/type_traits.h	/^    struct is_convertible$/;"	s	line:1447	language:C++	namespace:std	inherits:__is_convertible_helper<_From,_To>::type
std::is_copy_assignable	src/tests/type_traits.h	/^    struct is_copy_assignable$/;"	s	line:1202	language:C++	namespace:std	inherits:__is_copy_assignable_impl<_Tp>
std::is_copy_constructible	src/tests/type_traits.h	/^    struct is_copy_constructible$/;"	s	line:1060	language:C++	namespace:std	inherits:__is_copy_constructible_impl<_Tp>
std::is_default_constructible	src/tests/type_traits.h	/^    struct is_default_constructible$/;"	s	line:837	language:C++	namespace:std	inherits:__is_default_constructible_safe<_Tp>::type
std::is_destructible	src/tests/type_traits.h	/^    struct is_destructible$/;"	s	line:741	language:C++	namespace:std	inherits:__is_destructible_safe<_Tp>::type
std::is_empty	src/tests/type_traits.h	/^    struct is_empty : public integral_constant<bool, __is_empty(_Tp)> { };$/;"	s	line:628	language:C++	namespace:std	inherits:integral_constant<bool,__is_empty(_Tp)>
std::is_enum	src/tests/type_traits.h	/^    struct is_enum$/;"	s	line:383	language:C++	namespace:std	inherits:integral_constant<bool,__is_enum(_Tp)>
std::is_final	src/tests/type_traits.h	/^    struct is_final : public integral_constant<bool, __is_final(_Tp)> { };$/;"	s	line:638	language:C++	namespace:std	inherits:integral_constant<bool,__is_final(_Tp)>
std::is_function	src/tests/type_traits.h	/^    struct is_function$/;"	s	line:401	language:C++	namespace:std	inherits:false_type
std::is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes...) &&>$/;"	s	line:413	language:C++	namespace:std	inherits:true_type
std::is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes...) &>$/;"	s	line:409	language:C++	namespace:std	inherits:true_type
std::is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes...) const &&>$/;"	s	line:437	language:C++	namespace:std	inherits:true_type
std::is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes...) const &>$/;"	s	line:433	language:C++	namespace:std	inherits:true_type
std::is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes...) const volatile &&>$/;"	s	line:485	language:C++	namespace:std	inherits:true_type
std::is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes...) const volatile &>$/;"	s	line:481	language:C++	namespace:std	inherits:true_type
std::is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes...) const volatile>$/;"	s	line:477	language:C++	namespace:std	inherits:true_type
std::is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes...) const>$/;"	s	line:429	language:C++	namespace:std	inherits:true_type
std::is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes...) volatile &&>$/;"	s	line:461	language:C++	namespace:std	inherits:true_type
std::is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes...) volatile &>$/;"	s	line:457	language:C++	namespace:std	inherits:true_type
std::is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes...) volatile>$/;"	s	line:453	language:C++	namespace:std	inherits:true_type
std::is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes...)>$/;"	s	line:405	language:C++	namespace:std	inherits:true_type
std::is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes......) &&>$/;"	s	line:425	language:C++	namespace:std	inherits:true_type
std::is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes......) &>$/;"	s	line:421	language:C++	namespace:std	inherits:true_type
std::is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes......) const &&>$/;"	s	line:449	language:C++	namespace:std	inherits:true_type
std::is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes......) const &>$/;"	s	line:445	language:C++	namespace:std	inherits:true_type
std::is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes......) const volatile &&>$/;"	s	line:497	language:C++	namespace:std	inherits:true_type
std::is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes......) const volatile &>$/;"	s	line:493	language:C++	namespace:std	inherits:true_type
std::is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes......) const volatile>$/;"	s	line:489	language:C++	namespace:std	inherits:true_type
std::is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes......) const>$/;"	s	line:441	language:C++	namespace:std	inherits:true_type
std::is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes......) volatile &&>$/;"	s	line:473	language:C++	namespace:std	inherits:true_type
std::is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes......) volatile &>$/;"	s	line:469	language:C++	namespace:std	inherits:true_type
std::is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes......) volatile>$/;"	s	line:465	language:C++	namespace:std	inherits:true_type
std::is_function	src/tests/type_traits.h	/^    struct is_function<_Res(_ArgTypes......)>$/;"	s	line:417	language:C++	namespace:std	inherits:true_type
std::is_literal_type	src/tests/type_traits.h	/^    struct is_literal_type : public integral_constant<bool, __is_literal_type(_Tp)> { };$/;"	s	line:624	language:C++	namespace:std	inherits:integral_constant<bool,__is_literal_type(_Tp)>
std::is_member_function_pointer	src/tests/type_traits.h	/^    struct is_member_function_pointer$/;"	s	line:378	language:C++	namespace:std	inherits:__is_member_function_pointer_helper<typenameremove_cv<_Tp>::type>::type
std::is_member_object_pointer	src/tests/type_traits.h	/^    struct is_member_object_pointer$/;"	s	line:365	language:C++	namespace:std	inherits:__is_member_object_pointer_helper<typenameremove_cv<_Tp>::type>::type
std::is_member_pointer	src/tests/type_traits.h	/^    struct is_member_pointer$/;"	s	line:567	language:C++	namespace:std	inherits:__is_member_pointer_helper<typenameremove_cv<_Tp>::type>::type
std::is_move_assignable	src/tests/type_traits.h	/^    struct is_move_assignable$/;"	s	line:1220	language:C++	namespace:std	inherits:__is_move_assignable_impl<_Tp>
std::is_move_constructible	src/tests/type_traits.h	/^    struct is_move_constructible$/;"	s	line:1078	language:C++	namespace:std	inherits:__is_move_constructible_impl<_Tp>
std::is_nothrow_assignable	src/tests/type_traits.h	/^    struct is_nothrow_assignable$/;"	s	line:1231	language:C++	namespace:std	inherits:__and_<is_assignable<_Tp,_Up>,__is_nt_assignable_impl<_Tp,_Up>>::type
std::is_nothrow_constructible	src/tests/type_traits.h	/^    struct is_nothrow_constructible$/;"	s	line:1127	language:C++	namespace:std	inherits:__and_<is_constructible<_Tp,_Args...>,__is_nt_constructible_impl<_Tp,_Args...>>::type
std::is_nothrow_copy_assignable	src/tests/type_traits.h	/^    struct is_nothrow_copy_assignable$/;"	s	line:1250	language:C++	namespace:std	inherits:__is_nt_copy_assignable_impl<_Tp>
std::is_nothrow_copy_constructible	src/tests/type_traits.h	/^    struct is_nothrow_copy_constructible$/;"	s	line:1144	language:C++	namespace:std	inherits:__is_nothrow_copy_constructible_impl<_Tp>
std::is_nothrow_default_constructible	src/tests/type_traits.h	/^    struct is_nothrow_default_constructible$/;"	s	line:1104	language:C++	namespace:std	inherits:__and_<is_default_constructible<_Tp>,__is_nt_default_constructible_impl<_Tp>>::type
std::is_nothrow_destructible	src/tests/type_traits.h	/^    struct is_nothrow_destructible$/;"	s	line:789	language:C++	namespace:std	inherits:__is_nt_destructible_safe<_Tp>::type
std::is_nothrow_move_assignable	src/tests/type_traits.h	/^    struct is_nothrow_move_assignable$/;"	s	line:1268	language:C++	namespace:std	inherits:__is_nt_move_assignable_impl<_Tp>
std::is_nothrow_move_constructible	src/tests/type_traits.h	/^    struct is_nothrow_move_constructible$/;"	s	line:1162	language:C++	namespace:std	inherits:__is_nothrow_move_constructible_impl<_Tp>
std::is_pod	src/tests/type_traits.h	/^    struct is_pod : public integral_constant<bool, __is_pod(_Tp)> { };$/;"	s	line:620	language:C++	namespace:std	inherits:integral_constant<bool,__is_pod(_Tp)>
std::is_polymorphic	src/tests/type_traits.h	/^    struct is_polymorphic : public integral_constant<bool, __is_polymorphic(_Tp)> { };$/;"	s	line:632	language:C++	namespace:std	inherits:integral_constant<bool,__is_polymorphic(_Tp)>
std::is_standard_layout	src/tests/type_traits.h	/^    struct is_standard_layout : public integral_constant<bool, __is_standard_layout(_Tp)> { };$/;"	s	line:615	language:C++	namespace:std	inherits:integral_constant<bool,__is_standard_layout(_Tp)>
std::is_trivial	src/tests/type_traits.h	/^    struct is_trivial : public integral_constant<bool, __is_trivial(_Tp)> { };$/;"	s	line:607	language:C++	namespace:std	inherits:integral_constant<bool,__is_trivial(_Tp)>
std::is_trivially_assignable	src/tests/type_traits.h	/^    struct is_trivially_assignable$/;"	s	line:1303	language:C++	namespace:std	inherits:__and_<is_assignable<_Tp,_Up>,integral_constant<bool,__is_trivially_assignable(_Tp, _Up)>>::type
std::is_trivially_constructible	src/tests/type_traits.h	/^    struct is_trivially_constructible$/;"	s	line:1274	language:C++	namespace:std	inherits:__and_<is_constructible<_Tp,_Args...>,integral_constant<bool,__is_trivially_constructible(_Tp, _Args...)>>::type
std::is_trivially_copy_assignable	src/tests/type_traits.h	/^    struct is_trivially_copy_assignable$/;"	s	line:1311	language:C++	namespace:std	inherits:__and_<is_copy_assignable<_Tp>,integral_constant<bool,__is_trivially_assignable(_Tp&, const _Tp&)>>::type
std::is_trivially_copy_constructible	src/tests/type_traits.h	/^    struct is_trivially_copy_constructible$/;"	s	line:1287	language:C++	namespace:std	inherits:__and_<is_copy_constructible<_Tp>,integral_constant<bool,__is_trivially_constructible(_Tp, const _Tp&)>>::type
std::is_trivially_copyable	src/tests/type_traits.h	/^    struct is_trivially_copyable : public integral_constant<bool, __is_trivially_copyable(_Tp)> /;"	s	line:611	language:C++	namespace:std	inherits:integral_constant<bool,__is_trivially_copyable(_Tp)>
std::is_trivially_default_constructible	src/tests/type_traits.h	/^    struct is_trivially_default_constructible$/;"	s	line:1281	language:C++	namespace:std	inherits:is_trivially_constructible<_Tp>::type
std::is_trivially_destructible	src/tests/type_traits.h	/^    struct is_trivially_destructible$/;"	s	line:1327	language:C++	namespace:std	inherits:__and_<is_destructible<_Tp>,integral_constant<bool,__has_trivial_destructor(_Tp)>>::type
std::is_trivially_move_assignable	src/tests/type_traits.h	/^    struct is_trivially_move_assignable$/;"	s	line:1319	language:C++	namespace:std	inherits:__and_<is_move_assignable<_Tp>,integral_constant<bool,__is_trivially_assignable(_Tp&, _Tp&&)>>::type
std::is_trivially_move_constructible	src/tests/type_traits.h	/^    struct is_trivially_move_constructible$/;"	s	line:1295	language:C++	namespace:std	inherits:__and_<is_move_constructible<_Tp>,integral_constant<bool,__is_trivially_constructible(_Tp, _Tp&&)>>::type
std::is_union	src/tests/type_traits.h	/^    struct is_union$/;"	s	line:389	language:C++	namespace:std	inherits:integral_constant<bool,__is_union(_Tp)>
std::make_signed	src/tests/type_traits.h	/^    struct make_signed $/;"	s	line:1824	language:C++	namespace:std
std::make_signed::type	src/tests/type_traits.h	/^    { typedef typename __make_signed_selector<_Tp>::__type type; };$/;"	t	line:1825	language:C++	struct:std::make_signed	typeref:typename:__make_signed_selector<_Tp>::__type	access:public
std::make_signed_t	src/tests/type_traits.h	/^    using make_signed_t = typename make_signed<_Tp>::type;$/;"	t	line:1834	language:C++	namespace:std	typeref:typename:make_signed<_Tp>::type
std::make_unsigned	src/tests/type_traits.h	/^    struct make_unsigned $/;"	s	line:1712	language:C++	namespace:std
std::make_unsigned::type	src/tests/type_traits.h	/^    { typedef typename __make_unsigned_selector<_Tp>::__type type; };$/;"	t	line:1713	language:C++	struct:std::make_unsigned	typeref:typename:__make_unsigned_selector<_Tp>::__type	access:public
std::make_unsigned_t	src/tests/type_traits.h	/^    using make_unsigned_t = typename make_unsigned<_Tp>::type;$/;"	t	line:1838	language:C++	namespace:std	typeref:typename:make_unsigned<_Tp>::type
std::rank	src/tests/type_traits.h	/^    struct rank$/;"	s	line:1366	language:C++	namespace:std	inherits:integral_constant<std::size_t,0>
std::rank	src/tests/type_traits.h	/^    struct rank<_Tp[]>$/;"	s	line:1374	language:C++	namespace:std	inherits:integral_constant<std::size_t,1+rank<_Tp>::value>
std::rank	src/tests/type_traits.h	/^    struct rank<_Tp[_Size]>$/;"	s	line:1370	language:C++	namespace:std	inherits:integral_constant<std::size_t,1+rank<_Tp>::value>
std::remove_all_extents	src/tests/type_traits.h	/^    struct remove_all_extents$/;"	s	line:1858	language:C++	namespace:std
std::remove_all_extents	src/tests/type_traits.h	/^    struct remove_all_extents<_Tp[]>$/;"	s	line:1866	language:C++	namespace:std
std::remove_all_extents	src/tests/type_traits.h	/^    struct remove_all_extents<_Tp[_Size]>$/;"	s	line:1862	language:C++	namespace:std
std::remove_all_extents::type	src/tests/type_traits.h	/^    { typedef _Tp     type; };$/;"	t	line:1859	language:C++	struct:std::remove_all_extents	typeref:typename:_Tp	access:public
std::remove_all_extents::type	src/tests/type_traits.h	/^    { typedef typename remove_all_extents<_Tp>::type     type; };$/;"	t	line:1863	language:C++	struct:std::remove_all_extents	typeref:typename:remove_all_extents<_Tp>::type	access:public
std::remove_all_extents::type	src/tests/type_traits.h	/^    { typedef typename remove_all_extents<_Tp>::type     type; };$/;"	t	line:1867	language:C++	struct:std::remove_all_extents	typeref:typename:remove_all_extents<_Tp>::type	access:public
std::remove_all_extents_t	src/tests/type_traits.h	/^    using remove_all_extents_t = typename remove_all_extents<_Tp>::type;$/;"	t	line:1876	language:C++	namespace:std	typeref:typename:remove_all_extents<_Tp>::type
std::remove_extent	src/tests/type_traits.h	/^    struct remove_extent$/;"	s	line:1845	language:C++	namespace:std
std::remove_extent	src/tests/type_traits.h	/^    struct remove_extent<_Tp[]>$/;"	s	line:1853	language:C++	namespace:std
std::remove_extent	src/tests/type_traits.h	/^    struct remove_extent<_Tp[_Size]>$/;"	s	line:1849	language:C++	namespace:std
std::remove_extent::type	src/tests/type_traits.h	/^    { typedef _Tp     type; };$/;"	t	line:1846	language:C++	struct:std::remove_extent	typeref:typename:_Tp	access:public
std::remove_extent::type	src/tests/type_traits.h	/^    { typedef _Tp     type; };$/;"	t	line:1850	language:C++	struct:std::remove_extent	typeref:typename:_Tp	access:public
std::remove_extent::type	src/tests/type_traits.h	/^    { typedef _Tp     type; };$/;"	t	line:1854	language:C++	struct:std::remove_extent	typeref:typename:_Tp	access:public
std::remove_extent_t	src/tests/type_traits.h	/^    using remove_extent_t = typename remove_extent<_Tp>::type;$/;"	t	line:1872	language:C++	namespace:std	typeref:typename:remove_extent<_Tp>::type
std::remove_pointer	src/tests/type_traits.h	/^    struct remove_pointer$/;"	s	line:1891	language:C++	namespace:std	inherits:__remove_pointer_helper<_Tp,typenameremove_cv<_Tp>::type>
std::remove_pointer_t	src/tests/type_traits.h	/^    using remove_pointer_t = typename remove_pointer<_Tp>::type;$/;"	t	line:1913	language:C++	namespace:std	typeref:typename:remove_pointer<_Tp>::type
std::remove_reference_t	src/tests/type_traits.h	/^    using remove_reference_t = typename remove_reference<_Tp>::type;$/;"	t	line:1573	language:C++	namespace:std	typeref:typename:remove_reference<_Tp>::type
std::result_of	src/tests/type_traits.h	/^    struct result_of<_Functor(_ArgTypes...)>$/;"	s	line:2315	language:C++	namespace:std	inherits:__result_of_impl<is_member_object_pointer<typenameremove_reference<_Functor>::type>::value,is_member_function_pointer<typenameremove_reference<_Functor>::type>::value,_Functor,_ArgTypes...>::type
std::result_of_t	src/tests/type_traits.h	/^    using result_of_t = typename result_of<_Tp>::type;$/;"	t	line:2358	language:C++	namespace:std	typeref:typename:result_of<_Tp>::type
std::true_type	src/tests/type_traits.h	/^  typedef integral_constant<bool, true>     true_type;$/;"	t	line:80	language:C++	namespace:std	typeref:typename:integral_constant<bool,true>
std::uint_least16_t	src/tests/type_traits.h	/^  typedef __UINT_LEAST16_TYPE__ uint_least16_t;$/;"	t	line:37	language:C++	namespace:std	typeref:typename:__UINT_LEAST16_TYPE__
std::uint_least32_t	src/tests/type_traits.h	/^  typedef __UINT_LEAST32_TYPE__ uint_least32_t;$/;"	t	line:38	language:C++	namespace:std	typeref:typename:__UINT_LEAST32_TYPE__
std::underlying_type	src/tests/type_traits.h	/^    struct underlying_type$/;"	s	line:2144	language:C++	namespace:std
std::underlying_type::type	src/tests/type_traits.h	/^      typedef __underlying_type(_Tp) type;$/;"	t	line:2146	language:C++	struct:std::underlying_type	access:public
std::underlying_type_t	src/tests/type_traits.h	/^    using underlying_type_t = typename underlying_type<_Tp>::type;$/;"	t	line:2354	language:C++	namespace:std	typeref:typename:underlying_type<_Tp>::type
storage	src/easylogging/easylogging++.h	/^  static inline base::type::StoragePointer storage() {$/;"	f	line:3657	language:C++	class:el::Helpers	typeref:typename:base::type::StoragePointer	access:public	signature:()
str	src/design_patterns/builder/builder.h	/^    std::string str() const $/;"	f	line:65	language:C++	struct:design_patterns::HtmlBuilder	typeref:typename:std::string	access:public	signature:() const
str	src/design_patterns/builder/builder.h	/^    std::string str(int indent = 0) const$/;"	f	line:24	language:C++	struct:design_patterns::HtmlElement	typeref:typename:std::string	access:public	signature:(int indent=0) const
stream	src/easylogging/easylogging++.h	/^  inline base::type::stringstream_t& stream(void) {$/;"	f	line:2337	language:C++	class:el::Logger	typeref:typename:base::type::stringstream_t &	access:private	signature:(void)
street	src/design_patterns/prototype/prototype.h	/^    string street;$/;"	m	line:15	language:C++	struct:design_patterns::WorkAddress	typeref:typename:string	access:public
stringToLevelMap	src/easylogging/easylogging++.cc	/^static struct StringToLevelItem stringToLevelMap[] = {$/;"	v	line:154	language:C++	namespace:el	typeref:struct:StringToLevelItem[]	file:
stringToMethod	src/http/HttpMethod.cpp	/^boost::optional<HTTPMethod> stringToMethod(string_piece::const_string_piece methodName)$/;"	f	line:20	language:C++	namespace:http	typeref:typename:boost::optional<HTTPMethod>	signature:(string_piece::const_string_piece methodName)
stringToMethod	src/http/HttpMethod.h	/^boost::optional<HTTPMethod> stringToMethod(string_piece::const_string_piece methodName);$/;"	p	line:29	language:C++	namespace:http	typeref:typename:boost::optional<HTTPMethod>	signature:(string_piece::const_string_piece methodName)
string_piece	src/string_piece/string_piece.cpp	/^namespace string_piece$/;"	n	line:3	language:C++	file:
string_piece	src/string_piece/string_piece.h	/^namespace string_piece$/;"	n	line:12	language:C++
string_piece::AsciiCaseInsensitiveEqual	src/string_piece/string_piece.h	/^struct AsciiCaseInsensitiveEqual$/;"	s	line:23	language:C++	namespace:string_piece
string_piece::AsciiCaseInsensitiveEqual::operator ()	src/string_piece/string_piece.h	/^    bool operator()(char lhs, char rhs) const$/;"	f	line:25	language:C++	struct:string_piece::AsciiCaseInsensitiveEqual	typeref:typename:bool	access:public	signature:(char lhs,char rhs) const
string_piece::AsciiCaseSensitiveEqual	src/string_piece/string_piece.h	/^struct AsciiCaseSensitiveEqual$/;"	s	line:15	language:C++	namespace:string_piece
string_piece::AsciiCaseSensitiveEqual::operator ()	src/string_piece/string_piece.h	/^    bool operator()(char lhs, char rhs) const$/;"	f	line:17	language:C++	struct:string_piece::AsciiCaseSensitiveEqual	typeref:typename:bool	access:public	signature:(char lhs,char rhs) const
string_piece::CaseInSensitiveEqual	src/string_piece/string_piece.h	/^struct CaseInSensitiveEqual$/;"	s	line:141	language:C++	namespace:string_piece
string_piece::CaseInSensitiveEqual	src/string_piece/string_piece.h	/^struct CaseInSensitiveEqual<T, T>$/;"	s	line:156	language:C++	namespace:string_piece
string_piece::CaseInSensitiveEqual	src/string_piece/string_piece.h	/^struct CaseInSensitiveEqual<T, char*>$/;"	s	line:197	language:C++	namespace:string_piece
string_piece::CaseInSensitiveEqual	src/string_piece/string_piece.h	/^struct CaseInSensitiveEqual<T, const char*>$/;"	s	line:167	language:C++	namespace:string_piece
string_piece::CaseInSensitiveEqual	src/string_piece/string_piece.h	/^struct CaseInSensitiveEqual<char*, T>$/;"	s	line:212	language:C++	namespace:string_piece
string_piece::CaseInSensitiveEqual	src/string_piece/string_piece.h	/^struct CaseInSensitiveEqual<const char*, T>$/;"	s	line:182	language:C++	namespace:string_piece
string_piece::CaseInSensitiveEqual::operator ()	src/string_piece/string_piece.h	/^    bool operator()(const T& lhs, const T& rhs)$/;"	f	line:158	language:C++	struct:string_piece::CaseInSensitiveEqual	typeref:typename:bool	access:public	signature:(const T & lhs,const T & rhs)
string_piece::CaseInSensitiveEqual::operator ()	src/string_piece/string_piece.h	/^    bool operator()(const T& lhs, const U& rhs)$/;"	f	line:143	language:C++	struct:string_piece::CaseInSensitiveEqual	typeref:typename:bool	access:public	signature:(const T & lhs,const U & rhs)
string_piece::CaseInSensitiveEqual::operator ()	src/string_piece/string_piece.h	/^    bool operator()(const T& lhs, const char* rhs)$/;"	f	line:169	language:C++	struct:string_piece::CaseInSensitiveEqual	typeref:typename:bool	access:public	signature:(const T & lhs,const char * rhs)
string_piece::CaseInSensitiveEqual::operator ()	src/string_piece/string_piece.h	/^    bool operator()(const T& lhs, const char* rhs)$/;"	f	line:184	language:C++	struct:string_piece::CaseInSensitiveEqual	typeref:typename:bool	access:public	signature:(const T & lhs,const char * rhs)
string_piece::CaseInSensitiveEqual::operator ()	src/string_piece/string_piece.h	/^    bool operator()(const T& lhs, const char* rhs)$/;"	f	line:199	language:C++	struct:string_piece::CaseInSensitiveEqual	typeref:typename:bool	access:public	signature:(const T & lhs,const char * rhs)
string_piece::CaseInSensitiveEqual::operator ()	src/string_piece/string_piece.h	/^    bool operator()(const T& lhs, const char* rhs)$/;"	f	line:214	language:C++	struct:string_piece::CaseInSensitiveEqual	typeref:typename:bool	access:public	signature:(const T & lhs,const char * rhs)
string_piece::CaseInSensitiveEqual::operator ()	src/string_piece/string_piece.h	/^    bool operator()(const U& lhs, const T& rhs)$/;"	f	line:148	language:C++	struct:string_piece::CaseInSensitiveEqual	typeref:typename:bool	access:public	signature:(const U & lhs,const T & rhs)
string_piece::CaseInSensitiveEqual::operator ()	src/string_piece/string_piece.h	/^    bool operator()(const char* lhs, const T& rhs)$/;"	f	line:174	language:C++	struct:string_piece::CaseInSensitiveEqual	typeref:typename:bool	access:public	signature:(const char * lhs,const T & rhs)
string_piece::CaseInSensitiveEqual::operator ()	src/string_piece/string_piece.h	/^    bool operator()(const char* lhs, const T& rhs)$/;"	f	line:189	language:C++	struct:string_piece::CaseInSensitiveEqual	typeref:typename:bool	access:public	signature:(const char * lhs,const T & rhs)
string_piece::CaseInSensitiveEqual::operator ()	src/string_piece/string_piece.h	/^    bool operator()(const char* lhs, const T& rhs)$/;"	f	line:204	language:C++	struct:string_piece::CaseInSensitiveEqual	typeref:typename:bool	access:public	signature:(const char * lhs,const T & rhs)
string_piece::CaseInSensitiveEqual::operator ()	src/string_piece/string_piece.h	/^    bool operator()(const char* lhs, const T& rhs)$/;"	f	line:219	language:C++	struct:string_piece::CaseInSensitiveEqual	typeref:typename:bool	access:public	signature:(const char * lhs,const T & rhs)
string_piece::Range	src/string_piece/string_piece.h	/^class Range$/;"	c	line:40	language:C++	namespace:string_piece
string_piece::Range::Range	src/string_piece/string_piece.h	/^    Range() : begin_(), end_(){}$/;"	f	line:53	language:C++	class:string_piece::Range	access:public	signature:()
string_piece::Range::Range	src/string_piece/string_piece.h	/^    Range(Range&&) = default;$/;"	p	line:63	language:C++	class:string_piece::Range	access:public	signature:(Range &&)
string_piece::Range::Range	src/string_piece/string_piece.h	/^    Range(const Range&) = default;$/;"	p	line:62	language:C++	class:string_piece::Range	access:public	signature:(const Range &)
string_piece::Range::Range	src/string_piece/string_piece.h	/^    Range(const std::string &str) : begin_(str.data()), end_(str.data() + str.size()) {}$/;"	f	line:59	language:C++	class:string_piece::Range	access:public	signature:(const std::string & str)
string_piece::Range::Range	src/string_piece/string_piece.h	/^    Range(iterator begin) : begin_(begin), end_(begin_ + ::strlen(begin_)){}$/;"	f	line:60	language:C++	class:string_piece::Range	access:public	signature:(iterator begin)
string_piece::Range::Range	src/string_piece/string_piece.h	/^    Range(iterator begin, iterator end) : begin_(begin), end_(end){}$/;"	f	line:54	language:C++	class:string_piece::Range	access:public	signature:(iterator begin,iterator end)
string_piece::Range::Range	src/string_piece/string_piece.h	/^    Range(iterator begin, size_type size) : begin_(begin), end_(begin + size){}$/;"	f	line:55	language:C++	class:string_piece::Range	access:public	signature:(iterator begin,size_type size)
string_piece::Range::begin	src/string_piece/string_piece.h	/^    iterator begin() {return begin_;}$/;"	f	line:73	language:C++	class:string_piece::Range	typeref:typename:iterator	access:public	signature:()
string_piece::Range::begin_	src/string_piece/string_piece.h	/^    iterator begin_;$/;"	m	line:127	language:C++	class:string_piece::Range	typeref:typename:iterator	access:private
string_piece::Range::caseInsensitiveEqual	src/string_piece/string_piece.h	/^    bool caseInsensitiveEqual(recipes::AddLowConst_t<Iter> str)$/;"	f	line:99	language:C++	class:string_piece::Range	typeref:typename:bool	access:public	signature:(recipes::AddLowConst_t<Iter> str)
string_piece::Range::cbegin	src/string_piece/string_piece.h	/^    const_iterator cbegin() const {return begin_;}$/;"	f	line:74	language:C++	class:string_piece::Range	typeref:typename:const_iterator	access:public	signature:() const
string_piece::Range::cend	src/string_piece/string_piece.h	/^    const_iterator cend() const {return end_;}$/;"	f	line:76	language:C++	class:string_piece::Range	typeref:typename:const_iterator	access:public	signature:() const
string_piece::Range::const_iterator	src/string_piece/string_piece.h	/^    using const_iterator = std::add_const_t<iterator>;$/;"	t	line:50	language:C++	class:string_piece::Range	typeref:typename:std::add_const_t<iterator>	access:public
string_piece::Range::copy	src/string_piece/string_piece.h	/^    recipes::RemoveLowConst_t<Iter> copy()$/;"	f	line:112	language:C++	class:string_piece::Range	typeref:typename:recipes::RemoveLowConst_t<Iter>	access:public	signature:()
string_piece::Range::difference_type	src/string_piece/string_piece.h	/^    using difference_type = typename it_traits::difference_type;$/;"	t	line:46	language:C++	class:string_piece::Range	typeref:typename:it_traits::difference_type	access:public
string_piece::Range::end	src/string_piece/string_piece.h	/^    iterator end() {return end_;}$/;"	f	line:75	language:C++	class:string_piece::Range	typeref:typename:iterator	access:public	signature:()
string_piece::Range::end_	src/string_piece/string_piece.h	/^    iterator end_;$/;"	m	line:128	language:C++	class:string_piece::Range	typeref:typename:iterator	access:private
string_piece::Range::find	src/string_piece/string_piece.h	/^    int find(const Range<T>& str)$/;"	f	line:85	language:C++	class:string_piece::Range	typeref:typename:int	access:public	signature:(const Range<T> & str)
string_piece::Range::find	src/string_piece/string_piece.h	/^    size_type find(value_type value)$/;"	f	line:78	language:C++	class:string_piece::Range	typeref:typename:size_type	access:public	signature:(value_type value)
string_piece::Range::it_traits	src/string_piece/string_piece.h	/^    using it_traits = std::iterator_traits<Iter>;$/;"	t	line:43	language:C++	class:string_piece::Range	typeref:typename:std::iterator_traits<Iter>	access:public
string_piece::Range::iterator	src/string_piece/string_piece.h	/^    using iterator = Iter;$/;"	t	line:49	language:C++	class:string_piece::Range	typeref:typename:Iter	access:public
string_piece::Range::operator =	src/string_piece/string_piece.h	/^    Range &operator=(const Range &range) = default;$/;"	p	line:64	language:C++	class:string_piece::Range	typeref:typename:Range &	access:public	signature:(const Range & range)
string_piece::Range::operator ==	src/string_piece/string_piece.h	/^    bool operator==(const Range& range) const$/;"	f	line:66	language:C++	class:string_piece::Range	typeref:typename:bool	access:public	signature:(const Range & range) const
string_piece::Range::pointer	src/string_piece/string_piece.h	/^    using pointer = typename it_traits::pointer;$/;"	t	line:45	language:C++	class:string_piece::Range	typeref:typename:it_traits::pointer	access:public
string_piece::Range::reference	src/string_piece/string_piece.h	/^    using reference = typename it_traits::reference;$/;"	t	line:47	language:C++	class:string_piece::Range	typeref:typename:it_traits::reference	access:public
string_piece::Range::size	src/string_piece/string_piece.h	/^    constexpr size_type size() const $/;"	f	line:106	language:C++	class:string_piece::Range	typeref:typename:size_type	access:public	signature:() const
string_piece::Range::size_type	src/string_piece/string_piece.h	/^    using size_type = std::size_t;$/;"	t	line:51	language:C++	class:string_piece::Range	typeref:typename:std::size_t	access:public
string_piece::Range::sub_string	src/string_piece/string_piece.h	/^    Range<iterator> sub_string(size_type first, size_type len = std::string::npos)$/;"	f	line:90	language:C++	class:string_piece::Range	typeref:typename:Range<iterator>	access:public	signature:(size_type first,size_type len=std::string::npos)
string_piece::Range::value_type	src/string_piece/string_piece.h	/^    using value_type = typename it_traits::value_type;$/;"	t	line:44	language:C++	class:string_piece::Range	typeref:typename:it_traits::value_type	access:public
string_piece::const_string_piece	src/string_piece/string_piece.h	/^using const_string_piece = Range<const char*>;$/;"	t	line:138	language:C++	namespace:string_piece	typeref:typename:Range<const char * >
string_piece::mutable_string_piece	src/string_piece/string_piece.h	/^using mutable_string_piece = Range<char*>;$/;"	t	line:137	language:C++	namespace:string_piece	typeref:typename:Range<char * >
string_piece::operator <<	src/string_piece/string_piece.h	/^std::ostream& operator<<(std::ostream& os, Range<T> str)$/;"	f	line:132	language:C++	namespace:string_piece	typeref:typename:std::ostream &	signature:(std::ostream & os,Range<T> str)
string_piece_t	src/http_parser/URLParser.h	/^    using string_piece_t = string_piece::mutable_string_piece;$/;"	t	line:15	language:C++	class:http::URLParser	typeref:typename:string_piece::mutable_string_piece	access:public
string_piece_test	test/string_piece/string_piece_test.cpp	/^namespace string_piece_test$/;"	n	line:8	language:C++	file:
string_piece_test::TEST	test/string_piece/string_piece_test.cpp	/^TEST(string_piece, CaseInsensitiveEqual)$/;"	f	line:67	language:C++	namespace:string_piece_test	signature:(string_piece,CaseInsensitiveEqual)
string_piece_test::TEST	test/string_piece/string_piece_test.cpp	/^TEST(string_piece, CaseInsensitiveEqual_member_function)$/;"	f	line:88	language:C++	namespace:string_piece_test	signature:(string_piece,CaseInsensitiveEqual_member_function)
string_piece_test::TEST	test/string_piece/string_piece_test.cpp	/^TEST(string_piece, copy)$/;"	f	line:48	language:C++	namespace:string_piece_test	signature:(string_piece,copy)
string_piece_test::TEST	test/string_piece/string_piece_test.cpp	/^TEST(string_piece, test_find)$/;"	f	line:36	language:C++	namespace:string_piece_test	signature:(string_piece,test_find)
string_piece_test::TEST	test/string_piece/string_piece_test.cpp	/^TEST(string_piece, test_sub_string)$/;"	f	line:11	language:C++	namespace:string_piece_test	signature:(string_piece,test_sub_string)
string_piece_test::TEST	test/string_piece/string_piece_test.cpp	/^TEST(string_piece, test_sub_string2)$/;"	f	line:22	language:C++	namespace:string_piece_test	signature:(string_piece,test_sub_string2)
string_piece_test::test	test/string_piece/string_piece_test.cpp	/^void test()$/;"	f	line:109	language:C++	namespace:string_piece_test	typeref:typename:void	signature:()
string_t	src/easylogging/easylogging++.h	/^typedef std::wstring string_t;$/;"	t	line:515	language:C++	namespace:el::base::type	typeref:typename:std::wstring
stringstream_t	src/easylogging/easylogging++.h	/^typedef std::wstringstream stringstream_t;$/;"	t	line:516	language:C++	namespace:el::base::type	typeref:typename:std::wstringstream
sub_string	src/string_piece/string_piece.h	/^    Range<iterator> sub_string(size_type first, size_type len = std::string::npos)$/;"	f	line:90	language:C++	class:string_piece::Range	typeref:typename:Range<iterator>	access:public	signature:(size_type first,size_type len=std::string::npos)
subsecondPrecision	src/easylogging/easylogging++.cc	/^const base::SubsecondPrecision& TypedConfigurations::subsecondPrecision(Level level) {$/;"	f	line:1650	language:C++	class:el::base::TypedConfigurations	typeref:typename:const base::SubsecondPrecision &	signature:(Level level)
subsecondPrecision	src/easylogging/easylogging++.h	/^  const base::SubsecondPrecision& subsecondPrecision(Level level = Level::Global);$/;"	p	line:1923	language:C++	class:el::base::TypedConfigurations	typeref:typename:const base::SubsecondPrecision &	access:public	signature:(Level level=Level::Global)
substring_search	src/substring_search/KMP.cpp	/^namespace substring_search$/;"	n	line:3	language:C++	file:
substring_search	src/substring_search/KMP.h	/^namespace substring_search$/;"	n	line:10	language:C++
substring_search::build_search_table	src/substring_search/KMP.cpp	/^build_search_table(const char* pattern, size_t len)$/;"	f	line:6	language:C++	namespace:substring_search	typeref:typename:std::shared_ptr<std::vector<int>>	signature:(const char * pattern,size_t len)
substring_search::build_search_table	src/substring_search/KMP.h	/^build_search_table(const char *pattern, size_t len);$/;"	p	line:13	language:C++	namespace:substring_search	typeref:typename:std::shared_ptr<std::vector<int>>	signature:(const char * pattern,size_t len)
substring_search::kmp_search	src/substring_search/KMP.cpp	/^int kmp_search(const char *text, size_t text_len, const char *pattern, size_t pattern_len)$/;"	f	line:67	language:C++	namespace:substring_search	typeref:typename:int	signature:(const char * text,size_t text_len,const char * pattern,size_t pattern_len)
substring_search::kmp_search	src/substring_search/KMP.cpp	/^int kmp_search(const char* text, const char* pattern)$/;"	f	line:28	language:C++	namespace:substring_search	typeref:typename:int	signature:(const char * text,const char * pattern)
substring_search::kmp_search	src/substring_search/KMP.h	/^int kmp_search(const char *text, const char *pattern);$/;"	p	line:15	language:C++	namespace:substring_search	typeref:typename:int	signature:(const char * text,const char * pattern)
substring_search::kmp_search	src/substring_search/KMP.h	/^int kmp_search(const char *text, size_t text_len, const char *pattern, size_t pattern_len);$/;"	p	line:17	language:C++	namespace:substring_search	typeref:typename:int	signature:(const char * text,size_t text_len,const char * pattern,size_t pattern_len)
suite	src/design_patterns/prototype/prototype.h	/^    int suite;$/;"	m	line:17	language:C++	struct:design_patterns::WorkAddress	typeref:typename:int	access:public
targetCreature	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    NewCreature& targetCreature;$/;"	m	line:86	language:C++	struct:design_patterns::NewCreatureModifier	typeref:typename:NewCreature &	access:private
targetCreature	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^    Creature& targetCreature;$/;"	m	line:48	language:C++	class:design_patterns::CreatureModifier	typeref:typename:Creature &	access:protected
termSupportsColor	src/easylogging/easylogging++.cc	/^bool OS::termSupportsColor(void) {$/;"	f	line:1145	language:C++	class:el::base::utils::OS	typeref:typename:bool	signature:(void)
termSupportsColor	src/easylogging/easylogging++.h	/^  static bool termSupportsColor(void);$/;"	p	line:1175	language:C++	class:el::base::utils::OS	typeref:typename:bool	access:public	signature:(void)
test	src/easylogging/test_easylogging.h	/^void test()$/;"	f	line:54	language:C++	namespace:easylogging	typeref:typename:void	signature:()
test	test/http_parser/http_parser_test.cpp	/^void test()$/;"	f	line:68	language:C++	namespace:http_parser_test	typeref:typename:void	signature:()
test	test/string_piece/string_piece_test.cpp	/^void test()$/;"	f	line:109	language:C++	namespace:string_piece_test	typeref:typename:void	signature:()
test1	src/bytebuf/test.h	/^void test1(){$/;"	f	line:6	language:C++	namespace:bytebuf_test	typeref:typename:void	signature:()
test_bind	src/tests/tests.h	/^void test_bind()$/;"	f	line:49	language:C++	typeref:typename:void	signature:()
test_boost_format	src/main.cpp	/^int test_boost_format()$/;"	f	line:45	language:C++	typeref:typename:int	signature:()
test_boost_range	src/tests/tests.h	/^void test_boost_range()$/;"	f	line:120	language:C++	typeref:typename:void	signature:()
test_boost_signals2	src/tests/tests.h	/^void test_boost_signals2()$/;"	f	line:124	language:C++	typeref:typename:void	signature:()
test_broke_chain	src/design_patterns/chain_of_responsibility/broke_chain.h	/^void test_broke_chain()$/;"	f	line:97	language:C++	namespace:design_patterns	typeref:typename:void	signature:()
test_build	src/design_patterns/builder/builder.h	/^void test_build()$/;"	f	line:85	language:C++	namespace:design_patterns	typeref:typename:void	signature:()
test_build_search_table	test/substring_search/kmp_test.cpp	/^void test_build_search_table(build_search_table_callback build_search_table_call)$/;"	f	line:30	language:C++	namespace:kmp_test	typeref:typename:void	signature:(build_search_table_callback build_search_table_call)
test_emplace_back	src/tests/tests.h	/^void test_emplace_back()$/;"	f	line:159	language:C++	typeref:typename:void	signature:()
test_emplace_back1	src/tests/tests.h	/^void test_emplace_back1()$/;"	f	line:169	language:C++	typeref:typename:void	signature:()
test_emplace_back2	src/tests/tests.h	/^void test_emplace_back2()$/;"	f	line:179	language:C++	typeref:typename:void	signature:()
test_factory_method	src/design_patterns/factory/factory_method.h	/^void test_factory_method()$/;"	f	line:51	language:C++	namespace:design_patterns	typeref:typename:void	signature:()
test_groovy_builder	src/design_patterns/builder/groovy_builder.h	/^void test_groovy_builder()$/;"	f	line:37	language:C++	namespace:design_patterns	typeref:typename:void	signature:()
test_instrusive	src/tests/tests.h	/^void test_instrusive()$/;"	f	line:199	language:C++	typeref:typename:void	signature:()
test_mergeMultiSortedArray	src/al/merge.h	/^void test_mergeMultiSortedArray()$/;"	f	line:76	language:C++	namespace:al	typeref:typename:void	signature:()
test_mysql	src/main.cpp	/^int test_mysql()$/;"	f	line:34	language:C++	typeref:typename:int	signature:()
test_nestedClass	src/tests/tests.h	/^void test_nestedClass()$/;"	f	line:363	language:C++	typeref:typename:void	signature:()
test_pointer_chain	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^void test_pointer_chain()$/;"	f	line:74	language:C++	namespace:design_patterns	typeref:typename:void	signature:()
test_prototype	src/design_patterns/prototype/prototype.h	/^int test_prototype()$/;"	f	line:64	language:C++	namespace:design_patterns	typeref:typename:int	signature:()
test_shared_ptr	src/tests/tests.h	/^void test_shared_ptr()$/;"	f	line:107	language:C++	typeref:typename:void	signature:()
test_traits	test/http_parser/http_parser_test.cpp	/^void test_traits()$/;"	f	line:26	language:C++	namespace:http_parser_test	typeref:typename:void	signature:()
test_variant	src/tests/tests.h	/^void test_variant()$/;"	f	line:94	language:C++	typeref:typename:void	signature:()
test_vsnprintf	src/tests/tests.h	/^void test_vsnprintf(const char *fmt, ...)$/;"	f	line:81	language:C++	typeref:typename:void	signature:(const char * fmt,...)
text	src/design_patterns/builder/builder.h	/^    std::string text;$/;"	m	line:16	language:C++	struct:design_patterns::HtmlElement	typeref:typename:std::string	access:public
text	src/design_patterns/builder/groovy_builder.h	/^    string text;$/;"	m	line:15	language:C++	struct:design_patterns::Tag	typeref:typename:string	access:public
threadRoutine	src/easylogging/test_easylogging.h	/^void threadRoutine(const string& str)$/;"	f	line:28	language:C++	namespace:easylogging	typeref:typename:void	signature:(const string & str)
thread_routine	src/design_patterns/basic/thread_safe_singleton.h	/^void thread_routine()$/;"	f	line:68	language:C++	namespace:design_patterns	typeref:typename:void	signature:()
thread_routine2	src/design_patterns/basic/thread_safe_singleton.h	/^void thread_routine2()$/;"	f	line:104	language:C++	namespace:design_patterns	typeref:typename:void	signature:()
thread_routine3	src/design_patterns/basic/thread_safe_singleton.h	/^void thread_routine3()$/;"	f	line:147	language:C++	namespace:design_patterns	typeref:typename:void	signature:()
thread_routine4	src/design_patterns/basic/thread_safe_singleton.h	/^void thread_routine4()$/;"	f	line:154	language:C++	namespace:design_patterns	typeref:typename:void	signature:()
thread_safe_singleton	src/design_patterns/basic/thread_safe_singleton.h	/^class thread_safe_singleton{$/;"	c	line:16	language:C++	namespace:design_patterns
thread_safe_singleton_test	src/design_patterns/basic/thread_safe_singleton.h	/^void thread_safe_singleton_test(){$/;"	f	line:179	language:C++	namespace:design_patterns	typeref:typename:void	signature:()
threading	src/easylogging/easylogging++.cc	/^namespace threading {$/;"	n	line:1385	language:C++	namespace:el::base	file:
threading	src/easylogging/easylogging++.h	/^namespace threading {$/;"	n	line:892	language:C++	namespace:el::base
timeoutFn	test/folly/HHWheelTimer_test.cpp	/^void timeoutFn()$/;"	f	line:6	language:C++	typeref:typename:void	signature:()
timer	src/utils/timer.h	/^    timer(const string s) : timer_(), s_(s){$/;"	f	line:12	language:C++	class:utils::timer	access:public	signature:(const string s)
timer	src/utils/timer.h	/^class timer{$/;"	c	line:10	language:C++	namespace:utils
timer_	src/utils/timer.h	/^    boost::timer::cpu_timer timer_;$/;"	m	line:23	language:C++	class:utils::timer	typeref:typename:boost::timer::cpu_timer	access:private
timevalToString	src/easylogging/easylogging++.cc	/^std::string DateTime::timevalToString(struct timeval tval, const char* format,$/;"	f	line:1187	language:C++	class:el::base::utils::DateTime	typeref:typename:std::string	signature:(struct timeval tval,const char * format,const el::base::SubsecondPrecision * ssPrec)
timevalToString	src/easylogging/easylogging++.h	/^  static std::string timevalToString(struct timeval tval, const char* format,$/;"	p	line:1193	language:C++	class:el::base::utils::DateTime	typeref:typename:std::string	access:public	signature:(struct timeval tval,const char * format,const el::base::SubsecondPrecision * ssPrec)
toFile	src/easylogging/easylogging++.cc	/^bool TypedConfigurations::toFile(Level level) {$/;"	f	line:1634	language:C++	class:el::base::TypedConfigurations	typeref:typename:bool	signature:(Level level)
toFile	src/easylogging/easylogging++.h	/^  bool toFile(Level level);$/;"	p	line:1919	language:C++	class:el::base::TypedConfigurations	typeref:typename:bool	access:public	signature:(Level level)
toStandardOutput	src/easylogging/easylogging++.cc	/^bool TypedConfigurations::toStandardOutput(Level level) {$/;"	f	line:1642	language:C++	class:el::base::TypedConfigurations	typeref:typename:bool	signature:(Level level)
toStandardOutput	src/easylogging/easylogging++.h	/^  bool toStandardOutput(Level level);$/;"	p	line:1921	language:C++	class:el::base::TypedConfigurations	typeref:typename:bool	access:public	signature:(Level level)
toUpper	src/easylogging/easylogging++.cc	/^std::string& Str::toUpper(std::string& str) {$/;"	f	line:948	language:C++	class:el::base::utils::Str	typeref:typename:std::string &	signature:(std::string & str)
toUpper	src/easylogging/easylogging++.h	/^  static std::string& toUpper(std::string& str);$/;"	p	line:1115	language:C++	class:el::base::utils::Str	typeref:typename:std::string &	access:public	signature:(std::string & str)
to_string	src/mysql_gtid/mysql_gtid.cpp	/^MySQLUuid::StringT MySQLUuid::to_string() const$/;"	f	line:50	language:C++	class:MySQLUuid	typeref:typename:MySQLUuid::StringT	signature:() const
to_string	src/mysql_gtid/mysql_gtid.cpp	/^std::string MySQLGtidSet::to_string() const {$/;"	f	line:197	language:C++	class:MySQLGtidSet	typeref:typename:std::string	signature:() const
to_string	src/mysql_gtid/mysql_gtid.h	/^  StringT to_string() const;$/;"	p	line:28	language:C++	struct:MySQLUuid	typeref:typename:StringT	access:public	signature:() const
to_string	src/mysql_gtid/mysql_gtid.h	/^  std::string to_string() const;$/;"	p	line:78	language:C++	class:MySQLGtidSet	typeref:typename:std::string	access:public	signature:() const
tokens	src/http_parser/http_parser.cpp	/^static const char tokens[256] = {$/;"	v	line:191	language:C++	typeref:typename:const char[256]	file:
top	src/al/MinHeap.h	/^    const T& top() const {return container_.top();}$/;"	f	line:32	language:C++	class:al::MinHeap	typeref:typename:const T &	access:public	signature:() const
total_len	src/buffer/buffer.h	/^    uint32_t total_len() const { return total_len_; }$/;"	f	line:238	language:C++	class:buffer	typeref:typename:uint32_t	access:public	signature:() const
total_len_	src/buffer/buffer.h	/^    uint32_t                          total_len_;$/;"	m	line:267	language:C++	class:buffer	typeref:typename:uint32_t	access:private
triggerDispatch	src/easylogging/easylogging++.cc	/^void Writer::triggerDispatch(void) {$/;"	f	line:2627	language:C++	class:el::base::Writer	typeref:typename:void	signature:(void)
triggerDispatch	src/easylogging/easylogging++.h	/^  void triggerDispatch(void);$/;"	p	line:3247	language:C++	class:el::base::Writer	typeref:typename:void	access:protected	signature:(void)
trim	src/easylogging/easylogging++.cc	/^std::string& Str::trim(std::string& str) {$/;"	f	line:900	language:C++	class:el::base::utils::Str	typeref:typename:std::string &	signature:(std::string & str)
trim	src/easylogging/easylogging++.h	/^  static std::string& trim(std::string& str);$/;"	p	line:1077	language:C++	class:el::base::utils::Str	typeref:typename:std::string &	access:public	signature:(std::string & str)
true_type	src/tests/type_traits.h	/^  typedef integral_constant<bool, true>     true_type;$/;"	t	line:80	language:C++	namespace:std	typeref:typename:integral_constant<bool,true>
try_lock	src/easylogging/easylogging++.h	/^  inline bool try_lock(void) {$/;"	f	line:927	language:C++	class:el::base::threading::internal::Mutex	typeref:typename:bool	access:public	signature:(void)
type	src/easylogging/easylogging++.h	/^namespace type {$/;"	n	line:502	language:C++	namespace:el::base
type	src/http_parser/http_parser.h	/^  unsigned int type : 2;         \/* enum http_parser_type *\/$/;"	m	line:297	language:C++	struct:http_parser	typeref:typename:unsigned int:2	access:public
type	src/tests/type_traits.h	/^		     is_base_of<__src_t, __dst_t>> type;$/;"	t	line:934	language:C++	struct:std::__is_base_to_derived_ref	typeref:typename:__and_<__not_<is_same<__src_t,__dst_t>>,is_base_of<__src_t,__dst_t>>	access:public
type	src/tests/type_traits.h	/^		    is_base_of<__dst_t, __src_t>>> type;$/;"	t	line:959	language:C++	struct:std::__is_lvalue_to_rvalue_ref	typeref:typename:__and_<__not_<is_function<__src_t>>,__or_<is_same<__src_t,__dst_t>,is_base_of<__dst_t,__src_t>>>	access:public
type	src/tests/type_traits.h	/^      >::type::type type;$/;"	t	line:2260	language:C++	struct:std::__result_of_memobj	access:public
type	src/tests/type_traits.h	/^      >::type::type type;$/;"	t	line:2276	language:C++	struct:std::__result_of_memfun	access:public
type	src/tests/type_traits.h	/^      typedef __failure_type type;$/;"	t	line:2282	language:C++	struct:std::__result_of_impl	typeref:typename:__failure_type	access:public
type	src/tests/type_traits.h	/^      typedef __underlying_type(_Tp) type;$/;"	t	line:2146	language:C++	struct:std::underlying_type	access:public
type	src/tests/type_traits.h	/^      typedef common_type<typename _CTp::type, _Args...> type;$/;"	t	line:2120	language:C++	struct:std::__expanded_common_type_wrapper	typeref:typename:common_type<typename _CTp::type,_Args...>	access:public
type	src/tests/type_traits.h	/^      typedef decltype(_S_test<_Functor, _ArgTypes...>(0)) type;$/;"	t	line:2311	language:C++	struct:std::__result_of_impl	access:public
type	src/tests/type_traits.h	/^      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;$/;"	t	line:2187	language:C++	struct:std::__result_of_memfun_ref	access:public
type	src/tests/type_traits.h	/^      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;$/;"	t	line:2206	language:C++	struct:std::__result_of_memfun_deref	access:public
type	src/tests/type_traits.h	/^      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;$/;"	t	line:2225	language:C++	struct:std::__result_of_memobj_ref	access:public
type	src/tests/type_traits.h	/^      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;$/;"	t	line:2244	language:C++	struct:std::__result_of_memobj_deref	access:public
type	src/tests/type_traits.h	/^      typedef decltype(_S_test<_Tp, _Up>(0)) type;$/;"	t	line:2098	language:C++	struct:std::__common_type_impl	access:public
type	src/tests/type_traits.h	/^      typedef decltype(_S_test<_Tp>(0)) type;$/;"	t	line:2114	language:C++	struct:std::__member_type_wrapper	access:public
type	src/tests/type_traits.h	/^      typedef decltype(__test<_From, _To>(0)) type;$/;"	t	line:1441	language:C++	class:std::__is_convertible_helper	access:public
type	src/tests/type_traits.h	/^      typedef decltype(__test<_From, _To>(0)) type;$/;"	t	line:867	language:C++	struct:std::__is_static_castable_impl	access:public
type	src/tests/type_traits.h	/^      typedef decltype(__test<_Tp, _Arg>(0)) type;$/;"	t	line:901	language:C++	struct:std::__is_direct_constructible_impl	access:public
type	src/tests/type_traits.h	/^      typedef decltype(__test<_Tp, _Args...>(0)) type;$/;"	t	line:1014	language:C++	struct:std::__is_nary_constructible_impl	access:public
type	src/tests/type_traits.h	/^      typedef decltype(__test<_Tp, _Up>(0)) type;$/;"	t	line:1179	language:C++	class:std::__is_assignable_helper	access:public
type	src/tests/type_traits.h	/^      typedef decltype(__test<_Tp>(0)) type;$/;"	t	line:715	language:C++	struct:std::__is_destructible_impl	access:public
type	src/tests/type_traits.h	/^      typedef decltype(__test<_Tp>(0)) type;$/;"	t	line:763	language:C++	struct:std::__is_nt_destructible_impl	access:public
type	src/tests/type_traits.h	/^      typedef decltype(__test<_Tp>(0)) type;$/;"	t	line:806	language:C++	struct:std::__is_default_constructible_impl	access:public
type	src/tests/type_traits.h	/^      typedef integral_constant<_Tp, __v>   type;$/;"	t	line:66	language:C++	struct:std::integral_constant	typeref:typename:integral_constant<_Tp,__v>	access:public
type	src/tests/type_traits.h	/^      typedef typename __decay_selector<__remove_type>::__type type;$/;"	t	line:2025	language:C++	class:std::decay	typeref:typename:__decay_selector<__remove_type>::__type	access:public
type	src/tests/type_traits.h	/^      typedef typename aligned_storage<_S_len, alignment_value>::type type;$/;"	t	line:1992	language:C++	struct:std::aligned_union	typeref:typename:aligned_storage<_S_len,alignment_value>::type	access:public
type	src/tests/type_traits.h	/^      union type$/;"	u	line:1944	language:C++	struct:std::aligned_storage	access:public
type	src/tests/type_traits.h	/^    { typedef _Iffalse type; };$/;"	t	line:2075	language:C++	struct:std::conditional	typeref:typename:_Iffalse	access:public
type	src/tests/type_traits.h	/^    { typedef _Iftrue type; };$/;"	t	line:2070	language:C++	struct:std::conditional	typeref:typename:_Iftrue	access:public
type	src/tests/type_traits.h	/^    { typedef _Tp     type; };$/;"	t	line:1846	language:C++	struct:std::remove_extent	typeref:typename:_Tp	access:public
type	src/tests/type_traits.h	/^    { typedef _Tp     type; };$/;"	t	line:1850	language:C++	struct:std::remove_extent	typeref:typename:_Tp	access:public
type	src/tests/type_traits.h	/^    { typedef _Tp     type; };$/;"	t	line:1854	language:C++	struct:std::remove_extent	typeref:typename:_Tp	access:public
type	src/tests/type_traits.h	/^    { typedef _Tp     type; };$/;"	t	line:1859	language:C++	struct:std::remove_all_extents	typeref:typename:_Tp	access:public
type	src/tests/type_traits.h	/^    { typedef _Tp     type; };$/;"	t	line:1883	language:C++	struct:std::__remove_pointer_helper	typeref:typename:_Tp	access:public
type	src/tests/type_traits.h	/^    { typedef _Tp     type; };$/;"	t	line:1899	language:C++	struct:std::__add_pointer_helper	typeref:typename:_Tp	access:public
type	src/tests/type_traits.h	/^    { typedef _Tp   type; };$/;"	t	line:1544	language:C++	struct:std::__add_lvalue_reference_helper	typeref:typename:_Tp	access:public
type	src/tests/type_traits.h	/^    { typedef _Tp   type; };$/;"	t	line:1558	language:C++	struct:std::__add_rvalue_reference_helper	typeref:typename:_Tp	access:public
type	src/tests/type_traits.h	/^    { typedef _Tp type; };$/;"	t	line:143	language:C++	struct:std::__success_type	typeref:typename:_Tp	access:public
type	src/tests/type_traits.h	/^    { typedef _Tp type; };$/;"	t	line:2061	language:C++	struct:std::enable_if	typeref:typename:_Tp	access:public
type	src/tests/type_traits.h	/^    { typedef _Tp&   type; };$/;"	t	line:1548	language:C++	struct:std::__add_lvalue_reference_helper	typeref:typename:_Tp &	access:public
type	src/tests/type_traits.h	/^    { typedef _Tp&&   type; };$/;"	t	line:1562	language:C++	struct:std::__add_rvalue_reference_helper	typeref:typename:_Tp &&	access:public
type	src/tests/type_traits.h	/^    { typedef _Up     type; };$/;"	t	line:1887	language:C++	struct:std::__remove_pointer_helper	typeref:typename:_Up	access:public
type	src/tests/type_traits.h	/^    { typedef __failure_type type; };$/;"	t	line:2125	language:C++	struct:std::__expanded_common_type_wrapper	typeref:typename:__failure_type	access:public
type	src/tests/type_traits.h	/^    { typedef typename __make_signed_selector<_Tp>::__type type; };$/;"	t	line:1825	language:C++	struct:std::make_signed	typeref:typename:__make_signed_selector<_Tp>::__type	access:public
type	src/tests/type_traits.h	/^    { typedef typename __make_unsigned_selector<_Tp>::__type type; };$/;"	t	line:1713	language:C++	struct:std::make_unsigned	typeref:typename:__make_unsigned_selector<_Tp>::__type	access:public
type	src/tests/type_traits.h	/^    { typedef typename decay<_Tp>::type type; };$/;"	t	line:2129	language:C++	struct:std::common_type	typeref:typename:decay<_Tp>::type	access:public
type	src/tests/type_traits.h	/^    { typedef typename is_void<_To>::type type; };$/;"	t	line:1423	language:C++	struct:std::__is_convertible_helper	typeref:typename:is_void<_To>::type	access:public
type	src/tests/type_traits.h	/^    { typedef typename remove_all_extents<_Tp>::type     type; };$/;"	t	line:1863	language:C++	struct:std::remove_all_extents	typeref:typename:remove_all_extents<_Tp>::type	access:public
type	src/tests/type_traits.h	/^    { typedef typename remove_all_extents<_Tp>::type     type; };$/;"	t	line:1867	language:C++	struct:std::remove_all_extents	typeref:typename:remove_all_extents<_Tp>::type	access:public
type	src/tests/type_traits.h	/^    { typedef typename remove_reference<_Tp>::type*     type; };$/;"	t	line:1903	language:C++	struct:std::__add_pointer_helper	typeref:typename:remove_reference<_Tp>::type *	access:public
type	src/utils/type_traits.h	/^    using type = T *;$/;"	t	line:32	language:C++	struct:recipes::RemoveLowConst	typeref:typename:T *	access:public
type	src/utils/type_traits.h	/^    using type = T*;$/;"	t	line:26	language:C++	struct:recipes::RemoveLowConst	typeref:typename:T *	access:public
type	src/utils/type_traits.h	/^    using type = const T*;$/;"	t	line:44	language:C++	struct:recipes::AddLowConst	typeref:typename:const T *	access:public
type	src/utils/type_traits.h	/^    using type = const T*;$/;"	t	line:50	language:C++	struct:recipes::AddLowConst	typeref:typename:const T *	access:public
type	src/utils/type_traits.h	/^  typedef int type;$/;"	t	line:11	language:C++	struct:recipes::IsCharPointer	typeref:typename:int	access:public
type	src/utils/type_traits.h	/^  typedef int type;$/;"	t	line:17	language:C++	struct:recipes::IsCharPointer	typeref:typename:int	access:public
typedConfigurations	src/easylogging/easylogging++.h	/^  inline base::TypedConfigurations* typedConfigurations(void) {$/;"	f	line:2248	language:C++	class:el::Logger	typeref:typename:base::TypedConfigurations *	access:public	signature:(void)
uint16_t	src/http_parser/http_parser.h	/^typedef unsigned __int16 uint16_t;$/;"	t	line:41	language:C++	typeref:typename:unsigned __int16
uint32_t	src/http_parser/http_parser.h	/^typedef unsigned __int32 uint32_t;$/;"	t	line:43	language:C++	typeref:typename:unsigned __int32
uint64_t	src/http_parser/http_parser.h	/^typedef unsigned __int64 uint64_t;$/;"	t	line:45	language:C++	typeref:typename:unsigned __int64
uint8_t	src/http_parser/http_parser.h	/^typedef unsigned __int8 uint8_t;$/;"	t	line:39	language:C++	typeref:typename:unsigned __int8
uint_least16_t	src/tests/type_traits.h	/^  typedef __UINT_LEAST16_TYPE__ uint_least16_t;$/;"	t	line:37	language:C++	namespace:std	typeref:typename:__UINT_LEAST16_TYPE__
uint_least32_t	src/tests/type_traits.h	/^  typedef __UINT_LEAST32_TYPE__ uint_least32_t;$/;"	t	line:38	language:C++	namespace:std	typeref:typename:__UINT_LEAST32_TYPE__
underlying_type	src/tests/type_traits.h	/^    struct underlying_type$/;"	s	line:2144	language:C++	namespace:std
underlying_type_t	src/tests/type_traits.h	/^    using underlying_type_t = typename underlying_type<_Tp>::type;$/;"	t	line:2354	language:C++	namespace:std	typeref:typename:underlying_type<_Tp>::type
unhex	src/http_parser/http_parser.cpp	/^static const int8_t unhex[256] =$/;"	v	line:226	language:C++	typeref:typename:const int8_t[256]	file:
uninstallCallback	src/easylogging/easylogging++.h	/^  static void uninstallCallback(const std::string& id, std::unordered_map<std::string, TPtr>* ma/;"	f	line:1542	language:C++	class:el::base::utils::Utils	typeref:typename:void	access:public	signature:(const std::string & id,std::unordered_map<std::string,TPtr> * mapT)
uninstallCustomFormatSpecifier	src/easylogging/easylogging++.cc	/^bool Storage::uninstallCustomFormatSpecifier(const char* formatSpecifier) {$/;"	f	line:2145	language:C++	class:el::base::Storage	typeref:typename:bool	signature:(const char * formatSpecifier)
uninstallCustomFormatSpecifier	src/easylogging/easylogging++.h	/^  bool uninstallCustomFormatSpecifier(const char* formatSpecifier);$/;"	p	line:2627	language:C++	class:el::base::Storage	typeref:typename:bool	access:public	signature:(const char * formatSpecifier)
uninstallCustomFormatSpecifier	src/easylogging/easylogging++.h	/^  static inline bool uninstallCustomFormatSpecifier(const char* formatSpecifier) {$/;"	f	line:3767	language:C++	class:el::Helpers	typeref:typename:bool	access:public	signature:(const char * formatSpecifier)
uninstallLogDispatchCallback	src/easylogging/easylogging++.h	/^  inline void uninstallLogDispatchCallback(const std::string& id) {$/;"	f	line:2647	language:C++	class:el::base::Storage	typeref:typename:void	access:public	signature:(const std::string & id)
uninstallLogDispatchCallback	src/easylogging/easylogging++.h	/^  static inline void uninstallLogDispatchCallback(const std::string& id) {$/;"	f	line:3709	language:C++	class:el::Helpers	typeref:typename:void	access:public	signature:(const std::string & id)
uninstallLoggerRegistrationCallback	src/easylogging/easylogging++.h	/^  inline void uninstallLoggerRegistrationCallback(const std::string& id) {$/;"	f	line:2371	language:C++	class:el::base::RegisteredLoggers	typeref:typename:void	access:public	signature:(const std::string & id)
uninstallLoggerRegistrationCallback	src/easylogging/easylogging++.h	/^  static inline void uninstallLoggerRegistrationCallback(const std::string& id) {$/;"	f	line:3793	language:C++	class:el::Loggers	typeref:typename:void	access:public	signature:(const std::string & id)
uninstallPerformanceTrackingCallback	src/easylogging/easylogging++.h	/^  inline void uninstallPerformanceTrackingCallback(const std::string& id) {$/;"	f	line:2663	language:C++	class:el::base::Storage	typeref:typename:void	access:public	signature:(const std::string & id)
uninstallPerformanceTrackingCallback	src/easylogging/easylogging++.h	/^  static inline void uninstallPerformanceTrackingCallback(const std::string& id) {$/;"	f	line:3724	language:C++	class:el::Helpers	typeref:typename:void	access:public	signature:(const std::string & id)
uninstallPreRollOutCallback	src/easylogging/easylogging++.h	/^  static inline void uninstallPreRollOutCallback(void) {$/;"	f	line:3699	language:C++	class:el::Helpers	typeref:typename:void	access:public	signature:(void)
unit	src/easylogging/easylogging++.h	/^  const base::type::char_t* unit;$/;"	m	line:766	language:C++	struct:el::base::consts::__anondf7eda890108	typeref:typename:const base::type::char_t *	access:public
unlock	src/easylogging/easylogging++.h	/^  inline void unlock(void) {$/;"	f	line:935	language:C++	class:el::base::threading::internal::Mutex	typeref:typename:void	access:public	signature:(void)
unregister	src/easylogging/easylogging++.h	/^  inline void unregister(Logger*& logger) {$/;"	f	line:2386	language:C++	class:el::base::RegisteredLoggers	typeref:typename:void	access:public	signature:(Logger * & logger)
unregister	src/easylogging/easylogging++.h	/^  virtual void unregister(T_Ptr*& ptr) ELPP_FINAL {$/;"	f	line:1493	language:C++	class:el::base::utils::RegistryWithPred	typeref:typename:void	access:protected	signature:(T_Ptr * & ptr)
unregister	src/easylogging/easylogging++.h	/^  void unregister(const T_Key& uniqKey) {$/;"	f	line:1416	language:C++	class:el::base::utils::Registry	typeref:typename:void	access:protected	signature:(const T_Key & uniqKey)
unregisterAll	src/easylogging/easylogging++.h	/^  virtual void unregisterAll(void) = 0;$/;"	p	line:1350	language:C++	class:el::base::utils::AbstractRegistry	typeref:typename:void	access:public	signature:(void)
unregisterAll	src/easylogging/easylogging++.h	/^  virtual void unregisterAll(void) ELPP_FINAL {$/;"	f	line:1400	language:C++	class:el::base::utils::Registry	typeref:typename:void	access:protected	signature:(void)
unregisterAll	src/easylogging/easylogging++.h	/^  virtual void unregisterAll(void) ELPP_FINAL {$/;"	f	line:1484	language:C++	class:el::base::utils::RegistryWithPred	typeref:typename:void	access:protected	signature:(void)
unregisterLogger	src/easylogging/easylogging++.cc	/^bool Loggers::unregisterLogger(const std::string& identity) {$/;"	f	line:2951	language:C++	class:el::Loggers	typeref:typename:bool	signature:(const std::string & identity)
unregisterLogger	src/easylogging/easylogging++.h	/^  static bool unregisterLogger(const std::string& identity);$/;"	p	line:3802	language:C++	class:el::Loggers	typeref:typename:bool	access:public	signature:(const std::string & identity)
unsafeFlushAll	src/easylogging/easylogging++.cc	/^void RegisteredLoggers::unsafeFlushAll(void) {$/;"	f	line:1927	language:C++	class:el::base::RegisteredLoggers	typeref:typename:void	signature:(void)
unsafeFlushAll	src/easylogging/easylogging++.h	/^  void unsafeFlushAll(void);$/;"	p	line:2412	language:C++	class:el::base::RegisteredLoggers	typeref:typename:void	access:private	signature:(void)
unsafeGetConfigByRef	src/easylogging/easylogging++.h	/^  Conf_T& unsafeGetConfigByRef(Level level, std::unordered_map<Level, Conf_T>* confMap, const ch/;"	f	line:1980	language:C++	class:el::base::TypedConfigurations	typeref:typename:Conf_T &	access:private	signature:(Level level,std::unordered_map<Level,Conf_T> * confMap,const char * confName)
unsafeGetConfigByVal	src/easylogging/easylogging++.h	/^  Conf_T unsafeGetConfigByVal(Level level, const std::unordered_map<Level, Conf_T>* confMap, con/;"	f	line:1963	language:C++	class:el::base::TypedConfigurations	typeref:typename:Conf_T	access:private	signature:(Level level,const std::unordered_map<Level,Conf_T> * confMap,const char * confName)
unsafeSet	src/easylogging/easylogging++.cc	/^void Configurations::unsafeSet(Level level, ConfigurationType configurationType, const std::stri/;"	f	line:547	language:C++	class:el::Configurations	typeref:typename:void	signature:(Level level,ConfigurationType configurationType,const std::string & value)
unsafeSet	src/easylogging/easylogging++.h	/^  void unsafeSet(Level level, ConfigurationType configurationType, const std::string& value);$/;"	p	line:1882	language:C++	class:el::Configurations	typeref:typename:void	access:private	signature:(Level level,ConfigurationType configurationType,const std::string & value)
unsafeSetGlobally	src/easylogging/easylogging++.cc	/^void Configurations::unsafeSetGlobally(ConfigurationType configurationType, const std::string& v/;"	f	line:571	language:C++	class:el::Configurations	typeref:typename:void	signature:(ConfigurationType configurationType,const std::string & value,bool includeGlobalLevel)
unsafeSetGlobally	src/easylogging/easylogging++.h	/^  void unsafeSetGlobally(ConfigurationType configurationType, const std::string& value, bool inc/;"	p	line:1890	language:C++	class:el::Configurations	typeref:typename:void	access:private	signature:(ConfigurationType configurationType,const std::string & value,bool includeGlobalLevel)
unsafeSetIfNotExist	src/easylogging/easylogging++.cc	/^void Configurations::unsafeSetIfNotExist(Level level, ConfigurationType configurationType, const/;"	f	line:540	language:C++	class:el::Configurations	typeref:typename:void	signature:(Level level,ConfigurationType configurationType,const std::string & value)
unsafeSetIfNotExist	src/easylogging/easylogging++.h	/^  void unsafeSetIfNotExist(Level level, ConfigurationType configurationType, const std::string& /;"	p	line:1879	language:C++	class:el::Configurations	typeref:typename:void	access:private	signature:(Level level,ConfigurationType configurationType,const std::string & value)
unsafeValidateFileRolling	src/easylogging/easylogging++.cc	/^bool TypedConfigurations::unsafeValidateFileRolling(Level level, const PreRollOutCallback& preRo/;"	f	line:1819	language:C++	class:el::base::TypedConfigurations	typeref:typename:bool	signature:(Level level,const PreRollOutCallback & preRollOutCallback)
unsafeValidateFileRolling	src/easylogging/easylogging++.h	/^  bool unsafeValidateFileRolling(Level level, const PreRollOutCallback& preRollOutCallback);$/;"	p	line:2023	language:C++	class:el::base::TypedConfigurations	typeref:typename:bool	access:private	signature:(Level level,const PreRollOutCallback & preRollOutCallback)
unsetPreRollOutCallback	src/easylogging/easylogging++.h	/^  inline void unsetPreRollOutCallback(void) {$/;"	f	line:2617	language:C++	class:el::base::Storage	typeref:typename:void	access:public	signature:(void)
updateDateFormat	src/easylogging/easylogging++.cc	/^void LogFormat::updateDateFormat(std::size_t index, base::type::string_t& currFormat) {$/;"	f	line:1539	language:C++	class:el::base::LogFormat	typeref:typename:void	signature:(std::size_t index,base::type::string_t & currFormat)
updateDateFormat	src/easylogging/easylogging++.h	/^  virtual void updateDateFormat(std::size_t index, base::type::string_t& currFormat) ELPP_FINAL;$/;"	p	line:1620	language:C++	class:el::base::LogFormat	typeref:typename:void	access:protected	signature:(std::size_t index,base::type::string_t & currFormat)
updateFormatSpec	src/easylogging/easylogging++.cc	/^void LogFormat::updateFormatSpec(void) {$/;"	f	line:1566	language:C++	class:el::base::LogFormat	typeref:typename:void	signature:(void)
updateFormatSpec	src/easylogging/easylogging++.h	/^  virtual void updateFormatSpec(void) ELPP_FINAL;$/;"	p	line:1623	language:C++	class:el::base::LogFormat	typeref:typename:void	access:protected	signature:(void)
update_last_chain_with_data	src/buffer/buffer.cpp	/^buffer_chain* buffer::update_last_chain_with_data(const buffer& other)$/;"	f	line:1018	language:C++	class:buffer	typeref:typename:buffer_chain *	signature:(const buffer & other)
update_last_chain_with_data	src/buffer/buffer.h	/^    buffer_chain* update_last_chain_with_data(const buffer& other);$/;"	p	line:261	language:C++	class:buffer	typeref:typename:buffer_chain *	access:private	signature:(const buffer & other)
update_next_field_after_copy	src/buffer/buffer.cpp	/^void buffer::update_next_field_after_copy()$/;"	f	line:1033	language:C++	class:buffer	typeref:typename:void	signature:()
update_next_field_after_copy	src/buffer/buffer.h	/^    void update_next_field_after_copy();$/;"	p	line:262	language:C++	class:buffer	typeref:typename:void	access:private	signature:()
upgrade	src/http_parser/http_parser.h	/^  unsigned int upgrade : 1;$/;"	m	line:319	language:C++	struct:http_parser	typeref:typename:unsigned int:1	access:public
url	src/http_parser/URLParser.h	/^    const const_string_piece_t& url() const { return url_; }$/;"	f	line:27	language:C++	class:http::URLParser	typeref:typename:const const_string_piece_t &	access:public	signature:() const
url_	src/http_parser/URLParser.h	/^    const_string_piece_t        url_;$/;"	m	line:39	language:C++	class:http::URLParser	typeref:typename:const_string_piece_t	access:private
userFormat	src/easylogging/easylogging++.h	/^  inline const base::type::string_t& userFormat(void) const {$/;"	f	line:1592	language:C++	class:el::base::LogFormat	typeref:typename:const base::type::string_t &	access:public	signature:(void) const
utils	src/easylogging/easylogging++.cc	/^namespace utils {$/;"	n	line:114	language:C++	namespace:el::base	file:
utils	src/easylogging/easylogging++.cc	/^namespace utils {$/;"	n	line:727	language:C++	namespace:el::base	file:
utils	src/easylogging/easylogging++.h	/^namespace utils {$/;"	n	line:1037	language:C++	namespace:el::base
utils	src/easylogging/easylogging++.h	/^namespace utils {$/;"	n	line:852	language:C++	namespace:el::base
utils	src/utils/timer.h	/^namespace utils{$/;"	n	line:9	language:C++
utils::timer	src/utils/timer.h	/^class timer{$/;"	c	line:10	language:C++	namespace:utils
utils::timer::s_	src/utils/timer.h	/^    string s_;$/;"	m	line:24	language:C++	class:utils::timer	typeref:typename:string	access:private
utils::timer::timer	src/utils/timer.h	/^    timer(const string s) : timer_(), s_(s){$/;"	f	line:12	language:C++	class:utils::timer	access:public	signature:(const string s)
utils::timer::timer_	src/utils/timer.h	/^    boost::timer::cpu_timer timer_;$/;"	m	line:23	language:C++	class:utils::timer	typeref:typename:boost::timer::cpu_timer	access:private
utils::timer::~timer	src/utils/timer.h	/^    ~timer() {$/;"	f	line:15	language:C++	class:utils::timer	access:public	signature:()
uuid	src/mysql_gtid/mysql_gtid.h	/^  unsigned char uuid[UUID_LENGTH];$/;"	m	line:25	language:C++	struct:MySQLUuid	typeref:typename:unsigned char[]	access:public
vModulesEnabled	src/easylogging/easylogging++.h	/^  inline bool vModulesEnabled(void) {$/;"	f	line:2442	language:C++	class:el::base::VRegistry	typeref:typename:bool	access:public	signature:(void)
vRegistry	src/easylogging/easylogging++.h	/^  inline base::VRegistry* vRegistry(void) const {$/;"	f	line:2579	language:C++	class:el::base::Storage	typeref:typename:base::VRegistry *	access:public	signature:(void) const
valid	src/http_parser/URLParser.h	/^    bool valid() const {return valid_;}$/;"	f	line:33	language:C++	class:http::URLParser	typeref:typename:bool	access:public	signature:() const
valid_	src/http_parser/URLParser.h	/^    bool                        valid_{false};$/;"	m	line:45	language:C++	class:http::URLParser	typeref:typename:bool	access:private
validate	test/substring_search/kmp_test.cpp	/^void validate(build_search_table_callback callback, const char* pattern, const std::vector<int>&/;"	f	line:19	language:C++	namespace:kmp_test	typeref:typename:void	signature:(build_search_table_callback callback,const char * pattern,const std::vector<int> & expectedTable)
validateAfterN	src/easylogging/easylogging++.cc	/^bool RegisteredHitCounters::validateAfterN(const char* filename, base::type::LineNumber lineNumb/;"	f	line:1853	language:C++	class:el::base::RegisteredHitCounters	typeref:typename:bool	signature:(const char * filename,base::type::LineNumber lineNumber,std::size_t n)
validateAfterN	src/easylogging/easylogging++.h	/^  bool validateAfterN(const char* filename, base::type::LineNumber lineNumber, std::size_t n);$/;"	p	line:2124	language:C++	class:el::base::RegisteredHitCounters	typeref:typename:bool	access:public	signature:(const char * filename,base::type::LineNumber lineNumber,std::size_t n)
validateAfterNCounter	src/easylogging/easylogging++.h	/^  inline bool validateAfterNCounter(const char* filename, base::type::LineNumber lineNumber, std/;"	f	line:2563	language:C++	class:el::base::Storage	typeref:typename:bool	access:public	signature:(const char * filename,base::type::LineNumber lineNumber,std::size_t n)
validateEveryN	src/easylogging/easylogging++.cc	/^bool RegisteredHitCounters::validateEveryN(const char* filename, base::type::LineNumber lineNumb/;"	f	line:1840	language:C++	class:el::base::RegisteredHitCounters	typeref:typename:bool	signature:(const char * filename,base::type::LineNumber lineNumber,std::size_t n)
validateEveryN	src/easylogging/easylogging++.h	/^  bool validateEveryN(const char* filename, base::type::LineNumber lineNumber, std::size_t n);$/;"	p	line:2120	language:C++	class:el::base::RegisteredHitCounters	typeref:typename:bool	access:public	signature:(const char * filename,base::type::LineNumber lineNumber,std::size_t n)
validateEveryNCounter	src/easylogging/easylogging++.h	/^  inline bool validateEveryNCounter(const char* filename, base::type::LineNumber lineNumber, std/;"	f	line:2559	language:C++	class:el::base::Storage	typeref:typename:bool	access:public	signature:(const char * filename,base::type::LineNumber lineNumber,std::size_t occasion)
validateFileRolling	src/easylogging/easylogging++.h	/^  inline bool validateFileRolling(Level level, const PreRollOutCallback& preRollOutCallback) {$/;"	f	line:2025	language:C++	class:el::base::TypedConfigurations	typeref:typename:bool	access:private	signature:(Level level,const PreRollOutCallback & preRollOutCallback)
validateFileRolling	src/easylogging/easylogging++.h	/^  static inline void validateFileRolling(Logger* logger, Level level) {$/;"	f	line:3774	language:C++	class:el::Helpers	typeref:typename:void	access:public	signature:(Logger * logger,Level level)
validateHitCounts	src/easylogging/easylogging++.h	/^  inline void validateHitCounts(std::size_t n) {$/;"	f	line:2070	language:C++	class:el::base::HitCounter	typeref:typename:void	access:public	signature:(std::size_t n)
validateNTimes	src/easylogging/easylogging++.cc	/^bool RegisteredHitCounters::validateNTimes(const char* filename, base::type::LineNumber lineNumb/;"	f	line:1870	language:C++	class:el::base::RegisteredHitCounters	typeref:typename:bool	signature:(const char * filename,base::type::LineNumber lineNumber,std::size_t n)
validateNTimes	src/easylogging/easylogging++.h	/^  bool validateNTimes(const char* filename, base::type::LineNumber lineNumber, std::size_t n);$/;"	p	line:2128	language:C++	class:el::base::RegisteredHitCounters	typeref:typename:bool	access:public	signature:(const char * filename,base::type::LineNumber lineNumber,std::size_t n)
validateNTimesCounter	src/easylogging/easylogging++.h	/^  inline bool validateNTimesCounter(const char* filename, base::type::LineNumber lineNumber, std/;"	f	line:2567	language:C++	class:el::base::Storage	typeref:typename:bool	access:public	signature:(const char * filename,base::type::LineNumber lineNumber,std::size_t n)
validateScheme	src/http_parser/URLParser.cpp	/^static bool validateScheme(string_piece::const_string_piece url)$/;"	f	line:6	language:C++	namespace:http	typeref:typename:bool	file:	signature:(string_piece::const_string_piece url)
validate_iter	src/buffer/buffer.cpp	/^bool buffer::validate_iter(const Iter& iter) const $/;"	f	line:913	language:C++	class:buffer	typeref:typename:bool	signature:(const Iter & iter) const
validate_iter	src/buffer/buffer.cpp	/^bool buffer_chain::validate_iter(Iter it) const$/;"	f	line:215	language:C++	class:buffer_chain	typeref:typename:bool	signature:(Iter it) const
validate_iter	src/buffer/buffer.h	/^    bool validate_iter(Iter it) const ;$/;"	p	line:125	language:C++	class:buffer_chain	typeref:typename:bool	access:public	signature:(Iter it) const
validate_iter	src/buffer/buffer.h	/^    bool validate_iter(const Iter& iter) const ;$/;"	p	line:240	language:C++	class:buffer	typeref:typename:bool	access:public	signature:(const Iter & iter) const
value	src/al/merge.h	/^    double value;$/;"	m	line:35	language:C++	struct:al::MergeNode	typeref:typename:double	access:public
value	src/easylogging/easylogging++.h	/^  double value;$/;"	m	line:765	language:C++	struct:el::base::consts::__anondf7eda890108	typeref:typename:double	access:public
value	src/easylogging/easylogging++.h	/^  inline const std::string& value(void) const {$/;"	f	line:1694	language:C++	class:el::Configuration	typeref:typename:const std::string &	access:public	signature:(void) const
value	src/tests/type_traits.h	/^      static constexpr _Tp                  value = __v;$/;"	m	line:64	language:C++	struct:std::integral_constant	typeref:typename:_Tp	access:public
value	src/tests/type_traits.h	/^      static constexpr bool value = type::value;$/;"	m	line:935	language:C++	struct:std::__is_base_to_derived_ref	typeref:typename:bool	access:public
value	src/tests/type_traits.h	/^      static constexpr bool value = type::value;$/;"	m	line:960	language:C++	struct:std::__is_lvalue_to_rvalue_ref	typeref:typename:bool	access:public
value	src/tests/type_traits.h	/^    constexpr _Tp integral_constant<_Tp, __v>::value;$/;"	m	line:77	language:C++	class:std::integral_constant<_Tp, __v>	typeref:typename:_Tp
value_type	src/string_piece/string_piece.h	/^    using value_type = typename it_traits::value_type;$/;"	t	line:44	language:C++	class:string_piece::Range	typeref:typename:it_traits::value_type	access:public
value_type	src/tests/type_traits.h	/^      typedef _Tp                           value_type;$/;"	t	line:65	language:C++	struct:std::integral_constant	typeref:typename:_Tp	access:public
vector_t	src/http/HttpHeaders.h	/^    using vector_t = std::vector<T>;$/;"	t	line:30	language:C++	class:http::HttpHeaders	typeref:typename:std::vector<T>	access:private
verbose	src/easylogging/easylogging++.h	/^  inline void verbose(int, const T&);$/;"	p	line:2286	language:C++	class:el::Logger	typeref:typename:void	access:public	signature:(int,const T &)
verbose	src/easylogging/easylogging++.h	/^  inline void verbose(int, const char*, const T&, const Args&...);$/;"	p	line:2283	language:C++	class:el::Logger	typeref:typename:void	access:public	signature:(int,const char *,const T &,const Args &...)
verbose	src/easylogging/easylogging++.h	/^inline void Logger::verbose(int vlevel, const T& log) {$/;"	f	line:3314	language:C++	class:el::Logger	typeref:typename:void	signature:(int vlevel,const T & log)
verbose	src/easylogging/easylogging++.h	/^inline void Logger::verbose(int vlevel, const char* s, const T& value, const Args&... args) {$/;"	f	line:3309	language:C++	class:el::Logger	typeref:typename:void	signature:(int vlevel,const char * s,const T & value,const Args &...args)
verbose	src/easylogging/easylogging++.h	/^inline void Logger::verbose(int, const T&) {$/;"	f	line:3324	language:C++	class:el::Logger	typeref:typename:void	signature:(int,const T &)
verbose	src/easylogging/easylogging++.h	/^inline void Logger::verbose(int, const char*, const T&, const Args&...) {$/;"	f	line:3320	language:C++	class:el::Logger	typeref:typename:void	signature:(int,const char *,const T &,const Args &...)
verboseLevel	src/easylogging/easylogging++.cc	/^base::type::VerboseLevel Loggers::verboseLevel(void) {$/;"	f	line:3088	language:C++	class:el::Loggers	typeref:typename:base::type::VerboseLevel	signature:(void)
verboseLevel	src/easylogging/easylogging++.h	/^  inline base::type::VerboseLevel verboseLevel(void) const {$/;"	f	line:2471	language:C++	class:el::LogMessage	typeref:typename:base::type::VerboseLevel	access:public	signature:(void) const
verboseLevel	src/easylogging/easylogging++.h	/^  static base::type::VerboseLevel verboseLevel(void);$/;"	p	line:3885	language:C++	class:el::Loggers	typeref:typename:base::type::VerboseLevel	access:public	signature:(void)
version	src/easylogging/easylogging++.cc	/^const std::string VersionInfo::version(void) {$/;"	f	line:3104	language:C++	class:el::VersionInfo	typeref:typename:const std::string	signature:(void)
version	src/easylogging/easylogging++.h	/^  static const std::string version(void);$/;"	p	line:3894	language:C++	class:el::VersionInfo	typeref:typename:const std::string	access:public	signature:(void)
wcharPtrToCharPtr	src/easylogging/easylogging++.cc	/^char* Str::wcharPtrToCharPtr(const wchar_t* line) {$/;"	f	line:1018	language:C++	class:el::base::utils::Str	typeref:typename:char *	signature:(const wchar_t * line)
wcharPtrToCharPtr	src/easylogging/easylogging++.h	/^  static char* wcharPtrToCharPtr(const wchar_t* line);$/;"	p	line:1133	language:C++	class:el::base::utils::Str	typeref:typename:char *	access:public	signature:(const wchar_t * line)
wildCardMatch	src/easylogging/easylogging++.cc	/^bool Str::wildCardMatch(const char* str, const char* pattern) {$/;"	f	line:862	language:C++	class:el::base::utils::Str	typeref:typename:bool	signature:(const char * str,const char * pattern)
wildCardMatch	src/easylogging/easylogging++.h	/^  static bool wildCardMatch(const char* str, const char* pattern);$/;"	p	line:1073	language:C++	class:el::base::utils::Str	typeref:typename:bool	access:public	signature:(const char * str,const char * pattern)
wordlist	src/gperf/HttpCommomHeadersHash.h	/^static struct HttpHeader wordlist[] =$/;"	v	line:31	language:C++	namespace:http	typeref:struct:HttpHeader[]
work_address	src/design_patterns/prototype/prototype.h	/^    WorkAddress* work_address;$/;"	m	line:51	language:C++	struct:design_patterns::Contact	typeref:typename:WorkAddress *	access:public
workarounds	src/easylogging/easylogging++.h	/^namespace workarounds {$/;"	n	line:2790	language:C++	namespace:el::base
writableBytes	src/bytebuf/bytebuf.h	/^    unsigned int writableBytes() const {return capacity_ - writeIndex_;}$/;"	f	line:25	language:C++	class:bytebuf	typeref:typename:unsigned int	access:public	signature:() const
write	src/bytebuf/bytebuf.h	/^    template <typename T> void write(const T& source);$/;"	p	line:35	language:C++	class:bytebuf	typeref:typename:void	access:public	signature:(const T & source)
write	src/bytebuf/bytebuf.h	/^void bytebuf::write(const T& source)$/;"	f	line:63	language:C++	class:bytebuf	typeref:typename:void	signature:(const T & source)
writeIndex	src/bytebuf/bytebuf.h	/^    unsigned int writeIndex() const {return writeIndex_;}$/;"	f	line:31	language:C++	class:bytebuf	typeref:typename:unsigned int	access:public	signature:() const
writeIndex_	src/bytebuf/bytebuf.h	/^    unsigned int        writeIndex_;$/;"	m	line:13	language:C++	class:bytebuf	typeref:typename:unsigned int	access:private
writeIterator	src/easylogging/easylogging++.h	/^  MessageBuilder& writeIterator(Iterator begin_, Iterator end_, std::size_t size_) {$/;"	f	line:3152	language:C++	class:el::base::MessageBuilder	typeref:typename:MessageBuilder &	access:private	signature:(Iterator begin_,Iterator end_,std::size_t size_)
writeN	src/bytebuf/bytebuf.cpp	/^void bytebuf::writeN(const void* source, unsigned int n)$/;"	f	line:43	language:C++	class:bytebuf	typeref:typename:void	signature:(const void * source,unsigned int n)
writeN	src/bytebuf/bytebuf.h	/^    void writeN(const void* source, unsigned int n);$/;"	p	line:38	language:C++	class:bytebuf	typeref:typename:void	access:public	signature:(const void * source,unsigned int n)
~AbstractRegistry	src/easylogging/easylogging++.h	/^  virtual ~AbstractRegistry(void) {$/;"	f	line:1305	language:C++	class:el::base::utils::AbstractRegistry	access:public	signature:(void)
~AsyncDispatchWorker	src/easylogging/easylogging++.cc	/^AsyncDispatchWorker::~AsyncDispatchWorker() {$/;"	f	line:2297	language:C++	class:el::base::AsyncDispatchWorker	signature:()
~AsyncDispatchWorker	src/easylogging/easylogging++.h	/^  virtual ~AsyncDispatchWorker();$/;"	p	line:2739	language:C++	class:el::base::AsyncDispatchWorker	access:public	signature:()
~AsyncLogItem	src/easylogging/easylogging++.h	/^  virtual ~AsyncLogItem() {}$/;"	f	line:2495	language:C++	class:el::base::AsyncLogItem	access:public	signature:()
~AsyncLogQueue	src/easylogging/easylogging++.h	/^  virtual ~AsyncLogQueue() {$/;"	f	line:2512	language:C++	class:el::base::AsyncLogQueue	access:public	signature:()
~CommandLineArgs	src/easylogging/easylogging++.h	/^  virtual ~CommandLineArgs(void) {}$/;"	f	line:1221	language:C++	class:el::base::utils::CommandLineArgs	access:public	signature:(void)
~Configuration	src/easylogging/easylogging++.h	/^  virtual ~Configuration(void) {$/;"	f	line:1677	language:C++	class:el::Configuration	access:public	signature:(void)
~Configurations	src/easylogging/easylogging++.h	/^  virtual ~Configurations(void) {$/;"	f	line:1742	language:C++	class:el::Configurations	access:public	signature:(void)
~Contact	src/design_patterns/prototype/prototype.h	/^    ~Contact()$/;"	f	line:52	language:C++	struct:design_patterns::Contact	access:public	signature:()
~CreatureModifier	src/design_patterns/chain_of_responsibility/pointer_chain.h	/^    virtual ~CreatureModifier(){}$/;"	f	line:34	language:C++	class:design_patterns::CreatureModifier	access:public	signature:()
~HitCounter	src/easylogging/easylogging++.h	/^  virtual ~HitCounter(void) {$/;"	f	line:2060	language:C++	class:el::base::HitCounter	access:public	signature:(void)
~HttpHeaders	src/http/HttpHeaders.cpp	/^HttpHeaders::~HttpHeaders()$/;"	f	line:54	language:C++	class:http::HttpHeaders	signature:()
~HttpHeaders	src/http/HttpHeaders.h	/^    ~HttpHeaders();$/;"	p	line:39	language:C++	class:http::HttpHeaders	access:public	signature:()
~HttpMessage	src/http/HttpMessage.cpp	/^HttpMessage::~HttpMessage()$/;"	f	line:10	language:C++	class:http::HttpMessage	signature:()
~HttpMessage	src/http/HttpMessage.h	/^    ~HttpMessage();$/;"	p	line:11	language:C++	class:http::HttpMessage	access:public	signature:()
~HttpPaser	src/http_parser/HttpParser.cpp	/^HttpPaser::~HttpPaser()$/;"	f	line:11	language:C++	class:http::HttpPaser	signature:()
~HttpPaser	src/http_parser/HttpParser.h	/^    ~HttpPaser();$/;"	p	line:11	language:C++	class:http::HttpPaser	access:public	signature:()
~IWorker	src/easylogging/easylogging++.h	/^  virtual ~IWorker() {}$/;"	f	line:2544	language:C++	class:el::base::IWorker	access:public	signature:()
~IterableContainer	src/easylogging/easylogging++.h	/^  virtual ~IterableContainer(void) {}$/;"	f	line:2798	language:C++	class:el::base::workarounds::IterableContainer	access:public	signature:(void)
~LogBuilder	src/easylogging/easylogging++.h	/^  virtual ~LogBuilder(void) {$/;"	f	line:2198	language:C++	class:el::LogBuilder	access:public	signature:(void)
~LogFormat	src/easylogging/easylogging++.h	/^  virtual ~LogFormat(void) {}$/;"	f	line:1581	language:C++	class:el::base::LogFormat	access:public	signature:(void)
~Loggable	src/easylogging/easylogging++.h	/^  virtual ~Loggable(void) {}$/;"	f	line:1564	language:C++	class:el::Loggable	access:public	signature:(void)
~Logger	src/easylogging/easylogging++.h	/^  virtual ~Logger(void) {$/;"	f	line:2218	language:C++	class:el::Logger	access:public	signature:(void)
~Mutex	src/easylogging/easylogging++.h	/^  virtual ~Mutex(void) {$/;"	f	line:911	language:C++	class:el::base::threading::internal::Mutex	access:public	signature:(void)
~NOTDestructable	test/http_parser/http_parser_test.cpp	/^    ~NOTDestructable() = delete;$/;"	p	line:22	language:C++	class:http_parser_test::NOTDestructable	file:	access:public	signature:()
~NewCreatureModifier	src/design_patterns/chain_of_responsibility/broke_chain.h	/^    virtual ~NewCreatureModifier(){}$/;"	f	line:73	language:C++	struct:design_patterns::NewCreatureModifier	access:public	signature:()
~PErrorWriter	src/easylogging/easylogging++.cc	/^PErrorWriter::~PErrorWriter(void) {$/;"	f	line:2656	language:C++	class:el::base::PErrorWriter	signature:(void)
~PErrorWriter	src/easylogging/easylogging++.h	/^  virtual ~PErrorWriter(void);$/;"	p	line:3257	language:C++	class:el::base::PErrorWriter	access:public	signature:(void)
~PerformanceTracker	src/easylogging/easylogging++.cc	/^PerformanceTracker::~PerformanceTracker(void) {$/;"	f	line:2689	language:C++	class:el::base::PerformanceTracker	signature:(void)
~PerformanceTracker	src/easylogging/easylogging++.h	/^  virtual ~PerformanceTracker(void);$/;"	p	line:3475	language:C++	class:el::base::PerformanceTracker	access:public	signature:(void)
~ReactorImpl	src/design_patterns/factory/factory_method.h	/^    virtual ~ReactorImpl(){}$/;"	f	line:19	language:C++	class:design_patterns::ReactorImpl	access:protected	signature:()
~RegisteredLoggers	src/easylogging/easylogging++.h	/^  virtual ~RegisteredLoggers(void) {$/;"	f	line:2349	language:C++	class:el::base::RegisteredLoggers	access:public	signature:(void)
~Registry	src/easylogging/easylogging++.h	/^  virtual ~Registry(void) {$/;"	f	line:1395	language:C++	class:el::base::utils::Registry	access:public	signature:(void)
~RegistryWithPred	src/easylogging/easylogging++.h	/^  virtual ~RegistryWithPred(void) {$/;"	f	line:1453	language:C++	class:el::base::utils::RegistryWithPred	access:public	signature:(void)
~ScopedAddFlag	src/easylogging/easylogging++.h	/^    ~ScopedAddFlag(void) {$/;"	f	line:3860	language:C++	class:el::Loggers::ScopedAddFlag	access:public	signature:(void)
~ScopedLock	src/easylogging/easylogging++.h	/^  virtual ~ScopedLock(void) {$/;"	f	line:959	language:C++	class:el::base::threading::internal::ScopedLock	access:public	signature:(void)
~ScopedRemoveFlag	src/easylogging/easylogging++.h	/^    ~ScopedRemoveFlag(void) {$/;"	f	line:3872	language:C++	class:el::Loggers::ScopedRemoveFlag	access:public	signature:(void)
~StackTrace	src/easylogging/easylogging++.h	/^  virtual ~StackTrace(void) {$/;"	f	line:3591	language:C++	class:el::base::debug::StackTrace	access:public	signature:(void)
~Storage	src/easylogging/easylogging++.cc	/^Storage::~Storage(void) {$/;"	f	line:2112	language:C++	class:el::base::Storage	signature:(void)
~Storage	src/easylogging/easylogging++.h	/^  virtual ~Storage(void);$/;"	p	line:2557	language:C++	class:el::base::Storage	access:public	signature:(void)
~SysLogInitializer	src/easylogging/easylogging++.h	/^  virtual ~SysLogInitializer(void) {$/;"	f	line:3642	language:C++	class:el::SysLogInitializer	access:public	signature:(void)
~TestClass	src/tests/tests.h	/^    ~TestClass()$/;"	f	line:153	language:C++	class:TestClass	access:public	signature:()
~ThreadSafe	src/easylogging/easylogging++.h	/^  virtual ~ThreadSafe(void) {}$/;"	f	line:1008	language:C++	class:el::base::threading::ThreadSafe	access:protected	signature:(void)
~TypedConfigurations	src/easylogging/easylogging++.h	/^  virtual ~TypedConfigurations(void) {$/;"	f	line:1911	language:C++	class:el::base::TypedConfigurations	access:public	signature:(void)
~URLParser	src/http_parser/URLParser.cpp	/^URLParser::~URLParser()$/;"	f	line:20	language:C++	class:http::URLParser	signature:()
~URLParser	src/http_parser/URLParser.h	/^    ~URLParser();$/;"	p	line:23	language:C++	class:http::URLParser	access:public	signature:()
~Writer	src/easylogging/easylogging++.h	/^  virtual ~Writer(void) {$/;"	f	line:3202	language:C++	class:el::base::Writer	access:public	signature:(void)
~buffer	src/buffer/buffer.h	/^    ~buffer() = default;$/;"	p	line:164	language:C++	class:buffer	access:public	signature:()
~buffer_chain	src/buffer/buffer.cpp	/^buffer_chain::~buffer_chain()$/;"	f	line:104	language:C++	class:buffer_chain	signature:()
~buffer_chain	src/buffer/buffer.h	/^    ~buffer_chain();$/;"	p	line:82	language:C++	class:buffer_chain	access:public	signature:()
~bytebuf	src/bytebuf/bytebuf.h	/^    ~bytebuf() = default;$/;"	p	line:21	language:C++	class:bytebuf	access:public	signature:()
~timer	src/utils/timer.h	/^    ~timer() {$/;"	f	line:15	language:C++	class:utils::timer	access:public	signature:()
